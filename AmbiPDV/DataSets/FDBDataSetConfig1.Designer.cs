//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace PDV_WPF.DataSets {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FDBDataSetConfig")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FDBDataSetConfig : global::System.Data.DataSet {
        
        private TRI_PDV_CONFIGDataTable tableTRI_PDV_CONFIG;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public FDBDataSetConfig() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected FDBDataSetConfig(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TRI_PDV_CONFIG"] != null)) {
                    base.Tables.Add(new TRI_PDV_CONFIGDataTable(ds.Tables["TRI_PDV_CONFIG"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TRI_PDV_CONFIGDataTable TRI_PDV_CONFIG {
            get {
                return this.tableTRI_PDV_CONFIG;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            FDBDataSetConfig cln = ((FDBDataSetConfig)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TRI_PDV_CONFIG"] != null)) {
                    base.Tables.Add(new TRI_PDV_CONFIGDataTable(ds.Tables["TRI_PDV_CONFIG"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableTRI_PDV_CONFIG = ((TRI_PDV_CONFIGDataTable)(base.Tables["TRI_PDV_CONFIG"]));
            if ((initTable == true)) {
                if ((this.tableTRI_PDV_CONFIG != null)) {
                    this.tableTRI_PDV_CONFIG.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass() {
            this.DataSetName = "FDBDataSetConfig";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FDBDataSetConfig.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTRI_PDV_CONFIG = new TRI_PDV_CONFIGDataTable();
            base.Tables.Add(this.tableTRI_PDV_CONFIG);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeTRI_PDV_CONFIG() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            FDBDataSetConfig ds = new FDBDataSetConfig();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void TRI_PDV_CONFIGRowChangeEventHandler(object sender, TRI_PDV_CONFIGRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TRI_PDV_CONFIGDataTable : global::System.Data.TypedTableBase<TRI_PDV_CONFIGRow> {
            
            private global::System.Data.DataColumn columnID_MAC;
            
            private global::System.Data.DataColumn columnNO_CAIXA;
            
            private global::System.Data.DataColumn columnEXIGE_SANGRIA;
            
            private global::System.Data.DataColumn columnVALOR_MAX_CAIXA;
            
            private global::System.Data.DataColumn columnBLOQUEIA_NO_LIMITE;
            
            private global::System.Data.DataColumn columnVALOR_DE_FOLGA;
            
            private global::System.Data.DataColumn columnPERMITE_FOLGA_SANGRIA;
            
            private global::System.Data.DataColumn columnINTERROMPE_NAO_ENCONTRADO;
            
            private global::System.Data.DataColumn columnMENSAGEM_CORTESIA;
            
            private global::System.Data.DataColumn columnICMS_CONT;
            
            private global::System.Data.DataColumn columnCSOSN_CONT;
            
            private global::System.Data.DataColumn columnPEDE_CPF;
            
            private global::System.Data.DataColumn columnPERMITE_ESTOQUE_NEGATIVO;
            
            private global::System.Data.DataColumn columnMODELO_CUPOM;
            
            private global::System.Data.DataColumn columnMENSAGEM_RODAPE;
            
            private global::System.Data.DataColumn columnTRI_PDV_DT_UPD;
            
            private global::System.Data.DataColumn columnMODELO_SAT;
            
            private global::System.Data.DataColumn columnSATSERVIDOR;
            
            private global::System.Data.DataColumn columnSAT_CODATIV;
            
            private global::System.Data.DataColumn columnSIGN_AC;
            
            private global::System.Data.DataColumn columnSAT_USADO;
            
            private global::System.Data.DataColumn columnECF_ATIVA;
            
            private global::System.Data.DataColumn columnECF_PORTA;
            
            private global::System.Data.DataColumn columnIMPRESSORA_USB;
            
            private global::System.Data.DataColumn columnIMPRESSORA_USB_PED;
            
            private global::System.Data.DataColumn columnPERGUNTA_WHATS;
            
            private global::System.Data.DataColumn columnUSATEF;
            
            private global::System.Data.DataColumn columnTEFIP;
            
            private global::System.Data.DataColumn columnTEFNUMLOJA;
            
            private global::System.Data.DataColumn columnTEFNUMTERMINAL;
            
            private global::System.Data.DataColumn columnTEFPEDECPFPELOPINPAD;
            
            private global::System.Data.DataColumn columnBALPORTA;
            
            private global::System.Data.DataColumn columnBALBITS;
            
            private global::System.Data.DataColumn columnBALBAUD;
            
            private global::System.Data.DataColumn columnBALPARITY;
            
            private global::System.Data.DataColumn columnBALMODELO;
            
            private global::System.Data.DataColumn columnACFILLPREFIX;
            
            private global::System.Data.DataColumn columnACFILLMODE;
            
            private global::System.Data.DataColumn columnACREFERENCIA;
            
            private global::System.Data.DataColumn columnSYSCOMISSAO;
            
            private global::System.Data.DataColumn columnSATSERVTIMEOUT;
            
            private global::System.Data.DataColumn columnSATLIFESIGNINTERVAL;
            
            private global::System.Data.DataColumn columnACFILLDELAY;
            
            private global::System.Data.DataColumn columnSYSPERGUNTAWHATS;
            
            private global::System.Data.DataColumn columnSYSPARCELA;
            
            private global::System.Data.DataColumn columnSYSEMITECOMPROVANTE;
            
            private global::System.Data.DataColumn columnINFORMA_MAQUININHA;
            
            private global::System.Data.DataColumn columnLAYOUT_SAT;
            
            private global::System.Data.DataColumn columnVINCULA_MAQ_CTA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TRI_PDV_CONFIGDataTable() {
                this.TableName = "TRI_PDV_CONFIG";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal TRI_PDV_CONFIGDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected TRI_PDV_CONFIGDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ID_MACColumn {
                get {
                    return this.columnID_MAC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn NO_CAIXAColumn {
                get {
                    return this.columnNO_CAIXA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn EXIGE_SANGRIAColumn {
                get {
                    return this.columnEXIGE_SANGRIA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn VALOR_MAX_CAIXAColumn {
                get {
                    return this.columnVALOR_MAX_CAIXA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn BLOQUEIA_NO_LIMITEColumn {
                get {
                    return this.columnBLOQUEIA_NO_LIMITE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn VALOR_DE_FOLGAColumn {
                get {
                    return this.columnVALOR_DE_FOLGA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn PERMITE_FOLGA_SANGRIAColumn {
                get {
                    return this.columnPERMITE_FOLGA_SANGRIA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn INTERROMPE_NAO_ENCONTRADOColumn {
                get {
                    return this.columnINTERROMPE_NAO_ENCONTRADO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn MENSAGEM_CORTESIAColumn {
                get {
                    return this.columnMENSAGEM_CORTESIA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ICMS_CONTColumn {
                get {
                    return this.columnICMS_CONT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CSOSN_CONTColumn {
                get {
                    return this.columnCSOSN_CONT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn PEDE_CPFColumn {
                get {
                    return this.columnPEDE_CPF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn PERMITE_ESTOQUE_NEGATIVOColumn {
                get {
                    return this.columnPERMITE_ESTOQUE_NEGATIVO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn MODELO_CUPOMColumn {
                get {
                    return this.columnMODELO_CUPOM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn MENSAGEM_RODAPEColumn {
                get {
                    return this.columnMENSAGEM_RODAPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TRI_PDV_DT_UPDColumn {
                get {
                    return this.columnTRI_PDV_DT_UPD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn MODELO_SATColumn {
                get {
                    return this.columnMODELO_SAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SATSERVIDORColumn {
                get {
                    return this.columnSATSERVIDOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SAT_CODATIVColumn {
                get {
                    return this.columnSAT_CODATIV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SIGN_ACColumn {
                get {
                    return this.columnSIGN_AC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SAT_USADOColumn {
                get {
                    return this.columnSAT_USADO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ECF_ATIVAColumn {
                get {
                    return this.columnECF_ATIVA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ECF_PORTAColumn {
                get {
                    return this.columnECF_PORTA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn IMPRESSORA_USBColumn {
                get {
                    return this.columnIMPRESSORA_USB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn IMPRESSORA_USB_PEDColumn {
                get {
                    return this.columnIMPRESSORA_USB_PED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn PERGUNTA_WHATSColumn {
                get {
                    return this.columnPERGUNTA_WHATS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn USATEFColumn {
                get {
                    return this.columnUSATEF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TEFIPColumn {
                get {
                    return this.columnTEFIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TEFNUMLOJAColumn {
                get {
                    return this.columnTEFNUMLOJA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TEFNUMTERMINALColumn {
                get {
                    return this.columnTEFNUMTERMINAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TEFPEDECPFPELOPINPADColumn {
                get {
                    return this.columnTEFPEDECPFPELOPINPAD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn BALPORTAColumn {
                get {
                    return this.columnBALPORTA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn BALBITSColumn {
                get {
                    return this.columnBALBITS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn BALBAUDColumn {
                get {
                    return this.columnBALBAUD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn BALPARITYColumn {
                get {
                    return this.columnBALPARITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn BALMODELOColumn {
                get {
                    return this.columnBALMODELO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ACFILLPREFIXColumn {
                get {
                    return this.columnACFILLPREFIX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ACFILLMODEColumn {
                get {
                    return this.columnACFILLMODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ACREFERENCIAColumn {
                get {
                    return this.columnACREFERENCIA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SYSCOMISSAOColumn {
                get {
                    return this.columnSYSCOMISSAO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SATSERVTIMEOUTColumn {
                get {
                    return this.columnSATSERVTIMEOUT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SATLIFESIGNINTERVALColumn {
                get {
                    return this.columnSATLIFESIGNINTERVAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ACFILLDELAYColumn {
                get {
                    return this.columnACFILLDELAY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SYSPERGUNTAWHATSColumn {
                get {
                    return this.columnSYSPERGUNTAWHATS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SYSPARCELAColumn {
                get {
                    return this.columnSYSPARCELA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SYSEMITECOMPROVANTEColumn {
                get {
                    return this.columnSYSEMITECOMPROVANTE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn INFORMA_MAQUININHAColumn {
                get {
                    return this.columnINFORMA_MAQUININHA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LAYOUT_SATColumn {
                get {
                    return this.columnLAYOUT_SAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn VINCULA_MAQ_CTAColumn {
                get {
                    return this.columnVINCULA_MAQ_CTA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TRI_PDV_CONFIGRow this[int index] {
                get {
                    return ((TRI_PDV_CONFIGRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event TRI_PDV_CONFIGRowChangeEventHandler TRI_PDV_CONFIGRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event TRI_PDV_CONFIGRowChangeEventHandler TRI_PDV_CONFIGRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event TRI_PDV_CONFIGRowChangeEventHandler TRI_PDV_CONFIGRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event TRI_PDV_CONFIGRowChangeEventHandler TRI_PDV_CONFIGRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddTRI_PDV_CONFIGRow(TRI_PDV_CONFIGRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TRI_PDV_CONFIGRow AddTRI_PDV_CONFIGRow(
                        string ID_MAC, 
                        short NO_CAIXA, 
                        string EXIGE_SANGRIA, 
                        double VALOR_MAX_CAIXA, 
                        string BLOQUEIA_NO_LIMITE, 
                        double VALOR_DE_FOLGA, 
                        string PERMITE_FOLGA_SANGRIA, 
                        string INTERROMPE_NAO_ENCONTRADO, 
                        string MENSAGEM_CORTESIA, 
                        float ICMS_CONT, 
                        float CSOSN_CONT, 
                        int PEDE_CPF, 
                        int PERMITE_ESTOQUE_NEGATIVO, 
                        short MODELO_CUPOM, 
                        string MENSAGEM_RODAPE, 
                        System.DateTime TRI_PDV_DT_UPD, 
                        int MODELO_SAT, 
                        string SATSERVIDOR, 
                        string SAT_CODATIV, 
                        string SIGN_AC, 
                        string SAT_USADO, 
                        string ECF_ATIVA, 
                        string ECF_PORTA, 
                        string IMPRESSORA_USB, 
                        string IMPRESSORA_USB_PED, 
                        int PERGUNTA_WHATS, 
                        string USATEF, 
                        string TEFIP, 
                        string TEFNUMLOJA, 
                        string TEFNUMTERMINAL, 
                        string TEFPEDECPFPELOPINPAD, 
                        short BALPORTA, 
                        short BALBITS, 
                        int BALBAUD, 
                        short BALPARITY, 
                        short BALMODELO, 
                        short ACFILLPREFIX, 
                        short ACFILLMODE, 
                        short ACREFERENCIA, 
                        short SYSCOMISSAO, 
                        int SATSERVTIMEOUT, 
                        int SATLIFESIGNINTERVAL, 
                        int ACFILLDELAY, 
                        short SYSPERGUNTAWHATS, 
                        short SYSPARCELA, 
                        short SYSEMITECOMPROVANTE, 
                        string INFORMA_MAQUININHA, 
                        string LAYOUT_SAT, 
                        string VINCULA_MAQ_CTA) {
                TRI_PDV_CONFIGRow rowTRI_PDV_CONFIGRow = ((TRI_PDV_CONFIGRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID_MAC,
                        NO_CAIXA,
                        EXIGE_SANGRIA,
                        VALOR_MAX_CAIXA,
                        BLOQUEIA_NO_LIMITE,
                        VALOR_DE_FOLGA,
                        PERMITE_FOLGA_SANGRIA,
                        INTERROMPE_NAO_ENCONTRADO,
                        MENSAGEM_CORTESIA,
                        ICMS_CONT,
                        CSOSN_CONT,
                        PEDE_CPF,
                        PERMITE_ESTOQUE_NEGATIVO,
                        MODELO_CUPOM,
                        MENSAGEM_RODAPE,
                        TRI_PDV_DT_UPD,
                        MODELO_SAT,
                        SATSERVIDOR,
                        SAT_CODATIV,
                        SIGN_AC,
                        SAT_USADO,
                        ECF_ATIVA,
                        ECF_PORTA,
                        IMPRESSORA_USB,
                        IMPRESSORA_USB_PED,
                        PERGUNTA_WHATS,
                        USATEF,
                        TEFIP,
                        TEFNUMLOJA,
                        TEFNUMTERMINAL,
                        TEFPEDECPFPELOPINPAD,
                        BALPORTA,
                        BALBITS,
                        BALBAUD,
                        BALPARITY,
                        BALMODELO,
                        ACFILLPREFIX,
                        ACFILLMODE,
                        ACREFERENCIA,
                        SYSCOMISSAO,
                        SATSERVTIMEOUT,
                        SATLIFESIGNINTERVAL,
                        ACFILLDELAY,
                        SYSPERGUNTAWHATS,
                        SYSPARCELA,
                        SYSEMITECOMPROVANTE,
                        INFORMA_MAQUININHA,
                        LAYOUT_SAT,
                        VINCULA_MAQ_CTA};
                rowTRI_PDV_CONFIGRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTRI_PDV_CONFIGRow);
                return rowTRI_PDV_CONFIGRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TRI_PDV_CONFIGRow FindByID_MAC(string ID_MAC) {
                return ((TRI_PDV_CONFIGRow)(this.Rows.Find(new object[] {
                            ID_MAC})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                TRI_PDV_CONFIGDataTable cln = ((TRI_PDV_CONFIGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TRI_PDV_CONFIGDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnID_MAC = base.Columns["ID_MAC"];
                this.columnNO_CAIXA = base.Columns["NO_CAIXA"];
                this.columnEXIGE_SANGRIA = base.Columns["EXIGE_SANGRIA"];
                this.columnVALOR_MAX_CAIXA = base.Columns["VALOR_MAX_CAIXA"];
                this.columnBLOQUEIA_NO_LIMITE = base.Columns["BLOQUEIA_NO_LIMITE"];
                this.columnVALOR_DE_FOLGA = base.Columns["VALOR_DE_FOLGA"];
                this.columnPERMITE_FOLGA_SANGRIA = base.Columns["PERMITE_FOLGA_SANGRIA"];
                this.columnINTERROMPE_NAO_ENCONTRADO = base.Columns["INTERROMPE_NAO_ENCONTRADO"];
                this.columnMENSAGEM_CORTESIA = base.Columns["MENSAGEM_CORTESIA"];
                this.columnICMS_CONT = base.Columns["ICMS_CONT"];
                this.columnCSOSN_CONT = base.Columns["CSOSN_CONT"];
                this.columnPEDE_CPF = base.Columns["PEDE_CPF"];
                this.columnPERMITE_ESTOQUE_NEGATIVO = base.Columns["PERMITE_ESTOQUE_NEGATIVO"];
                this.columnMODELO_CUPOM = base.Columns["MODELO_CUPOM"];
                this.columnMENSAGEM_RODAPE = base.Columns["MENSAGEM_RODAPE"];
                this.columnTRI_PDV_DT_UPD = base.Columns["TRI_PDV_DT_UPD"];
                this.columnMODELO_SAT = base.Columns["MODELO_SAT"];
                this.columnSATSERVIDOR = base.Columns["SATSERVIDOR"];
                this.columnSAT_CODATIV = base.Columns["SAT_CODATIV"];
                this.columnSIGN_AC = base.Columns["SIGN_AC"];
                this.columnSAT_USADO = base.Columns["SAT_USADO"];
                this.columnECF_ATIVA = base.Columns["ECF_ATIVA"];
                this.columnECF_PORTA = base.Columns["ECF_PORTA"];
                this.columnIMPRESSORA_USB = base.Columns["IMPRESSORA_USB"];
                this.columnIMPRESSORA_USB_PED = base.Columns["IMPRESSORA_USB_PED"];
                this.columnPERGUNTA_WHATS = base.Columns["PERGUNTA_WHATS"];
                this.columnUSATEF = base.Columns["USATEF"];
                this.columnTEFIP = base.Columns["TEFIP"];
                this.columnTEFNUMLOJA = base.Columns["TEFNUMLOJA"];
                this.columnTEFNUMTERMINAL = base.Columns["TEFNUMTERMINAL"];
                this.columnTEFPEDECPFPELOPINPAD = base.Columns["TEFPEDECPFPELOPINPAD"];
                this.columnBALPORTA = base.Columns["BALPORTA"];
                this.columnBALBITS = base.Columns["BALBITS"];
                this.columnBALBAUD = base.Columns["BALBAUD"];
                this.columnBALPARITY = base.Columns["BALPARITY"];
                this.columnBALMODELO = base.Columns["BALMODELO"];
                this.columnACFILLPREFIX = base.Columns["ACFILLPREFIX"];
                this.columnACFILLMODE = base.Columns["ACFILLMODE"];
                this.columnACREFERENCIA = base.Columns["ACREFERENCIA"];
                this.columnSYSCOMISSAO = base.Columns["SYSCOMISSAO"];
                this.columnSATSERVTIMEOUT = base.Columns["SATSERVTIMEOUT"];
                this.columnSATLIFESIGNINTERVAL = base.Columns["SATLIFESIGNINTERVAL"];
                this.columnACFILLDELAY = base.Columns["ACFILLDELAY"];
                this.columnSYSPERGUNTAWHATS = base.Columns["SYSPERGUNTAWHATS"];
                this.columnSYSPARCELA = base.Columns["SYSPARCELA"];
                this.columnSYSEMITECOMPROVANTE = base.Columns["SYSEMITECOMPROVANTE"];
                this.columnINFORMA_MAQUININHA = base.Columns["INFORMA_MAQUININHA"];
                this.columnLAYOUT_SAT = base.Columns["LAYOUT_SAT"];
                this.columnVINCULA_MAQ_CTA = base.Columns["VINCULA_MAQ_CTA"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnID_MAC = new global::System.Data.DataColumn("ID_MAC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_MAC);
                this.columnNO_CAIXA = new global::System.Data.DataColumn("NO_CAIXA", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNO_CAIXA);
                this.columnEXIGE_SANGRIA = new global::System.Data.DataColumn("EXIGE_SANGRIA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXIGE_SANGRIA);
                this.columnVALOR_MAX_CAIXA = new global::System.Data.DataColumn("VALOR_MAX_CAIXA", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALOR_MAX_CAIXA);
                this.columnBLOQUEIA_NO_LIMITE = new global::System.Data.DataColumn("BLOQUEIA_NO_LIMITE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLOQUEIA_NO_LIMITE);
                this.columnVALOR_DE_FOLGA = new global::System.Data.DataColumn("VALOR_DE_FOLGA", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALOR_DE_FOLGA);
                this.columnPERMITE_FOLGA_SANGRIA = new global::System.Data.DataColumn("PERMITE_FOLGA_SANGRIA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPERMITE_FOLGA_SANGRIA);
                this.columnINTERROMPE_NAO_ENCONTRADO = new global::System.Data.DataColumn("INTERROMPE_NAO_ENCONTRADO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINTERROMPE_NAO_ENCONTRADO);
                this.columnMENSAGEM_CORTESIA = new global::System.Data.DataColumn("MENSAGEM_CORTESIA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMENSAGEM_CORTESIA);
                this.columnICMS_CONT = new global::System.Data.DataColumn("ICMS_CONT", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICMS_CONT);
                this.columnCSOSN_CONT = new global::System.Data.DataColumn("CSOSN_CONT", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCSOSN_CONT);
                this.columnPEDE_CPF = new global::System.Data.DataColumn("PEDE_CPF", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPEDE_CPF);
                this.columnPERMITE_ESTOQUE_NEGATIVO = new global::System.Data.DataColumn("PERMITE_ESTOQUE_NEGATIVO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPERMITE_ESTOQUE_NEGATIVO);
                this.columnMODELO_CUPOM = new global::System.Data.DataColumn("MODELO_CUPOM", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODELO_CUPOM);
                this.columnMENSAGEM_RODAPE = new global::System.Data.DataColumn("MENSAGEM_RODAPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMENSAGEM_RODAPE);
                this.columnTRI_PDV_DT_UPD = new global::System.Data.DataColumn("TRI_PDV_DT_UPD", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRI_PDV_DT_UPD);
                this.columnMODELO_SAT = new global::System.Data.DataColumn("MODELO_SAT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODELO_SAT);
                this.columnSATSERVIDOR = new global::System.Data.DataColumn("SATSERVIDOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSATSERVIDOR);
                this.columnSAT_CODATIV = new global::System.Data.DataColumn("SAT_CODATIV", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAT_CODATIV);
                this.columnSIGN_AC = new global::System.Data.DataColumn("SIGN_AC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSIGN_AC);
                this.columnSAT_USADO = new global::System.Data.DataColumn("SAT_USADO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAT_USADO);
                this.columnECF_ATIVA = new global::System.Data.DataColumn("ECF_ATIVA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECF_ATIVA);
                this.columnECF_PORTA = new global::System.Data.DataColumn("ECF_PORTA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECF_PORTA);
                this.columnIMPRESSORA_USB = new global::System.Data.DataColumn("IMPRESSORA_USB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIMPRESSORA_USB);
                this.columnIMPRESSORA_USB_PED = new global::System.Data.DataColumn("IMPRESSORA_USB_PED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIMPRESSORA_USB_PED);
                this.columnPERGUNTA_WHATS = new global::System.Data.DataColumn("PERGUNTA_WHATS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPERGUNTA_WHATS);
                this.columnUSATEF = new global::System.Data.DataColumn("USATEF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSATEF);
                this.columnTEFIP = new global::System.Data.DataColumn("TEFIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEFIP);
                this.columnTEFNUMLOJA = new global::System.Data.DataColumn("TEFNUMLOJA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEFNUMLOJA);
                this.columnTEFNUMTERMINAL = new global::System.Data.DataColumn("TEFNUMTERMINAL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEFNUMTERMINAL);
                this.columnTEFPEDECPFPELOPINPAD = new global::System.Data.DataColumn("TEFPEDECPFPELOPINPAD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEFPEDECPFPELOPINPAD);
                this.columnBALPORTA = new global::System.Data.DataColumn("BALPORTA", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBALPORTA);
                this.columnBALBITS = new global::System.Data.DataColumn("BALBITS", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBALBITS);
                this.columnBALBAUD = new global::System.Data.DataColumn("BALBAUD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBALBAUD);
                this.columnBALPARITY = new global::System.Data.DataColumn("BALPARITY", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBALPARITY);
                this.columnBALMODELO = new global::System.Data.DataColumn("BALMODELO", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBALMODELO);
                this.columnACFILLPREFIX = new global::System.Data.DataColumn("ACFILLPREFIX", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACFILLPREFIX);
                this.columnACFILLMODE = new global::System.Data.DataColumn("ACFILLMODE", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACFILLMODE);
                this.columnACREFERENCIA = new global::System.Data.DataColumn("ACREFERENCIA", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACREFERENCIA);
                this.columnSYSCOMISSAO = new global::System.Data.DataColumn("SYSCOMISSAO", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSYSCOMISSAO);
                this.columnSATSERVTIMEOUT = new global::System.Data.DataColumn("SATSERVTIMEOUT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSATSERVTIMEOUT);
                this.columnSATLIFESIGNINTERVAL = new global::System.Data.DataColumn("SATLIFESIGNINTERVAL", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSATLIFESIGNINTERVAL);
                this.columnACFILLDELAY = new global::System.Data.DataColumn("ACFILLDELAY", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACFILLDELAY);
                this.columnSYSPERGUNTAWHATS = new global::System.Data.DataColumn("SYSPERGUNTAWHATS", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSYSPERGUNTAWHATS);
                this.columnSYSPARCELA = new global::System.Data.DataColumn("SYSPARCELA", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSYSPARCELA);
                this.columnSYSEMITECOMPROVANTE = new global::System.Data.DataColumn("SYSEMITECOMPROVANTE", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSYSEMITECOMPROVANTE);
                this.columnINFORMA_MAQUININHA = new global::System.Data.DataColumn("INFORMA_MAQUININHA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINFORMA_MAQUININHA);
                this.columnLAYOUT_SAT = new global::System.Data.DataColumn("LAYOUT_SAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAYOUT_SAT);
                this.columnVINCULA_MAQ_CTA = new global::System.Data.DataColumn("VINCULA_MAQ_CTA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVINCULA_MAQ_CTA);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_MAC}, true));
                this.columnID_MAC.AllowDBNull = false;
                this.columnID_MAC.Unique = true;
                this.columnID_MAC.MaxLength = 12;
                this.columnNO_CAIXA.AllowDBNull = false;
                this.columnEXIGE_SANGRIA.AllowDBNull = false;
                this.columnEXIGE_SANGRIA.MaxLength = 1;
                this.columnVALOR_MAX_CAIXA.AllowDBNull = false;
                this.columnBLOQUEIA_NO_LIMITE.AllowDBNull = false;
                this.columnBLOQUEIA_NO_LIMITE.MaxLength = 1;
                this.columnVALOR_DE_FOLGA.AllowDBNull = false;
                this.columnPERMITE_FOLGA_SANGRIA.AllowDBNull = false;
                this.columnPERMITE_FOLGA_SANGRIA.MaxLength = 1;
                this.columnINTERROMPE_NAO_ENCONTRADO.AllowDBNull = false;
                this.columnINTERROMPE_NAO_ENCONTRADO.MaxLength = 1;
                this.columnMENSAGEM_CORTESIA.MaxLength = 100;
                this.columnPEDE_CPF.AllowDBNull = false;
                this.columnPERMITE_ESTOQUE_NEGATIVO.AllowDBNull = false;
                this.columnMODELO_CUPOM.AllowDBNull = false;
                this.columnMENSAGEM_RODAPE.MaxLength = 100;
                this.columnSATSERVIDOR.MaxLength = 1;
                this.columnSAT_CODATIV.MaxLength = 64;
                this.columnSIGN_AC.MaxLength = 2147483647;
                this.columnSAT_USADO.MaxLength = 1;
                this.columnECF_ATIVA.MaxLength = 1;
                this.columnECF_PORTA.MaxLength = 5;
                this.columnIMPRESSORA_USB.MaxLength = 64;
                this.columnIMPRESSORA_USB_PED.MaxLength = 64;
                this.columnPERGUNTA_WHATS.AllowDBNull = false;
                this.columnUSATEF.AllowDBNull = false;
                this.columnUSATEF.MaxLength = 1;
                this.columnTEFIP.MaxLength = 15;
                this.columnTEFNUMLOJA.MaxLength = 8;
                this.columnTEFNUMTERMINAL.MaxLength = 8;
                this.columnTEFPEDECPFPELOPINPAD.MaxLength = 1;
                this.columnBALPORTA.AllowDBNull = false;
                this.columnBALBITS.AllowDBNull = false;
                this.columnBALBAUD.AllowDBNull = false;
                this.columnBALPARITY.AllowDBNull = false;
                this.columnBALMODELO.AllowDBNull = false;
                this.columnACFILLPREFIX.AllowDBNull = false;
                this.columnACFILLMODE.AllowDBNull = false;
                this.columnACREFERENCIA.AllowDBNull = false;
                this.columnSYSCOMISSAO.AllowDBNull = false;
                this.columnSATSERVTIMEOUT.AllowDBNull = false;
                this.columnSATLIFESIGNINTERVAL.AllowDBNull = false;
                this.columnACFILLDELAY.AllowDBNull = false;
                this.columnSYSPERGUNTAWHATS.AllowDBNull = false;
                this.columnSYSPARCELA.AllowDBNull = false;
                this.columnSYSEMITECOMPROVANTE.AllowDBNull = false;
                this.columnINFORMA_MAQUININHA.AllowDBNull = false;
                this.columnINFORMA_MAQUININHA.MaxLength = 1;
                this.columnLAYOUT_SAT.AllowDBNull = false;
                this.columnLAYOUT_SAT.MaxLength = 3;
                this.columnVINCULA_MAQ_CTA.AllowDBNull = false;
                this.columnVINCULA_MAQ_CTA.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TRI_PDV_CONFIGRow NewTRI_PDV_CONFIGRow() {
                return ((TRI_PDV_CONFIGRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TRI_PDV_CONFIGRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(TRI_PDV_CONFIGRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TRI_PDV_CONFIGRowChanged != null)) {
                    this.TRI_PDV_CONFIGRowChanged(this, new TRI_PDV_CONFIGRowChangeEvent(((TRI_PDV_CONFIGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TRI_PDV_CONFIGRowChanging != null)) {
                    this.TRI_PDV_CONFIGRowChanging(this, new TRI_PDV_CONFIGRowChangeEvent(((TRI_PDV_CONFIGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TRI_PDV_CONFIGRowDeleted != null)) {
                    this.TRI_PDV_CONFIGRowDeleted(this, new TRI_PDV_CONFIGRowChangeEvent(((TRI_PDV_CONFIGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TRI_PDV_CONFIGRowDeleting != null)) {
                    this.TRI_PDV_CONFIGRowDeleting(this, new TRI_PDV_CONFIGRowChangeEvent(((TRI_PDV_CONFIGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveTRI_PDV_CONFIGRow(TRI_PDV_CONFIGRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FDBDataSetConfig ds = new FDBDataSetConfig();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TRI_PDV_CONFIGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class TRI_PDV_CONFIGRow : global::System.Data.DataRow {
            
            private TRI_PDV_CONFIGDataTable tableTRI_PDV_CONFIG;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal TRI_PDV_CONFIGRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTRI_PDV_CONFIG = ((TRI_PDV_CONFIGDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ID_MAC {
                get {
                    return ((string)(this[this.tableTRI_PDV_CONFIG.ID_MACColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.ID_MACColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short NO_CAIXA {
                get {
                    return ((short)(this[this.tableTRI_PDV_CONFIG.NO_CAIXAColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.NO_CAIXAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string EXIGE_SANGRIA {
                get {
                    return ((string)(this[this.tableTRI_PDV_CONFIG.EXIGE_SANGRIAColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.EXIGE_SANGRIAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double VALOR_MAX_CAIXA {
                get {
                    return ((double)(this[this.tableTRI_PDV_CONFIG.VALOR_MAX_CAIXAColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.VALOR_MAX_CAIXAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string BLOQUEIA_NO_LIMITE {
                get {
                    return ((string)(this[this.tableTRI_PDV_CONFIG.BLOQUEIA_NO_LIMITEColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.BLOQUEIA_NO_LIMITEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double VALOR_DE_FOLGA {
                get {
                    return ((double)(this[this.tableTRI_PDV_CONFIG.VALOR_DE_FOLGAColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.VALOR_DE_FOLGAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string PERMITE_FOLGA_SANGRIA {
                get {
                    return ((string)(this[this.tableTRI_PDV_CONFIG.PERMITE_FOLGA_SANGRIAColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.PERMITE_FOLGA_SANGRIAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string INTERROMPE_NAO_ENCONTRADO {
                get {
                    return ((string)(this[this.tableTRI_PDV_CONFIG.INTERROMPE_NAO_ENCONTRADOColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.INTERROMPE_NAO_ENCONTRADOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string MENSAGEM_CORTESIA {
                get {
                    try {
                        return ((string)(this[this.tableTRI_PDV_CONFIG.MENSAGEM_CORTESIAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'MENSAGEM_CORTESIA\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.MENSAGEM_CORTESIAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public float ICMS_CONT {
                get {
                    try {
                        return ((float)(this[this.tableTRI_PDV_CONFIG.ICMS_CONTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'ICMS_CONT\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.ICMS_CONTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public float CSOSN_CONT {
                get {
                    try {
                        return ((float)(this[this.tableTRI_PDV_CONFIG.CSOSN_CONTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'CSOSN_CONT\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.CSOSN_CONTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int PEDE_CPF {
                get {
                    return ((int)(this[this.tableTRI_PDV_CONFIG.PEDE_CPFColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.PEDE_CPFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int PERMITE_ESTOQUE_NEGATIVO {
                get {
                    return ((int)(this[this.tableTRI_PDV_CONFIG.PERMITE_ESTOQUE_NEGATIVOColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.PERMITE_ESTOQUE_NEGATIVOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short MODELO_CUPOM {
                get {
                    return ((short)(this[this.tableTRI_PDV_CONFIG.MODELO_CUPOMColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.MODELO_CUPOMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string MENSAGEM_RODAPE {
                get {
                    try {
                        return ((string)(this[this.tableTRI_PDV_CONFIG.MENSAGEM_RODAPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'MENSAGEM_RODAPE\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.MENSAGEM_RODAPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime TRI_PDV_DT_UPD {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTRI_PDV_CONFIG.TRI_PDV_DT_UPDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'TRI_PDV_DT_UPD\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.TRI_PDV_DT_UPDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int MODELO_SAT {
                get {
                    try {
                        return ((int)(this[this.tableTRI_PDV_CONFIG.MODELO_SATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'MODELO_SAT\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.MODELO_SATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SATSERVIDOR {
                get {
                    try {
                        return ((string)(this[this.tableTRI_PDV_CONFIG.SATSERVIDORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'SATSERVIDOR\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.SATSERVIDORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SAT_CODATIV {
                get {
                    try {
                        return ((string)(this[this.tableTRI_PDV_CONFIG.SAT_CODATIVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'SAT_CODATIV\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.SAT_CODATIVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SIGN_AC {
                get {
                    try {
                        return ((string)(this[this.tableTRI_PDV_CONFIG.SIGN_ACColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'SIGN_AC\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.SIGN_ACColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SAT_USADO {
                get {
                    try {
                        return ((string)(this[this.tableTRI_PDV_CONFIG.SAT_USADOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'SAT_USADO\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.SAT_USADOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ECF_ATIVA {
                get {
                    try {
                        return ((string)(this[this.tableTRI_PDV_CONFIG.ECF_ATIVAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'ECF_ATIVA\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.ECF_ATIVAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ECF_PORTA {
                get {
                    try {
                        return ((string)(this[this.tableTRI_PDV_CONFIG.ECF_PORTAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'ECF_PORTA\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.ECF_PORTAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string IMPRESSORA_USB {
                get {
                    try {
                        return ((string)(this[this.tableTRI_PDV_CONFIG.IMPRESSORA_USBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'IMPRESSORA_USB\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.IMPRESSORA_USBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string IMPRESSORA_USB_PED {
                get {
                    try {
                        return ((string)(this[this.tableTRI_PDV_CONFIG.IMPRESSORA_USB_PEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'IMPRESSORA_USB_PED\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.IMPRESSORA_USB_PEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int PERGUNTA_WHATS {
                get {
                    return ((int)(this[this.tableTRI_PDV_CONFIG.PERGUNTA_WHATSColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.PERGUNTA_WHATSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string USATEF {
                get {
                    return ((string)(this[this.tableTRI_PDV_CONFIG.USATEFColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.USATEFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TEFIP {
                get {
                    try {
                        return ((string)(this[this.tableTRI_PDV_CONFIG.TEFIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'TEFIP\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.TEFIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TEFNUMLOJA {
                get {
                    try {
                        return ((string)(this[this.tableTRI_PDV_CONFIG.TEFNUMLOJAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'TEFNUMLOJA\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.TEFNUMLOJAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TEFNUMTERMINAL {
                get {
                    try {
                        return ((string)(this[this.tableTRI_PDV_CONFIG.TEFNUMTERMINALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'TEFNUMTERMINAL\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.TEFNUMTERMINALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TEFPEDECPFPELOPINPAD {
                get {
                    try {
                        return ((string)(this[this.tableTRI_PDV_CONFIG.TEFPEDECPFPELOPINPADColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'TEFPEDECPFPELOPINPAD\' na tabela \'TRI_PDV_CONFIG\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.TEFPEDECPFPELOPINPADColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short BALPORTA {
                get {
                    return ((short)(this[this.tableTRI_PDV_CONFIG.BALPORTAColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.BALPORTAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short BALBITS {
                get {
                    return ((short)(this[this.tableTRI_PDV_CONFIG.BALBITSColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.BALBITSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int BALBAUD {
                get {
                    return ((int)(this[this.tableTRI_PDV_CONFIG.BALBAUDColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.BALBAUDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short BALPARITY {
                get {
                    return ((short)(this[this.tableTRI_PDV_CONFIG.BALPARITYColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.BALPARITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short BALMODELO {
                get {
                    return ((short)(this[this.tableTRI_PDV_CONFIG.BALMODELOColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.BALMODELOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short ACFILLPREFIX {
                get {
                    return ((short)(this[this.tableTRI_PDV_CONFIG.ACFILLPREFIXColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.ACFILLPREFIXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short ACFILLMODE {
                get {
                    return ((short)(this[this.tableTRI_PDV_CONFIG.ACFILLMODEColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.ACFILLMODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short ACREFERENCIA {
                get {
                    return ((short)(this[this.tableTRI_PDV_CONFIG.ACREFERENCIAColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.ACREFERENCIAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short SYSCOMISSAO {
                get {
                    return ((short)(this[this.tableTRI_PDV_CONFIG.SYSCOMISSAOColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.SYSCOMISSAOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int SATSERVTIMEOUT {
                get {
                    return ((int)(this[this.tableTRI_PDV_CONFIG.SATSERVTIMEOUTColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.SATSERVTIMEOUTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int SATLIFESIGNINTERVAL {
                get {
                    return ((int)(this[this.tableTRI_PDV_CONFIG.SATLIFESIGNINTERVALColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.SATLIFESIGNINTERVALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int ACFILLDELAY {
                get {
                    return ((int)(this[this.tableTRI_PDV_CONFIG.ACFILLDELAYColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.ACFILLDELAYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short SYSPERGUNTAWHATS {
                get {
                    return ((short)(this[this.tableTRI_PDV_CONFIG.SYSPERGUNTAWHATSColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.SYSPERGUNTAWHATSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short SYSPARCELA {
                get {
                    return ((short)(this[this.tableTRI_PDV_CONFIG.SYSPARCELAColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.SYSPARCELAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short SYSEMITECOMPROVANTE {
                get {
                    return ((short)(this[this.tableTRI_PDV_CONFIG.SYSEMITECOMPROVANTEColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.SYSEMITECOMPROVANTEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string INFORMA_MAQUININHA {
                get {
                    return ((string)(this[this.tableTRI_PDV_CONFIG.INFORMA_MAQUININHAColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.INFORMA_MAQUININHAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LAYOUT_SAT {
                get {
                    return ((string)(this[this.tableTRI_PDV_CONFIG.LAYOUT_SATColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.LAYOUT_SATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string VINCULA_MAQ_CTA {
                get {
                    return ((string)(this[this.tableTRI_PDV_CONFIG.VINCULA_MAQ_CTAColumn]));
                }
                set {
                    this[this.tableTRI_PDV_CONFIG.VINCULA_MAQ_CTAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsMENSAGEM_CORTESIANull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.MENSAGEM_CORTESIAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetMENSAGEM_CORTESIANull() {
                this[this.tableTRI_PDV_CONFIG.MENSAGEM_CORTESIAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsICMS_CONTNull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.ICMS_CONTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetICMS_CONTNull() {
                this[this.tableTRI_PDV_CONFIG.ICMS_CONTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCSOSN_CONTNull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.CSOSN_CONTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCSOSN_CONTNull() {
                this[this.tableTRI_PDV_CONFIG.CSOSN_CONTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsMENSAGEM_RODAPENull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.MENSAGEM_RODAPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetMENSAGEM_RODAPENull() {
                this[this.tableTRI_PDV_CONFIG.MENSAGEM_RODAPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTRI_PDV_DT_UPDNull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.TRI_PDV_DT_UPDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTRI_PDV_DT_UPDNull() {
                this[this.tableTRI_PDV_CONFIG.TRI_PDV_DT_UPDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsMODELO_SATNull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.MODELO_SATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetMODELO_SATNull() {
                this[this.tableTRI_PDV_CONFIG.MODELO_SATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSATSERVIDORNull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.SATSERVIDORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSATSERVIDORNull() {
                this[this.tableTRI_PDV_CONFIG.SATSERVIDORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSAT_CODATIVNull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.SAT_CODATIVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSAT_CODATIVNull() {
                this[this.tableTRI_PDV_CONFIG.SAT_CODATIVColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSIGN_ACNull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.SIGN_ACColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSIGN_ACNull() {
                this[this.tableTRI_PDV_CONFIG.SIGN_ACColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSAT_USADONull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.SAT_USADOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSAT_USADONull() {
                this[this.tableTRI_PDV_CONFIG.SAT_USADOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsECF_ATIVANull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.ECF_ATIVAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetECF_ATIVANull() {
                this[this.tableTRI_PDV_CONFIG.ECF_ATIVAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsECF_PORTANull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.ECF_PORTAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetECF_PORTANull() {
                this[this.tableTRI_PDV_CONFIG.ECF_PORTAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsIMPRESSORA_USBNull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.IMPRESSORA_USBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetIMPRESSORA_USBNull() {
                this[this.tableTRI_PDV_CONFIG.IMPRESSORA_USBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsIMPRESSORA_USB_PEDNull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.IMPRESSORA_USB_PEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetIMPRESSORA_USB_PEDNull() {
                this[this.tableTRI_PDV_CONFIG.IMPRESSORA_USB_PEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTEFIPNull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.TEFIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTEFIPNull() {
                this[this.tableTRI_PDV_CONFIG.TEFIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTEFNUMLOJANull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.TEFNUMLOJAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTEFNUMLOJANull() {
                this[this.tableTRI_PDV_CONFIG.TEFNUMLOJAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTEFNUMTERMINALNull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.TEFNUMTERMINALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTEFNUMTERMINALNull() {
                this[this.tableTRI_PDV_CONFIG.TEFNUMTERMINALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTEFPEDECPFPELOPINPADNull() {
                return this.IsNull(this.tableTRI_PDV_CONFIG.TEFPEDECPFPELOPINPADColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTEFPEDECPFPELOPINPADNull() {
                this[this.tableTRI_PDV_CONFIG.TEFPEDECPFPELOPINPADColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class TRI_PDV_CONFIGRowChangeEvent : global::System.EventArgs {
            
            private TRI_PDV_CONFIGRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TRI_PDV_CONFIGRowChangeEvent(TRI_PDV_CONFIGRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TRI_PDV_CONFIGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace PDV_WPF.DataSets.FDBDataSetConfigTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TRI_PDV_CONFIGTableAdapter : global::System.ComponentModel.Component {
        
        private global::FirebirdSql.Data.FirebirdClient.FbDataAdapter _adapter;
        
        private global::FirebirdSql.Data.FirebirdClient.FbConnection _connection;
        
        private global::FirebirdSql.Data.FirebirdClient.FbTransaction _transaction;
        
        private global::FirebirdSql.Data.FirebirdClient.FbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public TRI_PDV_CONFIGTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::FirebirdSql.Data.FirebirdClient.FbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::FirebirdSql.Data.FirebirdClient.FbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::FirebirdSql.Data.FirebirdClient.FbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::FirebirdSql.Data.FirebirdClient.FbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::FirebirdSql.Data.FirebirdClient.FbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TRI_PDV_CONFIG";
            tableMapping.ColumnMappings.Add("ID_MAC", "ID_MAC");
            tableMapping.ColumnMappings.Add("NO_CAIXA", "NO_CAIXA");
            tableMapping.ColumnMappings.Add("EXIGE_SANGRIA", "EXIGE_SANGRIA");
            tableMapping.ColumnMappings.Add("VALOR_MAX_CAIXA", "VALOR_MAX_CAIXA");
            tableMapping.ColumnMappings.Add("BLOQUEIA_NO_LIMITE", "BLOQUEIA_NO_LIMITE");
            tableMapping.ColumnMappings.Add("VALOR_DE_FOLGA", "VALOR_DE_FOLGA");
            tableMapping.ColumnMappings.Add("PERMITE_FOLGA_SANGRIA", "PERMITE_FOLGA_SANGRIA");
            tableMapping.ColumnMappings.Add("INTERROMPE_NAO_ENCONTRADO", "INTERROMPE_NAO_ENCONTRADO");
            tableMapping.ColumnMappings.Add("MENSAGEM_CORTESIA", "MENSAGEM_CORTESIA");
            tableMapping.ColumnMappings.Add("ICMS_CONT", "ICMS_CONT");
            tableMapping.ColumnMappings.Add("CSOSN_CONT", "CSOSN_CONT");
            tableMapping.ColumnMappings.Add("PEDE_CPF", "PEDE_CPF");
            tableMapping.ColumnMappings.Add("PERMITE_ESTOQUE_NEGATIVO", "PERMITE_ESTOQUE_NEGATIVO");
            tableMapping.ColumnMappings.Add("MODELO_CUPOM", "MODELO_CUPOM");
            tableMapping.ColumnMappings.Add("MENSAGEM_RODAPE", "MENSAGEM_RODAPE");
            tableMapping.ColumnMappings.Add("TRI_PDV_DT_UPD", "TRI_PDV_DT_UPD");
            tableMapping.ColumnMappings.Add("MODELO_SAT", "MODELO_SAT");
            tableMapping.ColumnMappings.Add("SATSERVIDOR", "SATSERVIDOR");
            tableMapping.ColumnMappings.Add("SAT_CODATIV", "SAT_CODATIV");
            tableMapping.ColumnMappings.Add("SIGN_AC", "SIGN_AC");
            tableMapping.ColumnMappings.Add("SAT_USADO", "SAT_USADO");
            tableMapping.ColumnMappings.Add("ECF_ATIVA", "ECF_ATIVA");
            tableMapping.ColumnMappings.Add("ECF_PORTA", "ECF_PORTA");
            tableMapping.ColumnMappings.Add("IMPRESSORA_USB", "IMPRESSORA_USB");
            tableMapping.ColumnMappings.Add("IMPRESSORA_USB_PED", "IMPRESSORA_USB_PED");
            tableMapping.ColumnMappings.Add("PERGUNTA_WHATS", "PERGUNTA_WHATS");
            tableMapping.ColumnMappings.Add("USATEF", "USATEF");
            tableMapping.ColumnMappings.Add("TEFIP", "TEFIP");
            tableMapping.ColumnMappings.Add("TEFNUMLOJA", "TEFNUMLOJA");
            tableMapping.ColumnMappings.Add("TEFNUMTERMINAL", "TEFNUMTERMINAL");
            tableMapping.ColumnMappings.Add("TEFPEDECPFPELOPINPAD", "TEFPEDECPFPELOPINPAD");
            tableMapping.ColumnMappings.Add("BALPORTA", "BALPORTA");
            tableMapping.ColumnMappings.Add("BALBITS", "BALBITS");
            tableMapping.ColumnMappings.Add("BALBAUD", "BALBAUD");
            tableMapping.ColumnMappings.Add("BALPARITY", "BALPARITY");
            tableMapping.ColumnMappings.Add("BALMODELO", "BALMODELO");
            tableMapping.ColumnMappings.Add("ACFILLPREFIX", "ACFILLPREFIX");
            tableMapping.ColumnMappings.Add("ACFILLMODE", "ACFILLMODE");
            tableMapping.ColumnMappings.Add("ACREFERENCIA", "ACREFERENCIA");
            tableMapping.ColumnMappings.Add("SYSCOMISSAO", "SYSCOMISSAO");
            tableMapping.ColumnMappings.Add("SATSERVTIMEOUT", "SATSERVTIMEOUT");
            tableMapping.ColumnMappings.Add("SATLIFESIGNINTERVAL", "SATLIFESIGNINTERVAL");
            tableMapping.ColumnMappings.Add("ACFILLDELAY", "ACFILLDELAY");
            tableMapping.ColumnMappings.Add("SYSPERGUNTAWHATS", "SYSPERGUNTAWHATS");
            tableMapping.ColumnMappings.Add("SYSPARCELA", "SYSPARCELA");
            tableMapping.ColumnMappings.Add("SYSEMITECOMPROVANTE", "SYSEMITECOMPROVANTE");
            tableMapping.ColumnMappings.Add("INFORMA_MAQUININHA", "INFORMA_MAQUININHA");
            tableMapping.ColumnMappings.Add("LAYOUT_SAT", "LAYOUT_SAT");
            tableMapping.ColumnMappings.Add("VINCULA_MAQ_CTA", "VINCULA_MAQ_CTA");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"TRI_PDV_CONFIG\" WHERE ((\"ID_MAC\" = @Original_ID_MAC) AND (\"NO_CAIXA\"" +
                " = @Original_NO_CAIXA) AND (\"EXIGE_SANGRIA\" = @Original_EXIGE_SANGRIA) AND (\"VAL" +
                "OR_MAX_CAIXA\" = @Original_VALOR_MAX_CAIXA) AND (\"BLOQUEIA_NO_LIMITE\" = @Original" +
                "_BLOQUEIA_NO_LIMITE) AND (\"VALOR_DE_FOLGA\" = @Original_VALOR_DE_FOLGA) AND (\"PER" +
                "MITE_FOLGA_SANGRIA\" = @Original_PERMITE_FOLGA_SANGRIA) AND (\"INTERROMPE_NAO_ENCO" +
                "NTRADO\" = @Original_INTERROMPE_NAO_ENCONTRADO) AND ((@IsNull_MENSAGEM_CORTESIA =" +
                " 1 AND \"MENSAGEM_CORTESIA\" IS NULL) OR (\"MENSAGEM_CORTESIA\" = @Original_MENSAGEM" +
                "_CORTESIA)) AND ((@IsNull_ICMS_CONT = 1 AND \"ICMS_CONT\" IS NULL) OR (\"ICMS_CONT\"" +
                " = @Original_ICMS_CONT)) AND ((@IsNull_CSOSN_CONT = 1 AND \"CSOSN_CONT\" IS NULL) " +
                "OR (\"CSOSN_CONT\" = @Original_CSOSN_CONT)) AND (\"PEDE_CPF\" = @Original_PEDE_CPF) " +
                "AND (\"PERMITE_ESTOQUE_NEGATIVO\" = @Original_PERMITE_ESTOQUE_NEGATIVO) AND (\"MODE" +
                "LO_CUPOM\" = @Original_MODELO_CUPOM) AND ((@IsNull_MENSAGEM_RODAPE = 1 AND \"MENSA" +
                "GEM_RODAPE\" IS NULL) OR (\"MENSAGEM_RODAPE\" = @Original_MENSAGEM_RODAPE)) AND ((@" +
                "IsNull_TRI_PDV_DT_UPD = 1 AND \"TRI_PDV_DT_UPD\" IS NULL) OR (\"TRI_PDV_DT_UPD\" = @" +
                "Original_TRI_PDV_DT_UPD)) AND ((@IsNull_MODELO_SAT = 1 AND \"MODELO_SAT\" IS NULL)" +
                " OR (\"MODELO_SAT\" = @Original_MODELO_SAT)) AND ((@IsNull_SATSERVIDOR = 1 AND \"SA" +
                "TSERVIDOR\" IS NULL) OR (\"SATSERVIDOR\" = @Original_SATSERVIDOR)) AND ((@IsNull_SA" +
                "T_CODATIV = 1 AND \"SAT_CODATIV\" IS NULL) OR (\"SAT_CODATIV\" = @Original_SAT_CODAT" +
                "IV)) AND ((@IsNull_SAT_USADO = 1 AND \"SAT_USADO\" IS NULL) OR (\"SAT_USADO\" = @Ori" +
                "ginal_SAT_USADO)) AND ((@IsNull_ECF_ATIVA = 1 AND \"ECF_ATIVA\" IS NULL) OR (\"ECF_" +
                "ATIVA\" = @Original_ECF_ATIVA)) AND ((@IsNull_ECF_PORTA = 1 AND \"ECF_PORTA\" IS NU" +
                "LL) OR (\"ECF_PORTA\" = @Original_ECF_PORTA)) AND ((@IsNull_IMPRESSORA_USB = 1 AND" +
                " \"IMPRESSORA_USB\" IS NULL) OR (\"IMPRESSORA_USB\" = @Original_IMPRESSORA_USB)) AND" +
                " ((@IsNull_IMPRESSORA_USB_PED = 1 AND \"IMPRESSORA_USB_PED\" IS NULL) OR (\"IMPRESS" +
                "ORA_USB_PED\" = @Original_IMPRESSORA_USB_PED)) AND (\"PERGUNTA_WHATS\" = @Original_" +
                "PERGUNTA_WHATS) AND (\"USATEF\" = @Original_USATEF) AND ((@IsNull_TEFIP = 1 AND \"T" +
                "EFIP\" IS NULL) OR (\"TEFIP\" = @Original_TEFIP)) AND ((@IsNull_TEFNUMLOJA = 1 AND " +
                "\"TEFNUMLOJA\" IS NULL) OR (\"TEFNUMLOJA\" = @Original_TEFNUMLOJA)) AND ((@IsNull_TE" +
                "FNUMTERMINAL = 1 AND \"TEFNUMTERMINAL\" IS NULL) OR (\"TEFNUMTERMINAL\" = @Original_" +
                "TEFNUMTERMINAL)) AND ((@IsNull_TEFPEDECPFPELOPINPAD = 1 AND \"TEFPEDECPFPELOPINPA" +
                "D\" IS NULL) OR (\"TEFPEDECPFPELOPINPAD\" = @Original_TEFPEDECPFPELOPINPAD)) AND (\"" +
                "BALPORTA\" = @Original_BALPORTA) AND (\"BALBITS\" = @Original_BALBITS) AND (\"BALBAU" +
                "D\" = @Original_BALBAUD) AND (\"BALPARITY\" = @Original_BALPARITY) AND (\"BALMODELO\"" +
                " = @Original_BALMODELO) AND (\"ACFILLPREFIX\" = @Original_ACFILLPREFIX) AND (\"ACFI" +
                "LLMODE\" = @Original_ACFILLMODE) AND (\"ACREFERENCIA\" = @Original_ACREFERENCIA) AN" +
                "D (\"SYSCOMISSAO\" = @Original_SYSCOMISSAO) AND (\"SATSERVTIMEOUT\" = @Original_SATS" +
                "ERVTIMEOUT) AND (\"SATLIFESIGNINTERVAL\" = @Original_SATLIFESIGNINTERVAL) AND (\"AC" +
                "FILLDELAY\" = @Original_ACFILLDELAY) AND (\"SYSPERGUNTAWHATS\" = @Original_SYSPERGU" +
                "NTAWHATS) AND (\"SYSPARCELA\" = @Original_SYSPARCELA) AND (\"SYSEMITECOMPROVANTE\" =" +
                " @Original_SYSEMITECOMPROVANTE) AND (\"INFORMA_MAQUININHA\" = @Original_INFORMA_MA" +
                "QUININHA) AND (\"LAYOUT_SAT\" = @Original_LAYOUT_SAT) AND (\"VINCULA_MAQ_CTA\" = @Or" +
                "iginal_VINCULA_MAQ_CTA))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::FirebirdSql.Data.FirebirdClient.FbParameter param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_ID_MAC";
            param.Size = 12;
            param.IsNullable = true;
            param.SourceColumn = "ID_MAC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_NO_CAIXA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "NO_CAIXA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_EXIGE_SANGRIA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "EXIGE_SANGRIA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_VALOR_MAX_CAIXA";
            param.DbType = global::System.Data.DbType.Double;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "VALOR_MAX_CAIXA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_BLOQUEIA_NO_LIMITE";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "BLOQUEIA_NO_LIMITE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_VALOR_DE_FOLGA";
            param.DbType = global::System.Data.DbType.Double;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "VALOR_DE_FOLGA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_PERMITE_FOLGA_SANGRIA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "PERMITE_FOLGA_SANGRIA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_INTERROMPE_NAO_ENCONTRADO";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "INTERROMPE_NAO_ENCONTRADO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_MENSAGEM_CORTESIA";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = "MENSAGEM_CORTESIA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_MENSAGEM_CORTESIA";
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = "MENSAGEM_CORTESIA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_ICMS_CONT";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "ICMS_CONT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_ICMS_CONT";
            param.DbType = global::System.Data.DbType.Single;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "ICMS_CONT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_CSOSN_CONT";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "CSOSN_CONT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_CSOSN_CONT";
            param.DbType = global::System.Data.DbType.Single;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "CSOSN_CONT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_PEDE_CPF";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "PEDE_CPF";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_PERMITE_ESTOQUE_NEGATIVO";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "PERMITE_ESTOQUE_NEGATIVO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_MODELO_CUPOM";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "MODELO_CUPOM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_MENSAGEM_RODAPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = "MENSAGEM_RODAPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_MENSAGEM_RODAPE";
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = "MENSAGEM_RODAPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_TRI_PDV_DT_UPD";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TRI_PDV_DT_UPD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_TRI_PDV_DT_UPD";
            param.DbType = global::System.Data.DbType.DateTime;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TRI_PDV_DT_UPD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_MODELO_SAT";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "MODELO_SAT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_MODELO_SAT";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "MODELO_SAT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_SATSERVIDOR";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "SATSERVIDOR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SATSERVIDOR";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "SATSERVIDOR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_SAT_CODATIV";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "SAT_CODATIV";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SAT_CODATIV";
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "SAT_CODATIV";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_SAT_USADO";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "SAT_USADO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SAT_USADO";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "SAT_USADO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_ECF_ATIVA";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "ECF_ATIVA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_ECF_ATIVA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "ECF_ATIVA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_ECF_PORTA";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 5;
            param.IsNullable = true;
            param.SourceColumn = "ECF_PORTA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_ECF_PORTA";
            param.Size = 5;
            param.IsNullable = true;
            param.SourceColumn = "ECF_PORTA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_IMPRESSORA_USB";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "IMPRESSORA_USB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_IMPRESSORA_USB";
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "IMPRESSORA_USB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_IMPRESSORA_USB_PED";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "IMPRESSORA_USB_PED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_IMPRESSORA_USB_PED";
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "IMPRESSORA_USB_PED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_PERGUNTA_WHATS";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "PERGUNTA_WHATS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_USATEF";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "USATEF";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_TEFIP";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 15;
            param.IsNullable = true;
            param.SourceColumn = "TEFIP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_TEFIP";
            param.Size = 15;
            param.IsNullable = true;
            param.SourceColumn = "TEFIP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_TEFNUMLOJA";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TEFNUMLOJA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_TEFNUMLOJA";
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TEFNUMLOJA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_TEFNUMTERMINAL";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TEFNUMTERMINAL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_TEFNUMTERMINAL";
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TEFNUMTERMINAL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_TEFPEDECPFPELOPINPAD";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "TEFPEDECPFPELOPINPAD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_TEFPEDECPFPELOPINPAD";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "TEFPEDECPFPELOPINPAD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_BALPORTA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "BALPORTA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_BALBITS";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "BALBITS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_BALBAUD";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "BALBAUD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_BALPARITY";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "BALPARITY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_BALMODELO";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "BALMODELO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_ACFILLPREFIX";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "ACFILLPREFIX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_ACFILLMODE";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "ACFILLMODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_ACREFERENCIA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "ACREFERENCIA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SYSCOMISSAO";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "SYSCOMISSAO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SATSERVTIMEOUT";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "SATSERVTIMEOUT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SATLIFESIGNINTERVAL";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "SATLIFESIGNINTERVAL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_ACFILLDELAY";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "ACFILLDELAY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SYSPERGUNTAWHATS";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "SYSPERGUNTAWHATS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SYSPARCELA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "SYSPARCELA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SYSEMITECOMPROVANTE";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "SYSEMITECOMPROVANTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_INFORMA_MAQUININHA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "INFORMA_MAQUININHA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_LAYOUT_SAT";
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "LAYOUT_SAT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_VINCULA_MAQ_CTA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "VINCULA_MAQ_CTA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"TRI_PDV_CONFIG\" (\"ID_MAC\", \"NO_CAIXA\", \"EXIGE_SANGRIA\", \"VALOR_MAX_C" +
                "AIXA\", \"BLOQUEIA_NO_LIMITE\", \"VALOR_DE_FOLGA\", \"PERMITE_FOLGA_SANGRIA\", \"INTERRO" +
                "MPE_NAO_ENCONTRADO\", \"MENSAGEM_CORTESIA\", \"ICMS_CONT\", \"CSOSN_CONT\", \"PEDE_CPF\"," +
                " \"PERMITE_ESTOQUE_NEGATIVO\", \"MODELO_CUPOM\", \"MENSAGEM_RODAPE\", \"TRI_PDV_DT_UPD\"" +
                ", \"MODELO_SAT\", \"SATSERVIDOR\", \"SAT_CODATIV\", \"SIGN_AC\", \"SAT_USADO\", \"ECF_ATIVA" +
                "\", \"ECF_PORTA\", \"IMPRESSORA_USB\", \"IMPRESSORA_USB_PED\", \"PERGUNTA_WHATS\", \"USATE" +
                "F\", \"TEFIP\", \"TEFNUMLOJA\", \"TEFNUMTERMINAL\", \"TEFPEDECPFPELOPINPAD\", \"BALPORTA\"," +
                " \"BALBITS\", \"BALBAUD\", \"BALPARITY\", \"BALMODELO\", \"ACFILLPREFIX\", \"ACFILLMODE\", \"" +
                "ACREFERENCIA\", \"SYSCOMISSAO\", \"SATSERVTIMEOUT\", \"SATLIFESIGNINTERVAL\", \"ACFILLDE" +
                "LAY\", \"SYSPERGUNTAWHATS\", \"SYSPARCELA\", \"SYSEMITECOMPROVANTE\", \"INFORMA_MAQUININ" +
                "HA\", \"LAYOUT_SAT\", \"VINCULA_MAQ_CTA\") VALUES (@ID_MAC, @NO_CAIXA, @EXIGE_SANGRIA" +
                ", @VALOR_MAX_CAIXA, @BLOQUEIA_NO_LIMITE, @VALOR_DE_FOLGA, @PERMITE_FOLGA_SANGRIA" +
                ", @INTERROMPE_NAO_ENCONTRADO, @MENSAGEM_CORTESIA, @ICMS_CONT, @CSOSN_CONT, @PEDE" +
                "_CPF, @PERMITE_ESTOQUE_NEGATIVO, @MODELO_CUPOM, @MENSAGEM_RODAPE, @TRI_PDV_DT_UP" +
                "D, @MODELO_SAT, @SATSERVIDOR, @SAT_CODATIV, @SIGN_AC, @SAT_USADO, @ECF_ATIVA, @E" +
                "CF_PORTA, @IMPRESSORA_USB, @IMPRESSORA_USB_PED, @PERGUNTA_WHATS, @USATEF, @TEFIP" +
                ", @TEFNUMLOJA, @TEFNUMTERMINAL, @TEFPEDECPFPELOPINPAD, @BALPORTA, @BALBITS, @BAL" +
                "BAUD, @BALPARITY, @BALMODELO, @ACFILLPREFIX, @ACFILLMODE, @ACREFERENCIA, @SYSCOM" +
                "ISSAO, @SATSERVTIMEOUT, @SATLIFESIGNINTERVAL, @ACFILLDELAY, @SYSPERGUNTAWHATS, @" +
                "SYSPARCELA, @SYSEMITECOMPROVANTE, @INFORMA_MAQUININHA, @LAYOUT_SAT, @VINCULA_MAQ" +
                "_CTA)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@ID_MAC";
            param.Size = 12;
            param.IsNullable = true;
            param.SourceColumn = "ID_MAC";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@NO_CAIXA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "NO_CAIXA";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@EXIGE_SANGRIA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "EXIGE_SANGRIA";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@VALOR_MAX_CAIXA";
            param.DbType = global::System.Data.DbType.Double;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "VALOR_MAX_CAIXA";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@BLOQUEIA_NO_LIMITE";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "BLOQUEIA_NO_LIMITE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@VALOR_DE_FOLGA";
            param.DbType = global::System.Data.DbType.Double;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "VALOR_DE_FOLGA";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@PERMITE_FOLGA_SANGRIA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "PERMITE_FOLGA_SANGRIA";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@INTERROMPE_NAO_ENCONTRADO";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "INTERROMPE_NAO_ENCONTRADO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@MENSAGEM_CORTESIA";
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = "MENSAGEM_CORTESIA";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@ICMS_CONT";
            param.DbType = global::System.Data.DbType.Single;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "ICMS_CONT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@CSOSN_CONT";
            param.DbType = global::System.Data.DbType.Single;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "CSOSN_CONT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@PEDE_CPF";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "PEDE_CPF";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@PERMITE_ESTOQUE_NEGATIVO";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "PERMITE_ESTOQUE_NEGATIVO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@MODELO_CUPOM";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "MODELO_CUPOM";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@MENSAGEM_RODAPE";
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = "MENSAGEM_RODAPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@TRI_PDV_DT_UPD";
            param.DbType = global::System.Data.DbType.DateTime;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TRI_PDV_DT_UPD";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@MODELO_SAT";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "MODELO_SAT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SATSERVIDOR";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "SATSERVIDOR";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SAT_CODATIV";
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "SAT_CODATIV";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SIGN_AC";
            param.Size = 2147483647;
            param.IsNullable = true;
            param.SourceColumn = "SIGN_AC";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SAT_USADO";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "SAT_USADO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@ECF_ATIVA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "ECF_ATIVA";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@ECF_PORTA";
            param.Size = 5;
            param.IsNullable = true;
            param.SourceColumn = "ECF_PORTA";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IMPRESSORA_USB";
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "IMPRESSORA_USB";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IMPRESSORA_USB_PED";
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "IMPRESSORA_USB_PED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@PERGUNTA_WHATS";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "PERGUNTA_WHATS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@USATEF";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "USATEF";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@TEFIP";
            param.Size = 15;
            param.IsNullable = true;
            param.SourceColumn = "TEFIP";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@TEFNUMLOJA";
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TEFNUMLOJA";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@TEFNUMTERMINAL";
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TEFNUMTERMINAL";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@TEFPEDECPFPELOPINPAD";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "TEFPEDECPFPELOPINPAD";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@BALPORTA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "BALPORTA";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@BALBITS";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "BALBITS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@BALBAUD";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "BALBAUD";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@BALPARITY";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "BALPARITY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@BALMODELO";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "BALMODELO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@ACFILLPREFIX";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "ACFILLPREFIX";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@ACFILLMODE";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "ACFILLMODE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@ACREFERENCIA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "ACREFERENCIA";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SYSCOMISSAO";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "SYSCOMISSAO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SATSERVTIMEOUT";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "SATSERVTIMEOUT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SATLIFESIGNINTERVAL";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "SATLIFESIGNINTERVAL";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@ACFILLDELAY";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "ACFILLDELAY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SYSPERGUNTAWHATS";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "SYSPERGUNTAWHATS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SYSPARCELA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "SYSPARCELA";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SYSEMITECOMPROVANTE";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "SYSEMITECOMPROVANTE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@INFORMA_MAQUININHA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "INFORMA_MAQUININHA";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@LAYOUT_SAT";
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "LAYOUT_SAT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@VINCULA_MAQ_CTA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "VINCULA_MAQ_CTA";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"TRI_PDV_CONFIG\" SET \"ID_MAC\" = @ID_MAC, \"NO_CAIXA\" = @NO_CAIXA, \"EXIGE_SA" +
                "NGRIA\" = @EXIGE_SANGRIA, \"VALOR_MAX_CAIXA\" = @VALOR_MAX_CAIXA, \"BLOQUEIA_NO_LIMI" +
                "TE\" = @BLOQUEIA_NO_LIMITE, \"VALOR_DE_FOLGA\" = @VALOR_DE_FOLGA, \"PERMITE_FOLGA_SA" +
                "NGRIA\" = @PERMITE_FOLGA_SANGRIA, \"INTERROMPE_NAO_ENCONTRADO\" = @INTERROMPE_NAO_E" +
                "NCONTRADO, \"MENSAGEM_CORTESIA\" = @MENSAGEM_CORTESIA, \"ICMS_CONT\" = @ICMS_CONT, \"" +
                "CSOSN_CONT\" = @CSOSN_CONT, \"PEDE_CPF\" = @PEDE_CPF, \"PERMITE_ESTOQUE_NEGATIVO\" = " +
                "@PERMITE_ESTOQUE_NEGATIVO, \"MODELO_CUPOM\" = @MODELO_CUPOM, \"MENSAGEM_RODAPE\" = @" +
                "MENSAGEM_RODAPE, \"TRI_PDV_DT_UPD\" = @TRI_PDV_DT_UPD, \"MODELO_SAT\" = @MODELO_SAT," +
                " \"SATSERVIDOR\" = @SATSERVIDOR, \"SAT_CODATIV\" = @SAT_CODATIV, \"SIGN_AC\" = @SIGN_A" +
                "C, \"SAT_USADO\" = @SAT_USADO, \"ECF_ATIVA\" = @ECF_ATIVA, \"ECF_PORTA\" = @ECF_PORTA," +
                " \"IMPRESSORA_USB\" = @IMPRESSORA_USB, \"IMPRESSORA_USB_PED\" = @IMPRESSORA_USB_PED," +
                " \"PERGUNTA_WHATS\" = @PERGUNTA_WHATS, \"USATEF\" = @USATEF, \"TEFIP\" = @TEFIP, \"TEFN" +
                "UMLOJA\" = @TEFNUMLOJA, \"TEFNUMTERMINAL\" = @TEFNUMTERMINAL, \"TEFPEDECPFPELOPINPAD" +
                "\" = @TEFPEDECPFPELOPINPAD, \"BALPORTA\" = @BALPORTA, \"BALBITS\" = @BALBITS, \"BALBAU" +
                "D\" = @BALBAUD, \"BALPARITY\" = @BALPARITY, \"BALMODELO\" = @BALMODELO, \"ACFILLPREFIX" +
                "\" = @ACFILLPREFIX, \"ACFILLMODE\" = @ACFILLMODE, \"ACREFERENCIA\" = @ACREFERENCIA, \"" +
                "SYSCOMISSAO\" = @SYSCOMISSAO, \"SATSERVTIMEOUT\" = @SATSERVTIMEOUT, \"SATLIFESIGNINT" +
                "ERVAL\" = @SATLIFESIGNINTERVAL, \"ACFILLDELAY\" = @ACFILLDELAY, \"SYSPERGUNTAWHATS\" " +
                "= @SYSPERGUNTAWHATS, \"SYSPARCELA\" = @SYSPARCELA, \"SYSEMITECOMPROVANTE\" = @SYSEMI" +
                "TECOMPROVANTE, \"INFORMA_MAQUININHA\" = @INFORMA_MAQUININHA, \"LAYOUT_SAT\" = @LAYOU" +
                "T_SAT, \"VINCULA_MAQ_CTA\" = @VINCULA_MAQ_CTA WHERE ((\"ID_MAC\" = @Original_ID_MAC)" +
                " AND (\"NO_CAIXA\" = @Original_NO_CAIXA) AND (\"EXIGE_SANGRIA\" = @Original_EXIGE_SA" +
                "NGRIA) AND (\"VALOR_MAX_CAIXA\" = @Original_VALOR_MAX_CAIXA) AND (\"BLOQUEIA_NO_LIM" +
                "ITE\" = @Original_BLOQUEIA_NO_LIMITE) AND (\"VALOR_DE_FOLGA\" = @Original_VALOR_DE_" +
                "FOLGA) AND (\"PERMITE_FOLGA_SANGRIA\" = @Original_PERMITE_FOLGA_SANGRIA) AND (\"INT" +
                "ERROMPE_NAO_ENCONTRADO\" = @Original_INTERROMPE_NAO_ENCONTRADO) AND ((@IsNull_MEN" +
                "SAGEM_CORTESIA = 1 AND \"MENSAGEM_CORTESIA\" IS NULL) OR (\"MENSAGEM_CORTESIA\" = @O" +
                "riginal_MENSAGEM_CORTESIA)) AND ((@IsNull_ICMS_CONT = 1 AND \"ICMS_CONT\" IS NULL)" +
                " OR (\"ICMS_CONT\" = @Original_ICMS_CONT)) AND ((@IsNull_CSOSN_CONT = 1 AND \"CSOSN" +
                "_CONT\" IS NULL) OR (\"CSOSN_CONT\" = @Original_CSOSN_CONT)) AND (\"PEDE_CPF\" = @Ori" +
                "ginal_PEDE_CPF) AND (\"PERMITE_ESTOQUE_NEGATIVO\" = @Original_PERMITE_ESTOQUE_NEGA" +
                "TIVO) AND (\"MODELO_CUPOM\" = @Original_MODELO_CUPOM) AND ((@IsNull_MENSAGEM_RODAP" +
                "E = 1 AND \"MENSAGEM_RODAPE\" IS NULL) OR (\"MENSAGEM_RODAPE\" = @Original_MENSAGEM_" +
                "RODAPE)) AND ((@IsNull_TRI_PDV_DT_UPD = 1 AND \"TRI_PDV_DT_UPD\" IS NULL) OR (\"TRI" +
                "_PDV_DT_UPD\" = @Original_TRI_PDV_DT_UPD)) AND ((@IsNull_MODELO_SAT = 1 AND \"MODE" +
                "LO_SAT\" IS NULL) OR (\"MODELO_SAT\" = @Original_MODELO_SAT)) AND ((@IsNull_SATSERV" +
                "IDOR = 1 AND \"SATSERVIDOR\" IS NULL) OR (\"SATSERVIDOR\" = @Original_SATSERVIDOR)) " +
                "AND ((@IsNull_SAT_CODATIV = 1 AND \"SAT_CODATIV\" IS NULL) OR (\"SAT_CODATIV\" = @Or" +
                "iginal_SAT_CODATIV)) AND ((@IsNull_SAT_USADO = 1 AND \"SAT_USADO\" IS NULL) OR (\"S" +
                "AT_USADO\" = @Original_SAT_USADO)) AND ((@IsNull_ECF_ATIVA = 1 AND \"ECF_ATIVA\" IS" +
                " NULL) OR (\"ECF_ATIVA\" = @Original_ECF_ATIVA)) AND ((@IsNull_ECF_PORTA = 1 AND \"" +
                "ECF_PORTA\" IS NULL) OR (\"ECF_PORTA\" = @Original_ECF_PORTA)) AND ((@IsNull_IMPRES" +
                "SORA_USB = 1 AND \"IMPRESSORA_USB\" IS NULL) OR (\"IMPRESSORA_USB\" = @Original_IMPR" +
                "ESSORA_USB)) AND ((@IsNull_IMPRESSORA_USB_PED = 1 AND \"IMPRESSORA_USB_PED\" IS NU" +
                "LL) OR (\"IMPRESSORA_USB_PED\" = @Original_IMPRESSORA_USB_PED)) AND (\"PERGUNTA_WHA" +
                "TS\" = @Original_PERGUNTA_WHATS) AND (\"USATEF\" = @Original_USATEF) AND ((@IsNull_" +
                "TEFIP = 1 AND \"TEFIP\" IS NULL) OR (\"TEFIP\" = @Original_TEFIP)) AND ((@IsNull_TEF" +
                "NUMLOJA = 1 AND \"TEFNUMLOJA\" IS NULL) OR (\"TEFNUMLOJA\" = @Original_TEFNUMLOJA)) " +
                "AND ((@IsNull_TEFNUMTERMINAL = 1 AND \"TEFNUMTERMINAL\" IS NULL) OR (\"TEFNUMTERMIN" +
                "AL\" = @Original_TEFNUMTERMINAL)) AND ((@IsNull_TEFPEDECPFPELOPINPAD = 1 AND \"TEF" +
                "PEDECPFPELOPINPAD\" IS NULL) OR (\"TEFPEDECPFPELOPINPAD\" = @Original_TEFPEDECPFPEL" +
                "OPINPAD)) AND (\"BALPORTA\" = @Original_BALPORTA) AND (\"BALBITS\" = @Original_BALBI" +
                "TS) AND (\"BALBAUD\" = @Original_BALBAUD) AND (\"BALPARITY\" = @Original_BALPARITY) " +
                "AND (\"BALMODELO\" = @Original_BALMODELO) AND (\"ACFILLPREFIX\" = @Original_ACFILLPR" +
                "EFIX) AND (\"ACFILLMODE\" = @Original_ACFILLMODE) AND (\"ACREFERENCIA\" = @Original_" +
                "ACREFERENCIA) AND (\"SYSCOMISSAO\" = @Original_SYSCOMISSAO) AND (\"SATSERVTIMEOUT\" " +
                "= @Original_SATSERVTIMEOUT) AND (\"SATLIFESIGNINTERVAL\" = @Original_SATLIFESIGNIN" +
                "TERVAL) AND (\"ACFILLDELAY\" = @Original_ACFILLDELAY) AND (\"SYSPERGUNTAWHATS\" = @O" +
                "riginal_SYSPERGUNTAWHATS) AND (\"SYSPARCELA\" = @Original_SYSPARCELA) AND (\"SYSEMI" +
                "TECOMPROVANTE\" = @Original_SYSEMITECOMPROVANTE) AND (\"INFORMA_MAQUININHA\" = @Ori" +
                "ginal_INFORMA_MAQUININHA) AND (\"LAYOUT_SAT\" = @Original_LAYOUT_SAT) AND (\"VINCUL" +
                "A_MAQ_CTA\" = @Original_VINCULA_MAQ_CTA))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@ID_MAC";
            param.Size = 12;
            param.IsNullable = true;
            param.SourceColumn = "ID_MAC";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@NO_CAIXA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "NO_CAIXA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@EXIGE_SANGRIA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "EXIGE_SANGRIA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@VALOR_MAX_CAIXA";
            param.DbType = global::System.Data.DbType.Double;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "VALOR_MAX_CAIXA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@BLOQUEIA_NO_LIMITE";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "BLOQUEIA_NO_LIMITE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@VALOR_DE_FOLGA";
            param.DbType = global::System.Data.DbType.Double;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "VALOR_DE_FOLGA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@PERMITE_FOLGA_SANGRIA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "PERMITE_FOLGA_SANGRIA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@INTERROMPE_NAO_ENCONTRADO";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "INTERROMPE_NAO_ENCONTRADO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@MENSAGEM_CORTESIA";
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = "MENSAGEM_CORTESIA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@ICMS_CONT";
            param.DbType = global::System.Data.DbType.Single;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "ICMS_CONT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@CSOSN_CONT";
            param.DbType = global::System.Data.DbType.Single;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "CSOSN_CONT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@PEDE_CPF";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "PEDE_CPF";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@PERMITE_ESTOQUE_NEGATIVO";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "PERMITE_ESTOQUE_NEGATIVO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@MODELO_CUPOM";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "MODELO_CUPOM";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@MENSAGEM_RODAPE";
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = "MENSAGEM_RODAPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@TRI_PDV_DT_UPD";
            param.DbType = global::System.Data.DbType.DateTime;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TRI_PDV_DT_UPD";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@MODELO_SAT";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "MODELO_SAT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SATSERVIDOR";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "SATSERVIDOR";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SAT_CODATIV";
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "SAT_CODATIV";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SIGN_AC";
            param.Size = 2147483647;
            param.IsNullable = true;
            param.SourceColumn = "SIGN_AC";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SAT_USADO";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "SAT_USADO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@ECF_ATIVA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "ECF_ATIVA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@ECF_PORTA";
            param.Size = 5;
            param.IsNullable = true;
            param.SourceColumn = "ECF_PORTA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IMPRESSORA_USB";
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "IMPRESSORA_USB";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IMPRESSORA_USB_PED";
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "IMPRESSORA_USB_PED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@PERGUNTA_WHATS";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "PERGUNTA_WHATS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@USATEF";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "USATEF";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@TEFIP";
            param.Size = 15;
            param.IsNullable = true;
            param.SourceColumn = "TEFIP";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@TEFNUMLOJA";
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TEFNUMLOJA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@TEFNUMTERMINAL";
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TEFNUMTERMINAL";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@TEFPEDECPFPELOPINPAD";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "TEFPEDECPFPELOPINPAD";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@BALPORTA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "BALPORTA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@BALBITS";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "BALBITS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@BALBAUD";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "BALBAUD";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@BALPARITY";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "BALPARITY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@BALMODELO";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "BALMODELO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@ACFILLPREFIX";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "ACFILLPREFIX";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@ACFILLMODE";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "ACFILLMODE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@ACREFERENCIA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "ACREFERENCIA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SYSCOMISSAO";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "SYSCOMISSAO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SATSERVTIMEOUT";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "SATSERVTIMEOUT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SATLIFESIGNINTERVAL";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "SATLIFESIGNINTERVAL";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@ACFILLDELAY";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "ACFILLDELAY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SYSPERGUNTAWHATS";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "SYSPERGUNTAWHATS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SYSPARCELA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "SYSPARCELA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@SYSEMITECOMPROVANTE";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "SYSEMITECOMPROVANTE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@INFORMA_MAQUININHA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "INFORMA_MAQUININHA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@LAYOUT_SAT";
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "LAYOUT_SAT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@VINCULA_MAQ_CTA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "VINCULA_MAQ_CTA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_ID_MAC";
            param.Size = 12;
            param.IsNullable = true;
            param.SourceColumn = "ID_MAC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_NO_CAIXA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "NO_CAIXA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_EXIGE_SANGRIA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "EXIGE_SANGRIA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_VALOR_MAX_CAIXA";
            param.DbType = global::System.Data.DbType.Double;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "VALOR_MAX_CAIXA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_BLOQUEIA_NO_LIMITE";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "BLOQUEIA_NO_LIMITE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_VALOR_DE_FOLGA";
            param.DbType = global::System.Data.DbType.Double;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "VALOR_DE_FOLGA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_PERMITE_FOLGA_SANGRIA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "PERMITE_FOLGA_SANGRIA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_INTERROMPE_NAO_ENCONTRADO";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "INTERROMPE_NAO_ENCONTRADO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_MENSAGEM_CORTESIA";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = "MENSAGEM_CORTESIA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_MENSAGEM_CORTESIA";
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = "MENSAGEM_CORTESIA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_ICMS_CONT";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "ICMS_CONT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_ICMS_CONT";
            param.DbType = global::System.Data.DbType.Single;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "ICMS_CONT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_CSOSN_CONT";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "CSOSN_CONT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_CSOSN_CONT";
            param.DbType = global::System.Data.DbType.Single;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "CSOSN_CONT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_PEDE_CPF";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "PEDE_CPF";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_PERMITE_ESTOQUE_NEGATIVO";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "PERMITE_ESTOQUE_NEGATIVO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_MODELO_CUPOM";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "MODELO_CUPOM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_MENSAGEM_RODAPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = "MENSAGEM_RODAPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_MENSAGEM_RODAPE";
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = "MENSAGEM_RODAPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_TRI_PDV_DT_UPD";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TRI_PDV_DT_UPD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_TRI_PDV_DT_UPD";
            param.DbType = global::System.Data.DbType.DateTime;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TRI_PDV_DT_UPD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_MODELO_SAT";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "MODELO_SAT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_MODELO_SAT";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "MODELO_SAT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_SATSERVIDOR";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "SATSERVIDOR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SATSERVIDOR";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "SATSERVIDOR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_SAT_CODATIV";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "SAT_CODATIV";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SAT_CODATIV";
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "SAT_CODATIV";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_SAT_USADO";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "SAT_USADO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SAT_USADO";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "SAT_USADO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_ECF_ATIVA";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "ECF_ATIVA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_ECF_ATIVA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "ECF_ATIVA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_ECF_PORTA";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 5;
            param.IsNullable = true;
            param.SourceColumn = "ECF_PORTA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_ECF_PORTA";
            param.Size = 5;
            param.IsNullable = true;
            param.SourceColumn = "ECF_PORTA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_IMPRESSORA_USB";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "IMPRESSORA_USB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_IMPRESSORA_USB";
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "IMPRESSORA_USB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_IMPRESSORA_USB_PED";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "IMPRESSORA_USB_PED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_IMPRESSORA_USB_PED";
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = "IMPRESSORA_USB_PED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_PERGUNTA_WHATS";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "PERGUNTA_WHATS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_USATEF";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "USATEF";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_TEFIP";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 15;
            param.IsNullable = true;
            param.SourceColumn = "TEFIP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_TEFIP";
            param.Size = 15;
            param.IsNullable = true;
            param.SourceColumn = "TEFIP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_TEFNUMLOJA";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TEFNUMLOJA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_TEFNUMLOJA";
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TEFNUMLOJA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_TEFNUMTERMINAL";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TEFNUMTERMINAL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_TEFNUMTERMINAL";
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "TEFNUMTERMINAL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@IsNull_TEFPEDECPFPELOPINPAD";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "TEFPEDECPFPELOPINPAD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_TEFPEDECPFPELOPINPAD";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "TEFPEDECPFPELOPINPAD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_BALPORTA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "BALPORTA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_BALBITS";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "BALBITS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_BALBAUD";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "BALBAUD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_BALPARITY";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "BALPARITY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_BALMODELO";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "BALMODELO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_ACFILLPREFIX";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "ACFILLPREFIX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_ACFILLMODE";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "ACFILLMODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_ACREFERENCIA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "ACREFERENCIA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SYSCOMISSAO";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "SYSCOMISSAO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SATSERVTIMEOUT";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "SATSERVTIMEOUT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SATLIFESIGNINTERVAL";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "SATLIFESIGNINTERVAL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_ACFILLDELAY";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "ACFILLDELAY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SYSPERGUNTAWHATS";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "SYSPERGUNTAWHATS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SYSPARCELA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "SYSPARCELA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_SYSEMITECOMPROVANTE";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = "SYSEMITECOMPROVANTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_INFORMA_MAQUININHA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "INFORMA_MAQUININHA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_LAYOUT_SAT";
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "LAYOUT_SAT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@Original_VINCULA_MAQ_CTA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = "VINCULA_MAQ_CTA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::FirebirdSql.Data.FirebirdClient.FbConnection();
            this._connection.ConnectionString = global::PDV_WPF.Properties.Settings.Default.FDBConnString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::FirebirdSql.Data.FirebirdClient.FbCommand[51];
            this._commandCollection[0] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ""ID_MAC"", ""NO_CAIXA"", ""EXIGE_SANGRIA"", ""VALOR_MAX_CAIXA"", ""BLOQUEIA_NO_LIMITE"", ""VALOR_DE_FOLGA"", ""PERMITE_FOLGA_SANGRIA"", ""INTERROMPE_NAO_ENCONTRADO"", ""MENSAGEM_CORTESIA"", ""ICMS_CONT"", ""CSOSN_CONT"", ""PEDE_CPF"", ""PERMITE_ESTOQUE_NEGATIVO"", ""MODELO_CUPOM"", ""MENSAGEM_RODAPE"", ""TRI_PDV_DT_UPD"", ""MODELO_SAT"", ""SATSERVIDOR"", ""SAT_CODATIV"", ""SIGN_AC"", ""SAT_USADO"", ""ECF_ATIVA"", ""ECF_PORTA"", ""IMPRESSORA_USB"", ""IMPRESSORA_USB_PED"", ""PERGUNTA_WHATS"", ""USATEF"", ""TEFIP"", ""TEFNUMLOJA"", ""TEFNUMTERMINAL"", ""TEFPEDECPFPELOPINPAD"", ""BALPORTA"", ""BALBITS"", ""BALBAUD"", ""BALPARITY"", ""BALMODELO"", ""ACFILLPREFIX"", ""ACFILLMODE"", ""ACREFERENCIA"", ""SYSCOMISSAO"", ""SATSERVTIMEOUT"", ""SATLIFESIGNINTERVAL"", ""ACFILLDELAY"", ""SYSPERGUNTAWHATS"", ""SYSPARCELA"", ""SYSEMITECOMPROVANTE"", ""INFORMA_MAQUININHA"", ""LAYOUT_SAT"", ""VINCULA_MAQ_CTA"" FROM ""TRI_PDV_CONFIG""";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_CRIATABELAS\r\nRETURNS (\r\nerro VARCHAR(64)\r\n)\r\nAS\r" +
                "\nBEGIN\r\n\r\nerro = \'create gen_pdv_log\';\r\nif (NOT exists(SELECT 1 FROM RDB$GENERAT" +
                "ORS WHERE RDB$Generator_name= \'GEN_TRI_LOG\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE G" +
                "ENERATOR GEN_TRI_LOG;\';\r\n\r\nerro = \'create gen_pdv_oper\';\r\nif (NOT exists(SELECT " +
                "1 FROM RDB$GENERATORS WHERE RDB$Generator_name= \'GEN_TRI_OPER\'))\r\nthen\r\nEXECUTE " +
                "STATEMENT \'CREATE GENERATOR GEN_TRI_OPER;\';\r\n\r\nerro = \'create gen_pdv_nsu\';\r\nif " +
                "(NOT exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= \'GEN_TRI_NSU\'" +
                "))\r\nthen\r\nEXECUTE STATEMENT \'CREATE GENERATOR GEN_TRI_NSU;\';\r\n\r\nerro = \'create t" +
                "ri_pdv_setup\';\r\nif (not exists(select 1 from RDB$RELATIONS where rdb$relation_na" +
                "me = \'TRI_PDV_SETUP\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TABLE TRI_PDV_SETUP (ID_" +
                "DUMMY SMALLINT DEFAULT 1, EXECUCAO SMALLINT DEFAULT 0, VERSAO VARCHAR(36) NOT NU" +
                "LL, ULTIMA_AT DATE NOT NULL, DT_INSTALACAO DATE NOT NULL);\';\r\n\r\nerro = \'create t" +
                "ri_pdv_users\';\r\nif (not exists(select 1 from RDB$RELATIONS where rdb$relation_na" +
                "me = \'TRI_PDV_USERS\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TABLE TRI_PDV_USERS (ID_" +
                "USER SMALLINT NOT NULL, USERNAME VARCHAR(64) NOT NULL, PASSWORD VARCHAR(32) NOT " +
                "NULL, GERENCIA VARCHAR(8) NOT NULL, ATIVO VARCHAR(8) DEFAULT \'\'SIM\'\' NOT NULL, P" +
                "RIMARY KEY(ID_USER), UNIQUE(USERNAME));\';\r\n\r\nerro = \'create tri_pdv_sat_env\';\r\ni" +
                "f (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = \'TRI_PDV_SAT" +
                "_ENV\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TABLE TRI_PDV_SAT_ENV (ID_TRANSACAO INT" +
                "EGER NOT NULL, NUM_CAIXA INTEGER NOT NULL, XML_A_ENV BLOB NOT NULL, PROCESSADO C" +
                "HAR(1) NOT NULL, HORAATUAL TIMESTAMP NOT NULL, PRIMARY KEY (ID_TRANSACAO));\';\r\n\r" +
                "\nerro = \'create tri_pdv_sat_rec\';\r\nif (not exists(select 1 from RDB$RELATIONS wh" +
                "ere rdb$relation_name = \'TRI_PDV_SAT_REC\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TAB" +
                "LE TRI_PDV_SAT_REC (ID_TRANSACAO INTEGER NOT NULL, NUM_CAIXA INTEGER NOT NULL, X" +
                "ML_RECEB BLOB, RETORNO_SAT VARCHAR(10), PROCESSADO CHAR(1) NOT NULL, HORAATUAL T" +
                "IMESTAMP NOT NULL, PRIMARY KEY (ID_TRANSACAO));\';\r\n\r\nerro = \'create tri_pdv_conf" +
                "ig\';\r\nif (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = \'TRI_" +
                "PDV_CONFIG\'))\r\nTHEN\r\nEXECUTE STATEMENT \'CREATE TABLE TRI_PDV_CONFIG (ID_MAC VARC" +
                "HAR(12) NOT NULL,NO_CAIXA SMALLINT NOT NULL,EXIGE_SANGRIA CHAR(1) NOT NULL,VALOR" +
                "_MAX_CAIXA DOUBLE PRECISION NOT NULL,BLOQUEIA_NO_LIMITE CHAR(1) NOT NULL,VALOR_D" +
                "E_FOLGA DOUBLE PRECISION NOT NULL,PERMITE_FOLGA_SANGRIA CHAR(1) NOT NULL,INTERRO" +
                "MPE_NAO_ENCONTRADO CHAR(1) NOT NULL,MENSAGEM_CORTESIA VARCHAR(100),ICMS_CONT FLO" +
                "AT,CSOSN_CONT FLOAT,PEDE_CPF INT NOT NULL, PERMITE_ESTOQUE_NEGATIVO INT NOT NULL" +
                ", MODELO_CUPOM SMALLINT DEFAULT 1 NOT NULL, PRIMARY KEY(ID_MAC));\';\r\n\r\nerro = \'c" +
                "reate tri_pdv_nsu\';\r\nif (not exists(select 1 from RDB$RELATIONS where rdb$relati" +
                "on_name = \'TRI_PDV_NSU\'))\r\nTHEN\r\nEXECUTE STATEMENT \'CREATE TABLE TRI_PDV_NSU (ID" +
                "_TEF INTEGER NOT NULL, ID_CUPOM INTEGER NOT NULL, NSU VARCHAR(40) NOT NULL, REDE" +
                "_ADQ VARCHAR(3) NOT NULL, AUTORIZ VARCHAR(6), CONSTRAINT TRI_PDV_NSU_PK PRIMARY " +
                "KEY (ID_TEF), CONSTRAINT TRI_PDV_NSU_TB_CUPOM_FK FOREIGN KEY (ID_CUPOM) REFERENC" +
                "ES TB_CUPOM(ID_CUPOM));\';\r\n\r\nerro = \'create tri_pdv_oper\';\r\nif (not exists(selec" +
                "t 1 from RDB$RELATIONS where rdb$relation_name = \'TRI_PDV_OPER\'))\r\nthen\r\nEXECUTE" +
                " STATEMENT \'CREATE TABLE TRI_PDV_OPER ( ID_CAIXA INTEGER NOT NULL , DIN NUMERIC(" +
                "18,4) NOT NULL , CHEQUE NUMERIC(18,4) NOT NULL , CREDITO NUMERIC(18,4) NOT NULL " +
                ", DEBITO NUMERIC(18,4) NOT NULL , LOJA NUMERIC(18,4) NOT NULL , ALIMENTACAO NUME" +
                "RIC(18,4) NOT NULL , REFEICAO NUMERIC(18,4) NOT NULL , PRESENTE NUMERIC(18,4) NO" +
                "T NULL , COMBUSTIVEL NUMERIC(18,4) NOT NULL , OUTROS NUMERIC(18,4) NOT NULL , EX" +
                "TRA_1 NUMERIC(18,4) NOT NULL , EXTRA_2 NUMERIC(18,4) NOT NULL , EXTRA_3 NUMERIC(" +
                "18,4) NOT NULL , EXTRA_4 NUMERIC(18,4) NOT NULL , EXTRA_5 NUMERIC(18,4) NOT NULL" +
                " , EXTRA_6 NUMERIC(18,4) NOT NULL , EXTRA_7 NUMERIC(18,4) NOT NULL , EXTRA_8 NUM" +
                "ERIC(18,4) NOT NULL , EXTRA_9 NUMERIC(18,4) NOT NULL , EXTRA_10 NUMERIC(18,4) NO" +
                "T NULL , CURRENTTIME TIMESTAMP NOT NULL , ABERTO VARCHAR(1) NOT NULL , HASH VARC" +
                "HAR(32) NOT NULL , SANGRIAS NUMERIC(18,4) NOT NULL , SUPRIMENTOS NUMERIC(18,4) N" +
                "OT NULL , TROCAS NUMERIC(18,4) NOT NULL , FECHADO TIMESTAMP , ID_OPER INTEGER NO" +
                "T NULL , ID_USER INTEGER NOT NULL , CONSTRAINT TRI_PDV_OPER_PK PRIMARY KEY (ID_O" +
                "PER) ) ;\';\r\n\r\nerro = \'create tri_pdv_fechamentos\';\r\nif (not exists(select 1 from" +
                " RDB$RELATIONS where rdb$relation_name = \'TRI_PDV_FECHAMENTOS\'))\r\nthen\r\nEXECUTE " +
                "STATEMENT \'CREATE TABLE TRI_PDV_FECHAMENTOS ( DIN NUMERIC(18, 4) , CHEQUE NUMERI" +
                "C(18, 4) , CREDITO NUMERIC(18, 4) , DEBITO NUMERIC(18, 4) , LOJA NUMERIC(18, 4) " +
                ", ALIMENTACAO NUMERIC(18, 4) , REFEICAO NUMERIC(18, 4) , PRESENTE NUMERIC(18, 4)" +
                " , COMBUSTIVEL NUMERIC(18, 4) , OUTROS NUMERIC(18, 4) , EXTRA_1 NUMERIC(18, 4) ," +
                " EXTRA_2 NUMERIC(18, 4) , EXTRA_3 NUMERIC(18, 4) , EXTRA_4 NUMERIC(18, 4) , EXTR" +
                "A_5 NUMERIC(18, 4) , EXTRA_6 NUMERIC(18, 4) , EXTRA_7 NUMERIC(18, 4) , EXTRA_8 N" +
                "UMERIC(18, 4) , EXTRA_9 NUMERIC(18, 4) , EXTRA_10 NUMERIC(18, 4) , SANGRIAS NUME" +
                "RIC(18, 4) , SUPRIMENTOS NUMERIC(18, 4) , TROCAS NUMERIC(18, 4) , OPERADOR INTEG" +
                "ER NOT NULL , ID_CAIXA INTEGER NOT NULL , FECHADO TIMESTAMP NOT NULL , CONSTRAIN" +
                "T TRI_PDV_FECHAMENTOS_PK PRIMARY KEY (ID_CAIXA,FECHADO) ) ;\';\r\n\r\n\r\nerro = \'creat" +
                "e pdv_log\';\r\nif (not exists(select 1 from RDB$RELATIONS where rdb$relation_name " +
                "= \'TRI_PDV_LOG\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TABLE TRI_PDV_LOG (ID_ENTRY I" +
                "NTEGER NOT NULL, METODO VARCHAR(32) NOT NULL, INFO VARCHAR(128) NOT NULL, RESULT" +
                "ADO SMALLINT NOT NULL, TERMINAL VARCHAR(8) NOT NULL, \"TIMESTAMP\" TIMESTAMP NOT N" +
                "ULL, PRIMARY KEY(ID_ENTRY));\';\r\n\r\nerro = \'create triger_log\';\r\nif (not exists(se" +
                "lect 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TRI_LOG_TRI\'))\r\nthen\r\nEXECUTE" +
                " STATEMENT \'CREATE TRIGGER TRI_LOG_TRI for TRI_PDV_LOG active before INSERT as b" +
                "egin new.ID_ENTRY = next value for GEN_TRI_LOG; end;\';\r\n\r\nerro = \'create triger_" +
                "oper\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TRI_" +
                "OPER_TRI\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TRIGGER TRI_OPER_TRI for TRI_PDV_OP" +
                "ER active before INSERT as begin new.ID_OPER = next value for GEN_TRI_OPER; end;" +
                "\';\r\n\r\nerro = \'create pdv_metodos\';\r\nif (not exists(select 1 from RDB$RELATIONS w" +
                "here rdb$relation_name = \'TRI_PDV_METODOS\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TA" +
                "BLE TRI_PDV_METODOS (ID_PAGAMENTO INTEGER NOT NULL, DESCRICAO VARCHAR(255), DIAS" +
                " INTEGER, METODO VARCHAR(1) DEFAULT \'\'C\'\' NOT NULL, PGTOCFE VARCHAR(2) DEFAULT \'" +
                "\'01\'\' NOT NULL, ATIVO VARCHAR(1) NOT NULL, PRIMARY KEY (ID_PAGAMENTO));\';\r\n\r\nerr" +
                "o = \'create pdv_rel_metodo\';\r\nif (not exists(select 1 from RDB$RELATIONS where r" +
                "db$relation_name = \'TRI_PDV_REL_METODO_PAGTO\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE" +
                " TABLE TRI_PDV_REL_METODO_PAGTO (ID_PAGAMENTO INTEGER, ID_FMAPGTO SMALLINT, CONS" +
                "TRAINT FK_METODO_CLI FOREIGN KEY (ID_FMAPGTO) REFERENCES TB_FORMA_PAGTO_SIS(ID_F" +
                "MAPGTO), CONSTRAINT FK_METODO_TRI FOREIGN KEY (ID_PAGAMENTO) REFERENCES TRI_PDV_" +
                "METODOS(ID_PAGAMENTO));\';\r\n\r\nerro = \'create fk_metodo_cli\';\r\nif (not exists(sele" +
                "ct 1 from RDB$INDICES where rdb$index_name = \'FK_METODO_CLI\'))\r\nthen\r\nEXECUTE ST" +
                "ATEMENT \'CREATE INDEX FK_METODO_CLI ON TRI_PDV_REL_METODO_PAGTO (ID_FMAPGTO);\';\r" +
                "\n\r\nerro = \'create fk_metodo_tri\';\r\nif (not exists(select 1 from RDB$INDICES wher" +
                "e rdb$index_name = \'FK_METODO_TRI\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE INDEX FK_M" +
                "ETODO_TRI ON TRI_PDV_REL_METODO_PAGTO (ID_PAGAMENTO);\';\r\n\r\nerro = \'create PK_TB_" +
                "EMITENTE\';\r\nif (not exists(select 1 from RDB$INDICES where rdb$index_name = \'PK_" +
                "TB_EMITENTE\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TABLE TB_EMITENTE ADD CONSTRAINT " +
                "PK_TB_EMITENTE PRIMARY KEY (CNPJ);\';\r\n\r\n\r\n\r\nerro = \'create IDX_TB_CUPOM_DESC\';\r\n" +
                "if (not exists(select 1 from RDB$INDEX_SEGMENTS where rdb$index_name = \'IDX_TB_C" +
                "UPOM_DESC\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE DESCENDING INDEX IDX_TB_CUPOM_DESC" +
                " ON TB_CUPOM (ID_CUPOM);\';\r\n\r\nerro = \'create IDX_TB_CUPOM_ITEM_DESC\';\r\nif (not e" +
                "xists(select 1 from RDB$INDEX_SEGMENTS where rdb$index_name = \'IDX_TB_CUPOM_ITEM" +
                "_DESC\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE DESCENDING INDEX IDX_TB_CUPOM_ITEM_DES" +
                "C ON TB_CUPOM_ITEM (ID_ITEMCUP);\';\r\n\r\nerro = \'create IDX_TB_MOVDIARIO_DESC\';\r\nif" +
                " (not exists(select 1 from RDB$INDEX_SEGMENTS where rdb$index_name = \'IDX_TB_MOV" +
                "DIARIO_DESC\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE DESCENDING INDEX IDX_TB_MOVDIARI" +
                "O_DESC ON TB_MOVDIARIO (ID_MOVTO);\';\r\n\r\nerro = \'create IDX_TB_CONTA_RECEBER_DESC" +
                "\';\r\nif (not exists(select 1 from RDB$INDEX_SEGMENTS where rdb$index_name = \'IDX_" +
                "TB_CONTA_RECEBER_DESC\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE DESCENDING INDEX IDX_T" +
                "B_CONTA_RECEBER_DESC ON TB_CONTA_RECEBER (ID_CTAREC);\';\r\n\r\nerro = \'create PK_TB_" +
                "EST_PRODUTO\';\r\nif (not exists(select 1 from RDB$INDICES where rdb$index_name = \'" +
                "PK_TB_EST_PRODUTO\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TABLE TB_EST_PRODUTO ADD CO" +
                "NSTRAINT PK_TB_EST_PRODUTO PRIMARY KEY (ID_IDENTIFICADOR);\';\r\n\r\nerro = \'create T" +
                "RI_PDV_TERMINAL_USUARIO\';\r\nif (not exists (select 1 from RDB$RELATIONS where rdb" +
                "$relation_name = \'TRI_PDV_TERMINAL_USUARIO\'))\r\nthen\r\nexecute statement \'CREATE T" +
                "ABLE TRI_PDV_TERMINAL_USUARIO (ID_OPER INTEGER NOT NULL, NUM_CAIXA INTEGER NOT N" +
                "ULL, STATUS CHAR(1) NOT NULL, TS_ABERTURA TIMESTAMP NOT NULL, TS_FECHAMENTO TIME" +
                "STAMP, ID_USER INTEGER NOT NULL, CONSTRAINT PK_TRI_PDV_TERM_USUARIO PRIMARY KEY " +
                "(ID_OPER));\';\r\n\r\nerro = \'create gen_tri_pdv_term_usuario\';\r\nif (NOT exists(SELEC" +
                "T 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= \'GEN_TRI_PDV_TERM_USUARIO\'))\r\n" +
                "then\r\nEXECUTE STATEMENT \'CREATE GENERATOR GEN_TRI_PDV_TERM_USUARIO;\';\r\n\r\nerro = " +
                "\'create TRI_PDV_VALID_ONLINE\';\r\nif (not exists (select 1 from RDB$RELATIONS wher" +
                "e rdb$relation_name = \'TRI_PDV_VALID_ONLINE\'))\r\nthen\r\nexecute statement \'CREATE " +
                "TABLE TRI_PDV_VALID_ONLINE (PK_SERIAL VARCHAR(18), LASTVALIDCHECK TIMESTAMP, LAS" +
                "TSERIALCHECK TIMESTAMP) ;\';\r\n\r\nerro = \'create TRI_PDV_VALID_OFFLINE\';\r\nif (not e" +
                "xists (select 1 from RDB$RELATIONS where rdb$relation_name = \'TRI_PDV_VALID_OFFL" +
                "INE\'))\r\nthen\r\nexecute statement \'CREATE TABLE TRI_PDV_VALID_OFFLINE (LASTLOG INT" +
                "EGER, UNIKEY INTEGER, UNIKEYHD VARCHAR(12));\';\r\n\r\nerro = \'create TB_CUPOM_STATUS" +
                "_IDX\';\r\nif (not exists (select 1 from RDB$INDICES where rdb$index_name = \'TB_CUP" +
                "OM_STATUS_IDX\'))\r\nthen\r\nexecute statement \'CREATE INDEX TB_CUPOM_STATUS_IDX ON T" +
                "B_CUPOM (STATUS) ;\';\r\nerro = \'create TB_CUPOM_DT_CUPOM_IDX\';\r\nif (not exists (se" +
                "lect 1 from RDB$INDICES where rdb$index_name = \'TB_CUPOM_DT_CUPOM_IDX\'))\r\nthen\r\n" +
                "execute statement \'CREATE INDEX TB_CUPOM_DT_CUPOM_IDX ON TB_CUPOM (DT_CUPOM) ;\';" +
                "\r\nerro = \'create TB_CUPOM_HR_CUPOM_IDX\';\r\nif (not exists (select 1 from RDB$INDI" +
                "CES where rdb$index_name = \'TB_CUPOM_HR_CUPOM_IDX\'))\r\nthen\r\nexecute statement \'C" +
                "REATE INDEX TB_CUPOM_HR_CUPOM_IDX ON TB_CUPOM (HR_CUPOM) ;\';\r\n\r\nerro = \'create g" +
                "en_maitre_pedido\';\r\nif (NOT exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Genera" +
                "tor_name= \'GEN_MAITRE_PEDIDO\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE GENERATOR GEN_M" +
                "AITRE_PEDIDO;\';\r\n\r\nerro = \'create TRI_MAIT_PEDIDO\';\r\nif (not exists(select 1 fro" +
                "m RDB$RELATIONS where rdb$relation_name = \'TRI_MAIT_PEDIDO\'))\r\nthen\r\nEXECUTE STA" +
                "TEMENT \'CREATE TABLE TRI_MAIT_PEDIDO ( ID_MAIT_PEDIDO INTEGER NOT NULL , TS_EMIS" +
                "SAO TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, ID_USER INTEGER DEFAULT 0 NOT " +
                "NULL , NR_PEDIDO SMALLINT DEFAULT 1 NOT NULL, ABERTO VARCHAR(1) DEFAULT \'\'S\'\' NO" +
                "T NULL , OBSERVACAO BLOB SUB_TYPE 1 , ID_CAIXA INTEGER DEFAULT 0 NOT NULL , CONS" +
                "TRAINT TRI_MAIT_PEDIDO_PK PRIMARY KEY (ID_MAIT_PEDIDO) ) ;\';\r\nerro = \'create TRI" +
                "_MAIT_PEDIDO_ABERTO_IDX\';\r\nif (not exists (select 1 from RDB$INDICES where rdb$i" +
                "ndex_name = \'TRI_MAIT_PEDIDO_ABERTO_IDX\'))\r\nthen\r\nexecute statement \'CREATE INDE" +
                "X TRI_MAIT_PEDIDO_ABERTO_IDX ON TRI_MAIT_PEDIDO (ABERTO) ;\';\r\nerro = \'create TRI" +
                "_MAIT_PEDIDO_NR_PEDIDO_IDX\';\r\nif (not exists (select 1 from RDB$INDICES where rd" +
                "b$index_name = \'TRI_MAIT_PEDIDO_NR_PEDIDO_IDX\'))\r\nthen\r\nexecute statement \'CREAT" +
                "E INDEX TRI_MAIT_PEDIDO_NR_PEDIDO_IDX ON TRI_MAIT_PEDIDO (NR_PEDIDO) ;\';\r\nerro =" +
                " \'create TRI_MAIT_PEDIDO_TS_EMISSAO_IDX\';\r\nif (not exists (select 1 from RDB$IND" +
                "ICES where rdb$index_name = \'TRI_MAIT_PEDIDO_TS_EMISSAO_IDX\'))\r\nthen\r\nexecute st" +
                "atement \'CREATE INDEX TRI_MAIT_PEDIDO_TS_EMISSAO_IDX ON TRI_MAIT_PEDIDO (TS_EMIS" +
                "SAO) ;\';\r\nerro = \'create TRI_MAIT_PEDIDO_ID_CAIXA_IDX\';\r\nif (not exists (select " +
                "1 from RDB$INDICES where rdb$index_name = \'TRI_MAIT_PEDIDO_ID_CAIXA_IDX\'))\r\nthen" +
                "\r\nexecute statement \'CREATE INDEX TRI_MAIT_PEDIDO_ID_CAIXA_IDX ON TRI_MAIT_PEDID" +
                "O (ID_CAIXA) ;\';\r\n\r\nerro = \'create TRI_MAIT_PEDIDO_ITEM\';\r\nif (not exists(select" +
                " 1 from RDB$RELATIONS where rdb$relation_name = \'TRI_MAIT_PEDIDO_ITEM\'))\r\nthen\r\n" +
                "EXECUTE STATEMENT \'CREATE TABLE TRI_MAIT_PEDIDO_ITEM ( ID_MAIT_PEDIDO_ITEM INTEG" +
                "ER NOT NULL, ID_MAIT_PEDIDO INTEGER NOT NULL, ID_IDENTIFICADOR INTEGER NOT NULL," +
                " QTD_ITEM NUMERIC(18,4) DEFAULT 0 NOT NULL, CONSTRAINT TRI_MAIT_PEDIDO_ITEM_PK P" +
                "RIMARY KEY (ID_MAIT_PEDIDO_ITEM), CONSTRAINT TRI_MAIT_PED_ITEM_EST_IDENT_FK FORE" +
                "IGN KEY (ID_IDENTIFICADOR) REFERENCES TB_EST_IDENTIFICADOR(ID_IDENTIFICADOR), CO" +
                "NSTRAINT TRI_MAIT_PED_ITEM_PEDIDO_FK FOREIGN KEY (ID_MAIT_PEDIDO) REFERENCES TRI" +
                "_MAIT_PEDIDO(ID_MAIT_PEDIDO) ) ;\';\r\n\r\nerro = \'create TRI_MAIT_PED_ITEM_COMPPROD\'" +
                ";\r\nif (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = \'TRI_MAI" +
                "T_PED_ITEM_COMPPROD\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TABLE TRI_MAIT_PED_ITEM_" +
                "COMPPROD ( ID_MAIT_PEDIDO_ITEM INTEGER NOT NULL, ID_COMPPRO INTEGER NOT NULL, CO" +
                "NSTRAINT TRI_MAIT_PED_ITEM_COMPPROD_PK PRIMARY KEY (ID_MAIT_PEDIDO_ITEM,ID_COMPP" +
                "RO), CONSTRAINT TRI_MAIT_PED_ITEM_COMPPROD_FK FOREIGN KEY (ID_MAIT_PEDIDO_ITEM) " +
                "REFERENCES TRI_MAIT_PEDIDO_ITEM(ID_MAIT_PEDIDO_ITEM), CONSTRAINT TRI_MT_PDITM_CO" +
                "MPPROD_CMPRD_FK FOREIGN KEY (ID_COMPPRO) REFERENCES TB_EST_COMP_PRODUCAO(ID_COMP" +
                "PRO) ) ;\';\r\n\r\nerro = \'create TRI_MAIT_PEDIDO_CUPOM\';\r\nif (not exists(select 1 fr" +
                "om RDB$RELATIONS where rdb$relation_name = \'TRI_MAIT_PEDIDO_CUPOM\'))\r\nthen\r\nEXEC" +
                "UTE STATEMENT \'CREATE TABLE TRI_MAIT_PEDIDO_CUPOM ( ID_MAIT_PEDIDO INTEGER NOT N" +
                "ULL, ID_CUPOM INTEGER NOT NULL, CONSTRAINT TRI_MAIT_PEDIDO_CUPOM_PK PRIMARY KEY " +
                "(ID_MAIT_PEDIDO,ID_CUPOM), CONSTRAINT TRI_MAIT_PED_CUPOM_MAIT_PED_FK FOREIGN KEY" +
                " (ID_MAIT_PEDIDO) REFERENCES TRI_MAIT_PEDIDO(ID_MAIT_PEDIDO), CONSTRAINT TRI_MAI" +
                "T_PED_CUPOM_TB_CUPOM_FK FOREIGN KEY (ID_CUPOM) REFERENCES TB_CUPOM(ID_CUPOM) ) ;" +
                "\';\r\n\r\nerro = \'create GEN_MAIT_PEDIDO_ID\';\r\nif (NOT exists(SELECT 1 FROM RDB$GENE" +
                "RATORS WHERE RDB$Generator_name= \'GEN_MAIT_PEDIDO_ID\'))\r\nthen\r\nEXECUTE STATEMENT" +
                " \'CREATE SEQUENCE GEN_MAIT_PEDIDO_ID;\';\r\n\r\nerro = \'create TRI_MAIT_PED_ITEM_CUPO" +
                "M_ITEM\';\r\nif (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = \'" +
                "TRI_MAIT_PED_ITEM_CUPOM_ITEM\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TABLE TRI_MAIT_" +
                "PED_ITEM_CUPOM_ITEM ( ID_MAIT_PEDIDO_ITEM INTEGER NOT NULL, ID_ITEMCUP INTEGER N" +
                "OT NULL, CONSTRAINT TRI_MAIT_PED_ITEM_CUPOM_ITEM_PK PRIMARY KEY (ID_MAIT_PEDIDO_" +
                "ITEM,ID_ITEMCUP), CONSTRAINT TRI_MT_PDITM_CPM_ITM_CPMITM_FK FOREIGN KEY (ID_ITEM" +
                "CUP) REFERENCES TB_CUPOM_ITEM(ID_ITEMCUP), CONSTRAINT TRI_MT_PDITM_CPM_ITM_MT_PD" +
                "TM_FK FOREIGN KEY (ID_MAIT_PEDIDO_ITEM) REFERENCES TRI_MAIT_PEDIDO_ITEM(ID_MAIT_" +
                "PEDIDO_ITEM) ) ;\';\r\n\r\nerro = \'create gen_tri_mait_ped_item_id\';\r\nif (NOT exists(" +
                "SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= \'GEN_TRI_MAIT_PED_ITEM_ID" +
                "\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE GENERATOR GEN_TRI_MAIT_PED_ITEM_ID;\';\r\n\r\ner" +
                "ro = \'create TRI_PDV_SAT_XML\';\r\nif (not exists(select 1 from RDB$RELATIONS where" +
                " rdb$relation_name = \'TRI_PDV_SAT_XML\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TABLE " +
                "TRI_PDV_SAT_XML (ID_XML INTEGER NOT NULL, XML BLOB SUB_TYPE 1 NOT NULL, VALOR_TO" +
                "TAL NUMERIC(18,4) NOT NULL, TS_VENDA TIMESTAMP NOT NULL, CHAVE_CFE VARCHAR(44) N" +
                "OT NULL, CANCEL_CFE CHAR(1) NOT NULL, NUM_CAIXA INTEGER NOT NULL, ID_CUPOM INTEG" +
                "ER NOT NULL);\';\r\n\r\nerro = \'create GEN_TRI_PDV_SAT_XML_ID\';\r\nif (NOT exists(SELEC" +
                "T 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= \'GEN_TRI_PDV_SAT_XML_ID\'))\r\nth" +
                "en\r\nEXECUTE STATEMENT \'CREATE SEQUENCE GEN_TRI_PDV_SAT_XML_ID;\';\r\n\r\nerro = \'crea" +
                "te TRI_PDV_SAT_XML_ID\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRI" +
                "GGER_NAME = \'TRI_PDV_SAT_XML_ID\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TRIGGER TRI_" +
                "PDV_SAT_XML_ID FOR TRI_PDV_SAT_XML BEFORE INSERT AS BEGIN IF ((NEW.ID_XML IS nul" +
                "l) OR (NEW.ID_XML = 0)) THEN BEGIN NEW.ID_XML = (SELECT NEXT VALUE FOR GEN_TRI_P" +
                "DV_SAT_XML_ID FROM RDB$DATABASE); END END;\';\r\n\r\nerro = \'create TRI_PDV_TERMARIO_" +
                "NUM_CAIXA_IDX\';\r\nif (not exists (select 1 from RDB$INDICES where rdb$index_name " +
                "= \'TRI_PDV_TERMARIO_NUM_CAIXA_IDX\'))\r\nthen\r\nexecute statement \'CREATE INDEX TRI_" +
                "PDV_TERMARIO_NUM_CAIXA_IDX ON TRI_PDV_TERMINAL_USUARIO (NUM_CAIXA);\';\r\n\r\nerro = " +
                "\'create TRI_PDV_TERMARIO_NUM_CAIXA_IDX2\';\r\nif (not exists (select 1 from RDB$IND" +
                "ICES where rdb$index_name = \'TRI_PDV_TERMARIO_NUM_CAIXA_IDX2\'))\r\nthen\r\nexecute s" +
                "tatement \'CREATE INDEX TRI_PDV_TERMARIO_NUM_CAIXA_IDX2 ON TRI_PDV_TERMINAL_USUAR" +
                "IO (NUM_CAIXA , TS_ABERTURA , ID_USER);\';\r\n\r\nerro = \'create TRI_PDV_SANSUP\';\r\nif" +
                " (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = \'TRI_PDV_SANS" +
                "UP\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TABLE TRI_PDV_SANSUP (ID_SANSUP INTEGER N" +
                "OT NULL, ID_CAIXA INTEGER NOT NULL, TS_ABERTURA TIMESTAMP NOT NULL, OPERACAO CHA" +
                "R(1) NOT NULL, VALOR NUMERIC(18,4) NOT NULL, TS_OPERACAO TIMESTAMP NOT NULL, CON" +
                "STRAINT TRI_PDV_SANSUP_PK PRIMARY KEY (ID_SANSUP));\';\r\n\r\nerro = \'create GEN_TRI_" +
                "SANSUP\';\r\nif (NOT exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= " +
                "\'GEN_TRI_SANSUP\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE SEQUENCE GEN_TRI_SANSUP;\';\r\n" +
                "\r\nerro = \'create TRI_SANSUP_TRI\';\r\nif (not exists(select 1 from RDB$TRIGGERS whe" +
                "re RDB$TRIGGER_NAME = \'TRI_SANSUP_TRI\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TRIGGE" +
                "R TRI_SANSUP_TRI FOR TRI_PDV_SANSUP BEFORE INSERT as begin new.ID_SANSUP = next " +
                "value for GEN_TRI_SANSUP; END;\';\r\n\r\nerro = \'create TRI_PDV_WHATS\';\r\nif (not exis" +
                "ts(select 1 from RDB$RELATIONS where rdb$relation_name = \'TRI_PDV_WHATS\'))\r\nthen" +
                "\r\nEXECUTE STATEMENT \'CREATE TABLE TRI_PDV_WHATS (ID_MSG INTEGER NOT NULL, NUMERO" +
                " VARCHAR(100), MENSAGEM BLOB SUB_TYPE 1, DATAENVIO TIMESTAMP, ENVIADA VARCHAR(10" +
                "0), CNPJ VARCHAR(50), CONSTRAINT TRI_PDV_WHATS_PK PRIMARY KEY (ID_MSG));\';\r\n\r\ner" +
                "ro = \'create GEN_TRI_WHATS\';\r\nif (not exists(SELECT 1 FROM RDB$GENERATORS WHERE " +
                "RDB$Generator_name= \'GEN_TRI_PDV_WHATS\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE GENER" +
                "ATOR GEN_TRI_PDV_WHATS;\';\r\n\r\nerro = \'create NOTIFICA_WHATS_TRI\';\r\nif (not exists" +
                "(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'NOTIFICA_WHATS_TRI\'))\r\nthe" +
                "n\r\nEXECUTE STATEMENT \'CREATE TRIGGER NOTIFICA_WHATS_TRI FOR TRI_PDV_WHATS AFTER " +
                "INSERT AS BEGIN POST_EVENT \'\'NOVA_MENSAGEM\'\'; END\';\r\n\r\nerro = \'create TRI_PDV_DE" +
                "VOL\';\r\nif (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = \'TRI" +
                "_PDV_DEVOL\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TABLE TRI_PDV_DEVOL (ID_DEVOLUCAO" +
                " INTEGER NOT NULL, ID_NFVITEM INTEGER NOT NULL, VALOR NUMERIC(18,4) NOT NULL, US" +
                "ADO CHAR(1) DEFAULT \'\'N\'\' NOT NULL, DATA_DEVOL TIMESTAMP NOT NULL, DATA_USADO TI" +
                "MESTAMP, QTD_DEVOL INTEGER, CONSTRAINT \"TRI_PDV_DEVOL_PK\" PRIMARY KEY (ID_DEVOLU" +
                "CAO), CONSTRAINT TRI_PDV_DEVOL_FK FOREIGN KEY (ID_NFVITEM) REFERENCES TB_NFV_ITE" +
                "M(ID_NFVITEM));\';\r\n\r\nerro = \'create TRI_SCANN_ADICIONAL\';\r\nif (not exists(select" +
                " 1 from RDB$RELATIONS where rdb$relation_name = \'TRI_SCANN_ADICIONAL\'))\r\nthen\r\nE" +
                "XECUTE STATEMENT \'CREATE TABLE TRI_SCANN_ADICIONAL ( ID INTEGER NOT NULL, IDPROM" +
                "OCAO INTEGER, PRODUTONOME VARCHAR(150), CODIGOBARRAS VARCHAR(18), CONSTRAINT PK_" +
                "TB_PROMOCOES_ITENS_1 PRIMARY KEY (ID) );\';\r\n\r\nerro = \'alter table TB_FUNC_AUDITO" +
                "RIA_SIS add TRI_PDV_SYNCED\';\r\nIF ( NOT EXISTS (SELECT 1 FROM RDB$RELATION_FIELDS" +
                " WHERE RDB$RELATION_NAME = \'TB_FUNC_AUDITORIA_SIS\' AND RDB$FIELD_NAME = \'TRI_PDV" +
                "_SYNCED\'))\r\nthen begin\r\nexecute statement \'ALTER TABLE TB_FUNC_AUDITORIA_SIS ADD" +
                " TRI_PDV_SYNCED SMALLINT DEFAULT 1;\';\r\nend\r\n                                    " +
                "                                                          \r\nerro = \'add descript" +
                "ion in TB_FUNC_AUDITORIA_SIS.TRI_PDV_SYNCED\';\r\nIF (EXISTS (SELECT 1 FROM RDB$REL" +
                "ATION_FIELDS WHERE RDB$RELATION_NAME = \'TB_FUNC_AUDITORIA_SIS\' AND RDB$FIELD_NAM" +
                "E = \'TRI_PDV_SYNCED\' AND RDB$DESCRIPTION IS NULL))\r\nthen begin\r\nexecute statemen" +
                "t \'COMMENT ON COLUMN TB_FUNC_AUDITORIA_SIS.TRI_PDV_SYNCED IS \'\'INDICA SE O REGIS" +
                "TRO JÁ FOI SINCRONIZADO DO PDV PARA O CLIPP\'\';\';\r\nend\r\n\r\nerro = \'add view V_RELA" +
                "TION_TABLES\';\r\nIF (NOT EXISTS (SELECT 1 FROM RDB$RELATIONS WHERE RDB$VIEW_BLR IS" +
                " NOT NULL AND RDB$RELATION_NAME = \'V_RELATION_TABLES\'))\r\nthen begin\r\nexecute sta" +
                "tement \'CREATE OR ALTER VIEW V_RELATION_TABLES (TABELAS_DEPENDENTES, TABELA_NATI" +
                "VA, NOME_COLUNA, TIPO_COLUNA, NULABILIDADE) AS WITH CTe AS ( SELECT detail_relat" +
                "ion_constraints.RDB$RELATION_NAME AS TABELAS_DEPENDENTES, master_relation_constr" +
                "aints.RDB$RELATION_NAME AS TABELA_NATIVA, detail_index_segments.RDB$FIELD_NAME A" +
                "S NOME_COLUNA, detail_relation_constraints.rdb$constraint_type AS TIPO_COLUNA FR" +
                "OM rdb$relation_constraints detail_relation_constraints LEFT JOIN rdb$index_segm" +
                "ents detail_index_segments ON detail_relation_constraints.rdb$index_name = detai" +
                "l_index_segments.rdb$index_name LEFT JOIN rdb$ref_constraints ON detail_relation" +
                "_constraints.rdb$constraint_name = rdb$ref_constraints.rdb$constraint_name LEFT " +
                "JOIN rdb$relation_constraints master_relation_constraints ON rdb$ref_constraints" +
                ".rdb$const_name_uq = master_relation_constraints.rdb$constraint_name LEFT JOIN r" +
                "db$index_segments master_index_segments ON master_relation_constraints.rdb$index" +
                "_name = master_index_segments.rdb$index_name WHERE detail_relation_constraints.r" +
                "db$constraint_type = \'\'FOREIGN KEY\'\' OR detail_relation_constraints.rdb$constrai" +
                "nt_type = \'\'PRIMARY KEY\'\' ) SELECT CTe.*, CASE detail_fields.RDB$NULL_FLAG WHEN " +
                "1 THEN \'\'NOT NULL\'\' ELSE \'\'NULL\'\' END AS NULABILIDADE FROM CTe LEFT JOIN RDB$REL" +
                "ATION_FIELDS detail_fields ON CTe.TABELAS_DEPENDENTES = detail_fields.RDB$RELATI" +
                "ON_NAME AND CTe.NOME_COLUNA = detail_fields.RDB$FIELD_NAME;\';\r\nend\r\n\r\nerro = \'de" +
                "u certo\';\r\nSUSPEND;\r\nWHEN ANY DO\r\nBEGIN\r\n\r\nEND\r\nEND;";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"CREATE OR ALTER PROCEDURE SP_TRI_CRIATABELAS_AUX_SYNC
RETURNS (
erro VARCHAR(64)
)
AS
BEGIN

erro = 'create gen_pdv_aux_sync_seq';
if (NOT exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= 'GEN_PDV_AUX_SYNC_SEQ'))
then
EXECUTE STATEMENT 'CREATE SEQUENCE GEN_PDV_AUX_SYNC_SEQ;';

erro = 'create tri_pdv_aux_sync';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_AUX_SYNC'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_AUX_SYNC ( SEQ INTEGER NOT NULL, ID_REG INTEGER NOT NULL, TABELA VARCHAR(31) NOT NULL, OPERACAO VARCHAR(1) NOT NULL, NO_CAIXA SMALLINT NOT NULL, TS_OPER TIMESTAMP );';

erro = 'create TRI_PDV_AUX_SYNC_OPERACAO_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_AUX_SYNC_OPERACAO_IDX'))
then
execute statement 'CREATE INDEX TRI_PDV_AUX_SYNC_OPERACAO_IDX ON TRI_PDV_AUX_SYNC (OPERACAO);';

erro = 'create TRI_PDV_AUX_SYNC_TRIGG1_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_AUX_SYNC_TRIGG1_IDX'))
then
execute statement 'CREATE INDEX TRI_PDV_AUX_SYNC_TRIGG1_IDX ON TRI_PDV_AUX_SYNC (ID_REG,TABELA,OPERACAO,NO_CAIXA);';

erro = 'deu certo';
SUSPEND;
WHEN ANY DO
BEGIN

END
END;";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_ATUALIZA_TB_AUX_SYNC\r\nRETURNS( erro VARCHAR( 64 " +
                ")) AS BEGIN \r\n\r\nerro = \'alter table TRI_PDV_AUX_SYNC add UN_REG\';\r\nIF( NOT EXIST" +
                "S( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TRI_PDV_AUX_SY" +
                "NC\'\r\nAND RDB$FIELD_NAME = \'UN_REG\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TRI_PD" +
                "V_AUX_SYNC ADD UN_REG VARCHAR(100);\';\r\n\r\nerro = \'create TRI_PDV_AUX_SYNC_UNREG_I" +
                "DX\';\r\nif (not exists (select 1 from RDB$INDICES where rdb$index_name = \'TRI_PDV_" +
                "AUX_SYNC_UNREG_IDX\'))\r\nthen\r\nexecute statement \'CREATE INDEX TRI_PDV_AUX_SYNC_UN" +
                "REG_IDX ON TRI_PDV_AUX_SYNC (UN_REG);\';\r\n\r\nerro = \'alter table TRI_PDV_AUX_SYNC " +
                "add SM_REG\';\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELA" +
                "TION_NAME = \'TRI_PDV_AUX_SYNC\'\r\nAND RDB$FIELD_NAME = \'SM_REG\' )) THEN EXECUTE ST" +
                "ATEMENT \'ALTER TABLE TRI_PDV_AUX_SYNC ADD SM_REG SMALLINT;\';\r\n\r\nerro = \'create T" +
                "RI_PDV_AUX_SYNC_SMREG_IDX\';\r\nif (not exists (select 1 from RDB$INDICES where rdb" +
                "$index_name = \'TRI_PDV_AUX_SYNC_SMREG_IDX\'))\r\nthen\r\nexecute statement \'CREATE IN" +
                "DEX TRI_PDV_AUX_SYNC_SMREG_IDX ON TRI_PDV_AUX_SYNC (SM_REG);\';\r\n\r\nerro = \'alter " +
                "table TRI_PDV_AUX_SYNC add CH_REG\';\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION" +
                "_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TRI_PDV_AUX_SYNC\'\r\nAND RDB$FIELD_NAME = \'CH_" +
                "REG\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TRI_PDV_AUX_SYNC ADD CH_REG CHAR(3);" +
                "\';\r\n\r\nerro = \'create TRI_PDV_AUX_SYNC_CHREG_IDX\';\r\nif (not exists (select 1 from" +
                " RDB$INDICES where rdb$index_name = \'TRI_PDV_AUX_SYNC_CHREG_IDX\'))\r\nthen\r\nexecut" +
                "e statement \'CREATE INDEX TRI_PDV_AUX_SYNC_CHREG_IDX ON TRI_PDV_AUX_SYNC (CH_REG" +
                ");\';\r\n\r\nerro = \'create TRI_PDV_AUX_SYNC_ID_REG_IDX\';\r\nif (not exists (select 1 f" +
                "rom RDB$INDICES where rdb$index_name = \'TRI_PDV_AUX_SYNC_ID_REG_IDX\'))\r\nthen\r\nex" +
                "ecute statement \'CREATE INDEX TRI_PDV_AUX_SYNC_ID_REG_IDX ON TRI_PDV_AUX_SYNC (I" +
                "D_REG);\';\r\n\r\nerro = \'create TRI_PDV_AUX_SYNC_TABELA_IDX\';\r\nif (not exists (selec" +
                "t 1 from RDB$INDICES where rdb$index_name = \'TRI_PDV_AUX_SYNC_TABELA_IDX\'))\r\nthe" +
                "n\r\nexecute statement \'CREATE INDEX TRI_PDV_AUX_SYNC_TABELA_IDX ON TRI_PDV_AUX_SY" +
                "NC (TABELA);\';\r\n\r\nerro = \'create TRI_PDV_AUX_SYNC_NO_CAIXA_IDX\';\r\nif (not exists" +
                " (select 1 from RDB$INDICES where rdb$index_name = \'TRI_PDV_AUX_SYNC_NO_CAIXA_ID" +
                "X\'))\r\nthen\r\nexecute statement \'CREATE INDEX TRI_PDV_AUX_SYNC_NO_CAIXA_IDX ON TRI" +
                "_PDV_AUX_SYNC (NO_CAIXA);\';\r\n\r\nerro = \'create TRI_PDV_AUX_SYNC_TRIGG2_IDX\';\r\nif " +
                "(not exists (select 1 from RDB$INDICES where rdb$index_name = \'TRI_PDV_AUX_SYNC_" +
                "TRIGG2_IDX\'))\r\nthen\r\nexecute statement \'CREATE INDEX TRI_PDV_AUX_SYNC_TRIGG2_IDX" +
                " ON TRI_PDV_AUX_SYNC (UN_REG,TABELA,OPERACAO,NO_CAIXA);\';\r\n\r\nerro = \'create TRI_" +
                "PDV_AUX_SYNC_TRIGG3_IDX\';\r\nif (not exists (select 1 from RDB$INDICES where rdb$i" +
                "ndex_name = \'TRI_PDV_AUX_SYNC_TRIGG3_IDX\'))\r\nthen\r\nexecute statement \'CREATE IND" +
                "EX TRI_PDV_AUX_SYNC_TRIGG3_IDX ON TRI_PDV_AUX_SYNC (SM_REG,TABELA,OPERACAO,NO_CA" +
                "IXA);\';\r\n\r\nerro = \'create TRI_PDV_AUX_SYNC_TRIGG4_IDX\';\r\nif (not exists (select " +
                "1 from RDB$INDICES where rdb$index_name = \'TRI_PDV_AUX_SYNC_TRIGG4_IDX\'))\r\nthen\r" +
                "\nexecute statement \'CREATE INDEX TRI_PDV_AUX_SYNC_TRIGG4_IDX ON TRI_PDV_AUX_SYNC" +
                " (CH_REG,TABELA,OPERACAO,NO_CAIXA);\';\r\n\r\nerro = \'deu certo\';\r\n\r\nSUSPEND;\r\nWHEN A" +
                "NY DO BEGIN\r\nEND\r\nEND;";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_ATUALIZATABELAS \r\nRETURNS( erro VARCHAR( 64 )) A" +
                "S BEGIN \r\n\r\nerro = \'atualiza tri_pdv_oper\';\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$" +
                "RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TRI_PDV_OPER\'\r\nAND RDB$FIELD_NAME = " +
                "\'ID_USER\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TRI_PDV_OPER ADD ID_USER INTEGE" +
                "R NOT NULL;\';\r\n\r\nerro = \'acrescenta qtd_atacado\';\r\nIF( NOT EXISTS( SELECT 1\r\nFRO" +
                "M RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_ESTOQUE\'\r\nAND RDB$FIELD_NAM" +
                "E = \'QTD_ATACADO\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TB_ESTOQUE ADD QTD_ATAC" +
                "ADO NUMERIC(18,4);\';\r\n\r\nerro = \'acrescenta controla_lote_venda\';\r\nIF( NOT EXISTS" +
                "( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_EST_PRODUTO\'" +
                "\r\nAND RDB$FIELD_NAME = \'CONTROLA_LOTE_VENDA\' )) THEN EXECUTE STATEMENT \'ALTER TA" +
                "BLE TB_EST_PRODUTO ADD CONTROLA_LOTE_VENDA CHAR(1) DEFAULT \'\'N\'\';\';\r\n\r\nerro = \'a" +
                "crescenta baixa_lote_nfv\';\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\n" +
                "WHERE RDB$RELATION_NAME = \'TB_EST_PRODUTO\'\r\nAND RDB$FIELD_NAME = \'BAIXA_LOTE_NFV" +
                "\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TB_EST_PRODUTO ADD BAIXA_LOTE_NFV CHAR(" +
                "1) DEFAULT \'\'A\'\';\';\r\n\r\nerro = \'acrescenta baixa_lote_pdv\';\r\nIF( NOT EXISTS( SELE" +
                "CT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_EST_PRODUTO\'\r\nAND " +
                "RDB$FIELD_NAME = \'BAIXA_LOTE_PDV\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TB_EST_" +
                "PRODUTO ADD BAIXA_LOTE_PDV CHAR(1) DEFAULT \'\'A\'\';\';\r\n\r\nerro = \'acrescenta dt_mel" +
                "hor_vencto\';\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELA" +
                "TION_NAME = \'TB_CLIENTE\'\r\nAND RDB$FIELD_NAME = \'DT_MELHOR_VENCTO\' )) THEN EXECUT" +
                "E STATEMENT \'ALTER TABLE TB_CLIENTE ADD DT_MELHOR_VENCTO SMALLINT;\';\r\n\r\nerro = \'" +
                "add tb_cupom.synced\';\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE" +
                " RDB$RELATION_NAME = \'TB_CUPOM\'\r\nAND RDB$FIELD_NAME = \'SYNCED\' )) THEN EXECUTE S" +
                "TATEMENT \'ALTER TABLE TB_CUPOM ADD SYNCED SMALLINT ;\';\r\n\r\nerro = \'add tri_pdv_co" +
                "nfig.modelo_cupom\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE" +
                " RDB$RELATION_NAME = \'TRI_PDV_CONFIG\'\r\nAND RDB$FIELD_NAME = \'MODELO_CUPOM\' )) TH" +
                "EN EXECUTE STATEMENT \'ALTER TABLE TRI_PDV_CONFIG ADD MODELO_CUPOM SMALLINT DEFAU" +
                "LT 1 NOT NULL;\';\r\n\r\nerro = \'add tri_pdv_config.mensagem_rodape\';\r\n\r\nIF( NOT EXIS" +
                "TS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TRI_PDV_CONFI" +
                "G\'\r\nAND RDB$FIELD_NAME = \'MENSAGEM_RODAPE\' )) THEN EXECUTE STATEMENT\r\n\'ALTER TAB" +
                "LE TRI_PDV_CONFIG ADD MENSAGEM_RODAPE VARCHAR(100) DEFAULT \'\'OBRIGADO E VOLTE SE" +
                "MPRE\'\';\';\r\n\r\n\r\n\r\nerro = \'create TRI_PDV_INDEX\';\r\nif (not exists (select 1 from R" +
                "DB$INDICES where rdb$index_name = \'TRI_PDV_INDEX\'))\r\nthen\r\nexecute statement \'CR" +
                "EATE UNIQUE INDEX TRI_PDV_INDEX ON TRI_PDV_OPER (ID_OPER) ; \';\r\n\r\n\r\nerro = \'crea" +
                "te TB_CUPOM_ITEM.DESCRICAO\';\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS" +
                "\r\nWHERE RDB$RELATION_NAME = \'TB_CUPOM_ITEM\'\r\nAND RDB$FIELD_NAME = \'DESCRICAO\' ))" +
                " THEN EXECUTE STATEMENT\r\n\r\n\'ALTER TABLE TB_CUPOM_ITEM ADD DESCRICAO VARCHAR(100)" +
                " CHARACTER SET WIN_1252 ;\';\r\n\r\nerro = \'add TB_MOVDIARIO.SYNCED\';\r\n\r\nIF( NOT EXIS" +
                "TS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_MOVDIARIO\'" +
                "\r\nAND RDB$FIELD_NAME = \'SYNCED\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TB_MOVDIA" +
                "RIO ADD SYNCED SMALLINT ;\';\r\n\r\nerro = \'add TB_IFS.NUM_CREDENCIAMENTO\';\r\n\r\nIF( NO" +
                "T EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_IFS\'" +
                "\r\nAND RDB$FIELD_NAME = \'NUM_CREDENCIAMENTO\' )) THEN EXECUTE STATEMENT \'ALTER TAB" +
                "LE TB_IFS ADD NUM_CREDENCIAMENTO VARCHAR(30) CHARACTER SET NONE;\';\r\n\r\nerro = \'ad" +
                "d TB_ESTOQUE.TRI_PDV_DT_UPD\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIE" +
                "LDS\r\nWHERE RDB$RELATION_NAME = \'TB_ESTOQUE\'\r\nAND RDB$FIELD_NAME = \'TRI_PDV_DT_UP" +
                "D\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TB_ESTOQUE ADD TRI_PDV_DT_UPD TIMESTAM" +
                "P ;\';\r\n\r\nerro = \'create TB_ESTOQUE_TRIPDV_UPD_SYNC\';\r\nif (not exists(select 1 fr" +
                "om RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTOQUE_TRIPDV_UPD_SYNC\'))\r\nthen\r\nE" +
                "XECUTE STATEMENT \'CREATE TRIGGER TB_ESTOQUE_TRIPDV_UPD_SYNC FOR TB_ESTOQUE INACT" +
                "IVE AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_ESTOQUE SET TRI_PDV_DT_UPD = CURRE" +
                "NT_TIMESTAMP WHERE id_estoque = NEW.id_estoque and (TRI_PDV_DT_UPD IS null OR TR" +
                "I_PDV_DT_UPD <> CURRENT_TIMESTAMP); END;\';\r\n\r\nerro = \'add TRI_PDV_SETUP.ULTIMA_S" +
                "YNC\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_" +
                "NAME = \'TRI_PDV_SETUP\'\r\nAND RDB$FIELD_NAME = \'ULTIMA_SYNC\' )) THEN EXECUTE STATE" +
                "MENT \'ALTER TABLE TRI_PDV_SETUP ADD ULTIMA_SYNC TIMESTAMP ;\';\r\n\r\nerro = \'create " +
                "TB_ESTOQUE_TRI_PDV_DT_UPD_IDX\';\r\nif (not exists (select 1 from RDB$INDICES where" +
                " rdb$index_name = \'TB_ESTOQUE_TRI_PDV_DT_UPD_IDX\'))\r\nthen\r\nexecute statement \'CR" +
                "EATE INDEX TB_ESTOQUE_TRI_PDV_DT_UPD_IDX ON TB_ESTOQUE (TRI_PDV_DT_UPD) ;\';\r\n\r\ne" +
                "rro = \'add TB_EST_PRODUTO.TRI_PDV_DT_UPD\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB" +
                "$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_EST_PRODUTO\'\r\nAND RDB$FIELD_NAME" +
                " = \'TRI_PDV_DT_UPD\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TB_EST_PRODUTO ADD TR" +
                "I_PDV_DT_UPD TIMESTAMP ;\';\r\n\r\nerro = \'create TB_ESTPROD_TRI_PDV_DT_UPD_IDX\';\r\nif" +
                " (not exists (select 1 from RDB$INDICES where rdb$index_name = \'TB_ESTPROD_TRI_P" +
                "DV_DT_UPD_IDX\'))\r\nthen\r\nexecute statement \'CREATE INDEX TB_ESTPROD_TRI_PDV_DT_UP" +
                "D_IDX ON TB_EST_PRODUTO (TRI_PDV_DT_UPD) ;\';\r\n\r\nerro = \'create TB_ESTPROD_TRIPDV" +
                "_UPD_SYNC\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = " +
                "\'TB_ESTPROD_TRIPDV_UPD_SYNC\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_ESTPR" +
                "OD_TRIPDV_UPD_SYNC FOR TB_EST_PRODUTO INACTIVE AFTER INSERT OR UPDATE AS BEGIN U" +
                "PDATE TB_EST_PRODUTO SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_IDENTIFICAD" +
                "OR = NEW.ID_IDENTIFICADOR and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD <> CURR" +
                "ENT_TIMESTAMP ) ; END;\';\r\n\r\nerro = \'add TB_EST_IDENTIFICADOR.TRI_PDV_DT_UPD\';\r\n\r" +
                "\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'" +
                "TB_EST_IDENTIFICADOR\'\r\nAND RDB$FIELD_NAME = \'TRI_PDV_DT_UPD\' )) THEN EXECUTE STA" +
                "TEMENT \'ALTER TABLE TB_EST_IDENTIFICADOR ADD TRI_PDV_DT_UPD TIMESTAMP ;\';\r\n\r\nerr" +
                "o = \'create TB_ESTIDENT_TRI_PDV_DT_UPD_IDX\';\r\nif (not exists (select 1 from RDB$" +
                "INDICES where rdb$index_name = \'TB_ESTIDENT_TRI_PDV_DT_UPD_IDX\'))\r\nthen\r\nexecute" +
                " statement \'CREATE INDEX TB_ESTIDENT_TRI_PDV_DT_UPD_IDX ON TB_EST_IDENTIFICADOR " +
                "(TRI_PDV_DT_UPD) ;\';\r\n\r\nerro = \'create TB_ESTIDENT_TRIPDV_UPD_SYNC\';\r\nif (not ex" +
                "ists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTIDENT_TRIPDV_UPD" +
                "_SYNC\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_ESTIDENT_TRIPDV_UPD_SYNC FO" +
                "R TB_EST_IDENTIFICADOR INACTIVE AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_EST_ID" +
                "ENTIFICADOR SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_IDENTIFICADOR = NEW." +
                "ID_IDENTIFICADOR AND ID_ESTOQUE = NEW.ID_ESTOQUE and ( TRI_PDV_DT_UPD IS null OR" +
                " TRI_PDV_DT_UPD <> CURRENT_TIMESTAMP ) ; END;\';\r\n\r\nerro = \'add TB_CLIENTE.TRI_PD" +
                "V_DT_UPD\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELA" +
                "TION_NAME = \'TB_CLIENTE\'\r\nAND RDB$FIELD_NAME = \'TRI_PDV_DT_UPD\' )) THEN EXECUTE " +
                "STATEMENT \'ALTER TABLE TB_CLIENTE ADD TRI_PDV_DT_UPD TIMESTAMP ;\';\r\n\r\nerro = \'cr" +
                "eate TB_CLIENTE_TRI_PDV_DT_UPD_IDX\';\r\nif (not exists (select 1 from RDB$INDICES " +
                "where rdb$index_name = \'TB_CLIENTE_TRI_PDV_DT_UPD_IDX\'))\r\nthen\r\nexecute statemen" +
                "t \'CREATE INDEX TB_CLIENTE_TRI_PDV_DT_UPD_IDX ON TB_CLIENTE (TRI_PDV_DT_UPD) ;\';" +
                "\r\n\r\nerro = \'create TB_CLIENTE_TRIPDV_UPD_SYNC\';\r\nif (not exists(select 1 from RD" +
                "B$TRIGGERS where RDB$TRIGGER_NAME = \'TB_CLIENTE_TRIPDV_UPD_SYNC\'))\r\nthen\r\nEXECUT" +
                "E STATEMENT \'CREATE TRIGGER TB_CLIENTE_TRIPDV_UPD_SYNC FOR TB_CLIENTE AFTER INSE" +
                "RT OR UPDATE AS BEGIN UPDATE TB_CLIENTE SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP W" +
                "HERE ID_CLIENTE = NEW.ID_CLIENTE and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD " +
                "<> CURRENT_TIMESTAMP ) ; END;\';\r\n\r\nerro = \'add TB_TAXA_UF.TRI_PDV_DT_UPD\';\r\n\r\nIF" +
                "( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_" +
                "TAXA_UF\'\r\nAND RDB$FIELD_NAME = \'TRI_PDV_DT_UPD\' )) THEN EXECUTE STATEMENT \'ALTER" +
                " TABLE TB_TAXA_UF ADD TRI_PDV_DT_UPD TIMESTAMP ;\';\r\n\r\nerro = \'create TB_TAXA_UF_" +
                "TRI_PDV_DT_UPD_IDX\';\r\nif (not exists (select 1 from RDB$INDICES where rdb$index_" +
                "name = \'TB_TAXA_UF_TRI_PDV_DT_UPD_IDX\'))\r\nthen\r\nexecute statement \'CREATE INDEX " +
                "TB_TAXA_UF_TRI_PDV_DT_UPD_IDX ON TB_TAXA_UF (TRI_PDV_DT_UPD) ;\';\r\n\r\nerro = \'crea" +
                "te TB_TAXA_UF_TRIPDV_UPD_SYNC\';\r\nif (not exists(select 1 from RDB$TRIGGERS where" +
                " RDB$TRIGGER_NAME = \'TB_TAXA_UF_TRIPDV_UPD_SYNC\'))\r\nthen\r\nEXECUTE STATEMENT \'CRE" +
                "ATE TRIGGER TB_TAXA_UF_TRIPDV_UPD_SYNC FOR TB_TAXA_UF AFTER INSERT OR UPDATE AS " +
                "BEGIN UPDATE TB_TAXA_UF SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_CTI = NE" +
                "W.ID_CTI and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD <> CURRENT_TIMESTAMP ) ;" +
                " END;\';\r\n\r\nerro = \'add TRI_PDV_OPER.TRI_PDV_DT_UPD\';\r\n\r\nIF( NOT EXISTS( SELECT 1" +
                "\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TRI_PDV_OPER\'\r\nAND RDB$FI" +
                "ELD_NAME = \'TRI_PDV_DT_UPD\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TRI_PDV_OPER " +
                "ADD TRI_PDV_DT_UPD TIMESTAMP ;\';\r\n\r\nerro = \'create TB_OPER_TRI_PDV_DT_UPD_IDX\';\r" +
                "\nif (not exists (select 1 from RDB$INDICES where rdb$index_name = \'TB_OPER_TRI_P" +
                "DV_DT_UPD_IDX\'))\r\nthen\r\nexecute statement \'CREATE INDEX TB_OPER_TRI_PDV_DT_UPD_I" +
                "DX ON TRI_PDV_OPER (TRI_PDV_DT_UPD) ;\';\r\n\r\nerro = \'create TB_OPER_TRIPDV_UPD_SYN" +
                "C\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_OPER" +
                "_TRIPDV_UPD_SYNC\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_OPER_TRIPDV_UPD_" +
                "SYNC FOR TRI_PDV_OPER AFTER INSERT OR UPDATE AS BEGIN UPDATE TRI_PDV_OPER SET TR" +
                "I_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_OPER = NEW.ID_OPER and ( TRI_PDV_DT_UP" +
                "D IS null OR TRI_PDV_DT_UPD <> CURRENT_TIMESTAMP ) ; END;\';\r\n\r\nerro = \'add TRI_P" +
                "DV_CONFIG.TRI_PDV_DT_UPD\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS" +
                "\r\nWHERE RDB$RELATION_NAME = \'TRI_PDV_CONFIG\'\r\nAND RDB$FIELD_NAME = \'TRI_PDV_DT_U" +
                "PD\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TRI_PDV_CONFIG ADD TRI_PDV_DT_UPD TIM" +
                "ESTAMP ;\';\r\n\r\nerro = \'create TB_CONFIG_TRI_PDV_DT_UPD_IDX\';\r\nif (not exists (sel" +
                "ect 1 from RDB$INDICES where rdb$index_name = \'TB_CONFIG_TRI_PDV_DT_UPD_IDX\'))\r\n" +
                "then\r\nexecute statement \'CREATE INDEX TB_CONFIG_TRI_PDV_DT_UPD_IDX ON TRI_PDV_CO" +
                "NFIG (TRI_PDV_DT_UPD) ;\';\r\n\r\nerro = \'create TB_CONFIG_TRIPDV_UPD_SYNC\';\r\nif (not" +
                " exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_CONFIG_TRIPDV_UP" +
                "D_SYNC\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_CONFIG_TRIPDV_UPD_SYNC FOR" +
                " TRI_PDV_CONFIG AFTER INSERT OR UPDATE AS BEGIN UPDATE TRI_PDV_CONFIG SET TRI_PD" +
                "V_DT_UPD = CURRENT_TIMESTAMP WHERE ID_MAC = NEW.ID_MAC and ( TRI_PDV_DT_UPD IS n" +
                "ull OR TRI_PDV_DT_UPD <> CURRENT_TIMESTAMP ) ; END;\';\r\n\r\nerro = \'add TB_CFOP_SIS" +
                ".TRI_PDV_DT_UPD\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE R" +
                "DB$RELATION_NAME = \'TB_CFOP_SIS\'\r\nAND RDB$FIELD_NAME = \'TRI_PDV_DT_UPD\' )) THEN " +
                "EXECUTE STATEMENT \'ALTER TABLE TB_CFOP_SIS ADD TRI_PDV_DT_UPD TIMESTAMP ;\';\r\n\r\ne" +
                "rro = \'create TB_CFOPSIS_TRI_PDV_DT_UPD_IDX\';\r\nif (not exists (select 1 from RDB" +
                "$INDICES where rdb$index_name = \'TB_CFOPSIS_TRI_PDV_DT_UPD_IDX\'))\r\nthen\r\nexecute" +
                " statement \'CREATE INDEX TB_CFOPSIS_TRI_PDV_DT_UPD_IDX ON TB_CFOP_SIS (TRI_PDV_D" +
                "T_UPD) ;\';\r\n\r\nerro = \'create TB_CFOPSIS_TRIPDV_UPD_SYNC\';\r\nif (not exists(select" +
                " 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_CFOPSIS_TRIPDV_UPD_SYNC\'))\r\nth" +
                "en\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_CFOPSIS_TRIPDV_UPD_SYNC FOR TB_CFOP_SIS" +
                " AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_CFOP_SIS SET TRI_PDV_DT_UPD = CURRENT" +
                "_TIMESTAMP WHERE CFOP = NEW.CFOP and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD " +
                "<> CURRENT_TIMESTAMP ) ; END;\';\r\n\r\nerro = \'add TB_FORNECEDOR.TRI_PDV_DT_UPD\';\r\n\r" +
                "\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'" +
                "TB_FORNECEDOR\'\r\nAND RDB$FIELD_NAME = \'TRI_PDV_DT_UPD\' )) THEN EXECUTE STATEMENT " +
                "\'ALTER TABLE TB_FORNECEDOR ADD TRI_PDV_DT_UPD TIMESTAMP ;\';\r\n\r\nerro = \'create TB" +
                "_FORNEC_TRI_PDV_DT_UPD_IDX\';\r\nif (not exists (select 1 from RDB$INDICES where rd" +
                "b$index_name = \'TB_FORNEC_TRI_PDV_DT_UPD_IDX\'))\r\nthen\r\nexecute statement \'CREATE" +
                " INDEX TB_FORNEC_TRI_PDV_DT_UPD_IDX ON TB_FORNECEDOR (TRI_PDV_DT_UPD) ;\';\r\n\r\nerr" +
                "o = \'create TB_FORNEC_TRIPDV_UPD_SYNC\';\r\nif (not exists(select 1 from RDB$TRIGGE" +
                "RS where RDB$TRIGGER_NAME = \'TB_FORNEC_TRIPDV_UPD_SYNC\'))\r\nthen\r\nEXECUTE STATEME" +
                "NT \'CREATE TRIGGER TB_FORNEC_TRIPDV_UPD_SYNC FOR TB_FORNECEDOR AFTER INSERT OR U" +
                "PDATE AS BEGIN UPDATE TB_FORNECEDOR SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE" +
                " ID_FORNEC = NEW.ID_FORNEC and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD <> CUR" +
                "RENT_TIMESTAMP ) ; END;\';\r\n\r\nerro = \'add TRI_PDV_USERS.TRI_PDV_DT_UPD\';\r\n\r\nIF( N" +
                "OT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TRI_PD" +
                "V_USERS\'\r\nAND RDB$FIELD_NAME = \'TRI_PDV_DT_UPD\' )) THEN EXECUTE STATEMENT \'ALTER" +
                " TABLE TRI_PDV_USERS ADD TRI_PDV_DT_UPD TIMESTAMP ;\';\r\n\r\nerro = \'add TRI_PDV_USE" +
                "RS.PERMISSOES\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB" +
                "$RELATION_NAME = \'TRI_PDV_USERS\'\r\nAND RDB$FIELD_NAME = \'PERMISSOES\' )) THEN EXEC" +
                "UTE STATEMENT \'ALTER TABLE TRI_PDV_USERS ADD PERMISSOES INTEGER DEFAULT 0 NOT NU" +
                "LL;\';\r\n\r\nerro = \'create TB_TRIUSERS_TRI_PDV_DT_UPD_IDX\';\r\nif (not exists (select" +
                " 1 from RDB$INDICES where rdb$index_name = \'TB_TRIUSERS_TRI_PDV_DT_UPD_IDX\'))\r\nt" +
                "hen\r\nexecute statement \'CREATE INDEX TB_TRIUSERS_TRI_PDV_DT_UPD_IDX ON TRI_PDV_U" +
                "SERS (TRI_PDV_DT_UPD) ;\';\r\n\r\nerro = \'create TB_TRIUSERS_TRIPDV_UPD_SYNC\';\r\nif (n" +
                "ot exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_TRIUSERS_TRIPD" +
                "V_UPD_SYNC\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_TRIUSERS_TRIPDV_UPD_SY" +
                "NC FOR TRI_PDV_USERS AFTER INSERT OR UPDATE AS BEGIN UPDATE TRI_PDV_USERS SET TR" +
                "I_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_USER = NEW.ID_USER and ( TRI_PDV_DT_UP" +
                "D IS null OR TRI_PDV_DT_UPD <> CURRENT_TIMESTAMP ) ; END;\';\r\n\r\nerro = \'add TRI_P" +
                "DV_SETUP.ORIGEM\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE R" +
                "DB$RELATION_NAME = \'TRI_PDV_SETUP\'\r\nAND RDB$FIELD_NAME = \'ORIGEM\' )) THEN EXECUT" +
                "E STATEMENT \'ALTER TABLE TRI_PDV_SETUP ADD ORIGEM VARCHAR(8) ;\';\r\n\r\nerro = \'add " +
                "TB_EMITENTE.TEXTO_COBRANCA_RODAPE\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATI" +
                "ON_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_EMITENTE\'\r\nAND RDB$FIELD_NAME = \'TEXTO_" +
                "COBRANCA_RODAPE\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TB_EMITENTE ADD TEXTO_CO" +
                "BRANCA_RODAPE BLOB SUB_TYPE 1 CHARACTER SET WIN1252 COLLATE WIN_PTBR;\';\r\n\r\nerro " +
                "= \'add TB_EMITENTE.TEXTO_COBRANCA_ASSUNTO\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RD" +
                "B$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_EMITENTE\'\r\nAND RDB$FIELD_NAME =" +
                " \'TEXTO_COBRANCA_ASSUNTO\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TB_EMITENTE ADD" +
                " TEXTO_COBRANCA_ASSUNTO BLOB SUB_TYPE 1 CHARACTER SET WIN1252 COLLATE WIN_PTBR;\'" +
                ";\r\n\r\nerro = \'add TB_ESTOQUE.QTD_ATACADO\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$" +
                "RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_ESTOQUE\'\r\nAND RDB$FIELD_NAME = \'Q" +
                "TD_ATACADO\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TB_ESTOQUE ADD QTD_ATACADO Nu" +
                "meric(18,4) ;\';\r\n\r\nerro = \'add TB_EST_PRODUTO.VLR_IPI\';\r\n\r\nIF( NOT EXISTS( SELEC" +
                "T 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_EST_PRODUTO\'\r\nAND R" +
                "DB$FIELD_NAME = \'VLR_IPI\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TB_EST_PRODUTO " +
                "ADD VLR_IPI Numeric(18,4) ;\';\r\n\r\nerro = \'add TB_EST_PRODUTO.CST_CFE\';\r\n\r\nIF( NOT" +
                " EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_EST_P" +
                "RODUTO\'\r\nAND RDB$FIELD_NAME = \'CST_CFE\' )) THEN EXECUTE STATEMENT \'ALTER TABLE T" +
                "B_EST_PRODUTO ADD CST_CFE Varchar(3) ;\';\r\n\r\nerro = \'add TB_EST_PRODUTO.CSOSN_CFE" +
                "\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAM" +
                "E = \'TB_EST_PRODUTO\'\r\nAND RDB$FIELD_NAME = \'CSOSN_CFE\' )) THEN EXECUTE STATEMENT" +
                " \'ALTER TABLE TB_EST_PRODUTO ADD CSOSN_CFE Varchar(3) ;\';\r\n\r\nerro = \'add TB_EST_" +
                "PRODUTO.CONTROLA_LOTE_VENDA\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIE" +
                "LDS\r\nWHERE RDB$RELATION_NAME = \'TB_EST_PRODUTO\'\r\nAND RDB$FIELD_NAME = \'CONTROLA_" +
                "LOTE_VENDA\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TB_EST_PRODUTO ADD CONTROLA_L" +
                "OTE_VENDA Char(1) DEFAULT \'\'N\'\' NOT NULL ;\';\r\n\r\nerro = \'add TB_EST_PRODUTO.BAIXA" +
                "_LOTE_NFV\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$REL" +
                "ATION_NAME = \'TB_EST_PRODUTO\'\r\nAND RDB$FIELD_NAME = \'BAIXA_LOTE_NFV\' )) THEN EXE" +
                "CUTE STATEMENT \'ALTER TABLE TB_EST_PRODUTO ADD BAIXA_LOTE_NFV Char(1) DEFAULT \'\'" +
                "A\'\' ;\';\r\n\r\nerro = \'add TB_EST_PRODUTO.BAIXA_LOTE_PDV\';\r\n\r\nIF( NOT EXISTS( SELECT" +
                " 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_EST_PRODUTO\'\r\nAND RD" +
                "B$FIELD_NAME = \'BAIXA_LOTE_PDV\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TB_EST_PR" +
                "ODUTO ADD BAIXA_LOTE_PDV Char(1) DEFAULT \'\'A\'\' ;\';\r\n\r\nerro = \'add TB_IFS.NUM_CRE" +
                "DENCIAMENTO\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$R" +
                "ELATION_NAME = \'TB_IFS\'\r\nAND RDB$FIELD_NAME = \'NUM_CREDENCIAMENTO\' )) THEN EXECU" +
                "TE STATEMENT \'ALTER TABLE TB_IFS ADD NUM_CREDENCIAMENTO Varchar(30) ;\';\r\n\r\nerro " +
                "= \'add TB_UNI_MEDIDA.UNIDADE_EX\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION" +
                "_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_UNI_MEDIDA\'\r\nAND RDB$FIELD_NAME = \'UNIDAD" +
                "E_EX\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TB_UNI_MEDIDA ADD UNIDADE_EX Varcha" +
                "r(6) ;\';\r\n\r\nerro = \'add TB_CONTA_RECEBER.DT_VENCTO_ORIG\';\r\n\r\nIF( NOT EXISTS( SEL" +
                "ECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_CONTA_RECEBER\'\r\nA" +
                "ND RDB$FIELD_NAME = \'DT_VENCTO_ORIG\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TB_C" +
                "ONTA_RECEBER ADD DT_VENCTO_ORIG Date ;\';\r\n\r\nerro = \'add TB_EMITENTE.TRI_PDV_DT_U" +
                "PD\';\r\n\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_N" +
                "AME = \'TB_EMITENTE\'\r\nAND RDB$FIELD_NAME = \'TRI_PDV_DT_UPD\' )) THEN EXECUTE STATE" +
                "MENT \'ALTER TABLE TB_EMITENTE ADD TRI_PDV_DT_UPD TIMESTAMP ;\';\r\n\r\nerro = \'create" +
                " TB_EMITENTE_TRI_PDV_DT_UPD_IDX\';\r\nif (not exists (select 1 from RDB$INDICES whe" +
                "re rdb$index_name = \'TB_EMITENTE_TRI_PDV_DT_UPD_IDX\'))\r\nthen\r\nexecute statement " +
                "\'CREATE INDEX TB_EMITENTE_TRI_PDV_DT_UPD_IDX ON TB_EMITENTE (TRI_PDV_DT_UPD) ;\';" +
                "\r\n\r\nerro = \'create TB_EMITENTE_TRIPDV_UPD_SYNC\';\r\nif (not exists(select 1 from R" +
                "DB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_EMITENTE_TRIPDV_UPD_SYNC\'))\r\nthen\r\nEXEC" +
                "UTE STATEMENT \'CREATE TRIGGER TB_EMITENTE_TRIPDV_UPD_SYNC FOR TB_EMITENTE AFTER " +
                "INSERT OR UPDATE AS BEGIN UPDATE TB_EMITENTE SET TRI_PDV_DT_UPD = CURRENT_TIMEST" +
                "AMP WHERE CNPJ = NEW.CNPJ and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD <> CURR" +
                "ENT_TIMESTAMP ) ; END;\';\r\n\r\nerro = \'add TB_IFS.TRI_PDV_DT_UPD\';\r\n\r\nIF( NOT EXIST" +
                "S( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_IFS\'\r\nAND R" +
                "DB$FIELD_NAME = \'TRI_PDV_DT_UPD\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TB_IFS A" +
                "DD TRI_PDV_DT_UPD TIMESTAMP ;\';\r\n\r\nerro = \'create TB_IFS_TRI_PDV_DT_UPD_IDX\';\r\ni" +
                "f (not exists (select 1 from RDB$INDICES where rdb$index_name = \'TB_IFS_TRI_PDV_" +
                "DT_UPD_IDX\'))\r\nthen\r\nexecute statement \'CREATE INDEX TB_IFS_TRI_PDV_DT_UPD_IDX O" +
                "N TB_IFS (TRI_PDV_DT_UPD) ;\';\r\n\r\nerro = \'create TB_IFS_TRIPDV_UPD_SYNC\';\r\nif (no" +
                "t exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_IFS_TRIPDV_UPD_" +
                "SYNC\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_IFS_TRIPDV_UPD_SYNC FOR TB_I" +
                "FS AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_IFS SET TRI_PDV_DT_UPD = CURRENT_TI" +
                "MESTAMP WHERE ID_IFS = NEW.ID_IFS and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD" +
                " <> CURRENT_TIMESTAMP ) ; END;\';\r\n\r\nerro = \'add TB_EST_GRUPO.TRI_PDV_DT_UPD\';\r\n\r" +
                "\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'" +
                "TB_EST_GRUPO\'\r\nAND RDB$FIELD_NAME = \'TRI_PDV_DT_UPD\' )) THEN EXECUTE STATEMENT \'" +
                "ALTER TABLE TB_EST_GRUPO ADD TRI_PDV_DT_UPD TIMESTAMP ;\';\r\n\r\nerro = \'create TB_G" +
                "RUPO_TRI_PDV_DT_UPD_IDX\';\r\nif (not exists (select 1 from RDB$INDICES where rdb$i" +
                "ndex_name = \'TB_GRUPO_TRI_PDV_DT_UPD_IDX\'))\r\nthen\r\nexecute statement \'CREATE IND" +
                "EX TB_GRUPO_TRI_PDV_DT_UPD_IDX ON TB_EST_GRUPO (TRI_PDV_DT_UPD) ;\';\r\n\r\nerro = \'c" +
                "reate TB_GRUPO_TRIPDV_UPD_SYNC\';\r\nif (not exists(select 1 from RDB$TRIGGERS wher" +
                "e RDB$TRIGGER_NAME = \'TB_GRUPO_TRIPDV_UPD_SYNC\'))\r\nthen\r\nEXECUTE STATEMENT \'CREA" +
                "TE TRIGGER TB_GRUPO_TRIPDV_UPD_SYNC FOR TB_EST_GRUPO AFTER INSERT OR UPDATE AS B" +
                "EGIN UPDATE TB_EST_GRUPO SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_GRUPO =" +
                " NEW.ID_GRUPO and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD <> CURRENT_TIMESTAM" +
                "P ) ; END;\';\r\n\r\nerro = \'add TB_FORMA_PAGTO_SIS.TRI_PDV_DT_UPD\';\r\nIF( NOT EXISTS(" +
                " SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_FORMA_PAGTO_S" +
                "IS\'\r\nAND RDB$FIELD_NAME = \'TRI_PDV_DT_UPD\' )) THEN EXECUTE STATEMENT \'ALTER TABL" +
                "E TB_FORMA_PAGTO_SIS ADD TRI_PDV_DT_UPD TIMESTAMP ;\';\r\n\r\nerro = \'create TB_FMAPG" +
                "TO_TRI_PDV_DT_UPD_IDX\';\r\nif (not exists (select 1 from RDB$INDICES where rdb$ind" +
                "ex_name = \'TB_FMAPGTO_TRI_PDV_DT_UPD_IDX\'))\r\nthen\r\nexecute statement \'CREATE IND" +
                "EX TB_FMAPGTO_TRI_PDV_DT_UPD_IDX ON TB_FORMA_PAGTO_SIS (TRI_PDV_DT_UPD) ;\';\r\n\r\ne" +
                "rro = \'create TB_FMAPGTO_TRIPDV_UPD_SYNC\';\r\nif (not exists(select 1 from RDB$TRI" +
                "GGERS where RDB$TRIGGER_NAME = \'TB_FMAPGTO_TRIPDV_UPD_SYNC\'))\r\nthen\r\nEXECUTE STA" +
                "TEMENT \'CREATE TRIGGER TB_FMAPGTO_TRIPDV_UPD_SYNC FOR TB_FORMA_PAGTO_SIS AFTER I" +
                "NSERT OR UPDATE AS BEGIN UPDATE TB_FORMA_PAGTO_SIS SET TRI_PDV_DT_UPD = CURRENT_" +
                "TIMESTAMP WHERE ID_FMAPGTO = NEW.ID_FMAPGTO and ( TRI_PDV_DT_UPD IS null OR TRI_" +
                "PDV_DT_UPD <> CURRENT_TIMESTAMP ) ; END;\';\r\n\r\nerro = \'add TB_PARCELAMENTO.TRI_PD" +
                "V_DT_UPD\';\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATI" +
                "ON_NAME = \'TB_PARCELAMENTO\'\r\nAND RDB$FIELD_NAME = \'TRI_PDV_DT_UPD\' )) THEN EXECU" +
                "TE STATEMENT \'ALTER TABLE TB_PARCELAMENTO ADD TRI_PDV_DT_UPD TIMESTAMP ;\';\r\n\r\ner" +
                "ro = \'create TB_PARCELA_TRI_PDV_DT_UPD_IDX\';\r\nif (not exists (select 1 from RDB$" +
                "INDICES where rdb$index_name = \'TB_PARCELA_TRI_PDV_DT_UPD_IDX\'))\r\nthen\r\nexecute " +
                "statement \'CREATE INDEX TB_PARCELA_TRI_PDV_DT_UPD_IDX ON TB_PARCELAMENTO (TRI_PD" +
                "V_DT_UPD) ;\';\r\n\r\nerro = \'create TB_PARCELA_TRIPDV_UPD_SYNC\';\r\nif (not exists(sel" +
                "ect 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_PARCELA_TRIPDV_UPD_SYNC\'))\r" +
                "\nthen\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_PARCELA_TRIPDV_UPD_SYNC FOR TB_PARCE" +
                "LAMENTO AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_PARCELAMENTO SET TRI_PDV_DT_UP" +
                "D = CURRENT_TIMESTAMP WHERE ID_PARCELA = NEW.ID_PARCELA and ( TRI_PDV_DT_UPD IS " +
                "null OR TRI_PDV_DT_UPD <> CURRENT_TIMESTAMP ) ; END;\';\r\n\r\nerro = \'add TRI_PDV_FE" +
                "CHAMENTOS.SYNCED\';\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RD" +
                "B$RELATION_NAME = \'TRI_PDV_FECHAMENTOS\'\r\nAND RDB$FIELD_NAME = \'SYNCED\' )) THEN E" +
                "XECUTE STATEMENT \'ALTER TABLE TRI_PDV_FECHAMENTOS ADD SYNCED SMALLINT;\';\r\nerro =" +
                " \'create TRI_PDV_FECH_SYNCED_IDX\';\r\nif (not exists (select 1 from RDB$INDICES wh" +
                "ere rdb$index_name = \'TRI_PDV_FECH_SYNCED_IDX\'))\r\nthen\r\nexecute statement \'CREAT" +
                "E INDEX TRI_PDV_FECH_SYNCED_IDX ON TRI_PDV_FECHAMENTOS (SYNCED) ;\';\r\n\r\nerro = \'a" +
                "dd TRI_PDV_SETUP.DESC_MAX_OP\';\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIEL" +
                "DS\r\nWHERE RDB$RELATION_NAME = \'TRI_PDV_SETUP\'\r\nAND RDB$FIELD_NAME = \'DESC_MAX_OP" +
                "\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TRI_PDV_SETUP ADD DESC_MAX_OP DOUBLE PR" +
                "ECISION DEFAULT 0 NOT NULL;\';\r\n\r\nerro = \'add TB_CIDADE_SIS.CODIGO_SIAFI\';\r\nIF( N" +
                "OT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_CID" +
                "ADE_SIS\'\r\nAND RDB$FIELD_NAME = \'CODIGO_SIAFI\' )) THEN EXECUTE STATEMENT \'ALTER T" +
                "ABLE TB_CIDADE_SIS ADD CODIGO_SIAFI VARCHAR(4);\';\r\n\r\nerro = \'add TB_CIDADE_SIS.C" +
                "ODIGO_SEDETEC\';\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RDB$RELATION_FIELDS\r\nWHERE RDB$R" +
                "ELATION_NAME = \'TB_CIDADE_SIS\'\r\nAND RDB$FIELD_NAME = \'CODIGO_SEDETEC\' )) THEN EX" +
                "ECUTE STATEMENT \'ALTER TABLE TB_CIDADE_SIS ADD CODIGO_SEDETEC VARCHAR(7);\';\r\n\r\ne" +
                "rro = \'add TB_EST_COMPOSICAO.TRI_PDV_DT_UPD\';\r\nIF( NOT EXISTS( SELECT 1\r\nFROM RD" +
                "B$RELATION_FIELDS\r\nWHERE RDB$RELATION_NAME = \'TB_EST_COMPOSICAO\'\r\nAND RDB$FIELD_" +
                "NAME = \'TRI_PDV_DT_UPD\' )) THEN EXECUTE STATEMENT \'ALTER TABLE TB_EST_COMPOSICAO" +
                " ADD TRI_PDV_DT_UPD TIMESTAMP ;\';\r\n\r\nerro = \'create TB_ESTCOMP_TRI_PDV_DT_UPD_ID" +
                "X\';\r\nif (not exists (select 1 from RDB$INDICES where rdb$index_name = \'TB_ESTCOM" +
                "P_TRI_PDV_DT_UPD_IDX\'))\r\nthen\r\nexecute statement \'CREATE INDEX TB_ESTCOMP_TRI_PD" +
                "V_DT_UPD_IDX ON TB_EST_COMPOSICAO (TRI_PDV_DT_UPD) ;\';\r\n\r\nerro = \'create TB_ESTC" +
                "OMP_TRIPDV_UPD_SYNC\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGG" +
                "ER_NAME = \'TB_ESTCOMP_TRIPDV_UPD_SYNC\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TRIGGE" +
                "R TB_ESTCOMP_TRIPDV_UPD_SYNC FOR TB_EST_COMPOSICAO AFTER INSERT OR UPDATE AS BEG" +
                "IN UPDATE TB_EST_COMPOSICAO SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_COMP" +
                "OSICAO = NEW.ID_COMPOSICAO and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD <> CUR" +
                "RENT_TIMESTAMP ) ; END;\';\r\n\r\nerro = \'create TB_ESTCOMPITEM_TRIPDV_UPD_SYNC\';\r\nif" +
                " (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTCOMPITEM" +
                "_TRIPDV_UPD_SYNC\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_ESTCOMPITEM_TRIP" +
                "DV_UPD_SYNC FOR TB_EST_COMP_ITEM AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_EST_C" +
                "OMPOSICAO SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_COMPOSICAO = NEW.ID_CO" +
                "MPOSICAO and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD <> CURRENT_TIMESTAMP ) ;" +
                " END;\';\r\n\r\n\r\nerro = \'deu certo\';\r\n\r\nSUSPEND;\r\nWHEN ANY DO BEGIN\r\nEND\r\nEND;";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "\r\n\t\t\t\t\t\tCREATE OR ALTER PROCEDURE SP_TRI_ATUALIZATABELAS2\r\n\t\t\t\t\t\tRETURNS( erro VA" +
                "RCHAR( 64 )) AS BEGIN\r\n\r\n\t\t\t\t\t\terro = \'create trigger TRI_MAIT_PEDIDO_BI\';\r\n\t\t\t\t" +
                "\t\tif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TRI_MAIT_P" +
                "EDIDO_BI\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TRI_MAIT_PEDIDO" +
                "_BI FOR TRI_MAIT_PEDIDO BEFORE INSERT AS BEGIN IF (NEW.ID_MAIT_PEDIDO = 0 OR NEW" +
                ".ID_MAIT_PEDIDO IS NULL ) THEN NEW.ID_MAIT_PEDIDO = GEN_ID ( GEN_MAIT_PEDIDO_ID " +
                ", 1 ) ; END\';\r\n\r\n\t\t\t\t\t\terro = \'create FK TRI_MAIT_PEDIDO_PDV_USERS_FK\';\r\n\t\t\t\t\t\ti" +
                "f (not exists(select 1 from RDB$RELATION_CONSTRAINTS where RDB$CONSTRAINT_NAME =" +
                " \'TRI_MAIT_PEDIDO_PDV_USERS_FK\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'ALTER TA" +
                "BLE TRI_MAIT_PEDIDO ADD CONSTRAINT TRI_MAIT_PEDIDO_PDV_USERS_FK FOREIGN KEY (ID_" +
                "USER) REFERENCES TRI_PDV_USERS(ID_USER);\';\r\n\r\n\t\t\t\t\t\terro = \'create trigger TRI_M" +
                "AIT_PEDIDO_ITEM_BI\';\r\n\t\t\t\t\t\tif (not exists(select 1 from RDB$TRIGGERS where RDB$" +
                "TRIGGER_NAME = \'TRI_MAIT_PEDIDO_ITEM_BI\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT " +
                "\'CREATE TRIGGER TRI_MAIT_PEDIDO_ITEM_BI FOR TRI_MAIT_PEDIDO_ITEM BEFORE INSERT A" +
                "S BEGIN IF (NEW.ID_MAIT_PEDIDO_ITEM = 0 OR NEW.ID_MAIT_PEDIDO_ITEM IS NULL ) THE" +
                "N NEW.ID_MAIT_PEDIDO_ITEM = GEN_ID ( GEN_TRI_MAIT_PED_ITEM_ID , 1 ) ; END\';\r\n\r\n\t" +
                "\t\t\t\t\terro = \'alter table tri_mait_pedido_item add observacao\';\r\n\t\t\t\t\t\tIF( NOT EX" +
                "ISTS( SELECT 1\r\n\t\t\t\t\t\tFROM RDB$RELATION_FIELDS\r\n\t\t\t\t\t\tWHERE RDB$RELATION_NAME = " +
                "\'TRI_MAIT_PEDIDO_ITEM\'\r\n\t\t\t\t\t\tAND RDB$FIELD_NAME = \'OBSERVACAO\' )) THEN EXECUTE " +
                "STATEMENT \'ALTER TABLE TRI_MAIT_PEDIDO_ITEM ADD OBSERVACAO BLOB SUB_TYPE 1;\';\r\n\r" +
                "\n\t\t\t\t\t\terro = \'alter table tri_pdv_setup add mait_max_mesas\';\r\n\t\t\t\t\t\tIF( NOT EXI" +
                "STS( SELECT 1\r\n\t\t\t\t\t\tFROM RDB$RELATION_FIELDS\r\n\t\t\t\t\t\tWHERE RDB$RELATION_NAME = \'" +
                "TRI_PDV_SETUP\'\r\n\t\t\t\t\t\tAND RDB$FIELD_NAME = \'MAIT_MAX_MESAS\' )) THEN EXECUTE STAT" +
                "EMENT \'ALTER TABLE TRI_PDV_SETUP ADD MAIT_MAX_MESAS SMALLINT;\';\r\n\r\n\t\t\t\t\t\terro = " +
                "\'create TB_EST_PRODUTO_REFERENCIA_IDX\';\r\n\t\t\t\t\t\tif (not exists (select 1 from RDB" +
                "$INDICES where rdb$index_name = \'TB_EST_PRODUTO_REFERENCIA_IDX\'))\r\n\t\t\t\t\t\tthen\r\n\t" +
                "\t\t\t\t\texecute statement \'CREATE INDEX TB_EST_PRODUTO_REFERENCIA_IDX ON TB_EST_PRO" +
                "DUTO (REFERENCIA);\';\r\n\r\n\t\t\t\t\t\terro = \'alter table tri_pdv_nsu add vlr_oper\';\r\n\t\t" +
                "\t\t\t\tIF( NOT EXISTS( SELECT 1\r\n\t\t\t\t\t\tFROM RDB$RELATION_FIELDS\r\n\t\t\t\t\t\tWHERE RDB$RE" +
                "LATION_NAME = \'TRI_PDV_NSU\'\r\n\t\t\t\t\t\tAND RDB$FIELD_NAME = \'VLR_OPER\' )) THEN EXECU" +
                "TE STATEMENT \'ALTER TABLE TRI_PDV_NSU ADD VLR_OPER NUMERIC(18,4);\';\r\n\r\n\t\t\t\t\t\terr" +
                "o = \'alter table TRI_MAIT_PEDIDO_ITEM add TS_EMISSAO\';\r\n\t\t\t\t\t\tIF( NOT EXISTS( SE" +
                "LECT 1\r\n\t\t\t\t\t\tFROM RDB$RELATION_FIELDS\r\n\t\t\t\t\t\tWHERE RDB$RELATION_NAME = \'TRI_MAI" +
                "T_PEDIDO_ITEM\'\r\n\t\t\t\t\t\tAND RDB$FIELD_NAME = \'TS_EMISSAO\' )) THEN EXECUTE STATEMEN" +
                "T \'ALTER TABLE TRI_MAIT_PEDIDO_ITEM ADD TS_EMISSAO TIMESTAMP DEFAULT CURRENT_TIM" +
                "ESTAMP;\';\r\n\r\n\t\t\t\t\t\terro = \'alter table TRI_MAIT_PEDIDO_ITEM add STATUS\';\r\n\t\t\t\t\t\t" +
                "IF( NOT EXISTS( SELECT 1\r\n\t\t\t\t\t\tFROM RDB$RELATION_FIELDS\r\n\t\t\t\t\t\tWHERE RDB$RELATI" +
                "ON_NAME = \'TRI_MAIT_PEDIDO_ITEM\'\r\n\t\t\t\t\t\tAND RDB$FIELD_NAME = \'STATUS\' )) THEN EX" +
                "ECUTE STATEMENT \'ALTER TABLE TRI_MAIT_PEDIDO_ITEM ADD STATUS VARCHAR(1) DEFAULT " +
                "\'\'P\'\' NOT NULL;\';\r\n\r\n\t\t\t\t\t\terro = \'create TRI_PDV_OPR_ID_CX_CURT_IDX\';\r\n\t\t\t\t\t\tif" +
                " (not exists (select 1 from RDB$INDICES where rdb$index_name = \'TRI_PDV_OPR_ID_C" +
                "X_CURT_IDX\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\texecute statement \'CREATE INDEX TRI_PDV_OPR_ID_" +
                "CX_CURT_IDX ON TRI_PDV_OPER (ID_CAIXA,CURRENTTIME);\';\r\n\r\n\t\t\t\t\t\terro = \'alter tab" +
                "le TRI_PDV_CONFIG add LOTSA STUFF\';\r\n\t\t\t\t\t\tIF ( NOT EXISTS (SELECT 1 FROM RDB$RE" +
                "LATION_FIELDS WHERE RDB$RELATION_NAME = \'TRI_PDV_CONFIG\' AND RDB$FIELD_NAME = \'M" +
                "ODELO_SAT\'))\r\n\t\t\t\t\t\tthen begin\r\n\t\t\t\t\t\texecute statement \'ALTER TABLE TRI_PDV_CON" +
                "FIG ADD MODELO_SAT INTEGER;\';\r\n\t\t\t\t\t\texecute statement \'ALTER TABLE TRI_PDV_CONF" +
                "IG ADD SATSERVIDOR CHAR(1);\';\r\n\t\t\t\t\t\texecute statement \'ALTER TABLE TRI_PDV_CONF" +
                "IG ADD IMPRESSORA_USB VARCHAR(64);\';\r\n\t\t\t\t\t\texecute statement \'ALTER TABLE TRI_P" +
                "DV_CONFIG ADD IMPRESSORA_USB_PED VARCHAR(64);\';\r\n\t\t\t\t\t\texecute statement \'ALTER " +
                "TABLE TRI_PDV_CONFIG ADD SAT_CODATIV VARCHAR(64);\';\r\n\t\t\t\t\t\texecute statement \'AL" +
                "TER TABLE TRI_PDV_CONFIG ADD SIGN_AC BLOB SUB_TYPE 1;\';\r\n\t\t\t\t\t\texecute statement" +
                " \'ALTER TABLE TRI_PDV_CONFIG ADD SAT_USADO CHAR(1);\';\r\n\t\t\t\t\t\texecute statement \'" +
                "ALTER TABLE TRI_PDV_CONFIG ADD ECF_ATIVA CHAR(1);\';\r\n\t\t\t\t\t\texecute statement \'AL" +
                "TER TABLE TRI_PDV_CONFIG ADD ECF_PORTA VARCHAR(5);\';\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\t\terro = " +
                "\'create TRI_PDV_CONFIG_NO_CAIXA_UIDX\';\r\n\t\t\t\t\t\tif (not exists (select 1 from RDB$" +
                "INDICES where rdb$index_name = \'TRI_PDV_CONFIG_NO_CAIXA_UIDX\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t" +
                "\t\t\texecute statement \'CREATE INDEX TRI_PDV_CONFIG_NO_CAIXA_UIDX ON TRI_PDV_CONFI" +
                "G (NO_CAIXA);\';\r\n\r\n\t\t\t\t\t\terro = \'add TB_NFVENDA.SYNCED\';\r\n\t\t\t\t\t\tIF( NOT EXISTS( " +
                "SELECT 1\r\n\t\t\t\t\t\tFROM RDB$RELATION_FIELDS\r\n\t\t\t\t\t\tWHERE RDB$RELATION_NAME = \'TB_NF" +
                "VENDA\'\r\n\t\t\t\t\t\tAND RDB$FIELD_NAME = \'SYNCED\' )) THEN EXECUTE STATEMENT \'ALTER TAB" +
                "LE TB_NFVENDA ADD SYNCED SMALLINT ;\';\r\n\r\n\r\n\t\t\t\t\t\terro = \'create TB_ESTOQUE_TRI_P" +
                "DV_DT_UPD_IDX\';\r\n\t\t\t\t\t\tif (not exists (select 1 from RDB$INDICES where rdb$index" +
                "_name = \'TB_ESTOQUE_TRI_PDV_DT_UPD_IDX\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\texecute statement \'" +
                "CREATE INDEX TB_ESTOQUE_TRI_PDV_DT_UPD_IDX ON TB_ESTOQUE (TRI_PDV_DT_UPD) ;\';\r\n\r" +
                "\n\t\t\t\t\t\terro = \'create TB_TRI_NFVENDA_STATUS_IDX\';\r\n\t\t\t\t\t\tif (not exists (select " +
                "1 from RDB$INDICES where rdb$index_name = \'TB_TRI_NFVENDA_STATUS_IDX\'))\r\n\t\t\t\t\t\tt" +
                "hen\r\n\t\t\t\t\t\texecute statement \'CREATE INDEX TB_TRI_NFVENDA_STATUS_IDX ON TB_NFVEN" +
                "DA (STATUS);\';\r\n\r\n\t\t\t\t\t\terro = \'create TB_NFVENDA_SYNCED_IDX\';\r\n\t\t\t\t\t\tif (not ex" +
                "ists (select 1 from RDB$INDICES where rdb$index_name = \'TB_NFVENDA_SYNCED_IDX\'))" +
                "\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\texecute statement \'CREATE INDEX TB_NFVENDA_SYNCED_IDX ON TB_" +
                "NFVENDA (SYNCED);\';\r\n\r\n\t\t\t\t\t\terro = \'create TB_TRI_NFVENDA_NF_NUMERO_IDX\';\r\n\t\t\t\t" +
                "\t\tif (not exists (select 1 from RDB$INDICES where rdb$index_name = \'TB_TRI_NFVEN" +
                "DA_NF_NUMERO_IDX\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\texecute statement \'CREATE INDEX TB_TRI_NF" +
                "VENDA_NF_NUMERO_IDX ON TB_NFVENDA (NF_NUMERO);\';\r\n\r\n\t\t\t\t\t\terro = \'create TB_TRI_" +
                "NFVENDA_NF_SERIE_IDX\';\r\n\t\t\t\t\t\tif (not exists (select 1 from RDB$INDICES where rd" +
                "b$index_name = \'TB_TRI_NFVENDA_NF_SERIE_IDX\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\texecute statem" +
                "ent \'CREATE INDEX TB_TRI_NFVENDA_NF_SERIE_IDX ON TB_NFVENDA (NF_SERIE);\';\r\n\r\n\t\t\t" +
                "\t\t\terro = \'create TB_TRI_NFVENDA_DT_SAIDA_IDX\';\r\n\t\t\t\t\t\tif (not exists (select 1 " +
                "from RDB$INDICES where rdb$index_name = \'TB_TRI_NFVENDA_DT_SAIDA_IDX\'))\r\n\t\t\t\t\t\tt" +
                "hen\r\n\t\t\t\t\t\texecute statement \'CREATE INDEX TB_TRI_NFVENDA_DT_SAIDA_IDX ON TB_NFV" +
                "ENDA (DT_SAIDA);\';\r\n\r\n\t\t\t\t\t\terro = \'create TB_TRI_NFVENDA_HR_SAIDA_IDX\';\r\n\t\t\t\t\t\t" +
                "if (not exists (select 1 from RDB$INDICES where rdb$index_name = \'TB_TRI_NFVENDA" +
                "_HR_SAIDA_IDX\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\texecute statement \'CREATE INDEX TB_TRI_NFVEN" +
                "DA_HR_SAIDA_IDX ON TB_NFVENDA (HR_SAIDA);\';\r\n\r\n\t\t\t\t\t\terro = \'create TB_TRI_MOVDI" +
                "ARIO_SYNCED_IDX\';\r\n\t\t\t\t\t\tif (not exists (select 1 from RDB$INDICES where rdb$ind" +
                "ex_name = \'TB_TRI_MOVDIARIO_SYNCED_IDX\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\texecute statement \'" +
                "CREATE INDEX TB_TRI_MOVDIARIO_SYNCED_IDX ON TB_MOVDIARIO (SYNCED);\';\r\n\r\n\t\t\t\t\t\ter" +
                "ro = \'alter table tri_pdv_setup add usa_recargas\';\r\n\t\t\t\t\t\tIF( NOT EXISTS( SELECT" +
                " 1\r\n\t\t\t\t\t\tFROM RDB$RELATION_FIELDS\r\n\t\t\t\t\t\tWHERE RDB$RELATION_NAME = \'TRI_PDV_SET" +
                "UP\'\r\n\t\t\t\t\t\tAND RDB$FIELD_NAME = \'USA_RECARGAS\' )) THEN EXECUTE STATEMENT \'ALTER " +
                "TABLE TRI_PDV_SETUP ADD USA_RECARGAS CHAR(1) DEFAULT \'\'N\'\' NOT NULL;\';\r\n\r\n\t\t\t\t\t\t" +
                "erro = \'alter table tri_pdv_sansun add synched\';\r\n\t\t\t\t\t\tIF( NOT EXISTS( SELECT 1" +
                "\r\n\t\t\t\t\t\tFROM RDB$RELATION_FIELDS\r\n\t\t\t\t\t\tWHERE RDB$RELATION_NAME = \'TRI_PDV_SANSU" +
                "P\'\r\n\t\t\t\t\t\tAND RDB$FIELD_NAME = \'SYNCHED\' )) THEN EXECUTE STATEMENT \'ALTER TABLE " +
                "TRI_PDV_SANSUP ADD SYNCHED CHAR(1) DEFAULT \'\'N\'\' NOT NULL;\';\r\n\r\n\t\t\t\t\t\terro = \'al" +
                "ter table tri_pdv_config add pergunta_whats\';\r\n\t\t\t\t\t\tIF( NOT EXISTS( SELECT 1\r\n\t" +
                "\t\t\t\t\tFROM RDB$RELATION_FIELDS\r\n\t\t\t\t\t\tWHERE RDB$RELATION_NAME = \'TRI_PDV_CONFIG\'\r" +
                "\n\t\t\t\t\t\tAND RDB$FIELD_NAME = \'PERGUNTA_WHATS\' )) THEN EXECUTE STATEMENT \'ALTER TA" +
                "BLE TRI_PDV_CONFIG ADD PERGUNTA_WHATS INTEGER DEFAULT 0 NOT NULL;\';\r\n\r\n\t\t\t\t\t\terr" +
                "o = \'alter table TRI_PDV_CONFIG add MORE CONFIGS\';\r\n\t\t\t\t\t\tIF ( NOT EXISTS (SELEC" +
                "T 1 FROM RDB$RELATION_FIELDS WHERE RDB$RELATION_NAME = \'TRI_PDV_CONFIG\' AND RDB$" +
                "FIELD_NAME = \'USATEF\'))\r\n\t\t\t\t\t\tthen begin\r\n\t\t\t\t\t\texecute statement \'ALTER TABLE " +
                "TRI_PDV_CONFIG ADD USATEF CHAR(1) DEFAULT \'\'N\'\' NOT NULL;\';\r\n\t\t\t\t\t\texecute state" +
                "ment \'ALTER TABLE TRI_PDV_CONFIG ADD TEFIP VARCHAR(15);\';\r\n\t\t\t\t\t\texecute stateme" +
                "nt \'ALTER TABLE TRI_PDV_CONFIG ADD TEFNUMLOJA VARCHAR(8);\';\r\n\t\t\t\t\t\texecute state" +
                "ment \'ALTER TABLE TRI_PDV_CONFIG ADD TEFNUMTERMINAL VARCHAR(8);\';\r\n\t\t\t\t\t\texecute" +
                " statement \'ALTER TABLE TRI_PDV_CONFIG ADD TEFPEDECPFPELOPINPAD CHAR(1);\';\r\n\t\t\t\t" +
                "\t\texecute statement \'ALTER TABLE TRI_PDV_SETUP ADD DETALHADESCONTO CHAR(1) DEFAU" +
                "LT \'\'N\'\' NOT NULL;\';\r\n\t\t\t\t\t\texecute statement \'ALTER TABLE TRI_PDV_SETUP ADD COD" +
                "10PORCENTO INTEGER;\';\r\n\t\t\t\t\t\texecute statement \'ALTER TABLE TRI_PDV_SETUP ADD MO" +
                "DOBAR CHAR(1) DEFAULT \'\'N\'\' NOT NULL;\';\r\n\t\t\t\t\t\texecute statement \'ALTER TABLE TR" +
                "I_PDV_SETUP ADD TIPO_LICENCA INT;\';\r\n\t\t\t\t\t\texecute statement \'ALTER TABLE TRI_PD" +
                "V_SETUP ADD USA_COMANDA CHAR(1) DEFAULT \'\'N\'\' NOT NULL;\';\r\n\t\t\t\t\t\texecute stateme" +
                "nt \'ALTER TABLE TRI_PDV_SETUP ADD PEDESENHACANCEL CHAR(1) DEFAULT \'\'S\'\' NOT NULL" +
                ";\';\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\t\terro = \'alter table TRI_PDV_CONFIG add EVEN MORE CONFIGS" +
                "\';\r\n\t\t\t\t\t\tIF ( NOT EXISTS (SELECT 1 FROM RDB$RELATION_FIELDS WHERE RDB$RELATION_" +
                "NAME = \'TRI_PDV_CONFIG\' AND RDB$FIELD_NAME = \'BALPORTA\'))\r\n\t\t\t\t\t\tthen begin\r\n\t\t\t" +
                "\t\t\texecute statement \'ALTER TABLE TRI_PDV_CONFIG ADD BALPORTA SMALLINT DEFAULT -" +
                "1 NOT NULL;\';\r\n\t\t\t\t\t\texecute statement \'ALTER TABLE TRI_PDV_CONFIG ADD BALBITS S" +
                "MALLINT DEFAULT -1 NOT NULL;\';\r\n\t\t\t\t\t\texecute statement \'ALTER TABLE TRI_PDV_CON" +
                "FIG ADD BALBAUD INTEGER DEFAULT -1 NOT NULL;\';\r\n\t\t\t\t\t\texecute statement \'ALTER T" +
                "ABLE TRI_PDV_CONFIG ADD BALPARITY SMALLINT DEFAULT -1 NOT NULL;\';\r\n\t\t\t\t\t\texecute" +
                " statement \'ALTER TABLE TRI_PDV_CONFIG ADD BALMODELO SMALLINT DEFAULT 0 NOT NULL" +
                ";\';\r\n\t\t\t\t\t\texecute statement \'ALTER TABLE TRI_PDV_CONFIG ADD ACFILLPREFIX SMALLI" +
                "NT DEFAULT 0 NOT NULL;\';\r\n\t\t\t\t\t\texecute statement \'ALTER TABLE TRI_PDV_CONFIG AD" +
                "D ACFILLMODE SMALLINT DEFAULT 3 NOT NULL;\';\r\n\t\t\t\t\t\texecute statement \'ALTER TABL" +
                "E TRI_PDV_CONFIG ADD ACREFERENCIA SMALLINT DEFAULT 0 NOT NULL;\';\r\n\t\t\t\t\t\texecute " +
                "statement \'ALTER TABLE TRI_PDV_CONFIG ADD SYSCOMISSAO SMALLINT DEFAULT 0 NOT NUL" +
                "L;\';\r\n\t\t\t\t\t\texecute statement \'ALTER TABLE TRI_PDV_CONFIG ADD SATSERVTIMEOUT INT" +
                "EGER DEFAULT 10 NOT NULL;\';\r\n\t\t\t\t\t\texecute statement \'ALTER TABLE TRI_PDV_CONFIG" +
                " ADD SATLIFESIGNINTERVAL INTEGER DEFAULT 1 NOT NULL;\';\r\n\t\t\t\t\t\texecute statement " +
                "\'ALTER TABLE TRI_PDV_CONFIG ADD ACFILLDELAY INTEGER DEFAULT -1 NOT NULL;\';\r\n\t\t\t\t" +
                "\t\texecute statement \'ALTER TABLE TRI_PDV_CONFIG ADD SYSEMITECOMPROVANTE SMALLINT" +
                " DEFAULT 0 NOT NULL;\';\r\n\t\t\t\t\t\texecute statement \'ALTER TABLE TRI_PDV_CONFIG ADD " +
                "SYSPERGUNTAWHATS SMALLINT DEFAULT 0 NOT NULL;\';\r\n\t\t\t\t\t\texecute statement \'ALTER " +
                "TABLE TRI_PDV_CONFIG ADD SYSPARCELA SMALLINT DEFAULT 0 NOT NULL;\';\r\n            " +
                "                                                                                " +
                "                    end\r\n\r\n                                                     " +
                "                                                           erro = \'alter table T" +
                "RI_PDV_CONFIG add CONFIGS MAQUININHA\';\r\n                                        " +
                "                                                                        IF ( NOT" +
                " EXISTS (SELECT 1 FROM RDB$RELATION_FIELDS WHERE RDB$RELATION_NAME = \'TRI_PDV_CO" +
                "NFIG\' AND RDB$FIELD_NAME = \'INFORMA_MAQUININHA\'))\r\n\t\t\t\t\t\tthen begin\r\n           " +
                "                                                                                " +
                "                     execute statement \'ALTER TABLE TRI_PDV_CONFIG ADD INFORMA_M" +
                "AQUININHA CHAR(1) DEFAULT \'\'N\'\' NOT NULL;\';\r\n\t\t\t\t\t\tend\r\n\r\n                      " +
                "                                                                                " +
                "          erro = \'alter table TRI_PDV_CONFIG add CONFIGS LAYOUT SAT\';\r\n         " +
                "                                                                                " +
                "                       IF ( NOT EXISTS (SELECT 1 FROM RDB$RELATION_FIELDS WHERE " +
                "RDB$RELATION_NAME = \'TRI_PDV_CONFIG\' AND RDB$FIELD_NAME = \'LAYOUT_SAT\'))\r\n\t\t\t\t\t\t" +
                "then begin\r\n                                                                    " +
                "                                            execute statement \'ALTER TABLE TRI_P" +
                "DV_CONFIG ADD LAYOUT_SAT VARCHAR(4) DEFAULT \'\'008\'\' NOT NULL;\';\r\n\t\t\t\t\t\tend\r\n\r\n  " +
                "                                                                                " +
                "                              erro = \'alter table TRI_PDV_CONFIG add CONFIGS VIN" +
                "CULA_MAQ_CTA\';\r\n                                                                " +
                "                                                IF ( NOT EXISTS (SELECT 1 FROM R" +
                "DB$RELATION_FIELDS WHERE RDB$RELATION_NAME = \'TRI_PDV_CONFIG\' AND RDB$FIELD_NAME" +
                " = \'VINCULA_MAQ_CTA\'))\r\n\t\t\t\t\t\tthen begin\r\n                                      " +
                "                                                                          execut" +
                "e statement \'ALTER TABLE TRI_PDV_CONFIG ADD VINCULA_MAQ_CTA CHAR(1) DEFAULT \'\'N\'" +
                "\' NOT NULL\';\r\n\t\t\t\t\t\tend\r\n\r\n                                                     " +
                "                                           erro = \'alter from null to 1 in TB_FU" +
                "NC_AUDITORIA_SIS.TRI_PDV_SYNCED\';\r\n                                             " +
                "                                                                   IF (EXISTS (S" +
                "ELECT 1 FROM RDB$RELATION_FIELDS WHERE RDB$RELATION_NAME = \'TB_FUNC_AUDITORIA_SI" +
                "S\' AND RDB$FIELD_NAME = \'TRI_PDV_SYNCED\'))\r\n\t\t\t\t\t\tthen begin\r\n                  " +
                "                                                                                " +
                "              execute statement \'EXECUTE BLOCK AS BEGIN UPDATE TB_FUNC_AUDITORIA" +
                "_SIS SET TRI_PDV_SYNCED = 1 WHERE TRI_PDV_SYNCED IS NULL; END\';\r\n\t\t\t\t\t\tend\r\n\r\n\t\t" +
                "\t\t\t\terro = \'delete UK TRI_PDV_DEVOL_PK\';\r\n\t\t\t\t\t\tif (exists (select 1 from RDB$IN" +
                "DICES where rdb$index_name = \'TRI_PDV_DEVOL_PK\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\texecute sta" +
                "tement \'ALTER TABLE TRI_PDV_DEVOL DROP CONSTRAINT TRI_PDV_DEVOL_PK\';\r\n\r\n\t\t\t\t\t\ter" +
                "ro = \'create gen TRI_PDV_DEVOL_ID\';\r\n\t\t\t\t\t\tif (NOT exists(SELECT 1 FROM RDB$GENE" +
                "RATORS WHERE RDB$Generator_name= \'TRI_PDV_DEVOL_ID\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE" +
                " STATEMENT \'CREATE GENERATOR TRI_PDV_DEVOL_ID;\';\r\n\r\n\t\t\t\t\t\terro = \'create trigger" +
                " DEVOL_ID_NEW\';\r\n\t\t\t\t\t\tif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGG" +
                "ER_NAME = \'DEVOL_ID_NEW\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER " +
                "DEVOL_ID_NEW FOR TRI_PDV_DEVOL BEFORE INSERT AS BEGIN IF (NEW.ID_DEVOLUCAO = -1)" +
                " THEN NEW.ID_DEVOLUCAO = GEN_ID(TRI_PDV_DEVOL_ID,1); END\';\r\n\r\n\t\t\t\t\t\terro = \'deu " +
                "certo\';\r\n\r\n\t\t\t\t\t\tSUSPEND;\r\n\t\t\t\t\t\tWHEN ANY DO BEGIN\r\n\t\t\t\t\t\tEND\r\n\t\t\t\t\t\tEND;";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_DSBL_SERV_TRGGR_ON_PDV\r\nRETURNS (\r\nerro VARCHAR(" +
                "64)\r\n)\r\nAS\r\nBEGIN\r\n\r\nerro = \'disable tb_estoque_aux_upd_sync_ins\';\r\nif (exists(s" +
                "elect 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTOQUE_AUX_UPD_SYNC_INS\'" +
                "))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER tb_estoque_aux_upd_sync_ins INACTIVE;" +
                "\';\r\n\r\nerro = \'disable tb_estoque_aux_upd_sync_upd\';\r\nif (exists(select 1 from RD" +
                "B$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTOQUE_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECU" +
                "TE STATEMENT \'ALTER TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'d" +
                "isable tb_estoque_aux_upd_sync_del\';\r\nif (exists(select 1 from RDB$TRIGGERS wher" +
                "e RDB$TRIGGER_NAME = \'TB_ESTOQUE_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'A" +
                "LTER TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable tb_estid" +
                "entif_aux_upd_sync_ins\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGE" +
                "R_NAME = \'TB_ESTIDENTIF_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIG" +
                "GER TB_ESTIDENTIF_AUX_UPD_SYNC_INS INACTIVE;\';\r\n\r\nerro = \'disable tb_estidentif_" +
                "aux_upd_sync_upd\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME" +
                " = \'TB_ESTIDENTIF_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB" +
                "_ESTIDENTIF_AUX_UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable tb_estidentif_aux_up" +
                "d_sync_del\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB" +
                "_ESTIDENTIF_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTID" +
                "ENTIF_AUX_UPD_SYNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable tb_estprod_aux_upd_sync_in" +
                "s\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTPROD_" +
                "AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTPROD_AUX_UPD_S" +
                "YNC_INS INACTIVE;\';\r\n\r\nerro = \'disable tb_estprod_aux_upd_sync_upd\';\r\nif (exists" +
                "(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTPROD_AUX_UPD_SYNC_UP" +
                "D\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTPROD_AUX_UPD_SYNC_UPD INACTIV" +
                "E;\';\r\n\r\nerro = \'disable tb_estprod_aux_upd_sync_del\';\r\nif (exists(select 1 from " +
                "RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTPROD_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXE" +
                "CUTE STATEMENT \'ALTER TRIGGER TB_ESTPROD_AUX_UPD_SYNC_DEL INACTIVE;\';\r\n\r\nerro = " +
                "\'disable TB_FORNEC_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGERS whe" +
                "re RDB$TRIGGER_NAME = \'TB_FORNEC_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'A" +
                "LTER TRIGGER TB_FORNEC_AUX_UPD_SYNC_INS INACTIVE;\';\r\n\r\nerro = \'disable TB_FORNEC" +
                "_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAM" +
                "E = \'TB_FORNEC_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_FO" +
                "RNEC_AUX_UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable TB_FORNEC_AUX_UPD_SYNC_DEL\'" +
                ";\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FORNEC_AUX" +
                "_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_FORNEC_AUX_UPD_SYNC_" +
                "DEL INACTIVE;\';\r\n\r\nerro = \'disable TB_ESTGRUPO_AUX_UPD_SYNC_INS\';\r\nif (exists(se" +
                "lect 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTGRUPO_AUX_UPD_SYNC_INS\'" +
                "))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_INS INACTIVE" +
                ";\';\r\n\r\nerro = \'disable TB_ESTGRUPO_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from " +
                "RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTGRUPO_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEX" +
                "ECUTE STATEMENT \'ALTER TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerro " +
                "= \'disable TB_ESTGRUPO_AUX_UPD_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGGERS" +
                " where RDB$TRIGGER_NAME = \'TB_ESTGRUPO_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEM" +
                "ENT \'ALTER TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable T" +
                "B_CLIENTE_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TR" +
                "IGGER_NAME = \'TB_CLIENTE_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRI" +
                "GGER TB_CLIENTE_AUX_UPD_SYNC_INS INACTIVE;\';\r\n\r\nerro = \'disable TB_CLIENTE_AUX_U" +
                "PD_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'T" +
                "B_CLIENTE_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_CLIENTE" +
                "_AUX_UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable TB_CLIENTE_AUX_UPD_SYNC_DEL\';\r\n" +
                "if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_CLIENTE_AUX_U" +
                "PD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_CLIENTE_AUX_UPD_SYNC_D" +
                "EL INACTIVE;\';\r\n\r\nerro = \'disable TB_FUNC_AUX_UPD_SYNC_INS\';\r\nif (exists(select " +
                "1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FUNC_AUX_UPD_SYNC_INS\'))\r\nthen\r" +
                "\nEXECUTE STATEMENT \'ALTER TRIGGER TB_FUNC_AUX_UPD_SYNC_INS INACTIVE;\';\r\n\r\nerro =" +
                " \'disable TB_FUNC_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS wher" +
                "e RDB$TRIGGER_NAME = \'TB_FUNC_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTE" +
                "R TRIGGER TB_FUNC_AUX_UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable TB_FUNC_AUX_UP" +
                "D_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB" +
                "_FUNC_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_FUNC_AUX_UP" +
                "D_SYNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable TB_UNIMED_AUX_UPD_SYNC_INS\';\r\nif (exis" +
                "ts(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_UNIMED_AUX_UPD_SYNC_I" +
                "NS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_UNIMED_AUX_UPD_SYNC_INS INACTIV" +
                "E;\';\r\n\r\nerro = \'disable TB_UNIMED_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from R" +
                "DB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_UNIMED_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECU" +
                "TE STATEMENT \'ALTER TRIGGER TB_UNIMED_AUX_UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'di" +
                "sable TB_UNIMED_AUX_UPD_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGGERS where " +
                "RDB$TRIGGER_NAME = \'TB_UNIMED_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTE" +
                "R TRIGGER TB_UNIMED_AUX_UPD_SYNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable TB_FUNCPAPEL" +
                "_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAM" +
                "E = \'TB_FUNCPAPEL_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB" +
                "_FUNCPAPEL_AUX_UPD_SYNC_INS INACTIVE;\';\r\n\r\nerro = \'disable TB_FUNCPAPEL_AUX_UPD_" +
                "SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_F" +
                "UNCPAPEL_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_FUNCPAPE" +
                "L_AUX_UPD_SYNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable TB_TRIMETODOS_AUX_UPD_SYNC_UPD" +
                "\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_TRIMETODO" +
                "S_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_TRIMETODOS_AUX_" +
                "UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable TB_EMITENTE_AUX_UPD_SYNC_UPD\';\r\nif (" +
                "exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_EMITENTE_AUX_UPD_" +
                "SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_EMITENTE_AUX_UPD_SYNC_UPD" +
                " INACTIVE;\';\r\n\r\nerro = \'disable TB_TRIUSERS_AUX_UPD_SYNC_INS\';\r\nif (exists(selec" +
                "t 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_TRIUSERS_AUX_UPD_SYNC_INS\'))\r" +
                "\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_INS INACTIVE;\';" +
                "\r\n\r\nerro = \'disable TB_TRIUSERS_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from RDB" +
                "$TRIGGERS where RDB$TRIGGER_NAME = \'TB_TRIUSERS_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECU" +
                "TE STATEMENT \'ALTER TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'" +
                "disable TB_TRIUSERS_AUX_UPD_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGGERS wh" +
                "ere RDB$TRIGGER_NAME = \'TB_TRIUSERS_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT" +
                " \'ALTER TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable TB_T" +
                "AXAUF_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGE" +
                "R_NAME = \'TB_TAXAUF_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER " +
                "TB_TAXAUF_AUX_UPD_SYNC_INS INACTIVE;\';\r\n\r\nerro = \'disable TB_TAXAUF_AUX_UPD_SYNC" +
                "_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_TAXAU" +
                "F_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_TAXAUF_AUX_UPD_" +
                "SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable TB_TAXAUF_AUX_UPD_SYNC_DEL\';\r\nif (exists" +
                "(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_TAXAUF_AUX_UPD_SYNC_DEL" +
                "\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_TAXAUF_AUX_UPD_SYNC_DEL INACTIVE;" +
                "\';\r\n\r\nerro = \'disable TB_CFOPSIS_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from RD" +
                "B$TRIGGERS where RDB$TRIGGER_NAME = \'TB_CFOPSIS_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECU" +
                "TE STATEMENT \'ALTER TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_INS INACTIVE;\';\r\n\r\nerro = \'d" +
                "isable TB_CFOPSIS_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS wher" +
                "e RDB$TRIGGER_NAME = \'TB_CFOPSIS_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'A" +
                "LTER TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable TB_CFOPS" +
                "IS_AUX_UPD_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_N" +
                "AME = \'TB_CFOPSIS_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB" +
                "_CFOPSIS_AUX_UPD_SYNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable TB_FMAPGTOSIS_AUX_UPD_S" +
                "YNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FM" +
                "APGTOSIS_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_FMAPGTOS" +
                "IS_AUX_UPD_SYNC_INS INACTIVE;\';\r\n\r\nerro = \'disable TB_FMAPGTOSIS_AUX_UPD_SYNC_UP" +
                "D\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FMAPGTOS" +
                "IS_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_FMAPGTOSIS_AUX" +
                "_UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL\';\r\ni" +
                "f (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FMAPGTOSIS_AUX" +
                "_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_FMAPGTOSIS_AUX_UPD_S" +
                "YNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable TB_PARCELA_AUX_UPD_SYNC_INS\';\r\nif (exists" +
                "(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_PARCELA_AUX_UPD_SYNC_IN" +
                "S\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_PARCELA_AUX_UPD_SYNC_INS INACTIV" +
                "E;\';\r\n\r\nerro = \'disable TB_PARCELA_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from " +
                "RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_PARCELA_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXE" +
                "CUTE STATEMENT \'ALTER TRIGGER TB_PARCELA_AUX_UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerro = " +
                "\'disable TB_PARCELA_AUX_UPD_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGGERS wh" +
                "ere RDB$TRIGGER_NAME = \'TB_PARCELA_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT " +
                "\'ALTER TRIGGER TB_PARCELA_AUX_UPD_SYNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable TB_EST" +
                "COMP_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER" +
                "_NAME = \'TB_ESTCOMP_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER " +
                "TB_ESTCOMP_AUX_UPD_SYNC_INS INACTIVE;\';\r\n\r\nerro = \'disable TB_ESTCOMP_AUX_UPD_SY" +
                "NC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_EST" +
                "COMP_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTCOMP_AUX_" +
                "UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable TB_ESTCOMP_AUX_UPD_SYNC_DEL\';\r\nif (e" +
                "xists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTCOMP_AUX_UPD_SY" +
                "NC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_DEL IN" +
                "ACTIVE;\';\r\n\r\nerro = \'disable TB_ESTCOMPITEM_AUX_UPD_SYNC_INS\';\r\nif (exists(selec" +
                "t 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTCOMPITEM_AUX_UPD_SYNC_INS\'" +
                "))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_INS INACT" +
                "IVE;\';\r\n\r\nerro = \'disable TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1" +
                " from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD\'))\r" +
                "\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD INACTIVE" +
                ";\';\r\n\r\nerro = \'disable TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL\';\r\nif (exists(select 1 fr" +
                "om RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL\'))\r\nth" +
                "en\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL INACTIVE;\';" +
                "\r\n\r\nerro = \'disable TB_IFS_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIG" +
                "GERS where RDB$TRIGGER_NAME = \'TB_IFS_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEME" +
                "NT \'ALTER TRIGGER TB_IFS_AUX_UPD_SYNC_INS INACTIVE;\';\r\n\r\nerro = \'disable TB_IFS_" +
                "AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME" +
                " = \'TB_IFS_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_IFS_AU" +
                "X_UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable TB_IFS_AUX_UPD_SYNC_DEL\';\r\nif (exi" +
                "sts(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_IFS_AUX_UPD_SYNC_DEL" +
                "\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_IFS_AUX_UPD_SYNC_DEL INACTIVE;\';\r" +
                "\n\r\nerro = \'disable TRI_PDV_CONFIG_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from R" +
                "DB$TRIGGERS where RDB$TRIGGER_NAME = \'TRI_PDV_CONFIG_AUX_UPD_SYNC_INS\'))\r\nthen\r\n" +
                "EXECUTE STATEMENT \'ALTER TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_INS INACTIVE;\';\r\n\r\n" +
                "erro = \'disable TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from RDB$" +
                "TRIGGERS where RDB$TRIGGER_NAME = \'TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXE" +
                "CUTE STATEMENT \'ALTER TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerr" +
                "o = \'disable TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRI" +
                "GGERS where RDB$TRIGGER_NAME = \'TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUT" +
                "E STATEMENT \'ALTER TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL INACTIVE;\';\r\n\r\nerro =" +
                " \'disable TB_NATOPER_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGERS w" +
                "here RDB$TRIGGER_NAME = \'TB_NATOPER_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT" +
                " \'ALTER TRIGGER TB_NATOPER_AUX_UPD_SYNC_INS INACTIVE;\';\r\n\r\nerro = \'disable TB_NA" +
                "TOPER_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGE" +
                "R_NAME = \'TB_NATOPER_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER" +
                " TB_NATOPER_AUX_UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable TB_NATOPER_AUX_UPD_S" +
                "YNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_NA" +
                "TOPER_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_NATOPER_AUX" +
                "_UPD_SYNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable TB_FMAPGTONFCE_AUX_UPD_SYNC_INS\';\r\n" +
                "if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FMAPGTONFCE_A" +
                "UX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_FMAPGTONFCE_AUX_UP" +
                "D_SYNC_INS INACTIVE;\';\r\n\r\nerro = \'disable TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD\';\r\nif " +
                "(exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FMAPGTONFCE_AUX_" +
                "UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_FMAPGTONFCE_AUX_UPD_S" +
                "YNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL\';\r\nif (ex" +
                "ists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FMAPGTONFCE_AUX_UPD" +
                "_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC" +
                "_DEL INACTIVE;\';\r\n\r\nerro = \'disable TB_ESTPRECODIAS_AUX_SYNC_INS\';\r\nif (exists(s" +
                "elect 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTPRECODIAS_AUX_SYNC_INS" +
                "\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTPRECODIAS_AUX_SYNC_INS INACTIV" +
                "E;\';\r\n\r\nerro = \'disable TB_ESTPRECODIAS_AUX_SYNC_UPD\';\r\nif (exists(select 1 from" +
                " RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTPRECODIAS_AUX_SYNC_UPD\'))\r\nthen\r\nE" +
                "XECUTE STATEMENT \'ALTER TRIGGER TB_ESTPRECODIAS_AUX_SYNC_UPD INACTIVE;\';\r\n\r\nerro" +
                " = \'disable TB_ESTPRECODIAS_AUX_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGGER" +
                "S where RDB$TRIGGER_NAME = \'TB_ESTPRECODIAS_AUX_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATE" +
                "MENT \'ALTER TRIGGER TB_ESTPRECODIAS_AUX_SYNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable " +
                "TB_ESTSUBGRUPO_AUX_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$T" +
                "RIGGER_NAME = \'TB_ESTSUBGRUPO_AUX_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TR" +
                "IGGER TB_ESTSUBGRUPO_AUX_SYNC_INS INACTIVE;\';\r\n\r\nerro = \'disable TB_ESTSUBGRUPO_" +
                "AUX_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'" +
                "TB_ESTSUBGRUPO_AUX_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTSUB" +
                "GRUPO_AUX_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable TB_ESTSUBGRUPO_AUX_SYNC_DEL\';\r" +
                "\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTSUBGRUPO_" +
                "AUX_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTSUBGRUPO_AUX_SYNC_" +
                "DEL INACTIVE;\';\r\n\r\nerro = \'disable TB_MOTIVO_DESO_AUX_SYNC_INS\';\r\nif (exists(sel" +
                "ect 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_MOTIVO_DESO_AUX_SYNC_INS\'))" +
                "\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_MOTIVO_DESO_AUX_SYNC_INS INACTIVE;\';" +
                "\r\n\r\nerro = \'disable TB_MOTIVO_DESO_AUX_SYNC_UPD\';\r\nif (exists(select 1 from RDB$" +
                "TRIGGERS where RDB$TRIGGER_NAME = \'TB_MOTIVO_DESO_AUX_SYNC_UPD\'))\r\nthen\r\nEXECUTE" +
                " STATEMENT \'ALTER TRIGGER TB_MOTIVO_DESO_AUX_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'dis" +
                "able TB_MOTIVO_DESO_AUX_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGGERS where " +
                "RDB$TRIGGER_NAME = \'TB_MOTIVO_DESO_AUX_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALT" +
                "ER TRIGGER TB_MOTIVO_DESO_AUX_SYNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable TB_ESTPREC" +
                "O_AUX_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME =" +
                " \'TB_ESTPRECO_AUX_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTPREC" +
                "O_AUX_SYNC_INS INACTIVE;\';\r\n\r\nerro = \'disable TB_ESTPRECO_AUX_SYNC_UPD\';\r\nif (ex" +
                "ists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTPRECO_AUX_SYNC_U" +
                "PD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTPRECO_AUX_SYNC_UPD INACTIVE;" +
                "\';\r\n\r\nerro = \'disable TB_ESTPRECO_AUX_SYNC_DEL\';\r\nif (exists(select 1 from RDB$T" +
                "RIGGERS where RDB$TRIGGER_NAME = \'TB_ESTPRECO_AUX_SYNC_DEL\'))\r\nthen\r\nEXECUTE STA" +
                "TEMENT \'ALTER TRIGGER TB_ESTPRECO_AUX_SYNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable TB" +
                "_PROMOSCANNTECH_AUX_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$" +
                "TRIGGER_NAME = \'TB_PROMOSCANNTECH_AUX_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTE" +
                "R TRIGGER TB_PROMOSCANNTECH_AUX_SYNC_INS INACTIVE;\';\r\n\r\nerro = \'disable TB_PROMO" +
                "SCANNTECH_AUX_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGE" +
                "R_NAME = \'TB_PROMOSCANNTECH_AUX_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIG" +
                "GER TB_PROMOSCANNTECH_AUX_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable TB_PROMOSCANNT" +
                "ECH_AUX_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME" +
                " = \'TB_PROMOSCANNTECH_AUX_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB" +
                "_PROMOSCANNTECH_AUX_SYNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable TB_ITENSCANNTECH_AUX" +
                "_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_" +
                "ITENSCANNTECH_AUX_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ITENSCA" +
                "NNTECH_AUX_SYNC_INS INACTIVE;\';\r\n\r\nerro = \'disable TB_ITENSCANNTECH_AUX_SYNC_UPD" +
                "\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ITENSCANN" +
                "TECH_AUX_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ITENSCANNTECH_AU" +
                "X_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable TB_ITENSCANNTECH_AUX_SYNC_DEL\';\r\nif (e" +
                "xists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ITENSCANNTECH_AUX_" +
                "SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ITENSCANNTECH_AUX_SYNC_DE" +
                "L INACTIVE;\';\r\n\r\nerro = \'disable TB_ADMIN_AUX_UPD_SYNC_INS\';\r\nif (exists(select " +
                "1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ADMIN_AUX_UPD_SYNC_INS\'))\r\nthen" +
                "\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ADMIN_AUX_UPD_SYNC_INS INACTIVE;\';\r\n\r\nerro" +
                " = \'disable TB_ADMIN_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS w" +
                "here RDB$TRIGGER_NAME = \'TB_ADMIN_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'" +
                "ALTER TRIGGER TB_ADMIN_AUX_UPD_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable TB_ADMIN_" +
                "AUX_UPD_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME" +
                " = \'TB_ADMIN_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ADMI" +
                "N_AUX_UPD_SYNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable TB_FUNC_PDV_USERS\';\r\nif (exist" +
                "s(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FUNC_PDV_USERS\'))\r\nthe" +
                "n\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_FUNC_PDV_USERS INACTIVE;\';\r\n\r\nerro = \'dis" +
                "able TB_FUNCPAPEL_PDV_USERS\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$T" +
                "RIGGER_NAME = \'TB_FUNCPAPEL_PDV_USERS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER" +
                " TB_FUNCPAPEL_PDV_USERS INACTIVE;\';\r\n\r\nerro = \'disable TB_PARAMETRO_AUX_SYNC_DEL" +
                "\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_PARAMETRO" +
                "_AUX_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_PARAMETRO_AUX_SYNC_D" +
                "EL INACTIVE;\';\r\n\r\nerro = \'disable TB_PARAMETRO_AUX_SYNC_INS\';\r\nif (exists(select" +
                " 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_PARAMETRO_AUX_SYNC_INS\'))\r\nthe" +
                "n\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_PARAMETRO_AUX_SYNC_INS INACTIVE;\';\r\n\r\nerr" +
                "o = \'disable TB_PARAMETRO_AUX_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS " +
                "where RDB$TRIGGER_NAME = \'TB_PARAMETRO_AUX_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT " +
                "\'ALTER TRIGGER TB_PARAMETRO_AUX_SYNC_UPD INACTIVE;\';\r\n\r\nerro = \'disable TB_BANCO" +
                "_CTA_AUX_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAM" +
                "E = \'TB_BANCO_CTA_AUX_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_BAN" +
                "CO_CTA_AUX_SYNC_DEL INACTIVE;\';\r\n\r\nerro = \'disable TB_BANCO_CTA_AUX_SYNC_INS\';\r\n" +
                "if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_BANCO_CTA_AUX" +
                "_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_BANCO_CTA_AUX_SYNC_INS I" +
                "NACTIVE;\';\r\n\r\nerro = \'disable TB_BANCO_CTA_AUX_SYNC_UPD\';\r\nif (exists(select 1 f" +
                "rom RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_BANCO_CTA_AUX_SYNC_UPD\'))\r\nthen\r\nE" +
                "XECUTE STATEMENT \'ALTER TRIGGER TB_BANCO_CTA_AUX_SYNC_UPD INACTIVE;\';\r\n\r\nerro = " +
                "\'deu certo\';\r\nSUSPEND;\r\nWHEN ANY DO\r\nBEGIN\r\n\r\nEND\r\nEND;";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[7] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_ENABLE_SERV_TRIGGERS\r\nRETURNS (\r\nerro VARCHAR(64" +
                ")\r\n)\r\nAS\r\nBEGIN\r\n\r\nerro = \'enable tb_estoque_aux_upd_sync_ins\';\r\nif (exists(sele" +
                "ct 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTOQUE_AUX_UPD_SYNC_INS\'))\r" +
                "\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER tb_estoque_aux_upd_sync_ins ACTIVE;\';\r\n\r" +
                "\nerro = \'enable tb_estoque_aux_upd_sync_upd\';\r\nif (not exists(select 1 from RDB$" +
                "TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTOQUE_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE" +
                " STATEMENT \'ALTER TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_UPD ACTIVE;\';\r\n\r\nerro = \'enabl" +
                "e tb_estoque_aux_upd_sync_del\';\r\nif (not exists(select 1 from RDB$TRIGGERS where" +
                " RDB$TRIGGER_NAME = \'TB_ESTOQUE_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'AL" +
                "TER TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r\nerro = \'enable tb_estidenti" +
                "f_aux_upd_sync_ins\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGE" +
                "R_NAME = \'TB_ESTIDENTIF_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIG" +
                "GER TB_ESTIDENTIF_AUX_UPD_SYNC_INS ACTIVE;\';\r\n\r\nerro = \'enable tb_estidentif_aux" +
                "_upd_sync_upd\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAM" +
                "E = \'TB_ESTIDENTIF_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER T" +
                "B_ESTIDENTIF_AUX_UPD_SYNC_UPD ACTIVE;\';\r\n\r\nerro = \'enable tb_estidentif_aux_upd_" +
                "sync_del\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'" +
                "TB_ESTIDENTIF_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_EST" +
                "IDENTIF_AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r\nerro = \'enable tb_estprod_aux_upd_sync_ins" +
                "\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTPR" +
                "OD_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTPROD_AUX_UP" +
                "D_SYNC_INS ACTIVE;\';\r\n\r\nerro = \'enable tb_estprod_aux_upd_sync_upd\';\r\nif (not ex" +
                "ists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTPROD_AUX_UPD_SYN" +
                "C_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTPROD_AUX_UPD_SYNC_UPD ACT" +
                "IVE;\';\r\n\r\nerro = \'enable tb_estprod_aux_upd_sync_del\';\r\nif (not exists(select 1 " +
                "from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTPROD_AUX_UPD_SYNC_DEL\'))\r\nthen" +
                "\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTPROD_AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r\nerro" +
                " = \'enable TB_FORNEC_AUX_UPD_SYNC_INS\';\r\nif (not exists(select 1 from RDB$TRIGGE" +
                "RS where RDB$TRIGGER_NAME = \'TB_FORNEC_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEM" +
                "ENT \'ALTER TRIGGER TB_FORNEC_AUX_UPD_SYNC_INS ACTIVE;\';\r\n\r\nerro = \'enable TB_FOR" +
                "NEC_AUX_UPD_SYNC_UPD\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIG" +
                "GER_NAME = \'TB_FORNEC_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGE" +
                "R TB_FORNEC_AUX_UPD_SYNC_UPD ACTIVE;\';\r\n\r\nerro = \'enable TB_FORNEC_AUX_UPD_SYNC_" +
                "DEL\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FO" +
                "RNEC_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_FORNEC_AUX_U" +
                "PD_SYNC_DEL ACTIVE;\';\r\n\r\nerro = \'enable TB_ESTGRUPO_AUX_UPD_SYNC_INS\';\r\nif (not " +
                "exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTGRUPO_AUX_UPD_" +
                "SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_INS" +
                " ACTIVE;\';\r\n\r\nerro = \'enable TB_ESTGRUPO_AUX_UPD_SYNC_UPD\';\r\nif (not exists(sele" +
                "ct 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTGRUPO_AUX_UPD_SYNC_UPD\'))" +
                "\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_UPD ACTIVE;\';\r" +
                "\n\r\nerro = \'enable TB_ESTGRUPO_AUX_UPD_SYNC_DEL\';\r\nif (not exists(select 1 from R" +
                "DB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTGRUPO_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXE" +
                "CUTE STATEMENT \'ALTER TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r\nerro = \'" +
                "enable TB_CLIENTE_AUX_UPD_SYNC_INS\';\r\nif (not exists(select 1 from RDB$TRIGGERS " +
                "where RDB$TRIGGER_NAME = \'TB_CLIENTE_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMEN" +
                "T \'ALTER TRIGGER TB_CLIENTE_AUX_UPD_SYNC_INS ACTIVE;\';\r\n\r\nerro = \'enable TB_CLIE" +
                "NTE_AUX_UPD_SYNC_UPD\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIG" +
                "GER_NAME = \'TB_CLIENTE_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGG" +
                "ER TB_CLIENTE_AUX_UPD_SYNC_UPD ACTIVE;\';\r\n\r\nerro = \'enable TB_CLIENTE_AUX_UPD_SY" +
                "NC_DEL\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB" +
                "_CLIENTE_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_CLIENTE_" +
                "AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r\nerro = \'enable TB_FUNC_AUX_UPD_SYNC_INS\';\r\nif (not" +
                " exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FUNC_AUX_UPD_SYN" +
                "C_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_FUNC_AUX_UPD_SYNC_INS ACTIVE" +
                ";\';\r\n\r\nerro = \'enable TB_FUNC_AUX_UPD_SYNC_UPD\';\r\nif (not exists(select 1 from R" +
                "DB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FUNC_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE" +
                " STATEMENT \'ALTER TRIGGER TB_FUNC_AUX_UPD_SYNC_UPD ACTIVE;\';\r\n\r\nerro = \'enable T" +
                "B_FUNC_AUX_UPD_SYNC_DEL\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$T" +
                "RIGGER_NAME = \'TB_FUNC_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGG" +
                "ER TB_FUNC_AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r\nerro = \'enable TB_UNIMED_AUX_UPD_SYNC_I" +
                "NS\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_UNI" +
                "MED_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_UNIMED_AUX_UP" +
                "D_SYNC_INS ACTIVE;\';\r\n\r\nerro = \'enable TB_UNIMED_AUX_UPD_SYNC_UPD\';\r\nif (not exi" +
                "sts(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_UNIMED_AUX_UPD_SYNC_" +
                "UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_UNIMED_AUX_UPD_SYNC_UPD ACTIVE" +
                ";\';\r\n\r\nerro = \'enable TB_UNIMED_AUX_UPD_SYNC_DEL\';\r\nif (not exists(select 1 from" +
                " RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_UNIMED_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXE" +
                "CUTE STATEMENT \'ALTER TRIGGER TB_UNIMED_AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r\nerro = \'en" +
                "able TB_FUNCPAPEL_AUX_UPD_SYNC_INS\';\r\nif (not exists(select 1 from RDB$TRIGGERS " +
                "where RDB$TRIGGER_NAME = \'TB_FUNCPAPEL_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEM" +
                "ENT \'ALTER TRIGGER TB_FUNCPAPEL_AUX_UPD_SYNC_INS ACTIVE;\';\r\n\r\nerro = \'enable TB_" +
                "FUNCPAPEL_AUX_UPD_SYNC_DEL\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RD" +
                "B$TRIGGER_NAME = \'TB_FUNCPAPEL_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALT" +
                "ER TRIGGER TB_FUNCPAPEL_AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r\nerro = \'enable TB_TRIMETOD" +
                "OS_AUX_UPD_SYNC_UPD\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGG" +
                "ER_NAME = \'TB_TRIMETODOS_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRI" +
                "GGER TB_TRIMETODOS_AUX_UPD_SYNC_UPD ACTIVE;\';\r\n\r\nerro = \'enable TB_EMITENTE_AUX_" +
                "UPD_SYNC_UPD\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME" +
                " = \'TB_EMITENTE_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_E" +
                "MITENTE_AUX_UPD_SYNC_UPD ACTIVE;\';\r\n\r\nerro = \'enable TB_TRIUSERS_AUX_UPD_SYNC_IN" +
                "S\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_TRIU" +
                "SERS_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_TRIUSERS_AUX" +
                "_UPD_SYNC_INS ACTIVE;\';\r\n\r\nerro = \'enable TB_TRIUSERS_AUX_UPD_SYNC_UPD\';\r\nif (no" +
                "t exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_TRIUSERS_AUX_UP" +
                "D_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_U" +
                "PD ACTIVE;\';\r\n\r\nerro = \'enable TB_TRIUSERS_AUX_UPD_SYNC_DEL\';\r\nif (not exists(se" +
                "lect 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_TRIUSERS_AUX_UPD_SYNC_DEL\'" +
                "))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_DEL ACTIVE;\'" +
                ";\r\n\r\nerro = \'enable TB_TAXAUF_AUX_UPD_SYNC_INS\';\r\nif (not exists(select 1 from R" +
                "DB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_TAXAUF_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECU" +
                "TE STATEMENT \'ALTER TRIGGER TB_TAXAUF_AUX_UPD_SYNC_INS ACTIVE;\';\r\n\r\nerro = \'enab" +
                "le TB_TAXAUF_AUX_UPD_SYNC_UPD\';\r\nif (not exists(select 1 from RDB$TRIGGERS where" +
                " RDB$TRIGGER_NAME = \'TB_TAXAUF_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALT" +
                "ER TRIGGER TB_TAXAUF_AUX_UPD_SYNC_UPD ACTIVE;\';\r\n\r\nerro = \'enable TB_TAXAUF_AUX_" +
                "UPD_SYNC_DEL\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME" +
                " = \'TB_TAXAUF_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_TAX" +
                "AUF_AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r\nerro = \'enable TB_CFOPSIS_AUX_UPD_SYNC_INS\';\r\n" +
                "if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_CFOPSIS_A" +
                "UX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_CFOPSIS_AUX_UPD_SY" +
                "NC_INS ACTIVE;\';\r\n\r\nerro = \'enable TB_CFOPSIS_AUX_UPD_SYNC_UPD\';\r\nif (not exists" +
                "(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_CFOPSIS_AUX_UPD_SYNC_UP" +
                "D\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_UPD ACTIVE;" +
                "\';\r\n\r\nerro = \'enable TB_CFOPSIS_AUX_UPD_SYNC_DEL\';\r\nif (not exists(select 1 from" +
                " RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_CFOPSIS_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEX" +
                "ECUTE STATEMENT \'ALTER TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r\nerro = \'" +
                "enable TB_FMAPGTOSIS_AUX_UPD_SYNC_INS\';\r\nif (not exists(select 1 from RDB$TRIGGE" +
                "RS where RDB$TRIGGER_NAME = \'TB_FMAPGTOSIS_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE ST" +
                "ATEMENT \'ALTER TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_INS ACTIVE;\';\r\n\r\nerro = \'enabl" +
                "e TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD\';\r\nif (not exists(select 1 from RDB$TRIGGERS wh" +
                "ere RDB$TRIGGER_NAME = \'TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEME" +
                "NT \'ALTER TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD ACTIVE;\';\r\n\r\nerro = \'enable TB_" +
                "FMAPGTOSIS_AUX_UPD_SYNC_DEL\';\r\nif (not exists(select 1 from RDB$TRIGGERS where R" +
                "DB$TRIGGER_NAME = \'TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'A" +
                "LTER TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r\nerro = \'enable TB_PARCE" +
                "LA_AUX_UPD_SYNC_INS\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGG" +
                "ER_NAME = \'TB_PARCELA_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGE" +
                "R TB_PARCELA_AUX_UPD_SYNC_INS ACTIVE;\';\r\n\r\nerro = \'enable TB_PARCELA_AUX_UPD_SYN" +
                "C_UPD\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_" +
                "PARCELA_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_PARCELA_A" +
                "UX_UPD_SYNC_UPD ACTIVE;\';\r\n\r\nerro = \'enable TB_PARCELA_AUX_UPD_SYNC_DEL\';\r\nif (n" +
                "ot exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_PARCELA_AUX_UP" +
                "D_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_PARCELA_AUX_UPD_SYNC_DE" +
                "L ACTIVE;\';\r\n\r\nerro = \'enable TB_ESTCOMP_AUX_UPD_SYNC_INS\';\r\nif (not exists(sele" +
                "ct 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTCOMP_AUX_UPD_SYNC_INS\'))\r" +
                "\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_INS ACTIVE;\';\r\n\r" +
                "\nerro = \'enable TB_ESTCOMP_AUX_UPD_SYNC_UPD\';\r\nif (not exists(select 1 from RDB$" +
                "TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTCOMP_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE" +
                " STATEMENT \'ALTER TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_UPD ACTIVE;\';\r\n\r\nerro = \'enabl" +
                "e TB_ESTCOMP_AUX_UPD_SYNC_DEL\';\r\nif (not exists(select 1 from RDB$TRIGGERS where" +
                " RDB$TRIGGER_NAME = \'TB_ESTCOMP_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'AL" +
                "TER TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r\nerro = \'enable TB_ESTCOMPIT" +
                "EM_AUX_UPD_SYNC_INS\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGG" +
                "ER_NAME = \'TB_ESTCOMPITEM_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TR" +
                "IGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_INS ACTIVE;\';\r\n\r\nerro = \'enable TB_ESTCOMPITEM" +
                "_AUX_UPD_SYNC_UPD\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER" +
                "_NAME = \'TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIG" +
                "GER TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD ACTIVE;\';\r\n\r\nerro = \'enable TB_ESTCOMPITEM_A" +
                "UX_UPD_SYNC_DEL\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_N" +
                "AME = \'TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGE" +
                "R TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r\nerro = \'enable TB_IFS_AUX_UPD_SYN" +
                "C_INS\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_" +
                "IFS_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_IFS_AUX_UPD_S" +
                "YNC_INS ACTIVE;\';\r\n\r\nerro = \'enable TB_IFS_AUX_UPD_SYNC_UPD\';\r\nif (not exists(se" +
                "lect 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_IFS_AUX_UPD_SYNC_UPD\'))\r\nt" +
                "hen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_IFS_AUX_UPD_SYNC_UPD ACTIVE;\';\r\n\r\nerro " +
                "= \'enable TB_IFS_AUX_UPD_SYNC_DEL\';\r\nif (not exists(select 1 from RDB$TRIGGERS w" +
                "here RDB$TRIGGER_NAME = \'TB_IFS_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'AL" +
                "TER TRIGGER TB_IFS_AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r\nerro = \'enable TRI_PDV_CONFIG_A" +
                "UX_UPD_SYNC_INS\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_N" +
                "AME = \'TRI_PDV_CONFIG_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGE" +
                "R TRI_PDV_CONFIG_AUX_UPD_SYNC_INS ACTIVE;\';\r\n\r\nerro = \'enable TRI_PDV_CONFIG_AUX" +
                "_UPD_SYNC_UPD\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAM" +
                "E = \'TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER " +
                "TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD ACTIVE;\';\r\n\r\nerro = \'enable TRI_PDV_CONFIG_AUX_U" +
                "PD_SYNC_DEL\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME " +
                "= \'TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TR" +
                "I_PDV_CONFIG_AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r\nerro = \'enable TB_NATOPER_AUX_UPD_SYN" +
                "C_INS\';\r\nif (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_" +
                "NATOPER_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_NATOPER_A" +
                "UX_UPD_SYNC_INS ACTIVE;\';\r\n\r\nerro = \'enable TB_NATOPER_AUX_UPD_SYNC_UPD\';\r\nif (n" +
                "ot exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_NATOPER_AUX_UP" +
                "D_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_NATOPER_AUX_UPD_SYNC_UP" +
                "D ACTIVE;\';\r\n\r\nerro = \'enable TB_NATOPER_AUX_UPD_SYNC_DEL\';\r\nif (not exists(sele" +
                "ct 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_NATOPER_AUX_UPD_SYNC_DEL\'))\r" +
                "\nthen\r\nEXECUTE STATEMENT \'ALTER TRIGGER TB_NATOPER_AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r" +
                "\nerro = \'enable TB_FMAPGTONFCE_AUX_UPD_SYNC_INS\';\r\nif (not exists(select 1 from " +
                "RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FMAPGTONFCE_AUX_UPD_SYNC_INS\'))\r\nthen\r" +
                "\nEXECUTE STATEMENT \'ALTER TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_INS ACTIVE;\';\r\n\r\ne" +
                "rro = \'enable TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD\';\r\nif (not exists(select 1 from RD" +
                "B$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nE" +
                "XECUTE STATEMENT \'ALTER TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD ACTIVE;\';\r\n\r\nerr" +
                "o = \'enable TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL\';\r\nif (not exists(select 1 from RDB$" +
                "TRIGGERS where RDB$TRIGGER_NAME = \'TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXE" +
                "CUTE STATEMENT \'ALTER TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL ACTIVE;\';\r\n\r\nerro " +
                "= \'deu certo\';\r\nSUSPEND;\r\nWHEN ANY DO\r\nBEGIN\r\n\r\nEND\r\nEND;\r\n";
            this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[8] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = "\r\n\t\t\t\t\t\tCREATE OR ALTER PROCEDURE SP_TRI_GERATRIGGERS_AUX_SYNC\r\n\t\t\t\t\t\tRETURNS (\r\n" +
                "\t\t\t\t\t\terro VARCHAR(64)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\tAS\r\n\t\t\t\t\t\tBEGIN\r\n\r\n\t\t\t\t\t\terro = \'drop tb_" +
                "estoque_aux_upd_sync_ins\';\r\n\t\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS where RD" +
                "B$TRIGGER_NAME = \'TB_ESTOQUE_AUX_UPD_SYNC_INS\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STAT" +
                "EMENT \'DROP TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_INS;\';\r\n\t\t\t\t\t\terro = \'create tb_esto" +
                "que_aux_upd_sync_ins\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_ESTOQUE_AUX_U" +
                "PD_SYNC_INS FOR TB_ESTOQUE ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COL" +
                "UMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER" +
                " BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG," +
                " TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1), new" +
                ".ID_ESTOQUE, \'\'TB_ESTOQUE\'\', \'\'I\'\', :VNUMCAIXA, CURRENT_TIMESTAMP); END END;\';\r\n" +
                "\r\n\t\t\t\t\t\terro = \'drop tb_estoque_aux_upd_sync_upd\';\r\n\t\t\t\t\t\tif (exists(select 1 fr" +
                "om RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTOQUE_AUX_UPD_SYNC_UPD\'))\r\n\t\t\t\t\t\t" +
                "then\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_UPD;\';\r\n\t\t\t\t" +
                "\t\terro = \'create tb_estoque_aux_upd_sync_upd\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE " +
                "TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_UPD FOR TB_ESTOQUE BEFORE UPDATE AS DECLARE VNUM" +
                "CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN IF (old.ID_GRUPO IS DISTINCT" +
                " FROM new.ID_GRUPO OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.STATUS" +
                " IS DISTINCT FROM new.STATUS OR old.DT_CADAST IS DISTINCT FROM new.DT_CADAST OR " +
                "old.HR_CADAST IS DISTINCT FROM new.HR_CADAST OR old.FRACIONADO IS DISTINCT FROM " +
                "new.FRACIONADO OR old.PRC_VENDA IS DISTINCT FROM new.PRC_VENDA OR old.PRC_CUSTO " +
                "IS DISTINCT FROM new.PRC_CUSTO OR old.ULT_VENDA IS DISTINCT FROM new.ULT_VENDA O" +
                "R old.MARGEM_LB IS DISTINCT FROM new.MARGEM_LB OR old.POR_COMISSAO IS DISTINCT F" +
                "ROM new.POR_COMISSAO OR old.ULT_FORNEC IS DISTINCT FROM new.ULT_FORNEC OR old.GR" +
                "ADE_SERIE IS DISTINCT FROM new.GRADE_SERIE OR old.ID_TIPOITEM IS DISTINCT FROM n" +
                "ew.ID_TIPOITEM OR old.ID_CTI IS DISTINCT FROM new.ID_CTI OR old.CST_PIS IS DISTI" +
                "NCT FROM new.CST_PIS OR old.CST_COFINS IS DISTINCT FROM new.CST_COFINS OR old.PI" +
                "S IS DISTINCT FROM new.PIS OR old.COFINS IS DISTINCT FROM new.COFINS OR old.UNI_" +
                "MEDIDA IS DISTINCT FROM new.UNI_MEDIDA OR old.MARGEM_PV IS DISTINCT FROM new.MAR" +
                "GEM_PV OR old.CFOP IS DISTINCT FROM new.CFOP OR old.OBSERVACAO IS DISTINCT FROM " +
                "new.OBSERVACAO OR old.NAT_RECEITA IS DISTINCT FROM new.NAT_RECEITA OR old.CFOP_N" +
                "F IS DISTINCT FROM new.CFOP_NF OR old.PRC_ATACADO IS DISTINCT FROM new.PRC_ATACA" +
                "DO OR old.ID_CTI_PART IS DISTINCT FROM new.ID_CTI_PART OR old.ID_CTI_FCP IS DIST" +
                "INCT FROM new.ID_CTI_FCP OR old.QTD_ATACADO IS DISTINCT FROM new.QTD_ATACADO OR " +
                "OLD.ID_CTI_CFE IS DISTINCT FROM NEW.ID_CTI_CFE OR OLD.EMPCADASTRO IS DISTINCT FR" +
                "OM NEW.EMPCADASTRO OR OLD.ALIQINTERNA IS DISTINCT  FROM  NEW.ALIQINTERNA OR OLD." +
                "MARGEM_LB_ATAC IS DISTINCT  FROM  NEW.MARGEM_LB_ATAC OR OLD.INFCOMPLEMENTAR IS D" +
                "ISTINCT  FROM  NEW.INFCOMPLEMENTAR OR OLD.ID_MOTIVO_DESO IS DISTINCT  FROM  NEW." +
                "ID_MOTIVO_DESO OR OLD.ID_CTAPLA IS DISTINCT  FROM  NEW.ID_CTAPLA OR OLD.COD_ANVI" +
                "SA IS DISTINCT  FROM  NEW.COD_ANVISA OR OLD.PMC IS DISTINCT  FROM  NEW.PMC OR OL" +
                "D.IRRF IS DISTINCT  FROM  NEW.IRRF OR OLD.MED_MOTIVO_ISENCAO IS DISTINCT  FROM  " +
                "NEW.MED_MOTIVO_ISENCAO OR OLD.CONTROLEESP IS DISTINCT  FROM  NEW.CONTROLEESP OR " +
                "OLD.ID_SUBGRUPO IS DISTINCT  FROM  NEW.ID_SUBGRUPO OR OLD.COD_BENEF_CFOP IS DIST" +
                "INCT  FROM  NEW.COD_BENEF_CFOP OR OLD.TP_PRC_ATACADO IS DISTINCT  FROM  NEW.TP_P" +
                "RC_ATACADO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA" +
                " INTO :VNUMCAIXA DO BEGIN IF (( SELECT COUNT (1) FROM TRI_PDV_AUX_SYNC WHERE ID_" +
                "REG = old.ID_ESTOQUE AND TABELA = \'\'TB_ESTOQUE\'\' AND (OPERACAO = \'\'I\'\' OR OPERAC" +
                "AO = \'\'U\'\') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_S" +
                "YNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX" +
                "_SYNC_SEQ, 1), old.ID_ESTOQUE, \'\'TB_ESTOQUE\'\', \'\'U\'\', :VNUMCAIXA, CURRENT_TIMEST" +
                "AMP); END END END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop tb_estoque_aux_upd_sync_del\';\r\n\t\t" +
                "\t\t\t\tif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTOQUE_A" +
                "UX_UPD_SYNC_DEL\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_ESTOQUE" +
                "_AUX_UPD_SYNC_DEL\';\r\n\t\t\t\t\t\terro = \'create tb_estoque_aux_upd_sync_del\';\r\n\t\t\t\t\t\tE" +
                "XECUTE STATEMENT \'CREATE TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_DEL FOR TB_ESTOQUE ACTI" +
                "VE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BE" +
                "GIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO" +
                " BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS" +
                "_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1), old.ID_ESTOQUE, \'\'TB_ESTOQUE\'\', \'\'" +
                "D\'\', :VNUMCAIXA, CURRENT_TIMESTAMP); END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop tb_estiden" +
                "tif_aux_upd_sync_ins\';\r\n\t\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS where RDB$TR" +
                "IGGER_NAME = \'TB_ESTIDENTIF_AUX_UPD_SYNC_INS\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATE" +
                "MENT \'DROP TRIGGER TB_ESTIDENTIF_AUX_UPD_SYNC_INS;\';\r\n\t\t\t\t\t\terro = \'create tb_es" +
                "tidentif_aux_upd_sync_ins\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_ESTIDENT" +
                "IF_AUX_UPD_SYNC_INS FOR TB_EST_IDENTIFICADOR ACTIVE BEFORE INSERT AS DECLARE VNU" +
                "MCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TR" +
                "I_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_" +
                "SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AU" +
                "X_SYNC_SEQ,1), new.ID_IDENTIFICADOR, \'\'TB_EST_IDENTIFICADOR\'\', \'\'I\'\', :VNUMCAIXA" +
                ", CURRENT_TIMESTAMP); END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop tb_estidentif_aux_upd_syn" +
                "c_upd\';\r\n\t\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'T" +
                "B_ESTIDENTIF_AUX_UPD_SYNC_UPD\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIG" +
                "GER TB_ESTIDENTIF_AUX_UPD_SYNC_UPD;\';\r\n\t\t\t\t\t\terro = \'create tb_estidentif_aux_up" +
                "d_sync_upd\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_ESTIDENTIF_AUX_UPD_SYNC" +
                "_UPD FOR TB_EST_IDENTIFICADOR ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF " +
                "COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN IF (old.ID_ESTOQUE IS DISTINCT FROM new.ID" +
                "_ESTOQUE OR old.CHAVE IS DISTINCT FROM new.CHAVE) THEN BEGIN FOR SELECT NO_CAIXA" +
                " FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ((SELECT COUN" +
                "T (1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_IDENTIFICADOR AND TABELA = \'\'T" +
                "B_EST_IDENTIFICADOR\'\' AND (OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\') AND NO_CAIXA = " +
                ":VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, O" +
                "PERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1), old.ID_IDENTI" +
                "FICADOR, \'\'TB_EST_IDENTIFICADOR\'\', \'\'U\'\', :VNUMCAIXA, CURRENT_TIMESTAMP); END EN" +
                "D END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop tb_estidentif_aux_upd_sync_del\';\r\n\t\t\t\t\t\tif (e" +
                "xists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTIDENTIF_AUX_UPD" +
                "_SYNC_DEL\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_ESTIDENTIF_AU" +
                "X_UPD_SYNC_DEL;\';\r\n\t\t\t\t\t\terro = \'create tb_estidentif_aux_upd_sync_del\';\r\n\t\t\t\t\t\t" +
                "EXECUTE STATEMENT \'CREATE TRIGGER TB_ESTIDENTIF_AUX_UPD_SYNC_DEL FOR TB_EST_IDEN" +
                "TIFICADOR ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFI" +
                "G.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO" +
                " :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO" +
                ", NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1), old.ID_IDENTIFICADOR" +
                ", \'\'TB_EST_IDENTIFICADOR\'\', \'\'D\'\', :VNUMCAIXA, CURRENT_TIMESTAMP); END END;\';\r\n\r" +
                "\n\t\t\t\t\t\terro = \'drop tb_estprod_aux_upd_sync_ins\';\r\n\t\t\t\t\t\tif (exists(select 1 fro" +
                "m RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTPROD_AUX_UPD_SYNC_INS\'))\r\n\t\t\t\t\t\tt" +
                "hen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_ESTPROD_AUX_UPD_SYNC_INS;\';\r\n\t\t\t\t\t" +
                "\terro = \'create tb_estprod_aux_upd_sync_ins\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE T" +
                "RIGGER TB_ESTPROD_AUX_UPD_SYNC_INS FOR TB_EST_PRODUTO ACTIVE BEFORE INSERT AS DE" +
                "CLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIX" +
                "A FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI" +
                "_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(G" +
                "EN_PDV_AUX_SYNC_SEQ,1), new.ID_IDENTIFICADOR, \'\'TB_EST_PRODUTO\'\', \'\'I\'\', :VNUMCA" +
                "IXA, CURRENT_TIMESTAMP); END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop tb_estprod_aux_upd_syn" +
                "c_upd\';\r\n\t\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'T" +
                "B_ESTPROD_AUX_UPD_SYNC_UPD\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER" +
                " TB_ESTPROD_AUX_UPD_SYNC_UPD;\';\r\n\t\t\t\t\t\terro = \'create tb_estprod_aux_upd_sync_up" +
                "d\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_ESTPROD_AUX_UPD_SYNC_UPD FOR TB_" +
                "EST_PRODUTO ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CON" +
                "FIG.NO_CAIXA ; BEGIN IF (old.DESC_CMPL IS DISTINCT FROM new.DESC_CMPL OR old.COD" +
                "_BARRA IS DISTINCT FROM new.COD_BARRA OR old.REFERENCIA IS DISTINCT FROM new.REF" +
                "ERENCIA OR old.QTD_ATUAL IS DISTINCT FROM new.QTD_ATUAL OR old.PESO IS DISTINCT " +
                "FROM new.PESO OR old.IPI IS DISTINCT FROM new.IPI OR old.CF IS DISTINCT FROM new" +
                ".CF OR old.IAT IS DISTINCT FROM new.IAT OR old.IPPT IS DISTINCT FROM new.IPPT OR" +
                " old.COD_NCM IS DISTINCT FROM new.COD_NCM OR old.ID_NIVEL1 IS DISTINCT FROM new." +
                "ID_NIVEL1 OR old.ID_NIVEL2 IS DISTINCT FROM new.ID_NIVEL2 OR old.MVA IS DISTINCT" +
                " FROM new.MVA OR old.CST_IPI IS DISTINCT FROM new.CST_IPI OR old.FOTO IS DISTINC" +
                "T FROM new.FOTO OR old.CSOSN IS DISTINCT FROM new.CSOSN OR old.CSOSN_CFE IS DIST" +
                "INCT FROM new.CSOSN_CFE OR old.ANP IS DISTINCT FROM new.ANP OR old.EXTIPI IS DIS" +
                "TINCT FROM new.EXTIPI OR old.CST IS DISTINCT FROM new.CST OR old.FCI IS DISTINCT" +
                " FROM new.FCI OR old.COD_CEST IS DISTINCT FROM new.COD_CEST OR old.CENQ IS DISTI" +
                "NCT FROM new.CENQ OR old.VLR_IPI IS DISTINCT FROM new.VLR_IPI) THEN BEGIN FOR SE" +
                "LECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF " +
                "((SELECT COUNT (1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_IDENTIFICADOR AND" +
                " TABELA = \'\'TB_EST_PRODUTO\'\' AND (OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\') AND NO_C" +
                "AIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , " +
                "TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) ," +
                " old.ID_IDENTIFICADOR , \'\'TB_EST_PRODUTO\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIMEST" +
                "AMP) ; END END END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop tb_estprod_aux_upd_sync_del\';\r\n\t" +
                "\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTPROD_" +
                "AUX_UPD_SYNC_DEL\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_ESTPRO" +
                "D_AUX_UPD_SYNC_DEL;\';\r\n\t\t\t\t\t\terro = \'create tb_estprod_aux_upd_sync_del\';\r\n\t\t\t\t\t" +
                "\tEXECUTE STATEMENT \'CREATE TRIGGER TB_ESTPROD_AUX_UPD_SYNC_DEL FOR TB_EST_PRODUT" +
                "O ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAI" +
                "XA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCA" +
                "IXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAI" +
                "XA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1), old.ID_IDENTIFICADOR, \'\'TB_E" +
                "ST_PRODUTO\'\', \'\'D\'\', :VNUMCAIXA, CURRENT_TIMESTAMP); END END;\';\r\n\r\n\t\t\t\t\t\terro = " +
                "\'drop tb_fornec_aux_upd_sync_ins\';\r\n\t\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS " +
                "where RDB$TRIGGER_NAME = \'TB_FORNEC_AUX_UPD_SYNC_INS\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECU" +
                "TE STATEMENT \'DROP TRIGGER TB_FORNEC_AUX_UPD_SYNC_INS;\';\r\n\t\t\t\t\t\terro = \'create T" +
                "B_FORNEC_AUX_UPD_SYNC_INS\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_FORNEC_A" +
                "UX_UPD_SYNC_INS FOR TB_FORNECEDOR ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE" +
                " OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFI" +
                "G ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ ," +
                "ID_REG ,TABELA ,OPERACAO ,NO_CAIXA ,TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ" +
                ", 1) ,new.ID_FORNEC ,\'\'TB_FORNECEDOR\'\' ,\'\'I\'\' ,:VNUMCAIXA ,CURRENT_TIMESTAMP); E" +
                "ND END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop TB_FORNEC_AUX_UPD_SYNC_UPD\';\r\n\t\t\t\t\t\tif (exists(s" +
                "elect 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FORNEC_AUX_UPD_SYNC_UPD\')" +
                ")\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_FORNEC_AUX_UPD_SYNC_UPD;" +
                "\';\r\n\t\t\t\t\t\terro = \'create TB_FORNEC_AUX_UPD_SYNC_UPD\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'" +
                "CREATE TRIGGER TB_FORNEC_AUX_UPD_SYNC_UPD FOR TB_FORNECEDOR ACTIVE BEFORE UPDATE" +
                " AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.NOM" +
                "E IS DISTINCT FROM new.NOME OR old.NOME_FANTA IS DISTINCT FROM new.NOME_FANTA OR" +
                " old.CNPJ IS DISTINCT FROM new.CNPJ OR old.INSC_ESTAD IS DISTINCT FROM new.INSC_" +
                "ESTAD OR old.INSC_MUNIC IS DISTINCT FROM new.INSC_MUNIC OR old.END_CEP IS DISTIN" +
                "CT FROM new.END_CEP OR old.END_TIPO IS DISTINCT FROM new.END_TIPO OR old.END_LOG" +
                "RAD IS DISTINCT FROM new.END_LOGRAD OR old.END_BAIRRO IS DISTINCT FROM new.END_B" +
                "AIRRO OR old.END_NUMERO IS DISTINCT FROM new.END_NUMERO OR old.END_COMPLE IS DIS" +
                "TINCT FROM new.END_COMPLE OR old.DDD_COMER IS DISTINCT FROM new.DDD_COMER OR old" +
                ".FONE_COMER IS DISTINCT FROM new.FONE_COMER OR old.FONE_0800 IS DISTINCT FROM ne" +
                "w.FONE_0800 OR old.DDD_CELUL IS DISTINCT FROM new.DDD_CELUL OR old.FONE_CELUL IS" +
                " DISTINCT FROM new.FONE_CELUL OR old.DDD_FAX IS DISTINCT FROM new.DDD_FAX OR old" +
                ".FONE_FAX IS DISTINCT FROM new.FONE_FAX OR old.EMAIL_CONT IS DISTINCT FROM new.E" +
                "MAIL_CONT OR old.EMAIL_NFE IS DISTINCT FROM new.EMAIL_NFE OR old.SITE IS DISTINC" +
                "T FROM new.SITE OR old.STATUS IS DISTINCT FROM new.STATUS OR old.DT_PRICOMP IS D" +
                "ISTINCT FROM new.DT_PRICOMP OR old.DT_ULTCOMP IS DISTINCT FROM new.DT_ULTCOMP OR" +
                " old.ID_CIDADE IS DISTINCT FROM new.ID_CIDADE OR old.LIMITE IS DISTINCT FROM new" +
                ".LIMITE OR old.ID_RAMO IS DISTINCT FROM new.ID_RAMO OR old.ID_PAIS IS DISTINCT F" +
                "ROM new.ID_PAIS OR old.OBSERVACAO IS DISTINCT FROM new.OBSERVACAO OR old.CONTATO" +
                " IS DISTINCT FROM new.CONTATO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFI" +
                "G ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ((SELECT COUNT(1) FROM TRI_PDV_A" +
                "UX_SYNC WHERE ID_REG = old.ID_FORNEC AND TABELA = \'\'TB_FORNECEDOR\'\' AND (OPERACA" +
                "O = \'\'I\'\' OR OPERACAO = \'\'U\'\') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT" +
                " INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) V" +
                "ALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_FORNEC ,\'\'TB_FORNECEDOR\'\' ,\'\'U\'\'" +
                " , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop TB" +
                "_FORNEC_AUX_UPD_SYNC_DEL\';\r\n\t\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS where RD" +
                "B$TRIGGER_NAME = \'TB_FORNEC_AUX_UPD_SYNC_DEL\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATE" +
                "MENT \'DROP TRIGGER TB_FORNEC_AUX_UPD_SYNC_DEL;\';\r\n\t\t\t\t\t\terro = \'create TB_FORNEC" +
                "_AUX_UPD_SYNC_DEL\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_FORNEC_AUX_UPD_S" +
                "YNC_DEL FOR TB_FORNECEDOR ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLU" +
                "MN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER" +
                " BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG" +
                " , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1" +
                ") , old.ID_FORNEC , \'\'TB_FORNECEDOR\'\' , \'\'D\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP) " +
                "; END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop TB_ESTGRUPO_AUX_UPD_SYNC_INS\';\r\n\t\t\t\t\t\tif (exi" +
                "sts(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTGRUPO_AUX_UPD_SYN" +
                "C_INS\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_ESTGRUPO_AUX_UPD_" +
                "SYNC_INS;\';\r\n\t\t\t\t\t\terro = \'create TB_ESTGRUPO_AUX_UPD_SYNC_INS\';\r\n\t\t\t\t\t\tEXECUTE " +
                "STATEMENT \'CREATE TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_INS FOR TB_EST_GRUPO ACTIVE B" +
                "EFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN" +
                " FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BE" +
                "GIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , " +
                "TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , new.ID_GRUPO ,\'\'TB_EST_GRUPO\'" +
                "\' ,\'\'I\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop TB" +
                "_ESTGRUPO_AUX_UPD_SYNC_UPD\';\r\n\t\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS where " +
                "RDB$TRIGGER_NAME = \'TB_ESTGRUPO_AUX_UPD_SYNC_UPD\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE S" +
                "TATEMENT \'DROP TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_UPD;\';\r\n\t\t\t\t\t\terro = \'create TB_" +
                "ESTGRUPO_AUX_UPD_SYNC_UPD\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_ESTGRUPO" +
                "_AUX_UPD_SYNC_UPD FOR TB_EST_GRUPO ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYP" +
                "E OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.DESCRICAO IS DISTINCT FROM n" +
                "ew.DESCRICAO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAI" +
                "XA INTO :VNUMCAIXA DO BEGIN IF ((SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_" +
                "REG = old.ID_GRUPO AND TABELA = \'\'TB_EST_GRUPO\'\' AND (OPERACAO = \'\'I\'\' OR OPERAC" +
                "AO = \'\'U\'\') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_S" +
                "YNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_P" +
                "DV_AUX_SYNC_SEQ, 1) , old.ID_GRUPO ,\'\'TB_EST_GRUPO\'\' ,\'\'U\'\' , :VNUMCAIXA , CURRE" +
                "NT_TIMESTAMP) ; END END END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop TB_ESTGRUPO_AUX_UPD_SYN" +
                "C_DEL\';\r\n\t\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'T" +
                "B_ESTGRUPO_AUX_UPD_SYNC_DEL\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGE" +
                "R TB_ESTGRUPO_AUX_UPD_SYNC_DEL;\';\r\n\t\t\t\t\t\terro = \'create TB_ESTGRUPO_AUX_UPD_SYNC" +
                "_DEL\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_DEL FOR" +
                " TB_EST_GRUPO ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_C" +
                "ONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA" +
                " INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , " +
                "OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , old.ID_G" +
                "RUPO , \'\'TB_EST_GRUPO\'\' , \'\'D\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END;\';\r\n" +
                "\r\n\t\t\t\t\t\terro = \'drop TB_CLIENTE_AUX_UPD_SYNC_INS\';\r\n\t\t\t\t\t\tif (exists(select 1 fr" +
                "om RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_CLIENTE_AUX_UPD_SYNC_INS\'))\r\n\t\t\t\t\t\t" +
                "then\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_CLIENTE_AUX_UPD_SYNC_INS;\';\r\n\t\t\t\t" +
                "\t\terro = \'create TB_CLIENTE_AUX_UPD_SYNC_INS\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE " +
                "TRIGGER TB_CLIENTE_AUX_UPD_SYNC_INS FOR TB_CLIENTE ACTIVE BEFORE INSERT AS DECLA" +
                "RE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA F" +
                "ROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PD" +
                "V_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_I" +
                "D(GEN_PDV_AUX_SYNC_SEQ, 1) , new.ID_CLIENTE , \'\'TB_CLIENTE\'\' , \'\'I\'\' , :VNUMCAIX" +
                "A , CURRENT_TIMESTAMP); END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop TB_CLIENTE_AUX_UPD_SYNC" +
                "_UPD\';\r\n\t\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB" +
                "_CLIENTE_AUX_UPD_SYNC_UPD\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER " +
                "TB_CLIENTE_AUX_UPD_SYNC_UPD;\';\r\n\t\t\t\t\t\terro = \'create TB_CLIENTE_AUX_UPD_SYNC_UPD" +
                "\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_CLIENTE_AUX_UPD_SYNC_UPD FOR TB_C" +
                "LIENTE ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.N" +
                "O_CAIXA; BEGIN IF (old.ID_CONVENIO IS DISTINCT FROM new.ID_CONVENIO OR old.DT_CA" +
                "DASTRO IS DISTINCT FROM new.DT_CADASTRO OR old.NOME IS DISTINCT FROM new.NOME OR" +
                " old.END_CEP IS DISTINCT FROM new.END_CEP OR old.END_TIPO IS DISTINCT FROM new.E" +
                "ND_TIPO OR old.END_NUMERO IS DISTINCT FROM new.END_NUMERO OR old.END_LOGRAD IS D" +
                "ISTINCT FROM new.END_LOGRAD OR old.END_BAIRRO IS DISTINCT FROM new.END_BAIRRO OR" +
                " old.END_COMPLE IS DISTINCT FROM new.END_COMPLE OR old.DT_PRICOMP IS DISTINCT FR" +
                "OM new.DT_PRICOMP OR old.DT_ULTCOMP IS DISTINCT FROM new.DT_ULTCOMP OR old.CONTA" +
                "TO IS DISTINCT FROM new.CONTATO OR old.STATUS IS DISTINCT FROM new.STATUS OR old" +
                ".LIMITE IS DISTINCT FROM new.LIMITE OR old.DDD_RESID IS DISTINCT FROM new.DDD_RE" +
                "SID OR old.FONE_RESID IS DISTINCT FROM new.FONE_RESID OR old.DDD_COMER IS DISTIN" +
                "CT FROM new.DDD_COMER OR old.FONE_COMER IS DISTINCT FROM new.FONE_COMER OR old.D" +
                "DD_CELUL IS DISTINCT FROM new.DDD_CELUL OR old.FONE_CELUL IS DISTINCT FROM new.F" +
                "ONE_CELUL OR old.DDD_FAX IS DISTINCT FROM new.DDD_FAX OR old.FONE_FAX IS DISTINC" +
                "T FROM new.FONE_FAX OR old.EMAIL_CONT IS DISTINCT FROM new.EMAIL_CONT OR old.EMA" +
                "IL_NFE IS DISTINCT FROM new.EMAIL_NFE OR old.ID_CIDADE IS DISTINCT FROM new.ID_C" +
                "IDADE OR old.ID_TIPO IS DISTINCT FROM new.ID_TIPO OR old.ID_FUNCIONARIO IS DISTI" +
                "NCT FROM new.ID_FUNCIONARIO OR old.ID_PAIS IS DISTINCT FROM new.ID_PAIS OR old.M" +
                "ENSAGEM IS DISTINCT FROM new.MENSAGEM OR old.ID_RAMO IS DISTINCT FROM new.ID_RAM" +
                "O OR old.EMAIL_ADIC IS DISTINCT FROM new.EMAIL_ADIC OR old.OBSERVACAO IS DISTINC" +
                "T FROM new.OBSERVACAO OR old.DT_MELHOR_VENCTO IS DISTINCT FROM new.DT_MELHOR_VEN" +
                "CTO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :" +
                "VNUMCAIXA DO BEGIN IF ((SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old" +
                ".ID_CLIENTE AND TABELA = \'\'TB_CLIENTE\'\' AND (OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'" +
                "\') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ " +
                ", ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SY" +
                "NC_SEQ, 1) , old.ID_CLIENTE , \'\'TB_CLIENTE\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIME" +
                "STAMP); END END END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop TB_CLIENTE_AUX_UPD_SYNC_DEL\';\r\n" +
                "\t\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_CLIENTE" +
                "_AUX_UPD_SYNC_DEL\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_CLIEN" +
                "TE_AUX_UPD_SYNC_DEL;\';\r\n\t\t\t\t\t\terro = \'create TB_CLIENTE_AUX_UPD_SYNC_DEL\';\r\n\t\t\t\t" +
                "\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_CLIENTE_AUX_UPD_SYNC_DEL FOR TB_CLIENTE A" +
                "CTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA;" +
                " BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA" +
                " DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CA" +
                "IXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , old.ID_CLIENTE , \'\'TB_CL" +
                "IENTE\'\' , \'\'D\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP); END END;\';\r\n\r\n\t\t\t\t\t\terro = \'d" +
                "rop TB_ADMIN_AUX_UPD_SYNC_INS\';\r\n\t\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS whe" +
                "re RDB$TRIGGER_NAME = \'TB_ADMIN_AUX_UPD_SYNC_INS\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE S" +
                "TATEMENT \'DROP TRIGGER TB_ADMIN_AUX_UPD_SYNC_INS;\';\r\n\t\t\t\t\t\terro = \'create TB_ADM" +
                "IN_AUX_UPD_SYNC_INS\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_ADMIN_AUX_UPD_" +
                "SYNC_INS FOR TB_CARTAO_ADMINISTRADORA BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF" +
                " COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG O" +
                "RDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ ,ID_" +
                "REG ,TABELA ,OPERACAO ,NO_CAIXA ,TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1" +
                ") ,NEW.ID_ADMINISTRADORA ,\'\'TB_CARTAO_ADMINISTRADORA\'\' ,\'\'I\'\' ,:VNUMCAIXA ,CURRE" +
                "NT_TIMESTAMP); END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop TB_ADMIN_AUX_UPD_SYNC_UPD\';\r\n\t\t\t" +
                "\t\t\tif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ADMIN_AUX_" +
                "UPD_SYNC_UPD\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_ADMIN_AUX_" +
                "UPD_SYNC_UPD;\';\r\n\t\t\t\t\t\terro = \'create TB_ADMIN_AUX_UPD_SYNC_UPD\';\r\n\t\t\t\t\t\tEXECUTE" +
                " STATEMENT \'CREATE TRIGGER TB_ADMIN_AUX_UPD_SYNC_UPD FOR TB_CARTAO_ADMINISTRADOR" +
                "A BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BE" +
                "GIN IF (OLD.ID_CLIENTE IS DISTINCT FROM new.ID_CLIENTE OR old.DESCRICAO IS DISTI" +
                "NCT FROM new.DESCRICAO OR old.TAXA_CREDITO IS DISTINCT FROM new.TAXA_CREDITO OR " +
                "old.TAXA_DEBITO IS DISTINCT FROM new.TAXA_DEBITO) THEN BEGIN FOR SELECT NO_CAIXA" +
                " FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF (( SELECT COU" +
                "NT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_ADMINISTRADORA AND TABELA = \'\'" +
                "TB_CARTAO_ADMINISTRADORA\'\' AND (OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\') AND NO_CAI" +
                "XA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TA" +
                "BELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , " +
                "old.ID_ADMINISTRADORA , \'\'TB_CARTAO_ADMINISTRADORA\'\' , \'\'U\'\' , :VNUMCAIXA , CURR" +
                "ENT_TIMESTAMP) ; END END END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop TB_ADMIN_AUX_UPD_SYNC_" +
                "DEL\';\r\n\t\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_" +
                "ADMIN_AUX_UPD_SYNC_DEL\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_" +
                "ADMIN_AUX_UPD_SYNC_DEL;\';\r\n\t\t\t\t\t\terro = \'create TB_ADMIN_AUX_UPD_SYNC_DEL\';\r\n\t\t\t" +
                "\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_ADMIN_AUX_UPD_SYNC_DEL FOR TB_CARTAO_ADM" +
                "INISTRADORA BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_" +
                "CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VN" +
                "UMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO " +
                ", NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_ADMINISTR" +
                "ADORA , \'\'TB_CARTAO_ADMINISTRADORA\'\' , \'\'D\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP) ;" +
                " END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop TB_FUNC_AUX_UPD_SYNC_INS\';\r\n\t\t\t\t\t\tif (exists(s" +
                "elect 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FUNC_AUX_UPD_SYNC_INS\'))\r" +
                "\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_FUNC_AUX_UPD_SYNC_INS;\';\r\n" +
                "\t\t\t\t\t\terro = \'create TB_FUNC_AUX_UPD_SYNC_INS\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE" +
                " TRIGGER TB_FUNC_AUX_UPD_SYNC_INS FOR TB_FUNCIONARIO ACTIVE BEFORE INSERT AS DEC" +
                "LARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA" +
                " FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_" +
                "PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN" +
                "_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , new.ID_FUNCIONARIO , \'\'TB_FUNCIONARIO\'\' , \'\'I\'\' ," +
                " :VNUMCAIXA , CURRENT_TIMESTAMP); END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop TB_FUNC_AUX_U" +
                "PD_SYNC_UPD\';\r\n\t\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAM" +
                "E = \'TB_FUNC_AUX_UPD_SYNC_UPD\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIG" +
                "GER TB_FUNC_AUX_UPD_SYNC_UPD;\';\r\n\t\t\t\t\t\terro = \'create TB_FUNC_AUX_UPD_SYNC_UPD\';" +
                "\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_FUNC_AUX_UPD_SYNC_UPD FOR TB_FUNCIO" +
                "NARIO ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO" +
                "_CAIXA ; BEGIN IF (old.ID_FUNCIONARIO IS DISTINCT FROM new.ID_FUNCIONARIO OR old" +
                ".ID_CIDADE IS DISTINCT FROM new.ID_CIDADE OR old.N_REGISTRO IS DISTINCT FROM new" +
                ".N_REGISTRO OR old.CPF IS DISTINCT FROM new.CPF OR old.NOME IS DISTINCT FROM new" +
                ".NOME OR old.RG IS DISTINCT FROM new.RG OR old.END_CEP IS DISTINCT FROM new.END_" +
                "CEP OR old.END_TIPO IS DISTINCT FROM new.END_TIPO OR old.END_LOGRAD IS DISTINCT " +
                "FROM new.END_LOGRAD OR old.END_NUMERO IS DISTINCT FROM new.END_NUMERO OR old.END" +
                "_COMPLE IS DISTINCT FROM new.END_COMPLE OR old.END_BAIRRO IS DISTINCT FROM new.E" +
                "ND_BAIRRO OR old.DDD IS DISTINCT FROM new.DDD OR old.FONE IS DISTINCT FROM new.F" +
                "ONE OR old.CELULAR IS DISTINCT FROM new.CELULAR OR old.EMAIL IS DISTINCT FROM ne" +
                "w.EMAIL OR old.SALARIO IS DISTINCT FROM new.SALARIO OR old.EXTRA IS DISTINCT FRO" +
                "M new.EXTRA OR old.DATA_NASCT IS DISTINCT FROM new.DATA_NASCT OR old.DATA_ADMIS " +
                "IS DISTINCT FROM new.DATA_ADMIS OR old.DATA_DEMIS IS DISTINCT FROM new.DATA_DEMI" +
                "S OR old.RAMAL IS DISTINCT FROM new.RAMAL OR old.SENHA IS DISTINCT FROM new.SENH" +
                "A OR old.IP IS DISTINCT FROM new.IP OR old.STATUS IS DISTINCT FROM new.STATUS OR" +
                " old.ID_SETOR IS DISTINCT FROM new.ID_SETOR OR old.ID_CARGO IS DISTINCT FROM new" +
                ".ID_CARGO OR old.FOTO IS DISTINCT FROM new.FOTO OR old.PIS IS DISTINCT FROM new." +
                "PIS OR old.APELIDO IS DISTINCT FROM new.APELIDO OR old.OBSERVACAO IS DISTINCT FR" +
                "OM new.OBSERVACAO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY N" +
                "O_CAIXA INTO :VNUMCAIXA DO BEGIN IF ((SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHER" +
                "E ID_REG = old.ID_FUNCIONARIO AND TABELA = \'\'TB_FUNCIONARIO\'\' AND (OPERACAO = \'\'" +
                "I\'\' OR OPERACAO = \'\'U\'\') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO " +
                "TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES " +
                "(GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_FUNCIONARIO , \'\'TB_FUNCIONARIO\'\' , \'\'U" +
                "\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop " +
                "TB_FUNC_AUX_UPD_SYNC_DEL\';\r\n\t\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS where RD" +
                "B$TRIGGER_NAME = \'TB_FUNC_AUX_UPD_SYNC_DEL\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEME" +
                "NT \'DROP TRIGGER TB_FUNC_AUX_UPD_SYNC_DEL;\';\r\n\t\t\t\t\t\terro = \'create TB_FUNC_AUX_U" +
                "PD_SYNC_DEL\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_FUNC_AUX_UPD_SYNC_DEL " +
                "FOR TB_FUNCIONARIO ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_" +
                "PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_C" +
                "AIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABEL" +
                "A , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , old." +
                "ID_FUNCIONARIO , \'\'TB_FUNCIONARIO\'\' , \'\'D\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP); E" +
                "ND END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop TB_UNIMED_AUX_UPD_SYNC_INS\';\r\n\t\t\t\t\t\tif (exists(s" +
                "elect 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_UNIMED_AUX_UPD_SYNC_INS\')" +
                ")\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_UNIMED_AUX_UPD_SYNC_INS;" +
                "\';\r\n\t\t\t\t\t\terro = \'create TB_UNIMED_AUX_UPD_SYNC_INS\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'" +
                "CREATE TRIGGER TB_UNIMED_AUX_UPD_SYNC_INS FOR TB_UNI_MEDIDA ACTIVE BEFORE INSERT" +
                " AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT " +
                "NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT I" +
                "NTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN" +
                "_REG) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , \'\'TB_UNI_MEDIDA\'\' , \'\'I\'\' , " +
                ":VNUMCAIXA , CURRENT_TIMESTAMP , CAST (new.UNIDADE AS VARCHAR(100))) ; END END;\'" +
                ";\r\n\r\n\t\t\t\t\t\terro = \'drop TB_UNIMED_AUX_UPD_SYNC_UPD\';\r\n\t\t\t\t\t\tif (exists(select 1 " +
                "from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_UNIMED_AUX_UPD_SYNC_UPD\'))\r\n\t\t\t\t\t" +
                "\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_UNIMED_AUX_UPD_SYNC_UPD;\';\r\n\t\t\t\t" +
                "\t\terro = \'create TB_UNIMED_AUX_UPD_SYNC_UPD\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE T" +
                "RIGGER TB_UNIMED_AUX_UPD_SYNC_UPD FOR TB_UNI_MEDIDA ACTIVE BEFORE UPDATE AS DECL" +
                "ARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.UNIDADE IS " +
                "DISTINCT FROM new.UNIDADE OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old" +
                ".CONVERSOR IS DISTINCT FROM new.CONVERSOR OR old.STATUS IS DISTINCT FROM new.STA" +
                "TUS OR old.UNIDADE_EX IS DISTINCT FROM new.UNIDADE_EX) THEN BEGIN FOR SELECT NO_" +
                "CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ((SELECT" +
                " COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE UN_REG = old.UNIDADE AND TABELA = \'\'TB_UNI" +
                "_MEDIDA\'\' AND (OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\') AND NO_CAIXA = :VNUMCAIXA) " +
                "= 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO ," +
                " NO_CAIXA , TS_OPER , UN_REG) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , \'\'TB" +
                "_UNI_MEDIDA\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , old.UNIDADE) ; END END " +
                "END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop TB_UNIMED_AUX_UPD_SYNC_DEL\';\r\n\t\t\t\t\t\tif (exists(" +
                "select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_UNIMED_AUX_UPD_SYNC_DEL\'" +
                "))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_UNIMED_AUX_UPD_SYNC_DEL" +
                ";\';\r\n\t\t\t\t\t\terro = \'create TB_UNIMED_AUX_UPD_SYNC_DEL\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT " +
                "\'CREATE TRIGGER TB_UNIMED_AUX_UPD_SYNC_DEL FOR TB_UNI_MEDIDA ACTIVE BEFORE DELET" +
                "E AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT" +
                " NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT " +
                "INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , U" +
                "N_REG) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , 0 , \'\'TB_UNI_MEDIDA\'\' , \'\'D\'\' , " +
                ":VNUMCAIXA , CURRENT_TIMESTAMP , old.UNIDADE) ; END END;\';\r\n\r\n\t\t\t\t\t\terro = \'drop" +
                " TB_FUNCPAPEL_AUX_UPD_SYNC_INS\';\r\n\t\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS wh" +
                "ere RDB$TRIGGER_NAME = \'TB_FUNCPAPEL_AUX_UPD_SYNC_INS\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXEC" +
                "UTE STATEMENT \'DROP TRIGGER TB_FUNCPAPEL_AUX_UPD_SYNC_INS;\';\r\n\t\t\t\t\t\terro = \'crea" +
                "te TB_FUNCPAPEL_AUX_UPD_SYNC_INS\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_F" +
                "UNCPAPEL_AUX_UPD_SYNC_INS FOR TB_FUNC_PAPEL ACTIVE BEFORE INSERT AS DECLARE VNUM" +
                "CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TR" +
                "I_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_" +
                "SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG) V" +
                "ALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , new.ID_FUNCIONARIO , \'\'TB_FUNC_PAPEL\'\' " +
                ", \'\'I\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , new.ID_PAPEL) ; END END;\';\r\n\r\n" +
                "\t\t\t\t\t\terro = \'drop TB_FUNCPAPEL_AUX_UPD_SYNC_DEL\';\r\n\t\t\t\t\t\tif (exists(select 1 fr" +
                "om RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FUNCPAPEL_AUX_UPD_SYNC_DEL\'))\r\n\t\t\t\t" +
                "\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_FUNCPAPEL_AUX_UPD_SYNC_DEL;\';\r\n" +
                "\t\t\t\t\t\terro = \'create TB_FUNCPAPEL_AUX_UPD_SYNC_DEL\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'C" +
                "REATE TRIGGER TB_FUNCPAPEL_AUX_UPD_SYNC_DEL FOR TB_FUNC_PAPEL ACTIVE BEFORE DELE" +
                "TE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELEC" +
                "T NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT" +
                " INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , " +
                "UN_REG , SM_REG) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , old.ID_FUNCIONARIO , \'" +
                "\'TB_FUNC_PAPEL\'\' , \'\'D\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , old.ID_PAPEL)" +
                " ; END END;\';\t\t\t\t\t\t\r\n\r\n\t\t\t\t\t\terro = \'deu certo\';\r\n\t\t\t\t\t\tSUSPEND;\r\n\t\t\t\t\t\tWHEN ANY" +
                " DO\r\n\t\t\t\t\t\tBEGIN\r\n\r\n\t\t\t\t\t\tEND\r\n\t\t\t\t\t\tEND;";
            this._commandCollection[8].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[9] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_GERATRIGGERS_AUX_SYNC2\r\nRETURNS (\r\nerro VARCHAR(" +
                "64)\r\n)\r\nAS\r\nBEGIN\r\n\r\nerro = \'drop TB_EMITENTE_AUX_UPD_SYNC_UPD\';\r\nif (exists(sel" +
                "ect 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_EMITENTE_AUX_UPD_SYNC_UPD\')" +
                ")\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_EMITENTE_AUX_UPD_SYNC_UPD;\';\r\nerro =" +
                " \'create TB_EMITENTE_AUX_UPD_SYNC_UPD\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_EM" +
                "ITENTE_AUX_UPD_SYNC_UPD FOR TB_EMITENTE ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIX" +
                "A TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF ( old.NOME IS DISTINCT FROM " +
                "new.NOME OR old.NOME_FANTA IS DISTINCT FROM new.NOME_FANTA OR old.CONTATO IS DIS" +
                "TINCT FROM new.CONTATO OR old.END_CEP IS DISTINCT FROM new.END_CEP OR old.END_TI" +
                "PO IS DISTINCT FROM new.END_TIPO OR old.END_LOGRAD IS DISTINCT FROM new.END_LOGR" +
                "AD OR old.END_NUMERO IS DISTINCT FROM new.END_NUMERO OR old.END_COMPLE IS DISTIN" +
                "CT FROM new.END_COMPLE OR old.END_BAIRRO IS DISTINCT FROM new.END_BAIRRO OR old." +
                "CNPJ IS DISTINCT FROM new.CNPJ OR old.INSC_ESTAD IS DISTINCT FROM new.INSC_ESTAD" +
                " OR old.INSC_MUNIC IS DISTINCT FROM new.INSC_MUNIC OR old.DDD_COMER IS DISTINCT " +
                "FROM new.DDD_COMER OR old.FONE_COMER IS DISTINCT FROM new.FONE_COMER OR old.DDD_" +
                "FAX IS DISTINCT FROM new.DDD_FAX OR old.FONE_FAX IS DISTINCT FROM new.FONE_FAX O" +
                "R old.DDD_CELUL IS DISTINCT FROM new.DDD_CELUL OR old.FONE_CELUL IS DISTINCT FRO" +
                "M new.FONE_CELUL OR old.EMAIL_CONT IS DISTINCT FROM new.EMAIL_CONT OR old.SITE I" +
                "S DISTINCT FROM new.SITE OR old.CNAE IS DISTINCT FROM new.CNAE OR old.SIMPLES IS" +
                " DISTINCT FROM new.SIMPLES OR old.ID_CIDADE IS DISTINCT FROM new.ID_CIDADE OR ol" +
                "d.ID_RAMO IS DISTINCT FROM new.ID_RAMO OR old.DT_COMPRA IS DISTINCT FROM new.DT_" +
                "COMPRA OR old.LOGO IS DISTINCT FROM new.LOGO OR old.IE_ST_AC IS DISTINCT FROM ne" +
                "w.IE_ST_AC OR old.IE_ST_AL IS DISTINCT FROM new.IE_ST_AL OR old.IE_ST_AM IS DIST" +
                "INCT FROM new.IE_ST_AM OR old.IE_ST_AP IS DISTINCT FROM new.IE_ST_AP OR old.IE_S" +
                "T_BA IS DISTINCT FROM new.IE_ST_BA OR old.IE_ST_CE IS DISTINCT FROM new.IE_ST_CE" +
                " OR old.IE_ST_DF IS DISTINCT FROM new.IE_ST_DF OR old.IE_ST_ES IS DISTINCT FROM " +
                "new.IE_ST_ES OR old.IE_ST_GO IS DISTINCT FROM new.IE_ST_GO OR old.IE_ST_MA IS DI" +
                "STINCT FROM new.IE_ST_MA OR old.IE_ST_MG IS DISTINCT FROM new.IE_ST_MG OR old.IE" +
                "_ST_MS IS DISTINCT FROM new.IE_ST_MS OR old.IE_ST_MT IS DISTINCT FROM new.IE_ST_" +
                "MT OR old.IE_ST_PA IS DISTINCT FROM new.IE_ST_PA OR old.IE_ST_PB IS DISTINCT FRO" +
                "M new.IE_ST_PB OR old.IE_ST_PE IS DISTINCT FROM new.IE_ST_PE OR old.IE_ST_PI IS " +
                "DISTINCT FROM new.IE_ST_PI OR old.IE_ST_PR IS DISTINCT FROM new.IE_ST_PR OR old." +
                "IE_ST_RJ IS DISTINCT FROM new.IE_ST_RJ OR old.IE_ST_RN IS DISTINCT FROM new.IE_S" +
                "T_RN OR old.IE_ST_RO IS DISTINCT FROM new.IE_ST_RO OR old.IE_ST_RR IS DISTINCT F" +
                "ROM new.IE_ST_RR OR old.IE_ST_RS IS DISTINCT FROM new.IE_ST_RS OR old.IE_ST_SC I" +
                "S DISTINCT FROM new.IE_ST_SC OR old.IE_ST_SE IS DISTINCT FROM new.IE_ST_SE OR ol" +
                "d.IE_ST_SP IS DISTINCT FROM new.IE_ST_SP OR old.IE_ST_TO IS DISTINCT FROM new.IE" +
                "_ST_TO OR old.TEXTO_COBRANCA IS DISTINCT FROM new.TEXTO_COBRANCA OR old.TEXTO_CO" +
                "BRANCA_RODAPE IS DISTINCT FROM new.TEXTO_COBRANCA_RODAPE OR old.TEXTO_COBRANCA_A" +
                "SSUNTO IS DISTINCT FROM new.TEXTO_COBRANCA_ASSUNTO) THEN BEGIN FOR SELECT NO_CAI" +
                "XA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT " +
                "COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE UN_REG = old.CNPJ AND TABELA = \'\'TB_EMITENT" +
                "E\'\' AND ( OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\' ) AND NO_CAIXA = :VNUMCAIXA ) = 0" +
                " ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , " +
                "NO_CAIXA , TS_OPER , UN_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , \'\'T" +
                "B_EMITENTE\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , old.CNPJ ) ; END END END" +
                " END;\';\r\n\r\nerro = \'drop TB_TRIUSERS_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from" +
                " RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_TRIUSERS_AUX_UPD_SYNC_INS\'))\r\nthen\r\nE" +
                "XECUTE STATEMENT \'DROP TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_INS;\';\r\nerro = \'create T" +
                "B_TRIUSERS_AUX_UPD_SYNC_INS\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_TRIUSERS_AUX" +
                "_UPD_SYNC_INS FOR TRI_PDV_USERS ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE O" +
                "F COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG" +
                " ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ ," +
                " ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG ) VALUES ( GE" +
                "N_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , \'\'TRI_PDV_USERS\'\' , \'\'I\'\' , :VNUMCAIXA , CUR" +
                "RENT_TIMESTAMP , null , new.ID_USER ) ; END IF (ROW_COUNT = 0) THEN BEGIN INSERT" +
                " INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER ," +
                " UN_REG , SM_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , \'\'TRI_PDV_USER" +
                "S\'\' , \'\'I\'\' , 0 , CURRENT_TIMESTAMP , null , new.ID_USER ) ; END END;\';\r\n\r\nerro " +
                "= \'drop TB_TRIUSERS_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS wh" +
                "ere RDB$TRIGGER_NAME = \'TB_TRIUSERS_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT" +
                " \'DROP TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_UPD;\';\r\nerro = \'create TB_TRIUSERS_AUX_U" +
                "PD_SYNC_UPD\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_UPD FO" +
                "R TRI_PDV_USERS BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG" +
                ".NO_CAIXA ; BEGIN IF ( old.ID_USER IS DISTINCT FROM new.ID_USER OR old.USERNAME " +
                "IS DISTINCT FROM new.USERNAME OR old.PASSWORD IS DISTINCT FROM new.PASSWORD OR o" +
                "ld.GERENCIA IS DISTINCT FROM new.GERENCIA OR old.ATIVO IS DISTINCT FROM new.ATIV" +
                "O OR OLD.PERMISSOES IS DISTINCT FROM NEW.PERMISSOES) THEN BEGIN FOR SELECT NO_CA" +
                "IXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT" +
                " COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE SM_REG = old.ID_USER AND TABELA = \'\'TRI_PD" +
                "V_USERS\'\' AND ( OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\' ) AND NO_CAIXA = :VNUMCAIXA" +
                " ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERA" +
                "CAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SE" +
                "Q, 1) , 0 , \'\'TRI_PDV_USERS\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , NULL , " +
                "old.ID_USER ) ; END END END END;\';\r\n\r\nerro = \'drop TB_TRIUSERS_AUX_UPD_SYNC_DEL\'" +
                ";\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_TRIUSERS_A" +
                "UX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_TRIUSERS_AUX_UPD_SY" +
                "NC_DEL;\';\r\nerro = \'create TB_TRIUSERS_AUX_UPD_SYNC_DEL\';\r\nEXECUTE STATEMENT \'CRE" +
                "ATE TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_DEL FOR TRI_PDV_USERS ACTIVE BEFORE DELETE " +
                "AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT N" +
                "O_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT IN" +
                "TO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN" +
                "_REG , SM_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , 0 , \'\'TRI_PDV_USERS\'\' " +
                ", \'\'D\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , old.ID_USER ) ;  END END;\';\r\n\r" +
                "\nerro = \'drop TB_TAXAUF_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGER" +
                "S where RDB$TRIGGER_NAME = \'TB_TAXAUF_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEME" +
                "NT \'DROP TRIGGER TB_TAXAUF_AUX_UPD_SYNC_INS;\';\r\nerro = \'create TB_TAXAUF_AUX_UPD" +
                "_SYNC_INS\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_TAXAUF_AUX_UPD_SYNC_INS FOR TB" +
                "_TAXA_UF ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG" +
                ".NO_CAIXA ;  BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INT" +
                "O :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPE" +
                "RACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_" +
                "AUX_SYNC_SEQ, 1) , -1 , \'\'TB_TAXA_UF\'\' , \'\'I\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP " +
                ", null , null , new.ID_CTI ) ;  END END;\';\r\n\r\nerro = \'drop TB_TAXAUF_AUX_UPD_SYN" +
                "C_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_TAXA" +
                "UF_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_TAXAUF_AUX_UPD_" +
                "SYNC_UPD;\';\r\nerro = \'create TB_TAXAUF_AUX_UPD_SYNC_UPD\';\r\nEXECUTE STATEMENT \'CRE" +
                "ATE TRIGGER TB_TAXAUF_AUX_UPD_SYNC_UPD FOR TB_TAXA_UF ACTIVE BEFORE UPDATE AS DE" +
                "CLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF ( old.ID_CTI I" +
                "S DISTINCT FROM new.ID_CTI OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR ol" +
                "d.BASE_ICMS IS DISTINCT FROM new.BASE_ICMS OR old.BASE_ICMSFE IS DISTINCT FROM n" +
                "ew.BASE_ICMSFE OR old.BASE_ICMS_ST IS DISTINCT FROM new.BASE_ICMS_ST OR old.UF_A" +
                "C IS DISTINCT FROM new.UF_AC OR old.UF_AL IS DISTINCT FROM new.UF_AL OR old.UF_A" +
                "M IS DISTINCT FROM new.UF_AM OR old.UF_AP IS DISTINCT FROM new.UF_AP OR old.UF_B" +
                "A IS DISTINCT FROM new.UF_BA OR  old.UF_CE IS DISTINCT FROM new.UF_CE OR old.UF_" +
                "DF IS DISTINCT FROM new.UF_DF OR old.UF_ES IS DISTINCT FROM new.UF_ES OR old.UF_" +
                "GO IS DISTINCT FROM new.UF_GO OR old.UF_MA IS DISTINCT FROM new.UF_MA OR old.UF_" +
                "MG IS DISTINCT FROM new.UF_MG OR old.UF_MS IS DISTINCT FROM new.UF_MS OR old.UF_" +
                "MT IS DISTINCT FROM new.UF_MT OR old.UF_PA IS DISTINCT FROM new.UF_PA OR old.UF_" +
                "PB IS DISTINCT FROM new.UF_PB OR  old.UF_PE IS DISTINCT FROM new.UF_PE OR old.UF" +
                "_PI IS DISTINCT FROM new.UF_PI OR old.UF_PR IS DISTINCT FROM new.UF_PR OR old.UF" +
                "_RJ IS DISTINCT FROM new.UF_RJ OR old.UF_RN IS DISTINCT FROM new.UF_RN OR old.UF" +
                "_RO IS DISTINCT FROM new.UF_RO OR old.UF_RR IS DISTINCT FROM new.UF_RR OR old.UF" +
                "_RS IS DISTINCT FROM new.UF_RS OR old.UF_SC IS DISTINCT FROM new.UF_SC OR old.UF" +
                "_SE IS DISTINCT FROM new.UF_SE OR  old.UF_SP IS DISTINCT FROM new.UF_SP OR old.U" +
                "F_TO IS DISTINCT FROM new.UF_TO OR old.BASE_ISS IS DISTINCT FROM new.BASE_ISS OR" +
                " old.ISS IS DISTINCT FROM new.ISS OR old.POR_DIF IS DISTINCT FROM new.POR_DIF) T" +
                "HEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCA" +
                "IXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE CH_REG     = old" +
                ".ID_CTI AND TABELA = \'\'TB_TAXA_UF\'\' AND ( OPERACAO    = \'\'I\'\' OR OPERACAO = \'\'U\'" +
                "\' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( " +
                "SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG" +
                " ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , \'\'TB_TAXA_UF\'\' , \'\'U\'\' , :VNUM" +
                "CAIXA , CURRENT_TIMESTAMP , null , null , old.ID_CTI ) ;  END END END END;\';\r\n\r\n" +
                "erro = \'drop TB_TAXAUF_AUX_UPD_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGGERS" +
                " where RDB$TRIGGER_NAME = \'TB_TAXAUF_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMEN" +
                "T \'DROP TRIGGER TB_TAXAUF_AUX_UPD_SYNC_DEL;\';\r\nerro = \'create TB_TAXAUF_AUX_UPD_" +
                "SYNC_DEL\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_TAXAUF_AUX_UPD_SYNC_DEL FOR TB_" +
                "TAXA_UF ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG." +
                "NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO " +
                ":VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERA" +
                "CAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AU" +
                "X_SYNC_SEQ,1) , 0 , \'\'TB_TAXA_UF\'\' , \'\'D\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , nu" +
                "ll , null , old.ID_CTI ) ;  END END;\';\r\n\r\nerro = \'drop TB_CFOPSIS_AUX_UPD_SYNC_I" +
                "NS\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_CFOPSIS" +
                "_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_CFOPSIS_AUX_UPD_S" +
                "YNC_INS;\';\r\nerro = \'create TB_CFOPSIS_AUX_UPD_SYNC_INS\';\r\nEXECUTE STATEMENT \'CRE" +
                "ATE TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_INS FOR TB_CFOP_SIS ACTIVE BEFORE INSERT AS " +
                "DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_C" +
                "AIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO " +
                "TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_RE" +
                "G , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 , \'\'TB_CFOP_" +
                "SIS\'\' , \'\'I\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , new.CFOP , null , null ) ; END " +
                "END;\';\r\n\r\nerro = \'drop TB_CFOPSIS_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from R" +
                "DB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_CFOPSIS_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXEC" +
                "UTE STATEMENT \'DROP TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_UPD;\';\r\nerro = \'create TB_CF" +
                "OPSIS_AUX_UPD_SYNC_UPD\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_CFOPSIS_AUX_UPD_S" +
                "YNC_UPD FOR TB_CFOP_SIS ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN" +
                " TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF ( old.CFOP IS DISTINCT FROM new.CFOP OR old." +
                "DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.RESUMO IS DISTINCT FROM new.RESU" +
                "MO OR old.OBSERVACAO IS DISTINCT FROM new.OBSERVACAO OR old.EST_BX IS DISTINCT F" +
                "ROM new.EST_BX OR old.EST_BX_AMBOS IS DISTINCT FROM new.EST_BX_AMBOS OR old.DEV_" +
                "RET IS DISTINCT FROM new.DEV_RET) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CO" +
                "NFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_" +
                "PDV_AUX_SYNC WHERE UN_REG = old.CFOP AND TABELA = \'\'TB_CFOP_SIS\'\' AND ( OPERACAO" +
                " = \'\'I\'\' OR OPERACAO = \'\'U\'\' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSE" +
                "RT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER" +
                " , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , \'\'T" +
                "B_CFOP_SIS\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , old.CFOP , null , null )" +
                " ; END END END END;\';\r\n\r\nerro = \'drop TB_CFOPSIS_AUX_UPD_SYNC_DEL\';\r\nif (exists(" +
                "select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_CFOPSIS_AUX_UPD_SYNC_DEL" +
                "\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_DEL;\';\r\nerro " +
                "= \'create TB_CFOPSIS_AUX_UPD_SYNC_DEL\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_CF" +
                "OPSIS_AUX_UPD_SYNC_DEL FOR TB_CFOP_SIS ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA" +
                " TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV" +
                "_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC " +
                "( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_R" +
                "EG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , 0 , \'\'TB_CFOP_SIS\'\' , \'\'D\'\' , :VN" +
                "UMCAIXA , CURRENT_TIMESTAMP , old.CFOP , null , null ) ; END END;\';\r\n\r\nerro = \'d" +
                "rop TB_FMAPGTOSIS_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGERS wher" +
                "e RDB$TRIGGER_NAME = \'TB_FMAPGTOSIS_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT" +
                " \'DROP TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_INS;\';\r\nerro = \'create TB_FMAPGTOSIS_A" +
                "UX_UPD_SYNC_INS\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_" +
                "INS FOR TB_FORMA_PAGTO_SIS ACTIVE AFTER INSERT AS DECLARE VNUMCAIXA TYPE OF COLU" +
                "MN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER" +
                " BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_RE" +
                "G , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES (" +
                " GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 , \'\'TB_FORMA_PAGTO_SIS\'\' , \'\'I\'\' , :VNUMCA" +
                "IXA , CURRENT_TIMESTAMP , null , new.ID_FMAPGTO , null ) ; END END;\';\r\n\r\nerro = " +
                "\'drop TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS wh" +
                "ere RDB$TRIGGER_NAME = \'TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEME" +
                "NT \'DROP TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD;\';\r\nerro = \'create TB_FMAPGTOSIS" +
                "_AUX_UPD_SYNC_UPD\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYN" +
                "C_UPD FOR TB_FORMA_PAGTO_SIS ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF C" +
                "OLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF ( old.ID_FMAPGTO IS DISTINCT FROM new.I" +
                "D_FMAPGTO OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.STATUS IS DISTI" +
                "NCT FROM new.STATUS OR old.UTILIZACAO IS DISTINCT FROM new.UTILIZACAO) THEN BEGI" +
                "N FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO B" +
                "EGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE SM_REG = old.ID_FMAPGTO " +
                "AND TABELA = \'\'TB_FORMA_PAGTO_SIS\'\' AND ( OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\' )" +
                " AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ" +
                " , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) " +
                "VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , \'\'TB_FORMA_PAGTO_SIS\'\' , \'\'U\'\' , " +
                ":VNUMCAIXA , CURRENT_TIMESTAMP , null , old.ID_FMAPGTO , null ) ; END END END EN" +
                "D;\';\r\n\r\nerro = \'drop TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL\';\r\nif (exists(select 1 from " +
                "RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL\'))\r\nthen\r\n" +
                "EXECUTE STATEMENT \'DROP TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL;\';\r\nerro = \'creat" +
                "e TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_FMAPGTO" +
                "SIS_AUX_UPD_SYNC_DEL FOR TB_FORMA_PAGTO_SIS ACTIVE BEFORE DELETE AS DECLARE VNUM" +
                "CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TR" +
                "I_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_" +
                "SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG ," +
                " CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , 0 , \'\'TB_FORMA_PAGTO_SIS\'\' ," +
                " \'\'D\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , old.ID_FMAPGTO , null ) ; END E" +
                "ND;\';\r\n\r\nerro = \'drop TB_PARCELA_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from RD" +
                "B$TRIGGERS where RDB$TRIGGER_NAME = \'TB_PARCELA_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECU" +
                "TE STATEMENT \'DROP TRIGGER TB_PARCELA_AUX_UPD_SYNC_INS;\';\r\nerro = \'create TB_PAR" +
                "CELA_AUX_UPD_SYNC_INS\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_PARCELA_AUX_UPD_SY" +
                "NC_INS FOR TB_PARCELAMENTO ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COL" +
                "UMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER" +
                " BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ ,ID_REG" +
                " ,TABELA ,OPERACAO ,NO_CAIXA ,TS_OPER ,UN_REG ,SM_REG ,CH_REG ) VALUES ( GEN_ID(" +
                "GEN_PDV_AUX_SYNC_SEQ, 1) ,- 1 ,\'\'TB_PARCELAMENTO\'\' ,\'\'I\'\' ,:VNUMCAIXA ,CURRENT_T" +
                "IMESTAMP ,NULL ,new.ID_PARCELA ,NULL ); END END;\';\r\n\r\nerro = \'drop TB_PARCELA_AU" +
                "X_UPD_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME =" +
                " \'TB_PARCELA_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_PARCE" +
                "LA_AUX_UPD_SYNC_UPD;\';\r\nerro = \'create TB_PARCELA_AUX_UPD_SYNC_UPD\';\r\nEXECUTE ST" +
                "ATEMENT \'CREATE TRIGGER TB_PARCELA_AUX_UPD_SYNC_UPD FOR TB_PARCELAMENTO ACTIVE B" +
                "EFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN" +
                " IF (old.ID_PARCELA IS DISTINCT FROM new.ID_PARCELA OR old.DESCRICAO IS DISTINCT" +
                " FROM new.DESCRICAO OR old.N_PARCELAS IS DISTINCT FROM new.N_PARCELAS OR old.INT" +
                "ERVALO IS DISTINCT FROM new.INTERVALO OR old.ENTRADA IS DISTINCT FROM new.ENTRAD" +
                "A OR old.STATUS IS DISTINCT FROM new.STATUS OR old.ID_FMAPGTO IS DISTINCT FROM n" +
                "ew.ID_FMAPGTO OR old.INTERVALO_VAR IS DISTINCT FROM new.INTERVALO_VAR) THEN BEGI" +
                "N FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO B" +
                "EGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE SM_REG = old.ID_PARCELA " +
                "AND TABELA = \'\'TB_PARCELAMENTO\'\' AND ( OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\' ) AN" +
                "D NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , " +
                "ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VAL" +
                "UES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , \'\'TB_PARCELAMENTO\'\' , \'\'U\'\' , :VNUMC" +
                "AIXA , CURRENT_TIMESTAMP , null , old.ID_PARCELA , null ) ; END END END END;\';\r\n" +
                "\r\nerro = \'drop TB_PARCELA_AUX_UPD_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGG" +
                "ERS where RDB$TRIGGER_NAME = \'TB_PARCELA_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STAT" +
                "EMENT \'DROP TRIGGER TB_PARCELA_AUX_UPD_SYNC_DEL;\';\r\nerro = \'create TB_PARCELA_AU" +
                "X_UPD_SYNC_DEL\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_PARCELA_AUX_UPD_SYNC_DEL " +
                "FOR TB_PARCELAMENTO ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI" +
                "_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO" +
                "_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TA" +
                "BELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_I" +
                "D(GEN_PDV_AUX_SYNC_SEQ,1) , 0 , \'\'TB_PARCELAMENTO\'\' , \'\'D\'\' , :VNUMCAIXA , CURRE" +
                "NT_TIMESTAMP , null , old.ID_PARCELA , null ) ; END END;\';\r\n\r\nerro = \'drop TB_ES" +
                "TCOMP_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGE" +
                "R_NAME = \'TB_ESTCOMP_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER " +
                "TB_ESTCOMP_AUX_UPD_SYNC_INS;\';\r\nerro = \'create TB_ESTCOMP_AUX_UPD_SYNC_INS\';\r\nEX" +
                "ECUTE STATEMENT \'CREATE TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_INS FOR TB_EST_COMPOSICA" +
                "O ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAI" +
                "XA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMC" +
                "AIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , " +
                "NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC" +
                "_SEQ, 1) , new.ID_COMPOSICAO ,\'\'TB_EST_COMPOSICAO\'\' ,\'\'I\'\' , :VNUMCAIXA , CURREN" +
                "T_TIMESTAMP , NULL , NULL , NULL ) ; END END;\';\r\n\r\nerro = \'drop TB_ESTCOMP_AUX_U" +
                "PD_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'T" +
                "B_ESTCOMP_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_ESTCOMP_" +
                "AUX_UPD_SYNC_UPD;\';\r\nerro = \'create TB_ESTCOMP_AUX_UPD_SYNC_UPD\';\r\nEXECUTE STATE" +
                "MENT \'CREATE TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_UPD FOR TB_EST_COMPOSICAO ACTIVE BE" +
                "FORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN " +
                "IF (old.ID_COMPOSICAO IS DISTINCT FROM new.ID_COMPOSICAO OR old.DESCRICAO IS DIS" +
                "TINCT FROM new.DESCRICAO OR old.ID_IDENTIFICADOR IS DISTINCT FROM new.ID_IDENTIF" +
                "ICADOR) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INT" +
                "O :VNUMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG " +
                "= old.ID_COMPOSICAO AND TABELA = \'\'TB_EST_COMPOSICAO\'\' AND ( OPERACAO = \'\'I\'\' OR" +
                " OPERACAO = \'\'U\'\' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI" +
                "_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG ," +
                " SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_COMPOSICAO " +
                ", \'\'TB_EST_COMPOSICAO\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , null ," +
                " null ) ; END END END END;\';\r\n\r\nerro = \'drop TB_ESTCOMP_AUX_UPD_SYNC_DEL\';\r\nif (" +
                "exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTCOMP_AUX_UPD_S" +
                "YNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_DEL;\';" +
                "\r\nerro = \'create TB_ESTCOMP_AUX_UPD_SYNC_DEL\';\r\nEXECUTE STATEMENT \'CREATE TRIGGE" +
                "R TB_ESTCOMP_AUX_UPD_SYNC_DEL FOR TB_EST_COMPOSICAO ACTIVE BEFORE DELETE AS DECL" +
                "ARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA" +
                " FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_" +
                "PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , " +
                "SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , old.ID_COMPOSICAO , " +
                "\'\'TB_EST_COMPOSICAO\'\' , \'\'D\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , null , n" +
                "ull ) ; END END;\';\r\n\r\nerro = \'drop TB_ESTCOMPITEM_AUX_UPD_SYNC_INS\';\r\nif (exists" +
                "(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTCOMPITEM_AUX_UPD_SYN" +
                "C_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_INS;" +
                "\';\r\nerro = \'create TB_ESTCOMPITEM_AUX_UPD_SYNC_INS\';\r\nEXECUTE STATEMENT \'CREATE " +
                "TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_INS FOR TB_EST_COMP_ITEM ACTIVE AFTER INSERT" +
                " AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT " +
                "NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT I" +
                "NTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , U" +
                "N_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , new.ID_ITEM" +
                "COMP ,\'\'TB_EST_COMP_ITEM\'\' ,\'\'I\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , NULL , NULL" +
                " , NULL ) ; END END;\';\r\n\r\nerro = \'drop TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD\';\r\nif (ex" +
                "ists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTCOMPITEM_AUX_UPD" +
                "_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_" +
                "UPD;\';\r\nerro = \'create TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD\';\r\nEXECUTE STATEMENT \'CRE" +
                "ATE TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD FOR TB_EST_COMP_ITEM ACTIVE BEFORE U" +
                "PDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (ol" +
                "d.ID_ITEMCOMP IS DISTINCT FROM new.ID_ITEMCOMP OR old.QTD_ITEM IS DISTINCT FROM " +
                "new.QTD_ITEM OR old.ID_COMPOSICAO IS DISTINCT FROM new.ID_COMPOSICAO OR old.ID_I" +
                "DENTIFICADOR IS DISTINCT FROM new.ID_IDENTIFICADOR) THEN BEGIN FOR SELECT NO_CAI" +
                "XA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT " +
                "COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_ITEMCOMP AND TABELA = \'\'TB_" +
                "EST_COMP_ITEM\'\' AND ( OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\' ) AND NO_CAIXA = :VNU" +
                "MCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA ," +
                " OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_" +
                "PDV_AUX_SYNC_SEQ, 1) , old.ID_ITEMCOMP , \'\'TB_EST_COMP_ITEM\'\' , \'\'U\'\' , :VNUMCAI" +
                "XA , CURRENT_TIMESTAMP , null , null , null ) ; END END END END;\';\r\n\r\nerro = \'dr" +
                "op TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGGERS wher" +
                "e RDB$TRIGGER_NAME = \'TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMEN" +
                "T \'DROP TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL;\';\r\nerro = \'create TB_ESTCOMPITE" +
                "M_AUX_UPD_SYNC_DEL\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_ESTCOMPITEM_AUX_UPD_S" +
                "YNC_DEL FOR TB_EST_COMP_ITEM ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF C" +
                "OLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG OR" +
                "DER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID" +
                "_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUE" +
                "S ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , old.ID_ITEMCOMP , \'\'TB_EST_COMP_ITEM\'\' , \'\'" +
                "D\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , null , null ) ; END END;\';\r\n\r\nerro" +
                " = \'drop TB_IFS_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGERS where " +
                "RDB$TRIGGER_NAME = \'TB_IFS_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TR" +
                "IGGER TB_IFS_AUX_UPD_SYNC_INS;\';\r\nerro = \'create TB_IFS_AUX_UPD_SYNC_INS\';\r\nEXEC" +
                "UTE STATEMENT \'CREATE TRIGGER TB_IFS_AUX_UPD_SYNC_INS FOR TB_IFS ACTIVE AFTER IN" +
                "SERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SEL" +
                "ECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSE" +
                "RT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER" +
                " , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 ,\'\'T" +
                "B_IFS\'\' ,\'\'I\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , NULL , new.ID_IFS , NULL ) ; E" +
                "ND IF (ROW_COUNT = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , T" +
                "ABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_" +
                "ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 ,\'\'TB_IFS\'\' ,\'\'I\'\' , 0 , CURRENT_TIMESTAMP , NU" +
                "LL , new.ID_IFS , NULL ) ; END END;\';\r\n\r\nerro = \'drop TB_IFS_AUX_UPD_SYNC_UPD\';\r" +
                "\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_IFS_AUX_UPD_" +
                "SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_IFS_AUX_UPD_SYNC_UPD;\';\r\ne" +
                "rro = \'create TB_IFS_AUX_UPD_SYNC_UPD\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_IF" +
                "S_AUX_UPD_SYNC_UPD FOR TB_IFS ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF " +
                "COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.ID_IFS IS DISTINCT FROM new.ID_IF" +
                "S OR old.CAIXA IS DISTINCT FROM new.CAIXA OR old.LOJA IS DISTINCT FROM new.LOJA " +
                "OR old.FABRICACAO IS DISTINCT FROM new.FABRICACAO OR old.USUARIO IS DISTINCT FRO" +
                "M new.USUARIO OR old.MARCA IS DISTINCT FROM new.MARCA OR old.MF IS DISTINCT FROM" +
                " new.MF OR old.MODELO IS DISTINCT FROM new.MODELO OR old.TIPO IS DISTINCT FROM n" +
                "ew.TIPO OR old.DATA_ON IS DISTINCT FROM new.DATA_ON OR old.DATA_OFF IS DISTINCT " +
                "FROM new.DATA_OFF OR old.ATIVO IS DISTINCT FROM new.ATIVO OR old.ISS_RATEIO IS D" +
                "ISTINCT FROM new.ISS_RATEIO OR old.SB_DATAIN IS DISTINCT FROM new.SB_DATAIN OR o" +
                "ld.SB_HORAIN IS DISTINCT FROM new.SB_HORAIN OR old.SB_VERSAO IS DISTINCT FROM ne" +
                "w.SB_VERSAO OR old.CHAVE IS DISTINCT FROM new.CHAVE OR old.COD_NAC IS DISTINCT F" +
                "ROM new.COD_NAC OR old.DATA_TEMP IS DISTINCT FROM new.DATA_TEMP OR old.NUM_CREDE" +
                "NCIAMENTO IS DISTINCT FROM new.NUM_CREDENCIAMENTO) THEN BEGIN FOR SELECT NO_CAIX" +
                "A FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT C" +
                "OUNT(1) FROM TRI_PDV_AUX_SYNC WHERE SM_REG = old.ID_IFS AND TABELA = \'\'TB_IFS\'\' " +
                "AND ( OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) T" +
                "HEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_C" +
                "AIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ" +
                ", 1) , -1 , \'\'TB_IFS\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , old.ID_" +
                "IFS , null ) ; END END END END;\';\r\n\r\nerro = \'drop TB_IFS_AUX_UPD_SYNC_DEL\';\r\nif " +
                "(exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_IFS_AUX_UPD_SYNC" +
                "_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_IFS_AUX_UPD_SYNC_DEL;\';\r\nerro " +
                "= \'create TB_IFS_AUX_UPD_SYNC_DEL\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_IFS_AU" +
                "X_UPD_SYNC_DEL FOR TB_IFS ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLU" +
                "MN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER" +
                " BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_RE" +
                "G , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES (" +
                " GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , -1 , \'\'TB_IFS\'\' , \'\'D\'\' , :VNUMCAIXA , CURRENT" +
                "_TIMESTAMP , null , old.ID_IFS , null ) ; END END;\';\r\n\r\nerro = \'drop TB_ESTPRECO" +
                "DIAS_AUX_SYNC_INS\';           \r\nif (exists(select 1 from RDB$TRIGGERS where RDB$" +
                "TRIGGER_NAME = \'TB_ESTPRECODIAS_AUX_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP T" +
                "RIGGER TB_ESTPRECODIAS_AUX_SYNC_INS\';\r\nerro = \'create TB_ESTPRECODIAS_AUX_SYNC_I" +
                "NS\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_ESTPRECODIAS_AUX_SYNC_INS FOR TB_ESTO" +
                "QUE_PRECOS_DIAS BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG" +
                ".NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO " +
                ":VNUMCAIXA DO BEGIN IF (( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = N" +
                "EW.ID_IDENTIFICADOR AND TABELA = \'\'TB_ESTOQUE_PRECOS_DIAS\'\' AND OPERACAO = \'\'I\'\'" +
                " AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, I" +
                "D_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ, " +
                "1), new.ID_IDENTIFICADOR, \'\'TB_ESTOQUE_PRECOS_DIAS\'\', \'\'I\'\', :VNUMCAIXA, CURRENT" +
                "_TIMESTAMP); END END END;\';\r\n\r\nerro = \'drop  TB_ESTPRECODIAS_AUX_SYNC_UPD\';     " +
                "      \r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTPR" +
                "ECODIAS_AUX_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_ESTPRECODIAS_A" +
                "UX_SYNC_UPD\';\r\nerro = \'create TB_ESTPRECODIAS_AUX_SYNC_UPD\';\r\nEXECUTE STATEMENT " +
                "\'CREATE TRIGGER TB_ESTPRECODIAS_AUX_SYNC_UPD FOR TB_ESTOQUE_PRECOS_DIAS BEFORE U" +
                "PDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (OL" +
                "D.DIA IS DISTINCT FROM new.DIA OR old.HR_INICIO IS DISTINCT FROM new.HR_INICIO O" +
                "R old.HR_FIM IS DISTINCT FROM new.HR_FIM) THEN BEGIN FOR SELECT NO_CAIXA FROM TR" +
                "I_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF (( SELECT COUNT(1) FR" +
                "OM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_IDENTIFICADOR AND TABELA = \'\'TB_ESTOQU" +
                "E_PRECOS_DIAS\'\' AND (OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\') AND NO_CAIXA = :VNUMC" +
                "AIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPER" +
                "ACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_IDEN" +
                "TIFICADOR , \'\'TB_ESTOQUE_PRECOS_DIAS\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP)" +
                " ; END END END END;\';\r\n\r\nerro = \'drop  TB_ESTPRECODIAS_AUX_SYNC_DEL\';           " +
                "\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTPRECODIA" +
                "S_AUX_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_ESTPRECODIAS_AUX_SYN" +
                "C_DEL\';\r\nerro = \'create TB_ESTPRECODIAS_AUX_SYNC_DEL\';\r\nEXECUTE STATEMENT \'CREAT" +
                "E TRIGGER TB_ESTPRECODIAS_AUX_SYNC_DEL FOR TB_ESTOQUE_PRECOS_DIAS BEFORE DELETE " +
                "AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO" +
                "_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF (( SELE" +
                "CT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = OLD.ID_IDENTIFICADOR AND TABELA" +
                " = \'\'TB_ESTOQUE_PRECOS_DIAS\'\' AND OPERACAO = \'\'D\'\' AND NO_CAIXA = :VNUMCAIXA) = " +
                "0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CA" +
                "IXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1), old.ID_IDENTIFICADOR, \'\'TB" +
                "_ESTOQUE_PRECOS_DIAS\'\', \'\'D\'\', :VNUMCAIXA, CURRENT_TIMESTAMP); END END END;\';\r\n\r" +
                "\nerro = \'deu certo\';\r\nSUSPEND;\r\nWHEN ANY DO\r\nBEGIN\r\n\r\nEND\r\nEND;\r\n";
            this._commandCollection[9].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[10] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_GERATRIGGERS_AUX_SYNC3\r\nRETURNS (\r\nerro VARCHAR(" +
                "64)\r\n)\r\nAS\r\nBEGIN\r\n\r\nerro = \'drop TRI_PDV_CONFIG_AUX_UPD_SYNC_INS\';\r\nif (exists(" +
                "select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TRI_PDV_CONFIG_AUX_UPD_SYNC" +
                "_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_INS;\'" +
                ";\r\nerro = \'create TRI_PDV_CONFIG_AUX_UPD_SYNC_INS\';\r\nEXECUTE STATEMENT \'CREATE T" +
                "RIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_INS FOR TRI_PDV_CONFIG ACTIVE AFTER INSERT AS" +
                " DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_" +
                "CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO" +
                " TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_R" +
                "EG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 ,\'\'TRI_PDV_" +
                "CONFIG\'\' ,\'\'I\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , new.ID_MAC , NULL , NULL ) ; " +
                "END IF (ROW_COUNT = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , " +
                "TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN" +
                "_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 ,\'\'TRI_PDV_CONFIG\'\' ,\'\'I\'\' , 0 , CURRENT_TIMES" +
                "TAMP , new.ID_MAC , NULL , NULL ); END END;\';\r\n\r\nerro = \'drop TRI_PDV_CONFIG_AUX" +
                "_UPD_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = " +
                "\'TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TRI_P" +
                "DV_CONFIG_AUX_UPD_SYNC_UPD;\';\r\nerro = \'create TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD\';\r" +
                "\nEXECUTE STATEMENT \'CREATE TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD FOR TRI_PDV_C" +
                "ONFIG ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO" +
                "_CAIXA; BEGIN  FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :V" +
                "NUMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE UN_REG = ol" +
                "d.ID_MAC AND TABELA = \'\'TRI_PDV_CONFIG\'\' AND ( OPERACAO = \'\'I\'\' OR OPERACAO = \'\'" +
                "U\'\' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC " +
                "( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_R" +
                "EG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 , \'\'TRI_PDV_CONFIG\'\' , \'\'U\'\' " +
                ", :VNUMCAIXA , CURRENT_TIMESTAMP , old.ID_MAC , NULL , NULL ); END END END;\';\r\n\r" +
                "\nerro = \'drop TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TR" +
                "IGGERS where RDB$TRIGGER_NAME = \'TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECU" +
                "TE STATEMENT \'DROP TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL;\';\r\nerro = \'create TR" +
                "I_PDV_CONFIG_AUX_UPD_SYNC_DEL\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TRI_PDV_CONFI" +
                "G_AUX_UPD_SYNC_DEL FOR TRI_PDV_CONFIG ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA " +
                "TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_" +
                "CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (" +
                " SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_RE" +
                "G ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , -1 , \'\'TRI_PDV_CONFIG\'\' , \'\'D\'\' , " +
                ":VNUMCAIXA , CURRENT_TIMESTAMP , old.ID_MAC , NULL , null ) ; END END;\';\r\n\r\nerro" +
                " = \'drop TB_NATOPER_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGERS wh" +
                "ere RDB$TRIGGER_NAME = \'TB_NATOPER_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT " +
                "\'DROP TRIGGER TB_NATOPER_AUX_UPD_SYNC_INS;\';\r\nerro = \'create TB_NATOPER_AUX_UPD_" +
                "SYNC_INS\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_NATOPER_AUX_UPD_SYNC_INS FOR TB" +
                "_NAT_OPERACAO ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_C" +
                "ONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA" +
                " INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA ," +
                " OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_" +
                "PDV_AUX_SYNC_SEQ, 1) , new.ID_NATOPE , \'\'TB_NAT_OPERACAO\'\' , \'\'I\'\' , :VNUMCAIXA " +
                ", CURRENT_TIMESTAMP , null , null , null ) ; END END;\';\r\n\r\nerro = \'drop TB_NATOP" +
                "ER_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_N" +
                "AME = \'TB_NATOPER_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_" +
                "NATOPER_AUX_UPD_SYNC_UPD;\';\r\nerro = \'create TB_NATOPER_AUX_UPD_SYNC_UPD\';\r\nEXECU" +
                "TE STATEMENT \'CREATE TRIGGER TB_NATOPER_AUX_UPD_SYNC_UPD FOR TB_NAT_OPERACAO ACT" +
                "IVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; " +
                "BEGIN IF ( old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.RET_PIS_COF_CSLL " +
                "IS DISTINCT FROM new.RET_PIS_COF_CSLL OR old.RET_INSS IS DISTINCT FROM new.RET_I" +
                "NSS OR old.RET_IRRF IS DISTINCT FROM new.RET_IRRF OR old.PIS_COFINS IS DISTINCT " +
                "FROM new.PIS_COFINS OR old.STATUS IS DISTINCT FROM new.STATUS OR old.CFOP IS DIS" +
                "TINCT FROM new.CFOP OR old.ID_CTI IS DISTINCT FROM new.ID_CTI OR old.GFR IS DIST" +
                "INCT FROM new.GFR OR old.OBSERVACAO IS DISTINCT FROM new.OBSERVACAO OR old.BASE_" +
                "COMISSAO IS DISTINCT FROM new.BASE_COMISSAO OR old.CALCULA_IPI IS DISTINCT FROM " +
                "new.CALCULA_IPI OR old.GRAVA_TOT_TRIBUTOS IS DISTINCT FROM new.GRAVA_TOT_TRIBUTO" +
                "S) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VN" +
                "UMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old" +
                ".ID_NATOPE AND TABELA = \'\'TB_NAT_OPERACAO\'\' AND ( OPERACAO = \'\'I\'\' OR OPERACAO =" +
                " \'\'U\'\' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SY" +
                "NC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , C" +
                "H_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_NATOPE , \'\'TB_NAT_OPER" +
                "ACAO\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , null , null ) ; END END" +
                " END END;\';\r\n\r\nerro = \'drop TB_NATOPER_AUX_UPD_SYNC_DEL\';\r\nif (exists(select 1 f" +
                "rom RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_NATOPER_AUX_UPD_SYNC_DEL\'))\r\nthen\r" +
                "\nEXECUTE STATEMENT \'DROP TRIGGER TB_NATOPER_AUX_UPD_SYNC_DEL;\';\r\nerro = \'create " +
                "TB_NATOPER_AUX_UPD_SYNC_DEL\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_NATOPER_AUX_" +
                "UPD_SYNC_DEL FOR TB_NAT_OPERACAO ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE " +
                "OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFI" +
                "G ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ " +
                ", ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) V" +
                "ALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , old.ID_NATOPE , \'\'TB_NAT_OPERACAO\'\' , \'" +
                "\'D\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , null , null ) ; END END;\';\r\n\r\nerr" +
                "o = \'drop TB_FMAPGTONFCE_AUX_UPD_SYNC_INS\';\r\nif (exists(select 1 from RDB$TRIGGE" +
                "RS where RDB$TRIGGER_NAME = \'TB_FMAPGTONFCE_AUX_UPD_SYNC_INS\'))\r\nthen\r\nEXECUTE S" +
                "TATEMENT \'DROP TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_INS;\';\r\nerro = \'create TB_FMA" +
                "PGTONFCE_AUX_UPD_SYNC_INS\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_FMAPGTONFCE_AU" +
                "X_UPD_SYNC_INS FOR TB_FORMA_PAGTO_NFCE ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA" +
                " TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV" +
                "_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC " +
                "( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_R" +
                "EG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 , \'\'TB_FORMA_PAGTO_NFCE\'\' , \'" +
                "\'I\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , new.ID_FMANFCE , null ) ; END END" +
                ";\';\r\n\r\nerro = \'drop TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from " +
                "RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD\'))\r\nthen\r" +
                "\nEXECUTE STATEMENT \'DROP TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD;\';\r\nerro = \'cre" +
                "ate TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_FMAP" +
                "GTONFCE_AUX_UPD_SYNC_UPD FOR TB_FORMA_PAGTO_NFCE ACTIVE BEFORE UPDATE AS DECLARE" +
                " VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF ( old.STATUS IS DIS" +
                "TINCT FROM new.STATUS OR old.ID_NFCE IS DISTINCT FROM new.ID_NFCE OR old.DESCRIC" +
                "AO IS DISTINCT FROM new.DESCRICAO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_C" +
                "ONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI" +
                "_PDV_AUX_SYNC WHERE SM_REG = old.ID_FMANFCE AND TABELA = \'\'TB_FORMA_PAGTO_NFCE\'\'" +
                " AND ( OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) " +
                "THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_" +
                "CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SE" +
                "Q, 1) , -1 , \'\'TB_FORMA_PAGTO_NFCE\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , " +
                "null , old.ID_FMANFCE , null ) ; END END END END;\';\r\n\r\nerro = \'drop TB_FMAPGTONF" +
                "CE_AUX_UPD_SYNC_DEL\';\r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_N" +
                "AME = \'TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER" +
                " TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL;\';\r\nerro = \'create TB_FMAPGTONFCE_AUX_UPD_SYNC_" +
                "DEL\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL FOR TB_" +
                "FORMA_PAGTO_NFCE ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PD" +
                "V_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CA" +
                "IXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABEL" +
                "A , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(G" +
                "EN_PDV_AUX_SYNC_SEQ,1) , -1 , \'\'TB_FORMA_PAGTO_NFCE\'\' , \'\'D\'\' , :VNUMCAIXA , CUR" +
                "RENT_TIMESTAMP , null , old.ID_FMANFCE , null ) ; END END;\';\r\n\r\nerro = \'drop tb_" +
                "estpreco_aux_sync_ins\';\r\n\t\t\t\t\t\tif (exists(select 1 from RDB$TRIGGERS where RDB$T" +
                "RIGGER_NAME = \'TB_ESTPRECO_AUX_SYNC_INS\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT " +
                "\'DROP TRIGGER TB_ESTPRECO_AUX_SYNC_INS;\';\r\n\t\t\t\t\t\terro = \'create tb_estpreco_aux_" +
                "sync_ins\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_ESTPRECO_AUX_SYNC_INS FOR" +
                " TB_ESTOQUE_PRECOS ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_" +
                "PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_C" +
                "AIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA," +
                " OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1), new.ID_IDEN" +
                "TIFICADOR, \'\'TB_ESTOQUE_PRECOS\'\', \'\'I\'\', :VNUMCAIXA, CURRENT_TIMESTAMP); END END" +
                ";\';\r\n\r\nerro = \'drop tb_estpreco_aux_sync_upd\';\r\n\t\t\t\t\t\tif (exists(select 1 from R" +
                "DB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTPRECO_AUX_SYNC_UPD\'))\r\n\t\t\t\t\t\tthen\r\n\t" +
                "\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_ESTPRECO_AUX_SYNC_UPD;\';\r\n\t\t\t\t\t\terro = \'" +
                "create tb_estpreco_aux_sync_upd\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_ES" +
                "TPRECO_AUX_SYNC_UPD FOR TB_ESTOQUE_PRECOS BEFORE UPDATE AS DECLARE VNUMCAIXA TYP" +
                "E OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (OLD.PRC_VENDA IS DISTINCT FROM n" +
                "ew.PRC_VENDA OR old.DT_INICIO IS DISTINCT FROM new.DT_INICIO OR old.DT_FIM IS DI" +
                "STINCT FROM new.DT_FIM OR old.PERIODO IS DISTINCT FROM new.PERIODO OR OLD.DIAS_S" +
                "EMANA IS DISTINCT  FROM  NEW.DIAS_SEMANA) THEN BEGIN FOR SELECT NO_CAIXA FROM TR" +
                "I_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF (( SELECT COUNT(1) FR" +
                "OM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_IDENTIFICADOR AND TABELA = \'\'TB_ESTOQU" +
                "E_PRECOS\'\' AND (OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\') AND NO_CAIXA = :VNUMCAIXA)" +
                " = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO " +
                ", NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_IDENTIFIC" +
                "ADOR , \'\'TB_ESTOQUE_PRECOS\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END" +
                " END END;\';\r\n\r\nerro = \'drop tb_estpreco_aux_sync_del\';\r\n\t\t\t\t\t\tif (exists(select " +
                "1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTPRECO_AUX_SYNC_DEL\'))\r\n\t\t\t\t\t" +
                "\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_ESTPRECO_AUX_SYNC_DEL\';\r\n\t\t\t\t\t\te" +
                "rro = \'create tb_estpreco_aux_sync_del\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGE" +
                "R TB_ESTPRECO_AUX_SYNC_DEL FOR TB_ESTOQUE_PRECOS ACTIVE BEFORE DELETE AS DECLARE" +
                " VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FRO" +
                "M TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_" +
                "AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PD" +
                "V_AUX_SYNC_SEQ,1), old.ID_IDENTIFICADOR, \'\'TB_ESTOQUE_PRECOS\'\', \'\'D\'\', :VNUMCAIX" +
                "A, CURRENT_TIMESTAMP); END END;\';\r\n\r\nerro = \'drop tb_est_kit_sync_ins\';         " +
                "  \r\n                                                                            " +
                "                                    if (exists(select 1 from RDB$TRIGGERS where " +
                "RDB$TRIGGER_NAME = \'TB_EST_KIT_SYNC_INS\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT " +
                "\'DROP TRIGGER TB_EST_KIT_SYNC_INS\';\r\n\t\t\t\t\t\terro = \'create tb_est_kit_sync_ins\';\r" +
                "\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_EST_KIT_SYNC_INS FOR TB_EST_KIT BEFO" +
                "RE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR" +
                " SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN " +
                "INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_O" +
                "PER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , NEW.ID_KIT , \'\'TB_EST_KIT\'\' , \'\'I" +
                "\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP); END END;\';                                " +
                "                                                                    \r\n\r\nerro = \'" +
                "drop tb_est_kit_sync_upd\';           \r\n                                         " +
                "                                                                       if (exist" +
                "s(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_EST_KIT_SYNC_UPD\'))\r\n\t" +
                "\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_EST_KIT_SYNC_UPD\';\r\n\t\t\t\t\t\ter" +
                "ro = \'create tb_est_kit_sync_upd\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_E" +
                "ST_KIT_SYNC_UPD FOR TB_EST_KIT BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN" +
                " TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (OLD.ID_KIT IS DISTINCT FROM new.ID_KIT OR o" +
                "ld.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.STATUS IS DISTINCT FROM new.S" +
                "TATUS) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO" +
                " :VNUMCAIXA DO BEGIN IF ((SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = o" +
                "ld.ID_KIT AND TABELA = \'\'TB_EST_KIT\'\' AND (OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\')" +
                " AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , " +
                "ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC" +
                "_SEQ, 1) , old.ID_KIT , \'\'TB_EST_KIT\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP)" +
                " ; END END END END;\';    \r\n\r\nerro = \'drop tb_est_kit_sync_del\';           \r\n    " +
                "                                                                                " +
                "                            if (exists(select 1 from RDB$TRIGGERS where RDB$TRIG" +
                "GER_NAME = \'TB_EST_KIT_SYNC_DEL\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TR" +
                "IGGER TB_EST_KIT_SYNC_DEL\';\r\n\t\t\t\t\t\terro = \'create tb_est_kit_sync_del\';\r\n\t\t\t\t\t\tE" +
                "XECUTE STATEMENT \'CREATE TRIGGER TB_EST_KIT_SYNC_DEL FOR TB_EST_KIT BEFORE DELET" +
                "E AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT" +
                " NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT " +
                "INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VA" +
                "LUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_KIT , \'\'TB_EST_KIT\'\' , \'\'D\'\' , :V" +
                "NUMCAIXA , CURRENT_TIMESTAMP) ; END END;\';    \r\n\r\nerro = \'drop tb_est_kit_item_s" +
                "ync_ins\';           \r\n                                                          " +
                "                                                      if (exists(select 1 from R" +
                "DB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_EST_KIT_ITEM_SYNC_INS\'))\r\n\t\t\t\t\t\tthen\r\n\t" +
                "\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_EST_KIT_ITEM_SYNC_INS\';\r\n\t\t\t\t\t\terro = \'c" +
                "reate tb_est_kit_item_sync_ins\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_EST" +
                "_KIT_ITEM_SYNC_INS FOR TB_EST_KIT_ITEM BEFORE INSERT AS DECLARE VNUMCAIXA TYPE O" +
                "F COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG " +
                "ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , I" +
                "D_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_" +
                "SEQ, 1) , NEW.ID_ESTKIT , \'\'TB_EST_KIT_ITEM\'\' , \'\'I\'\' ,:VNUMCAIXA , CURRENT_TIME" +
                "STAMP); END END;\';   \r\n\r\nerro = \'drop tb_est_kit_item_sync_upd\';           \r\n   " +
                "                                                                                " +
                "                             if (exists(select 1 from RDB$TRIGGERS where RDB$TRI" +
                "GGER_NAME = \'TB_EST_KIT_ITEM_SYNC_UPD\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'D" +
                "ROP TRIGGER TB_EST_KIT_ITEM_SYNC_UPD\';\r\n\t\t\t\t\t\terro = \'create tb_est_kit_item_syn" +
                "c_upd\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_EST_KIT_ITEM_SYNC_UPD FOR TB" +
                "_EST_KIT_ITEM BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.N" +
                "O_CAIXA ; BEGIN IF (OLD.ID_IDENTIFICADOR IS DISTINCT FROM new.ID_IDENTIFICADOR O" +
                "R old.ID_KIT IS DISTINCT FROM new.ID_KIT OR old.QTD_ITEM IS DISTINCT FROM new.QT" +
                "D_ITEM OR OLD.STATUS IS DISTINCT FROM NEW.STATUS OR OLD.VLR_ITEM IS DISTINCT FRO" +
                "M NEW.VLR_ITEM OR OLD.ID_ESTKIT IS DISTINCT FROM NEW.ID_ESTKIT) THEN BEGIN FOR S" +
                "ELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF" +
                " ((SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_ESTKIT AND TABELA" +
                " = \'\'TB_EST_KIT_ITEM\'\' AND (OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\') AND NO_CAIXA =" +
                " :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA" +
                " , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old." +
                "ID_ESTKIT , \'\'TB_EST_KIT_ITEM\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END " +
                "END END END;\';          \r\n\r\nerro = \'drop tb_est_kit_item_sync_del\';           \r\n" +
                "                                                                                " +
                "                                if (exists(select 1 from RDB$TRIGGERS where RDB$" +
                "TRIGGER_NAME = \'TB_EST_KIT_ITEM_SYNC_DEL\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT" +
                " \'DROP TRIGGER TB_EST_KIT_ITEM_SYNC_DEL\';\r\n\t\t\t\t\t\terro = \'create tb_est_kit_item_" +
                "sync_del\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_EST_KIT_ITEM_SYNC_DEL FOR" +
                " TB_EST_KIT_ITEM BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFI" +
                "G.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INT" +
                "O :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPER" +
                "ACAO , NO_CAIXA , TS_OPER ) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_EST" +
                "KIT , \'\'TB_EST_KIT_ITEM\'\' , \'\'D\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END;\';" +
                "       \r\n\r\nerro = \'drop tb_nivel1_aux_sync_ins\';           \r\n                   " +
                "                                                                                " +
                "             if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_" +
                "NIVEL1_AUX_SYNC_INS\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_NIV" +
                "EL1_AUX_SYNC_INS\';\r\n\t\t\t\t\t\terro = \'create tb_nivel1_aux_sync_ins\';\r\n\t\t\t\t\t\tEXECUTE" +
                " STATEMENT \'CREATE TRIGGER TB_NIVEL1_AUX_SYNC_INS FOR TB_EST_PROD_NIVEL1 AFTER I" +
                "NSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SEL" +
                "ECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSE" +
                "RT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER)" +
                " VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , NEW.ID_NIVEL1 , \'\'TB_EST_PROD_NIVEL1\'" +
                "\' , \'\'I\'\' ,:VNUMCAIXA , CURRENT_TIMESTAMP); END END;\';   \r\n\r\nerro = \'drop tb_niv" +
                "el1_aux_sync_upd\';           \r\n                                                 " +
                "                                                               if (exists(select" +
                " 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_NIVEL1_AUX_SYNC_UPD\'))\r\n\t\t\t\t\t\t" +
                "then\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_NIVEL1_AUX_SYNC_UPD\';\r\n\t\t\t\t\t\terro" +
                " = \'create tb_nivel1_aux_sync_upd\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_" +
                "NIVEL1_AUX_SYNC_UPD FOR TB_EST_PROD_NIVEL1 BEFORE UPDATE AS DECLARE VNUMCAIXA TY" +
                "PE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (OLD.ID_NIVEL1 IS DISTINCT FROM " +
                "new.ID_NIVEL1 OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.STATUS IS D" +
                "ISTINCT FROM new.STATUS) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDE" +
                "R BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF (( SELECT COUNT(1) FROM TRI_PDV_AUX_SY" +
                "NC WHERE ID_REG = old.ID_NIVEL1 AND TABELA = \'\'TB_EST_PROD_NIVEL1\'\' AND (OPERACA" +
                "O = \'\'I\'\' OR OPERACAO = \'\'U\'\') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT" +
                " INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) V" +
                "ALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_NIVEL1 , \'\'TB_EST_PROD_NIVEL1\'\' " +
                ", \'\'U\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END END END;\';     \r\n\r\nerro = \'d" +
                "rop tb_nivel1_aux_sync_del\';           \r\n                                       " +
                "                                                                         if (exi" +
                "sts(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_NIVEL1_AUX_SYNC_DEL\'" +
                "))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_NIVEL1_AUX_SYNC_DEL\';\r\n" +
                "\t\t\t\t\t\terro = \'create tb_nivel1_aux_sync_del\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE T" +
                "RIGGER TB_NIVEL1_AUX_SYNC_DEL FOR TB_EST_PROD_NIVEL1 BEFORE DELETE AS DECLARE VN" +
                "UMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM " +
                "TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AU" +
                "X_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GE" +
                "N_PDV_AUX_SYNC_SEQ, 1) , old.ID_NIVEL1 , \'\'TB_EST_PROD_NIVEL1\'\' , \'\'D\'\' , :VNUMC" +
                "AIXA , CURRENT_TIMESTAMP) ; END END;\';\r\n\r\nerro = \'drop tb_nivel2_aux_sync_ins\'; " +
                "          \r\n                                                                    " +
                "                                            if (exists(select 1 from RDB$TRIGGER" +
                "S where RDB$TRIGGER_NAME = \'TB_NIVEL2_AUX_SYNC_INS\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE" +
                " STATEMENT \'DROP TRIGGER TB_NIVEL2_AUX_SYNC_INS\';\r\n\t\t\t\t\t\terro = \'create tb_nivel" +
                "2_aux_sync_ins\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIGGER TB_NIVEL2_AUX_SYNC_INS" +
                " FOR TB_EST_PROD_NIVEL2 AFTER INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV" +
                "_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIX" +
                "A INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA ," +
                " OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , NEW.ID" +
                "_NIVEL2 , \'\'TB_EST_PROD_NIVEL2\'\' , \'\'I\'\' ,:VNUMCAIXA , CURRENT_TIMESTAMP); END E" +
                "ND;\'; \r\n\r\nerro = \'drop tb_nivel2_aux_sync_upd\';           \r\n                    " +
                "                                                                                " +
                "            if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_N" +
                "IVEL2_AUX_SYNC_UPD\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_NIVE" +
                "L2_AUX_SYNC_UPD\';\r\n\t\t\t\t\t\terro = \'create tb_nivel2_aux_sync_upd\';\r\n\t\t\t\t\t\tEXECUTE " +
                "STATEMENT \'CREATE TRIGGER TB_NIVEL2_AUX_SYNC_UPD FOR TB_EST_PROD_NIVEL2 BEFORE U" +
                "PDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (OL" +
                "D.ID_NIVEL2 IS DISTINCT FROM new.ID_NIVEL2 OR old.DESCRICAO IS DISTINCT FROM new" +
                ".DESCRICAO OR old.STATUS IS DISTINCT FROM new.STATUS) THEN BEGIN FOR SELECT NO_C" +
                "AIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF (( SELECT" +
                " COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_NIVEL2 AND TABELA = \'\'TB_E" +
                "ST_PROD_NIVEL2\'\' AND (OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\') AND NO_CAIXA = :VNUM" +
                "CAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPE" +
                "RACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_NIV" +
                "EL2 , \'\'TB_EST_PROD_NIVEL2\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END" +
                " END END;\';\r\n\r\nerro = \'drop tb_nivel2_aux_sync_del\';           \r\n               " +
                "                                                                                " +
                "                 if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = " +
                "\'TB_NIVEL2_AUX_SYNC_DEL\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB" +
                "_NIVEL2_AUX_SYNC_DEL\';\r\n\t\t\t\t\t\terro = \'create tb_nivel2_aux_sync_del\';\r\n\t\t\t\t\t\tEXE" +
                "CUTE STATEMENT \'CREATE TRIGGER TB_NIVEL2_AUX_SYNC_DEL FOR TB_EST_PROD_NIVEL2 BEF" +
                "ORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN F" +
                "OR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGI" +
                "N INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS" +
                "_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_NIVEL2 , \'\'TB_EST_PROD_N" +
                "IVEL2\'\' , \'\'D\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END;\';\r\n\r\nerro = \'drop t" +
                "b_promoscanntech_aux_sync_ins\';           \r\n                                    " +
                "                                                                            if (" +
                "exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_PROMOSCANNTECH_AU" +
                "X_SYNC_INS\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_PROMOSCANNTE" +
                "CH_AUX_SYNC_INS\';\r\n\t\t\t\t\t\terro = \'create tb_promoscanntech_aux_sync_ins\';\r\n\t\t\t\t\t\t" +
                "EXECUTE STATEMENT \'CREATE TRIGGER TB_PROMOSCANNTECH_AUX_SYNC_INS FOR TB_PROMOCOE" +
                "S BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEG" +
                "IN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO " +
                "BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA " +
                ", TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , NEW.ID , \'\'TB_PROMOCOES\'\' ," +
                " \'\'I\'\', :VNUMCAIXA , CURRENT_TIMESTAMP); END END;\';\r\n\r\n erro = \'drop  tb_promosc" +
                "anntech_aux_sync_upd\';           \r\n                                             " +
                "                                                                   if (exists(se" +
                "lect 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_PROMOSCANNTECH_AUX_SYNC_UP" +
                "D\'))\r\n\t\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_PROMOSCANNTECH_AUX_SY" +
                "NC_UPD\';\r\n\t\t\t\t\t\terro = \'create tb_promoscanntech_aux_sync_upd\';\r\n\t\t\t\t\t\tEXECUTE S" +
                "TATEMENT \'CREATE TRIGGER TB_PROMOSCANNTECH_AUX_SYNC_UPD FOR TB_PROMOCOES BEFORE " +
                "UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN IF (OL" +
                "D.ID IS DISTINCT FROM new.ID OR old.QTD IS DISTINCT FROM new.QTD OR old.TIPO IS " +
                "DISTINCT FROM new.TIPO OR old.DET IS DISTINCT FROM new.DET OR old.LIMITE IS DIST" +
                "INCT FROM NEW.LIMITE OR OLD.INICIO IS DISTINCT FROM NEW.INICIO OR OLD.FIM IS DIS" +
                "TINCT FROM NEW.FIM OR OLD.REJEITADA IS DISTINCT FROM NEW.REJEITADA OR OLD.SCANNT" +
                "ECH IS DISTINCT FROM NEW.SCANNTECH) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_" +
                "CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF(( SELECT COUNT(1) FROM TRI_" +
                "PDV_AUX_SYNC WHERE ID_REG = old.ID AND TABELA = \'\'TB_PROMOCOES\'\' AND (OPERACAO =" +
                " \'\'I\'\' OR OPERACAO = \'\'U\'\') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT IN" +
                "TO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALU" +
                "ES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID , \'\'TB_PROMOCOES\'\' , \'\'U\'\' , :VNUMC" +
                "AIXA , CURRENT_TIMESTAMP) ; END END END END;\';\r\n\r\nerro = \'drop tb_promoscanntech" +
                "_aux_sync_del\';           \r\n                                                    " +
                "                                                            if (exists(select 1 " +
                "from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_PROMOSCANNTECH_AUX_SYNC_DEL\'))\r\n\t" +
                "\t\t\t\t\tthen\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_PROMOSCANNTECH_AUX_SYNC_DEL\'" +
                ";\r\n\t\t\t\t\t\terro = \'create tb_promoscanntech_aux_sync_del\';\r\n\t\t\t\t\t\tEXECUTE STATEMEN" +
                "T \'CREATE TRIGGER TB_PROMOSCANNTECH_AUX_SYNC_DEL FOR TB_PROMOCOES BEFORE DELETE " +
                "AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT N" +
                "O_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT IN" +
                "TO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALU" +
                "ES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID , \'\'TB_PROMOCOES\'\' , \'\'D\'\' , :VNUMC" +
                "AIXA , CURRENT_TIMESTAMP) ; END END;\';\r\n\r\nerro = \'drop tb_itenscanntech_aux_sync" +
                "_ins\';           \r\n                                                             " +
                "                                                   if (exists(select 1 from RDB$" +
                "TRIGGERS where RDB$TRIGGER_NAME = \'TB_ITENSCANNTECH_AUX_SYNC_INS\'))\r\n\t\t\t\t\t\tthen\r" +
                "\n\t\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_ITENSCANNTECH_AUX_SYNC_INS\';\r\n\t\t\t\t\t\ter" +
                "ro = \'create tb_itenscanntech_aux_sync_ins\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TR" +
                "IGGER TB_ITENSCANNTECH_AUX_SYNC_INS FOR TB_PROMOCOES_ITENS BEFORE INSERT AS DECL" +
                "ARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA " +
                "FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_P" +
                "DV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_" +
                "ID(GEN_PDV_AUX_SYNC_SEQ, 1) , NEW.ID , \'\'TB_PROMOCOES_ITENS\'\' , \'\'I\'\' ,:VNUMCAIX" +
                "A , CURRENT_TIMESTAMP); END END;\';\r\n\r\n erro = \'drop  tb_itenscanntech_aux_sync_u" +
                "pd\';           \r\n                                                               " +
                "                                                 if (exists(select 1 from RDB$TR" +
                "IGGERS where RDB$TRIGGER_NAME = \'TB_ITENSCANNTECH_AUX_SYNC_UPD\'))\r\n\t\t\t\t\t\tthen\r\n\t" +
                "\t\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_ITENSCANNTECH_AUX_SYNC_UPD\';\r\n\t\t\t\t\t\terro" +
                " = \'create tb_itenscanntech_aux_sync_upd\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIG" +
                "GER TB_ITENSCANNTECH_AUX_SYNC_UPD FOR TB_PROMOCOES_ITENS BEFORE UPDATE AS DECLAR" +
                "E VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (OLD.ID IS DISTINC" +
                "T FROM new.ID OR old.IDPROMOCAO IS DISTINCT FROM new.IDPROMOCAO OR old.PRODUTONO" +
                "ME IS DISTINCT FROM new.PRODUTONOME OR old.CODIGOBARRAS IS DISTINCT FROM new.COD" +
                "IGOBARRAS) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA " +
                "INTO :VNUMCAIXA DO BEGIN IF (( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_RE" +
                "G = old.ID AND TABELA = \'\'TB_PROMOCOES_ITENS\'\' AND (OPERACAO = \'\'I\'\' OR OPERACAO" +
                " = \'\'U\'\') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYN" +
                "C (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV" +
                "_AUX_SYNC_SEQ, 1) , old.ID , \'\'TB_PROMOCOES_ITENS\'\' , \'\'U\'\' , :VNUMCAIXA , CURRE" +
                "NT_TIMESTAMP) ; END END END END;\';\r\n\r\nerro = \'drop  tb_itenscanntech_aux_sync_de" +
                "l\';           \r\n                                                                " +
                "                                                if (exists(select 1 from RDB$TRI" +
                "GGERS where RDB$TRIGGER_NAME = \'TB_ITENSCANNTECH_AUX_SYNC_DEL\'))\r\n\t\t\t\t\t\tthen\r\n\t\t" +
                "\t\t\t\tEXECUTE STATEMENT \'DROP TRIGGER TB_ITENSCANNTECH_AUX_SYNC_DEL\';\r\n\t\t\t\t\t\terro " +
                "= \'create  tb_itenscanntech_aux_sync_del\';\r\n\t\t\t\t\t\tEXECUTE STATEMENT \'CREATE TRIG" +
                "GER TB_ITENSCANNTECH_AUX_SYNC_DEL FOR TB_PROMOCOES_ITENS BEFORE DELETE AS DECLAR" +
                "E VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA F" +
                "ROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PD" +
                "V_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_I" +
                "D(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID , \'\'TB_PROMOCOES_ITENS\'\' , \'\'D\'\' , :VNUMCAIX" +
                "A , CURRENT_TIMESTAMP) ; END END;\';\r\n\r\nerro = \'deu certo\';\r\nSUSPEND;\r\nWHEN ANY D" +
                "O\r\nBEGIN\r\n\r\nEND\r\nEND;";
            this._commandCollection[10].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[11] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[11].Connection = this.Connection;
            this._commandCollection[11].CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_GERATRIGGERS_AUX_SYNC4\r\nRETURNS (erro VARCHAR(64" +
                ")) AS\r\nBEGIN\r\n\r\nerro = \'drop TB_ESTSUBGRUPO_AUX_SYNC_INS\';           \r\nif (exist" +
                "s(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTSUBGRUPO_AUX_SYNC_I" +
                "NS\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_ESTSUBGRUPO_AUX_SYNC_INS\';\r\nerro" +
                " = \'create TB_ESTSUBGRUPO_AUX_SYNC_INS\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_E" +
                "STSUBGRUPO_AUX_SYNC_INS FOR TB_EST_SUBGRUPO BEFORE INSERT AS DECLARE VNUMCAIXA T" +
                "YPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_C" +
                "ONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (S" +
                "EQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX" +
                "_SYNC_SEQ, 1) , new.ID_SUBGRUPO , \'\'TB_EST_SUBGRUPO\'\' , \'\'I\'\' , :VNUMCAIXA , CUR" +
                "RENT_TIMESTAMP); END END;\';\r\n\r\nerro = \'drop TB_ESTSUBGRUPO_AUX_SYNC_UPD\';       " +
                "    \r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_ESTSUBG" +
                "RUPO_AUX_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_ESTSUBGRUPO_AUX_S" +
                "YNC_UPD\';\r\nerro = \'create TB_ESTSUBGRUPO_AUX_SYNC_UPD\';\r\nEXECUTE STATEMENT \'CREA" +
                "TE TRIGGER TB_ESTSUBGRUPO_AUX_SYNC_UPD FOR TB_EST_SUBGRUPO BEFORE UPDATE AS DECL" +
                "ARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.DESCRICAO I" +
                "S DISTINCT FROM new.DESCRICAO OR OLD.ID_GRUPO IS DISTINCT FROM NEW.ID_GRUPO) THE" +
                "N BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIX" +
                "A DO BEGIN IF (( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_SUB" +
                "GRUPO AND TABELA = \'\'TB_EST_SUBGRUPO\'\' AND (OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\'" +
                ") AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ ," +
                " ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYN" +
                "C_SEQ, 1) , old.ID_SUBGRUPO , \'\'TB_EST_SUBGRUPO\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT" +
                "_TIMESTAMP); END END END END;\';\r\n\r\nerro = \'drop TB_ESTSUBGRUPO_AUX_SYNC_DEL\';   " +
                "        \r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_EST" +
                "SUBGRUPO_AUX_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_ESTSUBGRUPO_A" +
                "UX_SYNC_DEL\';\r\nerro = \'create TB_ESTSUBGRUPO_AUX_SYNC_DEL\';\r\nEXECUTE STATEMENT \'" +
                "CREATE TRIGGER TB_ESTSUBGRUPO_AUX_SYNC_DEL FOR TB_EST_SUBGRUPO BEFORE DELETE AS " +
                "DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_C" +
                "AIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO " +
                "TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES " +
                "(GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_SUBGRUPO , \'\'TB_EST_SUBGRUPO\'\' , \'\'D\'\'" +
                " , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END;\';\r\n\r\nerro = \'drop TB_MOTIVO_DESO_A" +
                "UX_SYNC_INS\';           \r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGE" +
                "R_NAME = \'TB_MOTIVO_DESO_AUX_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER " +
                "TB_MOTIVO_DESO_AUX_SYNC_INS\';\r\nerro = \'create TB_MOTIVO_DESO_AUX_SYNC_INS\';\r\nEXE" +
                "CUTE STATEMENT \'CREATE TRIGGER TB_MOTIVO_DESO_AUX_SYNC_INS FOR TB_MOTIVO_DESO_SI" +
                "S BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BE" +
                "GIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO" +
                " BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA" +
                " , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , new.ID_MOTIVO_DESO , \'\'TB_" +
                "MOTIVO_DESO_SIS\'\' , \'\'I\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP); END END;\';\r\n\r\nerro " +
                "= \'drop TB_MOTIVO_DESO_AUX_SYNC_UPD\';           \r\nif (exists(select 1 from RDB$T" +
                "RIGGERS where RDB$TRIGGER_NAME = \'TB_MOTIVO_DESO_AUX_SYNC_UPD\'))\r\nthen\r\nEXECUTE " +
                "STATEMENT \'DROP TRIGGER TB_MOTIVO_DESO_AUX_SYNC_UPD\';\r\nerro = \'create TB_MOTIVO_" +
                "DESO_AUX_SYNC_UPD\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_MOTIVO_DESO_AUX_SYNC_U" +
                "PD FOR TB_MOTIVO_DESO_SIS BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_" +
                "PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.DESCRICAO IS DISTINCT FROM new.DESCRICAO) TH" +
                "EN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAI" +
                "XA DO BEGIN IF (( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_MO" +
                "TIVO_DESO AND TABELA = \'\'TB_MOTIVO_DESO_SIS\'\' AND (OPERACAO = \'\'I\'\' OR OPERACAO " +
                "= \'\'U\'\') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC" +
                " (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_" +
                "AUX_SYNC_SEQ, 1) , old.ID_MOTIVO_DESO , \'\'TB_MOTIVO_DESO_SIS\'\' , \'\'U\'\' , :VNUMCA" +
                "IXA , CURRENT_TIMESTAMP); END END END END;\';\r\n\r\nerro = \'drop TB_MOTIVO_DESO_AUX_" +
                "SYNC_DEL\';           \r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_N" +
                "AME = \'TB_MOTIVO_DESO_AUX_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_" +
                "MOTIVO_DESO_AUX_SYNC_DEL\';\r\nerro = \'create TB_MOTIVO_DESO_AUX_SYNC_DEL\';\r\nEXECUT" +
                "E STATEMENT \'CREATE TRIGGER TB_MOTIVO_DESO_AUX_SYNC_DEL FOR TB_MOTIVO_DESO_SIS B" +
                "EFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN" +
                " FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BE" +
                "GIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , " +
                "TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_MOTIVO_DESO , \'\'TB_MOT" +
                "IVO_DESO_SIS\'\' , \'\'D\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END;\';\r\n\r\nerro = " +
                "\'drop TB_TRIMETODOS_AUX_UPD_SYNC_UPD\';\r\nif (exists(select 1 from RDB$TRIGGERS wh" +
                "ere RDB$TRIGGER_NAME = \'TB_TRIMETODOS_AUX_UPD_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEME" +
                "NT \'DROP TRIGGER TB_TRIMETODOS_AUX_UPD_SYNC_UPD;\';\r\nerro = \'create TB_TRIMETODOS" +
                "_AUX_UPD_SYNC_UPD\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_TRIMETODOS_AUX_UPD_SYN" +
                "C_UPD FOR TRI_PDV_METODOS ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLU" +
                "MN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.ID_PAGAMENTO IS DISTINCT FROM new.ID_" +
                "PAGAMENTO OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.DIAS IS DISTINC" +
                "T FROM new.DIAS OR old.METODO IS DISTINCT FROM new.METODO OR old.PGTOCFE IS DIST" +
                "INCT FROM new.PGTOCFE OR old.ATIVO IS DISTINCT FROM new.ATIVO) THEN BEGIN FOR SE" +
                "LECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF " +
                "((SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_PAGAMENTO AND TABE" +
                "LA = \'\'TRI_PDV_METODOS\'\' AND (OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\') AND NO_CAIXA" +
                " = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABE" +
                "LA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , ol" +
                "d.ID_PAGAMENTO , \'\'TRI_PDV_METODOS\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP) ;" +
                " END END END END;\';\r\n\r\nerro = \'drop TRI_SCANN_ADD_AUX_SYNC_DEL\';           \r\nif " +
                "(exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TRI_SCANN_ADD_AUX_S" +
                "YNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TRI_SCANN_ADD_AUX_SYNC_DEL\';\r\n" +
                "erro = \'create TRI_SCANN_ADD_AUX_SYNC_DEL\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER T" +
                "RI_SCANN_ADD_AUX_SYNC_DEL FOR TRI_SCANN_ADICIONAL BEFORE DELETE AS DECLARE VNUMC" +
                "AIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN  FOR SELECT  NO_CAIXA FROM  T" +
                "RI_PDV_CONFIG ORDER BY  NO_CAIXA INTO  :VNUMCAIXA DO BEGIN INSERT  INTO  TRI_PDV" +
                "_AUX_SYNC (SEQ ,  ID_REG ,  TABELA ,  OPERACAO ,  NO_CAIXA ,  TS_OPER) VALUES (G" +
                "EN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID , \'\'TRI_SCANN_ADICIONAL\'\' , \'\'D\'\' , :VNU" +
                "MCAIXA , CURRENT_TIMESTAMP) ; END END\';\r\n\r\nerro = \'drop TRI_SCANN_ADD_AUX_SYNC_I" +
                "NS\';           \r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = " +
                "\'TRI_SCANN_ADD_AUX_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TRI_SCANN_" +
                "ADD_AUX_SYNC_INS\';\r\nerro = \'create TRI_SCANN_ADD_AUX_SYNC_INS\';\r\nEXECUTE STATEME" +
                "NT \'CREATE TRIGGER TRI_SCANN_ADD_AUX_SYNC_INS FOR TRI_SCANN_ADICIONAL BEFORE INS" +
                "ERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN  FOR SELE" +
                "CT  NO_CAIXA FROM  TRI_PDV_CONFIG ORDER BY  NO_CAIXA INTO  :VNUMCAIXA DO BEGIN I" +
                "NSERT  INTO  TRI_PDV_AUX_SYNC (SEQ ,  ID_REG ,  TABELA ,  OPERACAO ,  NO_CAIXA ," +
                "  TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , NEW.ID , \'\'TRI_SCANN_ADICIO" +
                "NAL\'\' , \'\'I\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP); END END\';\r\n\r\nerro = \'drop TRI_S" +
                "CANN_ADD_AUX_SYNC_UPD\';           \r\nif (exists(select 1 from RDB$TRIGGERS where " +
                "RDB$TRIGGER_NAME = \'TRI_SCANN_ADD_AUX_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP" +
                " TRIGGER TRI_SCANN_ADD_AUX_SYNC_UPD\';\r\nerro = \'create TRI_SCANN_ADD_AUX_SYNC_UPD" +
                "\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TRI_SCANN_ADD_AUX_SYNC_UPD FOR TRI_SCANN_A" +
                "DICIONAL BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAI" +
                "XA ; BEGIN  IF (OLD.ID IS DISTINCT FROM  new.ID  OR old.IDPROMOCAO IS DISTINCT F" +
                "ROM  new.IDPROMOCAO  OR old.PRODUTONOME IS DISTINCT FROM  new.PRODUTONOME  OR ol" +
                "d.CODIGOBARRAS IS DISTINCT FROM  new.CODIGOBARRAS) THEN BEGIN   FOR SELECT  NO_C" +
                "AIXA FROM  TRI_PDV_CONFIG ORDER BY  NO_CAIXA INTO  :VNUMCAIXA DO BEGIN IF ((  SE" +
                "LECT   COUNT(1)  FROM   TRI_PDV_AUX_SYNC  WHERE   ID_REG = old.ID   AND TABELA =" +
                " \'\'TRI_SCANN_ADICIONAL\'\'   AND (OPERACAO = \'\'I\'\'    OR OPERACAO = \'\'U\'\')   AND N" +
                "O_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT  INTO  TRI_PDV_AUX_SYNC (SEQ ,  ID_" +
                "REG ,  TABELA ,  OPERACAO ,  NO_CAIXA ,  TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYN" +
                "C_SEQ, 1) , old.ID , \'\'TRI_SCANN_ADICIONAL\'\' , \'\'U\'\' , :VNUMCAIXA , CURRENT_TIME" +
                "STAMP) ; END END END END\';\r\n\r\nerro = \'drop TB_FUNC_PDV_USERS\';           \r\nif (e" +
                "xists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_FUNC_PDV_USERS\'))\r" +
                "\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_FUNC_PDV_USERS\';\r\nerro = \'create TB_FU" +
                "NC_PDV_USERS\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_FUNC_PDV_USERS FOR TB_FUNCI" +
                "ONARIO AFTER UPDATE AS BEGIN IF(OLD.NOME IS DISTINCT FROM NEW.NOME OR OLD.STATUS" +
                " IS DISTINCT FROM NEW.STATUS) THEN  BEGIN UPDATE TRI_PDV_USERS SET USERNAME = NE" +
                "W.NOME,   ATIVO = CASE NEW.STATUS WHEN \'\'A\'\' THEN \'\'SIM\'\' WHEN \'\'I\'\' THEN \'\'NAO\'" +
                "\' ELSE \'\'NAO\'\' END WHERE ID_USER = OLD.ID_FUNCIONARIO;  END END;\';\r\n\r\nerro = \'dr" +
                "op TB_FUNCPAPEL_PDV_USERS\';           \r\nif (exists(select 1 from RDB$TRIGGERS wh" +
                "ere RDB$TRIGGER_NAME = \'TB_FUNCPAPEL_PDV_USERS\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP" +
                " TRIGGER TB_FUNCPAPEL_PDV_USERS\';\r\nerro = \'create TB_FUNCPAPEL_PDV_USERS\';\r\nEXEC" +
                "UTE STATEMENT \'CREATE TRIGGER TB_FUNCPAPEL_PDV_USERS FOR TB_FUNC_PAPEL AFTER INS" +
                "ERT AS  DECLARE VARIABLE V_GERENCIA INTEGER; BEGIN  SELECT COUNT(*) FROM TB_FUNC" +
                "_PAPEL WHERE ID_PAPEL = 5 AND ID_FUNCIONARIO = NEW.ID_FUNCIONARIO INTO :V_GERENC" +
                "IA;   UPDATE TRI_PDV_USERS   SET GERENCIA = CASE :V_GERENCIA WHEN 0 THEN \'\'NAO\'\'" +
                " ELSE \'\'SIM\'\' END,  PERMISSOES = CASE :V_GERENCIA WHEN 0 THEN CASE PERMISSOES WH" +
                "EN -1 THEN 0 ELSE PERMISSOES END ELSE -1 END  WHERE ID_USER = NEW.ID_FUNCIONARIO" +
                "; END;\';\r\n\r\nerro = \'drop TB_PARAMETRO_AUX_SYNC_DEL\';           \r\nif (exists(sele" +
                "ct 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_PARAMETRO_AUX_SYNC_DEL\'))\r\nt" +
                "hen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_PARAMETRO_AUX_SYNC_DEL\';\r\nerro = \'create" +
                " TB_PARAMETRO_AUX_SYNC_DEL\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_PARAMETRO_AUX" +
                "_SYNC_DEL FOR TB_PARAMETRO BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI" +
                "_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO" +
                "_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TA" +
                "BELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_I" +
                "D(GEN_PDV_AUX_SYNC_SEQ, 1) , OLD.ID_PARAMETRO , \'\'TB_PARAMETRO\'\' , \'\'D\'\' , :VNUM" +
                "CAIXA , CURRENT_TIMESTAMP , NULL , NULL , NULL ) ; END END;\';\r\n\r\nerro = \'drop TB" +
                "_PARAMETRO_AUX_SYNC_INS\';           \r\nif (exists(select 1 from RDB$TRIGGERS wher" +
                "e RDB$TRIGGER_NAME = \'TB_PARAMETRO_AUX_SYNC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'DRO" +
                "P TRIGGER TB_PARAMETRO_AUX_SYNC_INS\';\r\nerro = \'create TB_PARAMETRO_AUX_SYNC_INS\'" +
                ";\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_PARAMETRO_AUX_SYNC_INS FOR TB_PARAMETRO " +
                "AFTER INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN " +
                "FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEG" +
                "IN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPE" +
                "R) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1), new.ID_PARAMETRO, \'\'TB_PARAMETRO\'\', \'" +
                "\'I\'\', :VNUMCAIXA, CURRENT_TIMESTAMP); END END;\';\r\n\r\nerro = \'drop TB_PARAMETRO_AU" +
                "X_SYNC_UPD\';           \r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER" +
                "_NAME = \'TB_PARAMETRO_AUX_SYNC_UPD\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_" +
                "PARAMETRO_AUX_SYNC_UPD\';\r\nerro = \'create TB_PARAMETRO_AUX_SYNC_UPD\';\r\nEXECUTE ST" +
                "ATEMENT \'CREATE TRIGGER TB_PARAMETRO_AUX_SYNC_UPD FOR TB_PARAMETRO AFTER UPDATE " +
                "AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN IF (old.INFOR" +
                "MACAO IS DISTINCT FROM new.INFORMACAO OR old.CONTEUDO IS DISTINCT FROM new.CONTE" +
                "UDO OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.ID_FUNCIONARIO IS DIS" +
                "TINCT FROM new.ID_FUNCIONARIO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFI" +
                "G ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF (( SELECT COUNT (1) FROM TRI_PDV" +
                "_AUX_SYNC WHERE ID_REG = old.ID_PARAMETRO AND TABELA = \'\'TB_PARAMETRO\'\' AND (OPE" +
                "RACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN IN" +
                "SERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VA" +
                "LUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1), old.ID_PARAMETRO, \'\'TB_PARAMETRO\'\', \'\'U\'\'," +
                " :VNUMCAIXA, CURRENT_TIMESTAMP); END END END END;\';\r\n\r\nerro = \'drop TB_BANCO_CTA" +
                "_AUX_SYNC_DEL\';           \r\nif (exists(select 1 from RDB$TRIGGERS where RDB$TRIG" +
                "GER_NAME = \'TB_BANCO_CTA_AUX_SYNC_DEL\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER " +
                "TB_BANCO_CTA_AUX_SYNC_DEL\';\r\nerro = \'create TB_BANCO_CTA_AUX_SYNC_DEL\';\r\nEXECUTE" +
                " STATEMENT \'CREATE TRIGGER TB_BANCO_CTA_AUX_SYNC_DEL FOR TB_BANCO_CTA BEFORE DEL" +
                "ETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELE" +
                "CT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSER" +
                "T INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER " +
                ", UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , OLD.ID_C" +
                "ONTA , \'\'TB_BANCO_CTA\'\' , \'\'D\'\' , :VNUMCAIXA , CURRENT_TIMESTAMP , NULL , NULL ," +
                " NULL ) ; END END;\';\r\n\r\nerro = \'drop TB_BANCO_CTA_AUX_SYNC_INS\';           \r\nif " +
                "(exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_BANCO_CTA_AUX_SY" +
                "NC_INS\'))\r\nthen\r\nEXECUTE STATEMENT \'DROP TRIGGER TB_BANCO_CTA_AUX_SYNC_INS\';\r\ner" +
                "ro = \'create TB_BANCO_CTA_AUX_SYNC_INS\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_B" +
                "ANCO_CTA_AUX_SYNC_INS FOR TB_BANCO_CTA AFTER INSERT AS DECLARE VNUMCAIXA TYPE OF" +
                " COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG O" +
                "RDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_" +
                "REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1)" +
                ", new.ID_CONTA, \'\'TB_BANCO_CTA\'\', \'\'I\'\', :VNUMCAIXA, CURRENT_TIMESTAMP); END END" +
                ";\';\r\n\r\nerro = \'drop TB_BANCO_CTA_AUX_SYNC_UPD\';           \r\nif (exists(select 1 " +
                "from RDB$TRIGGERS where RDB$TRIGGER_NAME = \'TB_BANCO_CTA_AUX_SYNC_UPD\'))\r\nthen\r\n" +
                "EXECUTE STATEMENT \'DROP TRIGGER TB_BANCO_CTA_AUX_SYNC_UPD\';\r\nerro = \'create TB_B" +
                "ANCO_CTA_AUX_SYNC_UPD\';\r\nEXECUTE STATEMENT \'CREATE TRIGGER TB_BANCO_CTA_AUX_SYNC" +
                "_UPD FOR TB_BANCO_CTA AFTER UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_C" +
                "ONFIG.NO_CAIXA; BEGIN IF (old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.AG" +
                "ENCIA IS DISTINCT FROM new.AGENCIA OR old.CONTA IS DISTINCT FROM new.CONTA OR ol" +
                "d.STATUS IS DISTINCT FROM new.STATUS OR OLD.ID_BANCO IS DISTINCT FROM NEW.ID_BAN" +
                "CO OR OLD.ID_CTAPLA IS DISTINCT FROM NEW.ID_CTAPLA OR OLD.SD_TALAO IS DISTINCT F" +
                "ROM NEW.SD_TALAO OR OLD.SD_REAL IS DISTINCT FROM NEW.SD_REAL OR OLD.SD_BANCO IS " +
                "DISTINCT FROM NEW.SD_BANCO OR OLD.DT_ULTCONC IS DISTINCT FROM NEW.DT_ULTCONC OR " +
                "OLD.ID_AGENTE_FINANCEIRO IS DISTINCT FROM NEW.ID_AGENTE_FINANCEIRO OR OLD.HABILI" +
                "TAR_RECEBIMENTO IS DISTINCT FROM NEW.HABILITAR_RECEBIMENTO) THEN BEGIN FOR SELEC" +
                "T NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF (( " +
                "SELECT COUNT (1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_CONTA AND TABELA = " +
                "\'\'TB_BANCO_CTA\'\' AND (OPERACAO = \'\'I\'\' OR OPERACAO = \'\'U\'\') AND NO_CAIXA = :VNUM" +
                "CAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERAC" +
                "AO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1), old.ID_CONTA, \'\'T" +
                "B_BANCO_CTA\'\', \'\'U\'\', :VNUMCAIXA, CURRENT_TIMESTAMP); END END END END;\';\r\n\r\nerro" +
                " = \'deu certo\';\r\nSUSPEND;\r\nWHEN ANY DO\r\nBEGIN\r\n\r\nEND\r\nEND;";
            this._commandCollection[11].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[12] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[12].Connection = this.Connection;
            this._commandCollection[12].CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_DADOSINICIAIS\r\nRETURNS (\r\n\terro VARCHAR(64)\r\n)\r\n" +
                "AS\r\nBEGIN\r\n\terro = \'a vista\';\r\n\tEXECUTE STATEMENT \'UPDATE OR INSERT INTO TRI_PDV" +
                "_METODOS (ID_PAGAMENTO, DESCRICAO, DIAS, METODO, PGTOCFE, ATIVO) VALUES (1, \'\'DI" +
                "NHEIRO\'\', 0, \'\'C\'\', \'\'01\'\', \'\'S\'\');\';\r\n\t\r\n\terro = \'a prazo 30\';\r\n\tEXECUTE STATEM" +
                "ENT \'UPDATE OR INSERT INTO TRI_PDV_METODOS (ID_PAGAMENTO, DESCRICAO, DIAS, METOD" +
                "O, PGTOCFE, ATIVO) VALUES (2, \'\'CHEQUE\'\', 0, \'\'C\'\', \'\'02\'\', \'\'S\'\');\';\r\n\t\r\n\terro " +
                "= \'a prazo 14\';\r\n\tEXECUTE STATEMENT \'UPDATE OR INSERT INTO TRI_PDV_METODOS (ID_P" +
                "AGAMENTO, DESCRICAO, DIAS, METODO, PGTOCFE, ATIVO) VALUES (3, \'\'CRÉDITO\'\', 0, \'\'" +
                "C\'\', \'\'03\'\', \'\'S\'\');\';\r\n\t\r\n\terro = \'credito\';\r\n\tEXECUTE STATEMENT \'UPDATE OR INS" +
                "ERT INTO TRI_PDV_METODOS (ID_PAGAMENTO, DESCRICAO, DIAS, METODO, PGTOCFE, ATIVO)" +
                " VALUES (4, \'\'DÉBITO\'\', 0, \'\'c\'\', \'\'04\'\', \'\'S\'\');\';\r\n\t\r\n\terro = \'debito\';\r\n\tEXEC" +
                "UTE STATEMENT \'UPDATE OR INSERT INTO TRI_PDV_METODOS (ID_PAGAMENTO, DESCRICAO, D" +
                "IAS, METODO, PGTOCFE, ATIVO) VALUES (5, \'\'CRÉDITO LOJA\'\', 0, \'\'C\'\', \'\'05\'\', \'\'S\'" +
                "\');\';\r\n\t\r\n\terro = \'aliment\';\r\n\tEXECUTE STATEMENT \'UPDATE OR INSERT INTO TRI_PDV_" +
                "METODOS (ID_PAGAMENTO, DESCRICAO, DIAS, METODO, PGTOCFE, ATIVO) VALUES (6, \'\'V. " +
                "ALIMENTAÇÃO\'\', 0, \'\'C\'\', \'\'10\'\', \'\'S\'\');\';\r\n\t\r\n\terro = \'refeicao\';\r\n\tEXECUTE STA" +
                "TEMENT \'UPDATE OR INSERT INTO TRI_PDV_METODOS (ID_PAGAMENTO, DESCRICAO, DIAS, ME" +
                "TODO, PGTOCFE, ATIVO) VALUES (7, \'\'V. REFEIÇÃO\'\', 0, \'\'C\'\', \'\'11\'\', \'\'S\'\');\';\r\n\r" +
                "\n\terro = \'presente\';\r\n\tEXECUTE STATEMENT \'UPDATE OR INSERT INTO TRI_PDV_METODOS " +
                "(ID_PAGAMENTO, DESCRICAO, DIAS, METODO, PGTOCFE, ATIVO) VALUES (8, \'\'V. PRESENTE" +
                "\'\', 0, \'\'C\'\', \'\'12\'\', \'\'S\'\');\';\r\n\t\r\n\terro = \'combust\';\r\n\tEXECUTE STATEMENT \'UPDA" +
                "TE OR INSERT INTO TRI_PDV_METODOS (ID_PAGAMENTO, DESCRICAO, DIAS, METODO, PGTOCF" +
                "E, ATIVO) VALUES (9, \'\'V. COMBUSTÍVEL\'\', 0, \'\'C\'\', \'\'13\'\', \'\'S\'\');\';\r\n\t\r\n\terro =" +
                " \'outros\';\r\n\tEXECUTE STATEMENT \'UPDATE OR INSERT INTO TRI_PDV_METODOS (ID_PAGAME" +
                "NTO, DESCRICAO, DIAS, METODO, PGTOCFE, ATIVO) VALUES (10, \'\'OUTROS\'\', 0, \'\'C\'\', " +
                "\'\'99\'\', \'\'S\'\');\';\r\n\t\r\n\terro = \'deu certo\';\r\n\tSUSPEND;\r\n\tWHEN ANY DO\r\n\tBEGIN\r\n\t\t\r" +
                "\n\tEND \r\n\tEND;";
            this._commandCollection[12].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[13] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[13].Connection = this.Connection;
            this._commandCollection[13].CommandText = "\"SP_TRI_CAIXAEXISTENTE\"";
            this._commandCollection[13].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[14] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[14].Connection = this.Connection;
            this._commandCollection[14].CommandText = "\"SP_TRI_CHECAPOR_NOCAIXA\"";
            this._commandCollection[14].CommandType = global::System.Data.CommandType.StoredProcedure;
            global::FirebirdSql.Data.FirebirdClient.FbParameter param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PNO_CAIXA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[14].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PID_MAC";
            param.Size = 12;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[14].Parameters.Add(param);
            this._commandCollection[15] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[15].Connection = this.Connection;
            this._commandCollection[15].CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_PROCEDURES\r\nRETURNS (\r\nerro VARCHAR(64)\r\n)\r\nAS\r\n" +
                "BEGIN\r\nerro=\'sproc CHECAIXABER_ID\';\r\nexecute statement \'CREATE OR ALTER PROCEDUR" +
                "E SP_TRI_CHECAIXAABER_ID(USERID INTEGER, NUMCAIXA INTEGER) RETURNS(ABRIU SMALLIN" +
                "T) AS BEGIN IF((SELECT COUNT(ID_USER) AS Expr1 FROM TRI_PDV_OPER WHERE(ABERTO = " +
                "\'\'S\'\') AND((ID_USER =:USERID) OR(ID_CAIXA =:NUMCAIXA)))>= 1) THEN BEGIN Abriu = " +
                "1; SUSPEND; END ELSE BEGIN Abriu = 0; SUSPEND; END END;\';\r\nerro = \'sproc lancamo" +
                "vimento\';\r\nEXECUTE STATEMENT \'CREATE OR ALTER PROCEDURE SP_TRI_LANCAMOVIMENTO (I" +
                "D_CAIXA INTEGER, DINH TYPE OF COLUMN TRI_PDV_OPER.DIN, CHEQ TYPE OF COLUMN TRI_P" +
                "DV_OPER.DIN, CRED TYPE OF COLUMN TRI_PDV_OPER.DIN, DEBI TYPE OF COLUMN TRI_PDV_O" +
                "PER.DIN, LOJA TYPE OF COLUMN TRI_PDV_OPER.DIN, ALIM TYPE OF COLUMN TRI_PDV_OPER." +
                "DIN, REFE TYPE OF COLUMN TRI_PDV_OPER.DIN, PRES TYPE OF COLUMN TRI_PDV_OPER.DIN," +
                " COMB TYPE OF COLUMN TRI_PDV_OPER.DIN, OUTR TYPE OF COLUMN TRI_PDV_OPER.DIN, EXT" +
                "1 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXT2 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXT3 TY" +
                "PE OF COLUMN TRI_PDV_OPER.DIN, EXT4 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXT5 TYPE O" +
                "F COLUMN TRI_PDV_OPER.DIN, EXT6 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXT7 TYPE OF CO" +
                "LUMN TRI_PDV_OPER.DIN, EXT8 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXT9 TYPE OF COLUMN" +
                " TRI_PDV_OPER.DIN, EX10 TYPE OF COLUMN TRI_PDV_OPER.DIN) AS BEGIN UPDATE TRI_PDV" +
                "_OPER SET DIN = DIN +:DINH, CHEQUE = CHEQUE +:CHEQ, CREDITO = CREDITO +:CRED, DE" +
                "BITO = DEBITO +:DEBI, LOJA = LOJA +:LOJA, ALIMENTACAO = ALIMENTACAO +:ALIM, REFE" +
                "ICAO = REFEICAO +:REFE, PRESENTE = PRESENTE +:PRES, COMBUSTIVEL = COMBUSTIVEL +:" +
                "COMB, OUTROS = OUTROS +:OUTR, EXTRA_1 = EXTRA_1 +:EXT1, EXTRA_2 = EXTRA_2 +:EXT2" +
                ", EXTRA_3 = EXTRA_3 +:EXT3, EXTRA_4 = EXTRA_4 +:EXT4, EXTRA_5 = EXTRA_5 +:EXT5, " +
                "EXTRA_6 = EXTRA_6 +:EXT6, EXTRA_7 = EXTRA_7 +:EXT7, EXTRA_8 = EXTRA_8 +:EXT8, EX" +
                "TRA_9 = EXTRA_9 +:EXT9, EXTRA_10 = EXTRA_10 +:EX10 WHERE(ID_CAIXA =:ID_CAIXA) AN" +
                "D(ABERTO = \'\'S\'\'); SUSPEND; END\';\r\nerro = \'sproc novopagto\';\r\nEXECUTE STATEMENT " +
                "\'CREATE OR ALTER PROCEDURE SP_TRI_NOVOPAGTO (IDCUPOM INTEGER, RECEBIDO TYPE OF C" +
                "OLUMN TRI_PDV_OPER.DIN, FMAPGTO SMALLINT)AS DECLARE VARIABLE paginterno SMALLINT" +
                ";BEGIN SELECT (ID_FMAPGTO) FROM TRI_PDV_REL_METODO_PAGTO WHERE ID_PAGAMENTO = :F" +
                "MAPGTO INTO :paginterno; INSERT INTO TB_CUPOM_FMAPAGTO (ID_NUMPAG, VLR_PAGTO, ID" +
                "_CUPOM, ID_FMAPAGTO) VALUES (0, :recebido, :idcupom, :paginterno);END;\';\r\nerro =" +
                " \'sproc pesquisaitem\';\r\nEXECUTE STATEMENT \'CREATE OR ALTER PROCEDURE SP_TRI_PESQ" +
                "UISAITEM (PESQUISA VARCHAR(128)) RETURNS (CODIGOITEM INTEGER) AS DECLARE DESCRIC" +
                "OES INTEGER; DECLARE CODSBARRA INTEGER; BEGIN SELECT COUNT(1) AS Expr1 FROM TB_E" +
                "STOQUE WHERE (DESCRICAO =:Pesquisa AND STATUS = \'\'A\'\') INTO DESCRICOES; SELECT C" +
                "OUNT(1) AS Expr1 FROM TB_EST_PRODUTO WHERE (COD_BARRA =:Pesquisa) INTO CODSBARRA" +
                "; IF(:DESCRICOES = 1) THEN BEGIN SELECT b.ID_IDENTIFICADOR FROM TB_ESTOQUE a INN" +
                "ER JOIN TB_EST_IDENTIFICADOR b ON b.ID_ESTOQUE = a.ID_ESTOQUE WHERE (a.DESCRICAO" +
                " =:Pesquisa AND STATUS = \'\'A\'\') INTO :CodigoItem; END ELSE IF (:DESCRICOES > 1) " +
                "THEN CodigoItem = -100; IF(:CODSBARRA = 1) THEN BEGIN SELECT A.ID_IDENTIFICADOR " +
                "FROM TB_EST_IDENTIFICADOR A INNER JOIN TB_EST_PRODUTO B ON (A.ID_IDENTIFICADOR =" +
                " B.ID_IDENTIFICADOR) INNER JOIN TB_ESTOQUE C ON (A.ID_ESTOQUE = C.ID_ESTOQUE) WH" +
                "ERE (B.COD_BARRA =:Pesquisa AND C.STATUS = \'\'A\'\') INTO :CodigoItem; END ELSE IF " +
                "(:CODSBARRA > 1) THEN CodigoItem = -100; SUSPEND; END\';\r\nerro = \'sproc pesquisac" +
                "od\';\r\nEXECUTE STATEMENT \'CREATE OR ALTER PROCEDURE SP_TRI_PESQUISACOD (PESQUISA " +
                "INTEGER) RETURNS (CODIGOITEM INTEGER) AS BEGIN IF ((SELECT COUNT(1) AS Expr1 FRO" +
                "M TB_ESTOQUE a INNER JOIN TB_EST_IDENTIFICADOR b ON b.ID_ESTOQUE = a.ID_ESTOQUE " +
                "WHERE (b.ID_IDENTIFICADOR = :Pesquisa)) = 1)THEN BEGIN SELECT b.ID_IDENTIFICADOR" +
                " FROM TB_ESTOQUE a INNER JOIN TB_EST_IDENTIFICADOR b ON b.ID_ESTOQUE = a.ID_ESTO" +
                "QUE WHERE (b.ID_IDENTIFICADOR = :Pesquisa AND a.STATUS = \'\'A\'\') INTO :CodigoItem" +
                " ; SUSPEND; END END\';\r\nerro = \'sproc togglemetodo\';\r\nEXECUTE STATEMENT \'CREATE O" +
                "R ALTER PROCEDURE SP_TRI_TOGGLEMETODO (PESQUISA INTEGER) AS BEGIN IF ((SELECT AT" +
                "IVO FROM TRI_PDV_METODOS WHERE (ID_PAGAMENTO = :Pesquisa)) = \'\'S\'\') THEN BEGIN U" +
                "PDATE TRI_PDV_METODOS SET ATIVO=\'\'N\'\' WHERE ID_PAGAMENTO=:Pesquisa; SUSPEND; END" +
                " IF ((SELECT ATIVO FROM TRI_PDV_METODOS WHERE (ID_PAGAMENTO = :Pesquisa)) = \'\'N\'" +
                "\') THEN BEGIN UPDATE TRI_PDV_METODOS SET ATIVO=\'\'S\'\' WHERE ID_PAGAMENTO=:Pesquis" +
                "a; SUSPEND; END END;\';\r\nerro = \'sproc tributo estadual\';\r\nEXECUTE STATEMENT \'CRE" +
                "ATE OR ALTER PROCEDURE SP_TRI_TRIBUTOESTADUAL (PRODUTO INTEGER) RETURNS (PORCENT" +
                "AGEM TYPE OF COLUMN TRI_PDV_OPER.DIN) AS DECLARE VARIABLE IDCTI VARCHAR(3); BEGI" +
                "N SELECT ID_CTI FROM TB_ESTOQUE WHERE ID_ESTOQUE = :Produto INTO :IDCTI; SELECT " +
                "UF_SP FROM TB_TAXA_UF WHERE ID_CTI = :IDCTI INTO :Porcentagem; SUSPEND; END;\';\r\n" +
                "erro = \'sproc ultimocupom\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI" +
                "_ULTIMOCUPOM (CAIXA INTEGER) RETURNS (ULTIMOCUPOM INTEGER) AS BEGIN SELECT MAX(I" +
                "D_CUPOM) FROM TB_CUPOM WHERE NUM_CAIXA = :CAIXA INTO :ultimocupom; IF (:ultimocu" +
                "pom IS NULL) THEN ultimocupom = 0; SUSPEND; END;\';\r\nerro = \'sproc checafiscal\';\r" +
                "\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_FISCALOUNAO (CAIXA INTEGER," +
                " ULTIMOCUPOM INTEGER) RETURNS (MODO VARCHAR(32)) AS BEGIN SELECT CHAVE FROM TB_C" +
                "UPOM WHERE NUM_CAIXA = :CAIXA AND ID_CUPOM = :ULTIMOCUPOM INTO :modo; SUSPEND; E" +
                "ND;\';\r\nerro = \'procura_preco\';\r\nEXECUTE STATEMENT \'CREATE OR ALTER PROCEDURE SP_" +
                "TRI_PEGAPRECO (ITEM INTEGER, QUANT NUMERIC(18,4)) RETURNS ( PRECO NUMERIC(18,4) " +
                ") AS DECLARE VARIABLE VEXISTE_PROMO_PERIODO INTEGER; DECLARE VARIABLE VEXISTE_PR" +
                "OMO_DIA INTEGER; BEGIN SELECT COUNT(1) FROM TB_ESTOQUE_PRECOS WHERE PERIODO = \'\'" +
                "S\'\' AND CURRENT_DATE BETWEEN DT_INICIO AND DT_FIM AND ID_IDENTIFICADOR = :ITEM I" +
                "NTO VEXISTE_PROMO_PERIODO; SELECT COUNT(1) FROM TB_ESTOQUE_PRECOS_DIAS TEPD JOIN" +
                " TB_ESTOQUE_PRECOS TEP ON TEPD.ID_IDENTIFICADOR = TEP.ID_IDENTIFICADOR WHERE TEP" +
                ".DIAS_SEMANA = \'\'S\'\' AND  TEPD.ID_IDENTIFICADOR = :ITEM AND CURRENT_TIME BETWEEN" +
                " TEPD.HR_INICIO AND TEPD.HR_FIM AND DIA = (CASE EXTRACT (WEEKDAY FROM CURRENT_DA" +
                "TE) WHEN 0 THEN \'\'DOM\'\' WHEN 1 THEN \'\'SEG\'\' WHEN 2 THEN \'\'TER\'\' WHEN 3 THEN \'\'QU" +
                "A\'\' WHEN 4 THEN \'\'QUI\'\' WHEN 5 THEN \'\'SEX\'\' WHEN 6 THEN \'\'SAB\'\' END) INTO VEXIST" +
                "E_PROMO_DIA; IF(VEXISTE_PROMO_PERIODO > 0 OR VEXISTE_PROMO_DIA > 0) THEN BEGIN S" +
                "ELECT tep.PRC_VENDA FROM TB_ESTOQUE_PRECOS tep WHERE (tep.ID_IDENTIFICADOR =:ITE" +
                "M) INTO PRECO ; END ELSE BEGIN SELECT PRC_VENDA FROM TB_ESTOQUE A INNER JOIN TB_" +
                "EST_IDENTIFICADOR B ON A.ID_ESTOQUE = B.ID_ESTOQUE WHERE (B.ID_IDENTIFICADOR =:I" +
                "TEM) INTO PRECO; END END;\';\r\nerro = \'sproc copia tabela metodos\';\r\nEXECUTE STATE" +
                "MENT \'CREATE OR ALTER PROCEDURE COPIAMETODOS AS DECLARE relation INTEGER; DECLAR" +
                "E maximum INTEGER; DECLARE description VARCHAR(40); BEGIN SELECT MAX(ID_FMAPGTO)" +
                " FROM TB_FORMA_PAGTO_SIS INTO :maximum; FOR SELECT ID_PAGAMENTO, DESCRICAO FROM " +
                "TRI_PDV_METODOS WHERE ID_PAGAMENTO > 1 INTO :relation, :description DO BEGIN INS" +
                "ERT INTO TB_FORMA_PAGTO_SIS (ID_FMAPGTO, DESCRICAO, STATUS, UTILIZACAO) VALUES (" +
                ":relation+:maximum-1, :description, \'\'A\'\', \'\'C\'\'); END END; \';\r\nerro = \'break_cl" +
                "ipp_rules\';\r\nEXECUTE STATEMENT \'CREATE OR ALTER PROCEDURE SP_TRI_BREAK_CLIPP_RUL" +
                "ES AS BEGIN IF ((select count(0) from rdb$relation_constraints where rdb$constra" +
                "int_name = \'\'CHK_TB_EST_PRODUTOQTD_ATUAL\'\') > 0) THEN BEGIN EXECUTE STATEMENT \'\'" +
                "ALTER TABLE TB_EST_PRODUTO DROP CONSTRAINT CHK_TB_EST_PRODUTOQTD_ATUAL;\'\'; END E" +
                "ND;\';\r\nerro = \'fix_clipp_rules\';\r\nEXECUTE STATEMENT \'CREATE OR ALTER PROCEDURE S" +
                "P_TRI_FIX_CLIPP_RULES AS BEGIN IF ((select count(0) from rdb$relation_constraint" +
                "s where rdb$constraint_name = \'\'CHK_TB_EST_PRODUTOQTD_ATUAL\'\') = 0) THEN BEGIN E" +
                "XECUTE STATEMENT \'\'ALTER TABLE TB_EST_PRODUTO ADD CONSTRAINT CHK_TB_EST_PRODUTOQ" +
                "TD_ATUAL check (QTD_ATUAL >= 0);\'\'; END END;\';\r\nerro = \'retorna pagamentos\';\r\nEX" +
                "ECUTE STATEMENT \'CREATE OR ALTER PROCEDURE SP_TRI_RETORNAPAGTOS(NUM_CUPOM INTEGE" +
                "R) RETURNS(FMAPAGTO TYPE OF COLUMN TB_CUPOM_FMAPAGTO.ID_FMAPAGTO, VLRPAGTO TYPE " +
                "OF COLUMN TB_CUPOM_FMAPAGTO.VLR_PAGTO, NUMPAG TYPE OF COLUMN TB_CUPOM_FMAPAGTO.I" +
                "D_NUMPAG) AS BEGIN FOR SELECT ID_NUMPAG, ID_FMAPAGTO, VLR_PAGTO FROM TB_CUPOM_FM" +
                "APAGTO WHERE ID_CUPOM =:NUM_CUPOM INTO:NUMPAG,:FMAPAGTO,:VLRPAGTO DO BEGIN SUSPE" +
                "ND; END END;\';\r\nerro = \'salvexmlret\';\r\nexecute statement \'CREATE OR ALTER PROCED" +
                "URE SP_TRI_SALVAXMLRET (ID_TRANS INTEGER, NUMCAIXA INTEGER, XML_RECEBIDO BLOB SU" +
                "B_TYPE 1, RETORNO VARCHAR(10)) AS BEGIN IF (XML_RECEBIDO IS NULL) THEN BEGIN INS" +
                "ERT INTO TRI_PDV_SAT_REC (ID_TRANSACAO, NUM_CAIXA, XML_RECEB, RETORNO_SAT, PROCE" +
                "SSADO, HORAATUAL) VALUES (:ID_TRANS, :NUMCAIXA, \'\'ERRO\'\', :RETORNO, \'\'1\'\', CURRE" +
                "NT_TIMESTAMP); UPDATE TRI_PDV_SAT_ENV SET PROCESSADO=\'\'1\'\' WHERE ID_TRANSACAO=:I" +
                "D_TRANS; END ELSE BEGIN INSERT INTO TRI_PDV_SAT_REC (ID_TRANSACAO, NUM_CAIXA, XM" +
                "L_RECEB, RETORNO_SAT, PROCESSADO, HORAATUAL) VALUES (:ID_TRANS, :NUMCAIXA, :XML_" +
                "RECEBIDO, :RETORNO, \'\'1\'\', CURRENT_TIMESTAMP); UPDATE TRI_PDV_SAT_ENV SET PROCES" +
                "SADO=\'\'1\'\' WHERE ID_TRANSACAO=:ID_TRANS; END /*WHEN ANY DO BEGIN END*/ END;\';\r\ne" +
                "rro = \'processaxml\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_PROCES" +
                "SAXML RETURNS (COL_ID INTEGER, COL_CAIXA INTEGER, COL_XML BLOB SUB_TYPE 1, COL_P" +
                "ROCE CHAR(1), COL_HORA TIMESTAMP) AS BEGIN IF ((SELECT COUNT(ID_TRANSACAO) FROM " +
                "TRI_PDV_SAT_ENV WHERE PROCESSADO = \'\'0\'\') > 0) THEN BEGIN SELECT FIRST 1 ID_TRAN" +
                "SACAO, NUM_CAIXA, XML_A_ENV, PROCESSADO, HORAATUAL\tFROM TRI_PDV_SAT_ENV WHERE PR" +
                "OCESSADO = \'\'0\'\' \tINTO :COL_ID, :COL_CAIXA, :COL_XML, :COL_PROCE, :COL_HORA;\tEND" +
                " END;\';\r\nerro = \'enviaparasat\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP" +
                "_TRI_ENVIAPARASAT ( ID_CAIXA INTEGER , XMLENVIADO BLOB SUB_TYPE 0 )RETURNS ( REC" +
                "EBIDO CHAR(1) , TRANS INTEGER ) AS DECLARE VARIABLE TRANSACAO INTEGER; BEGIN SEL" +
                "ECT MAX(ID_TRANSACAO) FROM TRI_PDV_SAT_ENV INTO :TRANSACAO ; IF (:TRANSACAO IS N" +
                "ULL) THEN TRANSACAO = 0; INSERT INTO TRI_PDV_SAT_ENV (ID_TRANSACAO , NUM_CAIXA ," +
                " XML_A_ENV , PROCESSADO , HORAATUAL ) VALUES (:TRANSACAO +1 , :ID_CAIXA , :XMLEN" +
                "VIADO , \'\'0\'\' , CURRENT_TIMESTAMP ) ; RECEBIDO = \'\'1\'\'; TRANS = :TRANSACAO + 1; " +
                "SUSPEND; WHEN ANY DO BEGIN RECEBIDO = \'\'0\'\'; TRANS = :TRANSACAO + 1; SUSPEND; EN" +
                "D END;\';\r\nerro = \'movimentoclipp\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE" +
                " SP_TRI_LANCACAIXA_CLIPP (NUMCAIXA VARCHAR(60), TIPO CHAR(1), VALOR TYPE OF COLU" +
                "MN TRI_PDV_OPER.DIN, PNCNTA SMALLINT) AS DECLARE VARIABLE ultimo_mov INTEGER; BE" +
                "GIN INSERT INTO TB_MOVDIARIO(ID_MOVTO, DT_MOVTO, HR_MOVTO, HISTORICO, TIP_MOVTO," +
                " VLR_MOVTO, ID_CTAPLA) VALUES((SELECT NEXT VALUE FOR GEN_TB_MOVDIARIO_ID FROM RD" +
                "B$DATABASE), CURRENT_DATE, CURRENT_TIME, \'\'Fechamento do caixa \'\' ||:NUMCAIXA ||" +
                " \'\'-\'\' || CURRENT_TIME, \'\'D\'\',:VALOR, 5); INSERT INTO TB_MOVDIARIO(ID_MOVTO, DT_" +
                "MOVTO, HR_MOVTO, HISTORICO, TIP_MOVTO, VLR_MOVTO, ID_CTAPLA) VALUES((SELECT NEXT" +
                " VALUE FOR GEN_TB_MOVDIARIO_ID FROM RDB$DATABASE), CURRENT_DATE, CURRENT_TIME, \'" +
                "\'Fechamento do caixa \'\' ||:NUMCAIXA || \'\'- \'\' || CURRENT_TIME, \'\'C\'\',:VALOR, 147" +
                "); END;\';\r\nerro = \'sproc lancamovctarec\';\r\nexecute statement \'CREATE OR ALTER PR" +
                "OCEDURE SP_TRI_CTAREC_MOVTO (PID_MOVTO INTEGER, PID_CTAREC INTEGER) RETURNS ( RE" +
                "GISTROS_INSERIDOS INTEGER ) AS BEGIN INSERT INTO TB_CTAREC_MOVTO (ID_MOVTO, ID_C" +
                "TAREC) VALUES(:PID_MOVTO, :PID_CTAREC); REGISTROS_INSERIDOS = ROW_COUNT; SUSPEND" +
                "; END;\';\r\nerro = \'sproc checadinemcaixa\';\r\nexecute statement \'CREATE OR ALTER PR" +
                "OCEDURE SP_TRI_VALOREMCAIXA (CAIXA INTEGER) RETURNS (DINHEIROEMCAIXA TYPE OF COL" +
                "UMN TRI_PDV_OPER.DIN) AS DECLARE VARIABLE DINH TYPE OF COLUMN TRI_PDV_OPER.DIN; " +
                "DECLARE VARIABLE SUPR TYPE OF COLUMN TRI_PDV_OPER.DIN; DECLARE VARIABLE SANG TYP" +
                "E OF COLUMN TRI_PDV_OPER.DIN; BEGIN SELECT FIRST 1 DIN FROM TRI_PDV_OPER WHERE I" +
                "D_CAIXA = :CAIXA AND ABERTO = \'\'S\'\' INTO :DINH; SELECT FIRST 1 SUPRIMENTOS FROM " +
                "TRI_PDV_OPER WHERE ID_CAIXA = :CAIXA AND ABERTO = \'\'S\'\' INTO :SUPR; SELECT FIRST" +
                " 1 SANGRIAS FROM TRI_PDV_OPER WHERE ID_CAIXA = :CAIXA AND ABERTO = \'\'S\'\' INTO :S" +
                "ANG; DINHEIROEMCAIXA = :DINH + :SUPR - :SANG; SUSPEND; END;\';\r\nerro = \'sproc con" +
                "ta cupons\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE sp_tri_contacupons (NU" +
                "MCAIXA INTEGER, STATUS CHAR(1)) RETURNS (QUANT_CUPONS INTEGER) AS DECLARE VARIAB" +
                "LE IDOPER INTEGER; DECLARE VARIABLE DT_ABERT DATE; DECLARE VARIABLE HR_ABERT TIM" +
                "E; BEGIN SELECT ID_OPER FROM TRI_PDV_OPER WHERE ID_CAIXA = :NUMCAIXA AND ABERTO " +
                "= \'\'S\'\' INTO IDOPER; HR_ABERT = (SELECT CAST (CURRENTTIME AS TIME) FROM TRI_PDV_" +
                "OPER WHERE ID_OPER = :IDOPER); DT_ABERT = (SELECT CAST (CURRENTTIME AS DATE) FRO" +
                "M TRI_PDV_OPER WHERE ID_OPER = :IDOPER); SELECT COUNT (ID_CUPOM) FROM TB_CUPOM W" +
                "HERE STATUS = :STATUS AND DT_CUPOM >= :DT_ABERT AND HR_CUPOM >= :HR_ABERT INTO Q" +
                "UANT_CUPONS; SUSPEND; END ;\';\r\nerro = \'sproc conta pagamentos\';\r\nexecute stateme" +
                "nt \'CREATE OR ALTER PROCEDURE SP_TRI_CONTAFMPGTO (NUMCAIXA INTEGER, STATUS CHAR(" +
                "1)) RETURNS (IDPAGTO_OUT INTEGER, QUANT_CUPONS INTEGER) AS DECLARE VARIABLE IDOP" +
                "ER INTEGER; DECLARE VARIABLE IDPAGAMENTO INTEGER; DECLARE VARIABLE FMAPGTO SMALL" +
                "INT; DECLARE VARIABLE TS_ABERT TIMESTAMP; BEGIN SELECT ID_OPER FROM TRI_PDV_OPER" +
                " WHERE ID_CAIXA =:NUMCAIXA AND ABERTO = \'\'S\'\' INTO IDOPER; TS_ABERT = ( SELECT C" +
                "URRENTTIME FROM TRI_PDV_OPER WHERE ID_OPER =:IDOPER); FOR SELECT ID_FMAPGTO FROM" +
                " TRI_PDV_REL_METODO_PAGTO INTO :FMAPGTO DO BEGIN SELECT COUNT(TB_CUPOM_FMAPAGTO." +
                "ID_FMAPAGTO) FROM TB_CUPOM INNER JOIN TB_CUPOM_FMAPAGTO ON (TB_CUPOM_FMAPAGTO.ID" +
                "_CUPOM = TB_CUPOM.ID_CUPOM) WHERE TB_CUPOM.STATUS = \'\'F\'\' AND TB_CUPOM_FMAPAGTO." +
                "ID_FMAPAGTO = :FMAPGTO AND CAST (DT_CUPOM ||\'\' \'\'||HR_CUPOM AS TIMESTAMP) >= :TS" +
                "_ABERT INTO QUANT_CUPONS; IDPAGTO_OUT = ( SELECT TRI_PDV_REL_METODO_PAGTO.ID_PAG" +
                "AMENTO FROM TRI_PDV_REL_METODO_PAGTO WHERE TRI_PDV_REL_METODO_PAGTO.ID_FMAPGTO =" +
                " :FMAPGTO); SUSPEND; END END\';\r\n\t\t\t\t\t\terro = \'sproc novo nsu\';\r\n\t\t\t\t\t\texecute st" +
                "atement \'CREATE OR ALTER PROCEDURE SP_TRI_SALVA_NSU (CUPOM INTEGER, NSU VARCHAR(" +
                "40), REDE VARCHAR(3), AUTORIZ VARCHAR(6), pVLR_OPER NUMERIC(18,4)) AS DECLARE ul" +
                "timocupom INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_TRI_NSU FROM RDB$DATABASE INT" +
                "O :ultimocupom; IF (:ultimocupom IS NULL) THEN ultimocupom = 0; INSERT INTO TRI_" +
                "PDV_NSU (ID_TEF, ID_CUPOM, NSU, REDE_ADQ, VLR_OPER) VALUES (:ultimocupom, :CUPOM" +
                ", :NSU, :REDE, :pVLR_OPER); END; \';\r\n\t\t\t\t\t\terro = \'sproc preenche consulta\';\r\n\t\t" +
                "\t\t\t\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_PREENCHECONSULTA ( STRIN" +
                "G VARCHAR(128) , COD_INT INTEGER ) RETURNS ( ESTOQUE INTEGER , CODBARRA VARCHAR(" +
                "18) , DESCRICAO VARCHAR(50) , QTDATUAL TYPE OF COLUMN TRI_PDV_OPER.DIN , PRCVEND" +
                "A TYPE OF COLUMN TRI_PDV_OPER.DIN , QTDATAC TYPE OF COLUMN TRI_PDV_OPER.DIN , PR" +
                "CATACADO TYPE OF COLUMN TRI_PDV_OPER.DIN) AS BEGIN FOR SELECT FIRST 30 B.ID_IDEN" +
                "TIFICADOR , B.COD_BARRA , A.DESCRICAO , B.QTD_ATUAL , A.PRC_VENDA , A.QTD_ATACAD" +
                "O , A.PRC_ATACADO FROM TB_ESTOQUE A INNER JOIN TB_EST_IDENTIFICADOR C ON C.ID_ES" +
                "TOQUE = A.ID_ESTOQUE INNER JOIN TB_EST_PRODUTO B ON B.ID_IDENTIFICADOR = C.ID_ID" +
                "ENTIFICADOR WHERE ( A.STATUS = \'\'A\'\' ) AND ( ( A.DESCRICAO CONTAINING:STRING ) O" +
                "R ( B.COD_BARRA =:STRING ) OR ( B.ID_IDENTIFICADOR =:COD_INT ) ) INTO :ESTOQUE ," +
                " :CODBARRA , :DESCRICAO , :QTDATUAL , :PRCVENDA , :QTDATAC , :PRCATACADO DO SUSP" +
                "END ; END\';\r\n\t\t\t\t\t\terro = \'sproc lancamovimento\';\r\n\t\t\t\t\t\texecute statement \'CREA" +
                "TE OR ALTER PROCEDURE SP_TRI_LANCAMOVDIARIO(NUMCAIXA VARCHAR(60), VALOR TYPE OF " +
                "COLUMN TRI_PDV_OPER.DIN, DESCRICAO_MOV VARCHAR(60), CONTA_ORIGEM SMALLINT, CONTA" +
                "_DESTINO SMALLINT) RETURNS (erro smallint) AS DECLARE VARIABLE ultimo_mov INTEGE" +
                "R; BEGIN INSERT INTO TB_MOVDIARIO(ID_MOVTO, DT_MOVTO, HR_MOVTO, HISTORICO, TIP_M" +
                "OVTO, VLR_MOVTO, ID_CTAPLA) VALUES((SELECT NEXT VALUE FOR GEN_TB_MOVDIARIO_ID FR" +
                "OM RDB$DATABASE), CURRENT_DATE, CURRENT_TIME, :DESCRICAO_MOV, \'\'D\'\',:VALOR, :CON" +
                "TA_DESTINO); INSERT INTO TB_MOVDIARIO(ID_MOVTO, DT_MOVTO, HR_MOVTO, HISTORICO, T" +
                "IP_MOVTO, VLR_MOVTO, ID_CTAPLA) VALUES((SELECT NEXT VALUE FOR GEN_TB_MOVDIARIO_I" +
                "D FROM RDB$DATABASE), CURRENT_DATE, CURRENT_TIME, :DESCRICAO_MOV, \'\'C\'\',:VALOR, " +
                ":CONTA_ORIGEM); erro = 1; SUSPEND; WHEN ANY DO BEGIN erro = 0; END END;\';\r\n\t\t\t\t\t" +
                "\terro = \'sproc lancacontarec\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR ALTER PROCEDU" +
                "RE SP_TRI_LANCACONTAREC (IDNFVENDA INTEGER, VENCIMENTO DATE, VALOR NUMERIC(18,4)" +
                ", CLIENTE INTEGER, DESCRICAO VARCHAR(100), NUM_CAIXA SMALLINT, IDCONTA INTEGER, " +
                "IDNUMPAG INTEGER) RETURNS ( RESULTADO INTEGER ) AS DECLARE VAR1 INTEGER; DECLARE" +
                " V_NF_NUMERO TYPE OF COLUMN TB_NFVENDA.NF_NUMERO; DECLARE V_NF_SERIE TYPE OF COL" +
                "UMN TB_NFVENDA.NF_SERIE; BEGIN SELECT NEXT VALUE FOR GEN_TB_CTAREC_ID FROM RDB$D" +
                "ATABASE INTO :VAR1 ; IF(:VAR1 IS NULL) THEN VAR1 = 1; SELECT FIRST 1 NF_SERIE, N" +
                "F_NUMERO FROM TB_NFVENDA WHERE ID_NFVENDA = :IDNFVENDA INTO :V_NF_SERIE, :V_NF_N" +
                "UMERO; INSERT INTO TB_CONTA_RECEBER (ID_CTAREC , DOCUMENTO , HISTORICO , DT_EMIS" +
                "SAO , DT_VENCTO , VLR_CTAREC , TIP_CTAREC , ID_PORTADOR , ID_CLIENTE , ID_CONTA)" +
                " VALUES (:VAR1 , (:V_NF_SERIE || \'\'-\'\' || :V_NF_NUMERO || \'\'/\'\' || :IDNUMPAG) , " +
                ":DESCRICAO , CURRENT_DATE , :VENCIMENTO , :VALOR , \'\'C\'\' , 1 , :CLIENTE , :IDCON" +
                "TA); RESULTADO = :VAR1; SUSPEND; WHEN ANY DO BEGIN RESULTADO = 0; SUSPEND; END E" +
                "ND;\';\r\n\t\t\t\t\t\terro = \'sproc lancaitemcupom\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR " +
                "ALTER PROCEDURE SP_TRI_LANCAITEMCUPOM ( CUPOM INTEGER , NUM_PROD INTEGER , ID_PR" +
                "OD INTEGER , QTD_PROD TYPE OF COLUMN TRI_PDV_OPER.DIN , VLR_PROD TYPE OF COLUMN " +
                "TRI_PDV_OPER.DIN ) RETURNS (retIDITEMCUP TYPE OF COLUMN TB_CUPOM_ITEM.ID_ITEMCUP" +
                ") AS DECLARE VARIABLE IDITEMCUP INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_TB_CUPO" +
                "M_ITEM_ID FROM RDB$DATABASE INTO :IDITEMCUP ; IF(IDITEMCUP IS NULL) THEN IDITEMC" +
                "UP = 0; INSERT INTO TB_CUPOM_ITEM (ID_ITEMCUP , ID_CUPOM , ID_IDENTIF , NUM_ITEM" +
                " , QTD_ITEM , VLR_UNIT , ITEM_CANCEL , PRC_CUSTO ) VALUES (:IDITEMCUP , :cupom ," +
                " :id_prod , :num_prod , :qtd_prod , :vlr_prod , \'\'N\'\' , ( SELECT FIRST 1 PRC_CUS" +
                "TO FROM TB_ESTOQUE INNER JOIN TB_EST_IDENTIFICADOR ON TB_ESTOQUE.ID_ESTOQUE = TB" +
                "_EST_IDENTIFICADOR.ID_ESTOQUE WHERE TB_EST_IDENTIFICADOR.ID_IDENTIFICADOR = :id_" +
                "prod ) ) ; retIDITEMCUP = :IDITEMCUP; SUSPEND; END;\';\r\n\t\t\t\t\t\terro = \'deu certo\';" +
                "\r\n\t\t\t\t\t\tSUSPEND;\r\n\t\t\t\t\t\tWHEN ANY DO\r\n\t\t\t\t\t\tBEGIN\r\n\r\n\t\t\t\t\t\tEND\r\n\t\t\t\t\t\tEND;";
            this._commandCollection[15].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[16] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[16].Connection = this.Connection;
            this._commandCollection[16].CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_PROCEDURES2\r\nRETURNS (\r\n\terro VARCHAR(64)\r\n)\r\nAS" +
                "\r\nBEGIN\r\n\terro = \'sproc cupom get all unsynced\';\r\n\texecute statement \'CREATE OR " +
                "ALTER PROCEDURE SP_TRI_CUPOM_GETALL_UNSYNCED RETURNS( ID_CUPOM INTEGER, COO INTE" +
                "GER, DT_CUPOM DATE, HR_CUPOM TIME, NUM_CAIXA SMALLINT, ID_CLIENTE INTEGER, ID_VE" +
                "NDEDOR SMALLINT, STATUS CHAR( 1 ), ID_PARCELA SMALLINT, IND_CANCEL CHAR( 1 ), ID" +
                "_IFS SMALLINT, ID_NATOPE INTEGER, VLR_TROCO TYPE OF COLUMN TRI_PDV_OPER.DIN, VLR" +
                "_TOTAL TYPE OF COLUMN TRI_PDV_OPER.DIN, VLR_DESC TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", TIP_DESC CHAR( 1 ), VLR_ACRES TYPE OF COLUMN TRI_PDV_OPER.DIN, GNF INTEGER, CH" +
                "AVE VARCHAR( 32 ), TOTAL_TRIBUTOS_IBPT TYPE OF COLUMN TRI_PDV_OPER.DIN, TOTAL_TR" +
                "IB_FED TYPE OF COLUMN TRI_PDV_OPER.DIN, TOTAL_TRIB_EST TYPE OF COLUMN TRI_PDV_OP" +
                "ER.DIN, TOTAL_TRIB_MUN TYPE OF COLUMN TRI_PDV_OPER.DIN, SYNCED SMALLINT, QTD_CTA" +
                "REC INTEGER) AS BEGIN FOR SELECT FIRST 200 COALESCE(a.ID_CUPOM, 0) , a.COO , a.D" +
                "T_CUPOM , a.HR_CUPOM , a.NUM_CAIXA , a.ID_CLIENTE , a.ID_VENDEDOR , a.STATUS , a" +
                ".ID_PARCELA , a.IND_CANCEL , a.ID_IFS , a.ID_NATOPE , a.VLR_TROCO , a.VLR_TOTAL " +
                ", a.VLR_DESC , a.TIP_DESC , a.VLR_ACRES , a.GNF , a.CHAVE , a.TOTAL_TRIBUTOS_IBP" +
                "T, a.TOTAL_TRIB_FED , a.TOTAL_TRIB_EST , a.TOTAL_TRIB_MUN , a.SYNCED , COUNT(b.I" +
                "D_CTAREC) QTD_CTAREC FROM TB_CUPOM a LEFT JOIN TB_CUPOM_CTAREC b ON a.ID_CUPOM =" +
                " b.ID_CUPOM WHERE ( SYNCED IS NULL OR SYNCED = 0 ) AND STATUS = \'\'F\'\' GROUP BY a" +
                ".ID_CUPOM , a.COO , a.DT_CUPOM , a.HR_CUPOM , a.NUM_CAIXA , a.ID_CLIENTE , a.ID_" +
                "VENDEDOR , a.STATUS , a.ID_PARCELA , a.IND_CANCEL , a.ID_IFS , a.ID_NATOPE , a.V" +
                "LR_TROCO , a.VLR_TOTAL , a.VLR_DESC , a.TIP_DESC , a.VLR_ACRES , a.GNF , a.CHAVE" +
                " , a.TOTAL_TRIBUTOS_IBPT, a.TOTAL_TRIB_FED , a.TOTAL_TRIB_EST , a.TOTAL_TRIB_MUN" +
                " , a.SYNCED ORDER BY DT_CUPOM, HR_CUPOM INTO :ID_CUPOM , :COO , :DT_CUPOM , :HR_" +
                "CUPOM , :NUM_CAIXA , :ID_CLIENTE , :ID_VENDEDOR , :STATUS , :ID_PARCELA , :IND_C" +
                "ANCEL , :ID_IFS , :ID_NATOPE , :VLR_TROCO , :VLR_TOTAL , :VLR_DESC , :TIP_DESC ," +
                " :VLR_ACRES , :GNF , :CHAVE , :TOTAL_TRIBUTOS_IBPT, :TOTAL_TRIB_FED , :TOTAL_TRI" +
                "B_EST , :TOTAL_TRIB_MUN , :SYNCED , :QTD_CTAREC DO BEGIN SUSPEND; END END;\';\t\r\n\t" +
                "erro = \'sproc cupom set synced\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE " +
                "SP_TRI_CUPOMSETSYNCED (pIdCupom INTEGER, pSynced SMALLINT) AS BEGIN UPDATE TB_CU" +
                "POM SET SYNCED = :pSynced WHERE ID_CUPOM = :pIdCupom; END; \';\r\n\t\r\n\terro = \'sproc" +
                " cupom sync insert\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_CUPOM" +
                "SYNCINSERT ( pCOO INTEGER , pCCF INTEGER , pDT_CUPOM DATE , pHR_CUPOM TIME , pNU" +
                "M_CAIXA SMALLINT , pID_CLIENTE INTEGER , pID_VENDEDOR SMALLINT , pSTATUS CHAR(1)" +
                " , pID_PARCELA SMALLINT , pIND_CANCEL CHAR(1) , pID_IFS SMALLINT , pID_NATOPE IN" +
                "TEGER , pVLR_TROCO TYPE OF COLUMN TRI_PDV_OPER.DIN , pVLR_TOTAL TYPE OF COLUMN T" +
                "RI_PDV_OPER.DIN , pVLR_DESC TYPE OF COLUMN TRI_PDV_OPER.DIN , pTIP_DESC CHAR(1) " +
                ", pVLR_ACRES TYPE OF COLUMN TRI_PDV_OPER.DIN , pGNF INTEGER , pCHAVE VARCHAR(32)" +
                " , pTOTAL_TRIBUTOS_IBPT TYPE OF COLUMN TRI_PDV_OPER.DIN , pTOTAL_TRIB_FED TYPE O" +
                "F COLUMN TRI_PDV_OPER.DIN , pTOTAL_TRIB_EST TYPE OF COLUMN TRI_PDV_OPER.DIN , pT" +
                "OTAL_TRIB_MUN TYPE OF COLUMN TRI_PDV_OPER.DIN , pSYNCED SMALLINT ) RETURNS ( CUP" +
                "OMUSAVEL INTEGER ) AS DECLARE VARIABLE ULTIMOCUPOM INTEGER; BEGIN SELECT NEXT VA" +
                "LUE FOR GEN_TB_CUPOM_ID FROM RDB$DATABASE INTO :ultimocupom ; IF( :ultimocupom I" +
                "S NULL ) THEN ultimocupom = 0; BEGIN INSERT INTO TB_CUPOM ( ID_CUPOM , COO , CCF" +
                " , DT_CUPOM , HR_CUPOM , NUM_CAIXA , ID_CLIENTE , ID_VENDEDOR , STATUS , ID_PARC" +
                "ELA , IND_CANCEL , ID_IFS , ID_NATOPE , VLR_TROCO , VLR_TOTAL , VLR_DESC , TIP_D" +
                "ESC , VLR_ACRES , GNF , CHAVE , TOTAL_TRIBUTOS_IBPT , TOTAL_TRIB_FED , TOTAL_TRI" +
                "B_EST , TOTAL_TRIB_MUN , SYNCED ) VALUES (:ultimocupom , :pCOO , :pCCF , :pDT_CU" +
                "POM , :pHR_CUPOM , :pNUM_CAIXA , :pID_CLIENTE , :pID_VENDEDOR , :pSTATUS , :pID_" +
                "PARCELA , :pIND_CANCEL , :pID_IFS , :pID_NATOPE , :pVLR_TROCO , :pVLR_TOTAL , :p" +
                "VLR_DESC , :pTIP_DESC , :pVLR_ACRES , :pGNF , :pCHAVE , :pTOTAL_TRIBUTOS_IBPT , " +
                ":pTOTAL_TRIB_FED , :pTOTAL_TRIB_EST , :pTOTAL_TRIB_MUN , :pSYNCED ) ; cupomusave" +
                "l = ultimocupom; END END;\';\r\n\t\r\n\terro = \'sproc cupom item sync insert\';\r\n\texecut" +
                "e statement \'CREATE OR ALTER PROCEDURE SP_TRI_CUPOMITEMSYNCINSERT (pID_CUPOM INT" +
                "EGER , pID_IDENTIF INTEGER , pNUM_ITEM INTEGER , pQTD_ITEM TYPE OF COLUMN TRI_PD" +
                "V_OPER.DIN , pVLR_UNIT TYPE OF COLUMN TRI_PDV_OPER.DIN , pPRC_CUSTO TYPE OF COLU" +
                "MN TRI_PDV_OPER.DIN , pALI_ICM TYPE OF COLUMN TRI_PDV_OPER.DIN , pVLR_ICM TYPE O" +
                "F COLUMN TRI_PDV_OPER.DIN , pCOD_TOTALP CHAR(7) , pORD_APLICA CHAR(1) , pITEM_CA" +
                "NCEL CHAR(1) , pCST VARCHAR(3) , pUNI_MEDIDA VARCHAR(3) , pCASAS_QTD CHAR(1) , p" +
                "CASAS_VLR CHAR(1) , pTIPO_DESC CHAR(1) , pIAT CHAR(1) , pIPPT CHAR(1) , pCOD_BAR" +
                "RA VARCHAR(14) , pVLR_ACRE TYPE OF COLUMN TRI_PDV_OPER.DIN , pVLR_PIS TYPE OF CO" +
                "LUMN TRI_PDV_OPER.DIN , pVLR_COFINS TYPE OF COLUMN TRI_PDV_OPER.DIN , pCHAVE VAR" +
                "CHAR(35) , pCST_PIS VARCHAR(3) , pCST_COFINS VARCHAR(3) , pCFOP VARCHAR(4) , pVL" +
                "R_TRIBUTOS_IBPT TYPE OF COLUMN TRI_PDV_OPER.DIN, pALIQ_ENCONT_IBPT CHAR(1), pDT_" +
                "ITEM DATE , pHR_ITEM TIME , pVLR_TRIB_FED TYPE OF COLUMN TRI_PDV_OPER.DIN , pVLR" +
                "_TRIB_EST TYPE OF COLUMN TRI_PDV_OPER.DIN , pVLR_TRIB_MUN TYPE OF COLUMN TRI_PDV" +
                "_OPER.DIN , pDESCRICAO VARCHAR(100) ) RETURNS ( rNewIdItemCup INTEGER ) AS DECLA" +
                "RE VARIABLE newIdItemCup INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_TB_CUPOM_ITEM_" +
                "ID FROM RDB$DATABASE INTO :newIdItemCup; IF( :newIdItemCup IS NULL ) THEN newIdI" +
                "temCup = 0; BEGIN INSERT INTO TB_CUPOM_ITEM ( ID_ITEMCUP , ID_CUPOM , ID_IDENTIF" +
                " , NUM_ITEM , QTD_ITEM , VLR_UNIT , PRC_CUSTO , ALI_ICM , VLR_ICM , COD_TOTALP ," +
                " ORD_APLICA , ITEM_CANCEL , CST , UNI_MEDIDA , CASAS_QTD , CASAS_VLR , TIPO_DESC" +
                " , IAT , IPPT , COD_BARRA , VLR_ACRE , VLR_PIS , VLR_COFINS , CHAVE , CST_PIS , " +
                "CST_COFINS , CFOP , VLR_TRIBUTOS_IBPT, ALIQ_ENCONT_IBPT , DT_ITEM , HR_ITEM , VL" +
                "R_TRIB_FED , VLR_TRIB_EST , VLR_TRIB_MUN , DESCRICAO ) VALUES ( :newIdItemCup , " +
                ":pID_CUPOM , :pID_IDENTIF , :pNUM_ITEM , :pQTD_ITEM , :pVLR_UNIT , :pPRC_CUSTO ," +
                " :pALI_ICM , :pVLR_ICM , :pCOD_TOTALP , :pORD_APLICA , :pITEM_CANCEL , :pCST , :" +
                "pUNI_MEDIDA , :pCASAS_QTD , :pCASAS_VLR , :pTIPO_DESC , :pIAT , :pIPPT , :pCOD_B" +
                "ARRA , :pVLR_ACRE , :pVLR_PIS , :pVLR_COFINS , :pCHAVE , :pCST_PIS , :pCST_COFIN" +
                "S , :pCFOP , :pVLR_TRIBUTOS_IBPT, :pALIQ_ENCONT_IBPT , :pDT_ITEM , :pHR_ITEM , :" +
                "pVLR_TRIB_FED , :pVLR_TRIB_EST , :pVLR_TRIB_MUN , :pDESCRICAO ); rNewIdItemCup =" +
                " newIdItemCup; END END;\';\r\n\terro = \'sproc ctarec get by id_cupom\';\r\n\texecute sta" +
                "tement \'CREATE OR ALTER PROCEDURE SP_TRI_CTAREC_GETBY_IDCUPOM( pIdCupom INTEGER " +
                ") RETURNS( ID_CTAREC INTEGER, DOCUMENTO VARCHAR(12), HISTORICO VARCHAR(50), DT_E" +
                "MISSAO DATE, DT_VENCTO DATE, VLR_CTAREC TYPE OF COLUMN TRI_PDV_OPER.DIN, TIP_CTA" +
                "REC CHAR(1), ID_PORTADOR INTEGER, ID_CLIENTE INTEGER, INV_REFERENCIA VARCHAR(18)" +
                ", DT_VENCTO_ORIG DATE, NSU_CARTAO VARCHAR(32)) AS BEGIN FOR SELECT COALESCE(a.ID" +
                "_CTAREC, 0) , a.DOCUMENTO , a.HISTORICO , a.DT_EMISSAO , a.DT_VENCTO , a.VLR_CTA" +
                "REC , a.TIP_CTAREC , a.ID_PORTADOR , a.ID_CLIENTE , a.INV_REFERENCIA , a.DT_VENC" +
                "TO_ORIG , a.NSU_CARTAO FROM TB_CONTA_RECEBER a JOIN TB_CUPOM_CTAREC b ON a.ID_CT" +
                "AREC = b.ID_CTAREC WHERE b.ID_CUPOM =:pIdCupom INTO :ID_CTAREC , :DOCUMENTO , :H" +
                "ISTORICO , :DT_EMISSAO , :DT_VENCTO , :VLR_CTAREC , :TIP_CTAREC , :ID_PORTADOR ," +
                " :ID_CLIENTE , :INV_REFERENCIA , :DT_VENCTO_ORIG , :NSU_CARTAO DO SUSPEND; END;\'" +
                ";\r\n\terro = \'sproc ctarec sync insert\';\r\n\texecute statement \'CREATE OR ALTER PROC" +
                "EDURE SP_TRI_CTAREC_SYNC_INSERT (PDOCUMENTO VARCHAR(12), PHISTORICO VARCHAR(50)," +
                " PDT_EMISSAO DATE, PDT_VENCTO DATE, PVLR_CTAREC NUMERIC(18,4), PTIP_CTAREC CHAR(" +
                "1), PID_PORTADOR INTEGER, PID_CLIENTE INTEGER, PINV_REFERENCIA VARCHAR(18), PDT_" +
                "VENCTO_ORIG DATE, PNSU_CARTAO VARCHAR(32), PID_CONTA INTEGER) RETURNS ( RNEWIDCT" +
                "AREC INTEGER ) AS DECLARE VARIABLE newIdCtarec INTEGER; BEGIN SELECT NEXT VALUE " +
                "FOR GEN_TB_CTAREC_ID FROM RDB$DATABASE INTO :newIdCtarec; IF( :newIdCtarec IS NU" +
                "LL ) THEN newIdCtarec = 0; BEGIN INSERT INTO TB_CONTA_RECEBER ( ID_CTAREC , DOCU" +
                "MENTO , HISTORICO , DT_EMISSAO , DT_VENCTO , VLR_CTAREC , TIP_CTAREC , ID_PORTAD" +
                "OR , ID_CLIENTE , INV_REFERENCIA, DT_VENCTO_ORIG, NSU_CARTAO, ID_CONTA) VALUES (" +
                " :newIdCtarec , :pDOCUMENTO , :pHISTORICO , :pDT_EMISSAO , :pDT_VENCTO , :pVLR_C" +
                "TAREC , :pTIP_CTAREC , :pID_PORTADOR , :pID_CLIENTE , :pINV_REFERENCIA , :pDT_VE" +
                "NCTO_ORIG , :pNSU_CARTAO, :pID_CONTA); rNewIdCtarec = newIdCtarec; END END;\';\r\n\t" +
                "erro = \'sproc movto get by id_ctarec\';\r\n\texecute statement \'CREATE OR ALTER PROC" +
                "EDURE SP_TRI_MOVTO_GETBY_IDCTAREC (PIDCTAREC INTEGER) RETURNS ( ID_MOVTO INTEGER" +
                ", DT_MOVTO DATE, HR_MOVTO TIME, HISTORICO VARCHAR(60), TIP_MOVTO CHAR(1), VLR_MO" +
                "VTO TYPE OF COLUMN TRI_PDV_OPER.DIN, ID_CTAPLA SMALLINT, SYNCED SMALLINT ) AS BE" +
                "GIN FOR SELECT COALESCE(a.ID_MOVTO, 0) , a.DT_MOVTO , a.HR_MOVTO , a.HISTORICO ," +
                " a.TIP_MOVTO , a.VLR_MOVTO , a.ID_CTAPLA , a.SYNCED FROM TB_MOVDIARIO a JOIN TB_" +
                "CTAREC_MOVTO b ON a.ID_MOVTO = b.ID_MOVTO WHERE b.ID_CTAREC =:pIdCtarec INTO :ID" +
                "_MOVTO , :DT_MOVTO , :HR_MOVTO , :HISTORICO, :TIP_MOVTO, :VLR_MOVTO, :ID_CTAPLA," +
                " :SYNCED DO SUSPEND; END\';\r\n\terro = \'sproc movto sync insert\';\r\n\texecute stateme" +
                "nt \'CREATE OR ALTER PROCEDURE SP_TRI_MOVTO_SYNC_INSERT ( pDT_MOVTO DATE , pHR_MO" +
                "VTO TIME , pHISTORICO VARCHAR( 60 ) , pTIP_MOVTO CHAR( 1 ) , pVLR_MOVTO TYPE OF " +
                "COLUMN TRI_PDV_OPER.DIN , pID_CTAPLA SMALLINT , pSYNCED SMALLINT ) RETURNS( rNew" +
                "IdMovto INTEGER ) AS DECLARE VARIABLE newIdMovto INTEGER; BEGIN BEGIN SELECT NEX" +
                "T VALUE FOR GEN_TB_MOVDIARIO_ID FROM RDB$DATABASE INTO :newIdMovto ; END IF(:new" +
                "IdMovto IS NULL ) THEN newIdMovto = 0; BEGIN INSERT INTO TB_MOVDIARIO ( ID_MOVTO" +
                " , DT_MOVTO , HR_MOVTO , HISTORICO , TIP_MOVTO , VLR_MOVTO , ID_CTAPLA , SYNCED " +
                ") VALUES (:newIdMovto , :pDT_MOVTO , :pHR_MOVTO , :pHISTORICO , :pTIP_MOVTO , :p" +
                "VLR_MOVTO , :pID_CTAPLA , :pSYNCED ) ; rNewIdMovto = newIdMovto; END END;\';\r\n\ter" +
                "ro = \'sproc movto get all unsynced\';\r\n\texecute statement \'CREATE OR ALTER PROCED" +
                "URE SP_TRI_MOVTO_GETALL_UNSYNCED RETURNS ( ID_MOVTO INTEGER , DT_MOVTO DATE , HR" +
                "_MOVTO TIME , HISTORICO VARCHAR(60) , TIP_MOVTO CHAR(1) , VLR_MOVTO TYPE OF COLU" +
                "MN TRI_PDV_OPER.DIN , ID_CTAPLA SMALLINT , SYNCED SMALLINT ) AS BEGIN FOR SELECT" +
                " FIRST 200 COALESCE(a.ID_MOVTO, 0) , a.DT_MOVTO , a.HR_MOVTO , a.HISTORICO , a.T" +
                "IP_MOVTO , a.VLR_MOVTO , a.ID_CTAPLA , a.SYNCED FROM TB_MOVDIARIO a WHERE ( a.SY" +
                "NCED IS NULL OR a.SYNCED = 0 ) ORDER BY a.DT_MOVTO , a.HR_MOVTO INTO :ID_MOVTO ," +
                " :DT_MOVTO , :HR_MOVTO , :HISTORICO , :TIP_MOVTO , :VLR_MOVTO , :ID_CTAPLA , :SY" +
                "NCED DO BEGIN SUSPEND; END END;\';\r\n\terro = \'sproc movto set synced\';\r\n\texecute s" +
                "tatement \'CREATE OR ALTER PROCEDURE SP_TRI_MOVTOSETSYNCED (pIdMovto INTEGER, pSy" +
                "nced SMALLINT) AS BEGIN UPDATE TB_MOVDIARIO SET SYNCED = :pSynced WHERE ID_MOVTO" +
                " = :pIdMovto; END;\';\r\n\terro = \'sproc cupom get dynamic sync\';\r\n\texecute statemen" +
                "t \'CREATE OR ALTER PROCEDURE SP_TRI_CUPOM_GETALL_SYNC ( TIP_QUERY SMALLINT ) RET" +
                "URNS ( ID_CUPOM INTEGER , COO INTEGER , DT_CUPOM DATE , HR_CUPOM TIME , NUM_CAIX" +
                "A SMALLINT , ID_CLIENTE INTEGER , ID_VENDEDOR SMALLINT , STATUS CHAR( 1 ) , ID_P" +
                "ARCELA SMALLINT , IND_CANCEL CHAR( 1 ) , ID_IFS SMALLINT , ID_NATOPE INTEGER , V" +
                "LR_TROCO TYPE OF COLUMN TRI_PDV_OPER.DIN , VLR_TOTAL TYPE OF COLUMN TRI_PDV_OPER" +
                ".DIN , VLR_DESC TYPE OF COLUMN TRI_PDV_OPER.DIN , TIP_DESC CHAR( 1 ) , VLR_ACRES" +
                " TYPE OF COLUMN TRI_PDV_OPER.DIN , GNF INTEGER , CHAVE VARCHAR( 32 ) , TOTAL_TRI" +
                "BUTOS_IBPT TYPE OF COLUMN TRI_PDV_OPER.DIN , TOTAL_TRIB_FED TYPE OF COLUMN TRI_P" +
                "DV_OPER.DIN , TOTAL_TRIB_EST TYPE OF COLUMN TRI_PDV_OPER.DIN , TOTAL_TRIB_MUN TY" +
                "PE OF COLUMN TRI_PDV_OPER.DIN , SYNCED SMALLINT , QTD_CTAREC INTEGER , ID_MAIT_P" +
                "EDIDO INTEGER ) AS BEGIN FOR SELECT FIRST 200 COALESCE(a.ID_CUPOM, 0) , a.COO , " +
                "a.DT_CUPOM , a.HR_CUPOM , a.NUM_CAIXA , a.ID_CLIENTE , a.ID_VENDEDOR , a.STATUS " +
                ", a.ID_PARCELA , a.IND_CANCEL , a.ID_IFS , a.ID_NATOPE , a.VLR_TROCO , a.VLR_TOT" +
                "AL , a.VLR_DESC , a.TIP_DESC , a.VLR_ACRES , a.GNF , a.CHAVE , a.TOTAL_TRIBUTOS_" +
                "IBPT , a.TOTAL_TRIB_FED , a.TOTAL_TRIB_EST , a.TOTAL_TRIB_MUN , a.SYNCED , COUNT" +
                "(b.ID_CTAREC) QTD_CTAREC , c.ID_MAIT_PEDIDO FROM TB_CUPOM a LEFT JOIN TB_CUPOM_C" +
                "TAREC b ON a.ID_CUPOM = b.ID_CUPOM LEFT JOIN TRI_MAIT_PEDIDO_CUPOM c ON a.ID_CUP" +
                "OM = c.ID_CUPOM WHERE ( :TIP_QUERY = 0 AND ( ( a.SYNCED IS NULL OR a.SYNCED = 0 " +
                ") AND a.STATUS = \'\'F\'\' ) ) OR ( :TIP_QUERY = 1 AND ( a.SYNCED = 1 AND a.STATUS =" +
                " \'\'C\'\' ) ) GROUP BY a.ID_CUPOM , a.COO , a.DT_CUPOM , a.HR_CUPOM , a.NUM_CAIXA ," +
                " a.ID_CLIENTE , a.ID_VENDEDOR , a.STATUS , a.ID_PARCELA , a.IND_CANCEL , a.ID_IF" +
                "S , a.ID_NATOPE , a.VLR_TROCO , a.VLR_TOTAL , a.VLR_DESC , a.TIP_DESC , a.VLR_AC" +
                "RES , a.GNF , a.CHAVE , a.TOTAL_TRIBUTOS_IBPT , a.TOTAL_TRIB_FED , a.TOTAL_TRIB_" +
                "EST , a.TOTAL_TRIB_MUN , a.SYNCED , c.ID_MAIT_PEDIDO ORDER BY a.DT_CUPOM , a.HR_" +
                "CUPOM INTO :ID_CUPOM , :COO , :DT_CUPOM , :HR_CUPOM , :NUM_CAIXA , :ID_CLIENTE ," +
                " :ID_VENDEDOR , :STATUS , :ID_PARCELA , :IND_CANCEL , :ID_IFS , :ID_NATOPE , :VL" +
                "R_TROCO , :VLR_TOTAL , :VLR_DESC , :TIP_DESC , :VLR_ACRES , :GNF , :CHAVE , :TOT" +
                "AL_TRIBUTOS_IBPT , :TOTAL_TRIB_FED , :TOTAL_TRIB_EST , :TOTAL_TRIB_MUN , :SYNCED" +
                " , :QTD_CTAREC , :ID_MAIT_PEDIDO DO BEGIN SUSPEND ; END END;\';\t\r\n\terro = \'sproc " +
                "ctarec get by coo and num_caixa\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE" +
                " SP_TRI_CTAREC_GETBY_COO_NMCAIX ( pCoo INTEGER , pNumcaixa SMALLINT ) RETURNS ( " +
                "ID_CTAREC INTEGER , DOCUMENTO VARCHAR(12) , HISTORICO VARCHAR(50) , DT_EMISSAO D" +
                "ATE , DT_VENCTO DATE , VLR_CTAREC TYPE OF COLUMN TRI_PDV_OPER.DIN , TIP_CTAREC C" +
                "HAR(1) , ID_PORTADOR INTEGER , ID_CLIENTE INTEGER , INV_REFERENCIA VARCHAR(18) ," +
                " DT_VENCTO_ORIG DATE , NSU_CARTAO VARCHAR(32) ) AS BEGIN FOR SELECT a.ID_CTAREC " +
                ", a.DOCUMENTO , a.HISTORICO , a.DT_EMISSAO , a.DT_VENCTO , a.VLR_CTAREC , a.TIP_" +
                "CTAREC , a.ID_PORTADOR , a.ID_CLIENTE , a.INV_REFERENCIA , a.DT_VENCTO_ORIG , a." +
                "NSU_CARTAO FROM TB_CONTA_RECEBER a JOIN TB_CUPOM_CTAREC b ON a.ID_CTAREC = b.ID_" +
                "CTAREC JOIN TB_CUPOM c ON c.ID_CUPOM = b.ID_CUPOM WHERE c.COO = :pCoo AND c.NUM_" +
                "CAIXA = :pNumcaixa INTO :ID_CTAREC , :DOCUMENTO , :HISTORICO , :DT_EMISSAO , :DT" +
                "_VENCTO , :VLR_CTAREC , :TIP_CTAREC , :ID_PORTADOR , :ID_CLIENTE , :INV_REFERENC" +
                "IA , :DT_VENCTO_ORIG , :NSU_CARTAO DO SUSPEND ; END;\';\r\n\terro = \'sproc ctarec mo" +
                "vto sync delete\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_CTARECMO" +
                "VTO_SYNC_DEL( pIdMovto INTEGER, pIdCtarec INTEGER) AS BEGIN DELETE FROM TB_CTARE" +
                "C_MOVTO WHERE ID_MOVTO = :pIdMovto AND ID_CTAREC= :pIdCtarec; END;\';\r\n\terro = \'s" +
                "proc cupom ctarec sync delete\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE S" +
                "P_TRI_CUPOMCTAREC_SYNC_DEL( pCoo INTEGER, pNumcaixa SMALLINT, pIdCtarec INTEGER)" +
                " AS DECLARE VARIABLE idCupom INTEGER; BEGIN SELECT ID_CUPOM FROM TB_CUPOM WHERE " +
                "COO = :pCoo AND NUM_CAIXA = :pNumcaixa INTO :idCupom; DELETE FROM TB_CUPOM_CTARE" +
                "C WHERE ID_CUPOM = :idCupom AND ID_CTAREC= :pIdCtarec; END;\';\r\n\terro = \'sproc mo" +
                "vto sync delete\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_MOVTO_SY" +
                "NC_DEL( pIdMovto INTEGER) AS BEGIN DELETE FROM TB_MOVDIARIO WHERE ID_MOVTO = :pI" +
                "dMovto; END;\';\r\n\terro = \'sproc cupom fmapagto get by id_cupom\';\r\n\texecute statem" +
                "ent \'CREATE OR ALTER PROCEDURE SP_TRI_CUPOMFMAPAGTO_BY_IDCUP( pIdCupom INTEGER )" +
                " RETURNS( ID_NUMPAG INTEGER, VLR_PAGTO TYPE OF COLUMN TRI_PDV_OPER.DIN, VLR_ESTO" +
                "RNO TYPE OF COLUMN TRI_PDV_OPER.DIN, IND_ESTORNO CHAR(1), ID_CUPOM INTEGER, ID_F" +
                "MAPAGTO SMALLINT, CHAVE VARCHAR(32)) AS BEGIN FOR SELECT a.ID_NUMPAG , a.VLR_PAG" +
                "TO , a.VLR_ESTORNO, a.IND_ESTORNO, a.ID_CUPOM , a.ID_FMAPAGTO, a.CHAVE FROM TB_C" +
                "UPOM_FMAPAGTO a WHERE a.ID_CUPOM =:pIdCupom INTO :ID_NUMPAG , :VLR_PAGTO , :VLR_" +
                "ESTORNO, :IND_ESTORNO, :ID_CUPOM , :ID_FMAPAGTO, :CHAVE DO SUSPEND; END;\';\r\n\terr" +
                "o = \'sproc cupom fmapagto sync insert\';\r\n\texecute statement \'CREATE OR ALTER PRO" +
                "CEDURE SP_TRI_CUPOMFMAPAGTSYNCINSERT (pVLR_PAGTO TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", pVLR_ESTORNO TYPE OF COLUMN TRI_PDV_OPER.DIN, pIND_ESTORNO CHAR(1), pID_CUPOM " +
                "INTEGER, pID_FMAPAGTO SMALLINT, pCHAVE VARCHAR(32) ) RETURNS ( rNewIdNumpag INTE" +
                "GER ) AS DECLARE VARIABLE newIdNumpag INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_T" +
                "B_CUPOM_FMAPAGTO_ID FROM RDB$DATABASE INTO :newIdNumpag; IF( :newIdNumpag IS NUL" +
                "L ) THEN newIdNumpag = 0; BEGIN INSERT INTO TB_CUPOM_FMAPAGTO ( ID_NUMPAG , VLR_" +
                "PAGTO , VLR_ESTORNO, IND_ESTORNO, ID_CUPOM , ID_FMAPAGTO, CHAVE ) VALUES ( :newI" +
                "dNumpag , :pVLR_PAGTO , :pVLR_ESTORNO , :pIND_ESTORNO , :pID_CUPOM , :pID_FMAPAG" +
                "TO , :pCHAVE ); rNewIdNumpag = newIdNumpag; END END;\';\r\n\terro = \'sproc cupom upd" +
                "ate by coo and numcaixa\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_" +
                "CUPOM_UPDT_BYCOONUMCAIX (pCOO INTEGER, pCCF INTEGER, pDT_CUPOM DATE, pHR_CUPOM T" +
                "IME, pNUM_CAIXA SMALLINT, pID_CLIENTE INTEGER, pID_VENDEDOR SMALLINT, pSTATUS CH" +
                "AR(1), pID_PARCELA SMALLINT, pIND_CANCEL CHAR(1), pID_IFS SMALLINT, pID_NATOPE I" +
                "NTEGER, pVLR_TROCO TYPE OF COLUMN TRI_PDV_OPER.DIN, pVLR_TOTAL TYPE OF COLUMN TR" +
                "I_PDV_OPER.DIN, pVLR_DESC TYPE OF COLUMN TRI_PDV_OPER.DIN, pTIP_DESC CHAR(1), pV" +
                "LR_ACRES TYPE OF COLUMN TRI_PDV_OPER.DIN, pGNF INTEGER, pCHAVE VARCHAR(32), pTOT" +
                "AL_TRIBUTOS_IBPT TYPE OF COLUMN TRI_PDV_OPER.DIN, pTOTAL_TRIB_FED TYPE OF COLUMN" +
                " TRI_PDV_OPER.DIN, pTOTAL_TRIB_EST TYPE OF COLUMN TRI_PDV_OPER.DIN, pTOTAL_TRIB_" +
                "MUN TYPE OF COLUMN TRI_PDV_OPER.DIN, pSYNCED SMALLINT) AS BEGIN UPDATE TB_CUPOM " +
                "SET CCF =:pCCF , DT_CUPOM =:pDT_CUPOM , HR_CUPOM =:pHR_CUPOM , ID_CLIENTE =:pID_" +
                "CLIENTE , ID_VENDEDOR =:pID_VENDEDOR , STATUS =:pSTATUS , ID_PARCELA =:pID_PARCE" +
                "LA , IND_CANCEL =:pIND_CANCEL , ID_IFS =:pID_IFS , ID_NATOPE =:pID_NATOPE , VLR_" +
                "TROCO =:pVLR_TROCO , VLR_TOTAL =:pVLR_TOTAL , VLR_DESC =:pVLR_DESC , TIP_DESC =:" +
                "pTIP_DESC , VLR_ACRES =:pVLR_ACRES , GNF =:pGNF , CHAVE =:pCHAVE , TOTAL_TRIBUTO" +
                "S_IBPT=:pTOTAL_TRIBUTOS_IBPT , TOTAL_TRIB_FED =:pTOTAL_TRIB_FED , TOTAL_TRIB_EST" +
                " =:pTOTAL_TRIB_EST , TOTAL_TRIB_MUN =:pTOTAL_TRIB_MUN , SYNCED =:pSYNCED WHERE C" +
                "OO =:pCOO AND NUM_CAIXA=:pNUM_CAIXA; END;\';\r\n\terro = \'sproc cupom get distinct i" +
                "d_ifs num_caixa\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_CUPOM_GE" +
                "T_DISTINCT_IFS RETURNS( ID_IFS INTEGER, CAIXA VARCHAR(6) CHARACTER SET WIN_1252)" +
                " AS BEGIN FOR SELECT DISTINCT COALESCE(ID_IFS, -1) AS ID_IFS, CAST(COALESCE(NUM_" +
                "CAIXA, -1) AS VARCHAR(6) CHARACTER SET WIN_1252) AS CAIXA FROM TB_CUPOM ORDER BY" +
                " ID_IFS INTO :ID_IFS , :CAIXA DO BEGIN SUSPEND; END END;\';\r\n\terro = \'sproc ifs s" +
                "ync insert update\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_IFS_SY" +
                "NC_INSERT_UPDT (pID_IFS SMALLINT, pCAIXA VARCHAR(6), pLOJA VARCHAR(3), pFABRICAC" +
                "AO VARCHAR(20), pUSUARIO CHAR(3), pMARCA VARCHAR(20), pMF CHAR(1), pMODELO VARCH" +
                "AR(20), pTIPO VARCHAR(7), pDATA_ON DATE, pDATA_OFF DATE, pATIVO CHAR(1), pISS_RA" +
                "TEIO CHAR(1), pSB_DATAIN DATE, pSB_HORAIN TIME, pSB_VERSAO VARCHAR(8), pCHAVE VA" +
                "RCHAR(32), pCOD_NAC VARCHAR(10), pDATA_TEMP DATE, pNUM_CREDENCIAMENTO VARCHAR(30" +
                ") ) AS DECLARE VARIABLE vCountIfs INTEGER; BEGIN SELECT COUNT(1) FROM TB_IFS WHE" +
                "RE ID_IFS = :pID_IFS INTO :vCountIfs; IF( :vCountIfs = 0 ) THEN BEGIN INSERT INT" +
                "O TB_IFS ( ID_IFS , CAIXA , LOJA , FABRICACAO, USUARIO , MARCA , MF , MODELO , T" +
                "IPO , DATA_ON , DATA_OFF , ATIVO , ISS_RATEIO, SB_DATAIN , SB_HORAIN , SB_VERSAO" +
                " , CHAVE , COD_NAC , DATA_TEMP , NUM_CREDENCIAMENTO ) VALUES ( :pID_IFS , :pCAIX" +
                "A , :pLOJA , :pFABRICACAO, :pUSUARIO , :pMARCA , :pMF , :pMODELO , :pTIPO , :pDA" +
                "TA_ON , :pDATA_OFF , :pATIVO , :pISS_RATEIO, :pSB_DATAIN , :pSB_HORAIN , :pSB_VE" +
                "RSAO , :pCHAVE , :pCOD_NAC , :pDATA_TEMP , :pNUM_CREDENCIAMENTO ); END ELSE BEGI" +
                "N UPDATE TB_IFS SET CAIXA =:pCAIXA , LOJA =:pLOJA , FABRICACAO =:pFABRICACAO, US" +
                "UARIO =:pUSUARIO , MARCA =:pMARCA , MF =:pMF , MODELO =:pMODELO , TIPO =:pTIPO ," +
                " DATA_ON =:pDATA_ON , DATA_OFF =:pDATA_OFF , ATIVO =:pATIVO , ISS_RATEIO =:pISS_" +
                "RATEIO, SB_DATAIN =:pSB_DATAIN , SB_HORAIN =:pSB_HORAIN , SB_VERSAO =:pSB_VERSAO" +
                " , CHAVE =:pCHAVE , COD_NAC =:pCOD_NAC , DATA_TEMP =:pDATA_TEMP , NUM_CREDENCIAM" +
                "ENTO=:pNUM_CREDENCIAMENTO WHERE ID_IFS=:pID_IFS; END END;\';\r\n\r\n\terro = \'sproc SP" +
                "_TRI_REL_METD_PAGTO_UPDINST\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE SP_" +
                "TRI_REL_METD_PAGTO_UPDINST (pID_PAGAMENTO INTEGER, pID_FMAPGTO SMALLINT) AS BEGI" +
                "N UPDATE OR INSERT INTO TRI_PDV_REL_METODO_PAGTO ( ID_PAGAMENTO, ID_FMAPGTO ) VA" +
                "LUES ( :pID_PAGAMENTO, :pID_FMAPGTO ) MATCHING ( ID_PAGAMENTO, ID_FMAPGTO ); END" +
                ";\';\r\n\terro = \'sproc SP_TRI_CUPOM_BYPASS_IFS\';\r\n\texecute statement \'CREATE OR ALT" +
                "ER PROCEDURE SP_TRI_CUPOM_BYPASS_IFS RETURNS( ID_IFS INTEGER, CAIXA VARCHAR(6) C" +
                "HARACTER SET WIN_1252) AS BEGIN FOR SELECT DISTINCT TB_CUPOM_DISTINCT.ID_IFS, CA" +
                "ST(COUNT(TB_CUPOM_DISTINCT.CAIXA) AS VARCHAR(6) CHARACTER SET WIN_1252) AS QTD_C" +
                "AIXAS FROM ( SELECT DISTINCT COALESCE(ID_IFS, -1) AS ID_IFS, CAST(COALESCE(NUM_C" +
                "AIXA, -1) AS VARCHAR(6) CHARACTER SET WIN_1252) AS CAIXA FROM TB_CUPOM ORDER BY " +
                "ID_IFS) AS TB_CUPOM_DISTINCT GROUP BY TB_CUPOM_DISTINCT.ID_IFS ORDER BY TB_CUPOM" +
                "_DISTINCT.ID_IFS INTO :ID_IFS , :CAIXA DO BEGIN SUSPEND; END END;\';\r\n\r\n\terro = \'" +
                "sproc SP_TRI_CUPOMITEMGET\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE SP_TR" +
                "I_CUPOMITEMGET ( pIdCupom INTEGER ) RETURNS ( ID_ITEMCUP TYPE OF COLUMN TB_CUPOM" +
                "_ITEM.ID_ITEMCUP , ID_CUPOM TYPE OF COLUMN TB_CUPOM_ITEM.ID_CUPOM , ID_IDENTIF T" +
                "YPE OF COLUMN TB_CUPOM_ITEM.ID_IDENTIF , NUM_ITEM TYPE OF COLUMN TB_CUPOM_ITEM.N" +
                "UM_ITEM , QTD_ITEM TYPE OF COLUMN TB_CUPOM_ITEM.QTD_ITEM , VLR_UNIT TYPE OF COLU" +
                "MN TB_CUPOM_ITEM.VLR_UNIT , PRC_CUSTO TYPE OF COLUMN TB_CUPOM_ITEM.PRC_CUSTO , A" +
                "LI_ICM TYPE OF COLUMN TB_CUPOM_ITEM.ALI_ICM , VLR_ICM TYPE OF COLUMN TB_CUPOM_IT" +
                "EM.VLR_ICM , COD_TOTALP TYPE OF COLUMN TB_CUPOM_ITEM.COD_TOTALP , ORD_APLICA TYP" +
                "E OF COLUMN TB_CUPOM_ITEM.ORD_APLICA , ITEM_CANCEL TYPE OF COLUMN TB_CUPOM_ITEM." +
                "ITEM_CANCEL , CST TYPE OF COLUMN TB_CUPOM_ITEM.CST , UNI_MEDIDA TYPE OF COLUMN T" +
                "B_CUPOM_ITEM.UNI_MEDIDA , CASAS_QTD TYPE OF COLUMN TB_CUPOM_ITEM.CASAS_QTD , CAS" +
                "AS_VLR TYPE OF COLUMN TB_CUPOM_ITEM.CASAS_VLR , TIPO_DESC TYPE OF COLUMN TB_CUPO" +
                "M_ITEM.TIPO_DESC , IAT TYPE OF COLUMN TB_CUPOM_ITEM.IAT , IPPT TYPE OF COLUMN TB" +
                "_CUPOM_ITEM.IPPT , COD_BARRA TYPE OF COLUMN TB_CUPOM_ITEM.COD_BARRA , VLR_ACRE T" +
                "YPE OF COLUMN TB_CUPOM_ITEM.VLR_ACRE , VLR_PIS TYPE OF COLUMN TB_CUPOM_ITEM.VLR_" +
                "PIS , VLR_COFINS TYPE OF COLUMN TB_CUPOM_ITEM.VLR_COFINS , CHAVE TYPE OF COLUMN " +
                "TB_CUPOM_ITEM.CHAVE , CST_PIS TYPE OF COLUMN TB_CUPOM_ITEM.CST_PIS , CST_COFINS " +
                "TYPE OF COLUMN TB_CUPOM_ITEM.CST_COFINS , CFOP TYPE OF COLUMN TB_CUPOM_ITEM.CFOP" +
                " , VLR_TRIBUTOS_IBPT TYPE OF COLUMN TB_CUPOM_ITEM.VLR_TRIBUTOS_IBPT , ALIQ_ENCON" +
                "T_IBPT TYPE OF COLUMN TB_CUPOM_ITEM.ALIQ_ENCONT_IBPT , DT_ITEM TYPE OF COLUMN TB" +
                "_CUPOM_ITEM.DT_ITEM , HR_ITEM TYPE OF COLUMN TB_CUPOM_ITEM.HR_ITEM , VLR_TRIB_FE" +
                "D TYPE OF COLUMN TB_CUPOM_ITEM.VLR_TRIB_FED , VLR_TRIB_EST TYPE OF COLUMN TB_CUP" +
                "OM_ITEM.VLR_TRIB_EST , VLR_TRIB_MUN TYPE OF COLUMN TB_CUPOM_ITEM.VLR_TRIB_MUN , " +
                "DESCRICAO TYPE OF COLUMN TB_CUPOM_ITEM.DESCRICAO , ID_MAIT_PEDIDO_ITEM TYPE OF C" +
                "OLUMN TRI_MAIT_PEDIDO_ITEM.ID_MAIT_PEDIDO_ITEM , ID_COMPPRO TYPE OF COLUMN TRI_M" +
                "AIT_PED_ITEM_COMPPROD.ID_COMPPRO , ID_COMPOSICAO TYPE OF COLUMN TB_EST_COMPOSICA" +
                "O.ID_COMPOSICAO ) AS BEGIN FOR SELECT COALESCE(a.ID_ITEMCUP, 0) ID_ITEMCUP, a.ID" +
                "_CUPOM , a.ID_IDENTIF , a.NUM_ITEM , a.QTD_ITEM , a.VLR_UNIT , a.PRC_CUSTO , a.A" +
                "LI_ICM , a.VLR_ICM , a.COD_TOTALP , a.ORD_APLICA , a.ITEM_CANCEL , a.CST , a.UNI" +
                "_MEDIDA , a.CASAS_QTD , a.CASAS_VLR , a.TIPO_DESC , a.IAT , a.IPPT , a.COD_BARRA" +
                " , a.VLR_ACRE , a.VLR_PIS , a.VLR_COFINS , a.CHAVE , a.CST_PIS , a.CST_COFINS , " +
                "a.CFOP , a.VLR_TRIBUTOS_IBPT , a.ALIQ_ENCONT_IBPT , a.DT_ITEM , a.HR_ITEM , a.VL" +
                "R_TRIB_FED , a.VLR_TRIB_EST , a.VLR_TRIB_MUN , a.DESCRICAO , c.ID_MAIT_PEDIDO_IT" +
                "EM , d.ID_COMPPRO, e.ID_COMPOSICAO FROM TB_CUPOM_ITEM a LEFT JOIN TRI_MAIT_PED_I" +
                "TEM_CUPOM_ITEM b ON a.ID_ITEMCUP = b.ID_ITEMCUP LEFT JOIN TRI_MAIT_PEDIDO_ITEM c" +
                " ON b.ID_MAIT_PEDIDO_ITEM = c.ID_MAIT_PEDIDO_ITEM LEFT JOIN TRI_MAIT_PED_ITEM_CO" +
                "MPPROD d ON c.ID_MAIT_PEDIDO_ITEM = d.ID_MAIT_PEDIDO_ITEM LEFT JOIN TB_EST_COMPO" +
                "SICAO e ON e.ID_IDENTIFICADOR = a.ID_IDENTIF WHERE a.ID_CUPOM =:pIdCupom INTO :I" +
                "D_ITEMCUP , :ID_CUPOM , :ID_IDENTIF , :NUM_ITEM , :QTD_ITEM , :VLR_UNIT , :PRC_C" +
                "USTO , :ALI_ICM , :VLR_ICM , :COD_TOTALP , :ORD_APLICA , :ITEM_CANCEL , :CST , :" +
                "UNI_MEDIDA , :CASAS_QTD , :CASAS_VLR , :TIPO_DESC , :IAT , :IPPT , :COD_BARRA , " +
                ":VLR_ACRE , :VLR_PIS , :VLR_COFINS , :CHAVE , :CST_PIS , :CST_COFINS , :CFOP , :" +
                "VLR_TRIBUTOS_IBPT , :ALIQ_ENCONT_IBPT , :DT_ITEM , :HR_ITEM , :VLR_TRIB_FED , :V" +
                "LR_TRIB_EST , :VLR_TRIB_MUN , :DESCRICAO , :ID_MAIT_PEDIDO_ITEM , :ID_COMPPRO , " +
                ":ID_COMPOSICAO DO SUSPEND ; END;\';\r\n\r\n\terro = \'sproc SP_TRI_PRODUTO_RETIRAESTOQU" +
                "E\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_PRODUTO_RETIRAESTOQUE " +
                "( pQTD_ITEM TYPE OF COLUMN TRI_PDV_OPER.DIN , pID_IDENTIF INTEGER , pID_COMPPRO " +
                "TYPE OF COLUMN TB_EST_COMP_PRODUCAO.ID_COMPPRO , pID_COMPOSICAO TYPE OF COLUMN T" +
                "B_EST_COMPOSICAO.ID_COMPOSICAO ) AS DECLARE VARIABLE vIdIdentifComponente TYPE O" +
                "F COLUMN TB_EST_COMP_ITEM_USADO.ID_IDENTIFICADOR; DECLARE VARIABLE vQtdItemCompo" +
                "nente TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.QTD_ITEM; DECLARE VARIABLE vQtdDif T" +
                "YPE OF COLUMN TB_EST_PRODUTO.QTD_ATUAL; DECLARE VARIABLE vIdTipoItemEstoque TYPE" +
                " OF COLUMN TB_ESTOQUE.ID_TIPOITEM; DECLARE VARIABLE vQtdRetirarComponentes TYPE " +
                "OF COLUMN TB_EST_PRODUTO.QTD_ATUAL; DECLARE VARIABLE vQtdRetirarComposto TYPE OF" +
                " COLUMN TB_EST_PRODUTO.QTD_ATUAL; BEGIN SELECT te.ID_TIPOITEM FROM TB_EST_IDENTI" +
                "FICADOR tei JOIN TB_ESTOQUE te ON te.ID_ESTOQUE = tei.ID_ESTOQUE WHERE tei.ID_ID" +
                "ENTIFICADOR = :pID_IDENTIF INTO :vIdTipoItemEstoque ; IF (:vIdTipoItemEstoque = " +
                "\'\'9\'\') THEN EXIT; vQtdItemComponente = 0; vQtdDif = 0; vQtdRetirarComponentes = " +
                "0; vQtdRetirarComposto = 0; IF (:pID_COMPPRO > 0 OR :pID_COMPOSICAO > 0) THEN BE" +
                "GIN IF (:pQTD_ITEM >= 0) THEN BEGIN SELECT (tep.QTD_ATUAL - :pQTD_ITEM) AS qtd_d" +
                "if FROM TB_EST_PRODUTO tep WHERE tep.ID_IDENTIFICADOR = :pID_IDENTIF INTO :vQtdD" +
                "if ; IF (:vQtdDif < 0) THEN BEGIN vQtdRetirarComponentes = :vQtdDif * -1; vQtdRe" +
                "tirarComposto = :pQTD_ITEM - :vQtdRetirarComponentes; END END END IF (:vQtdDif >" +
                "= 0) THEN BEGIN UPDATE TB_EST_PRODUTO SET QTD_ATUAL = QTD_ATUAL - :pQTD_ITEM WHE" +
                "RE ID_IDENTIFICADOR = :pID_IDENTIF ; END ELSE BEGIN IF (:vQtdRetirarComposto > 0" +
                ") THEN BEGIN UPDATE TB_EST_PRODUTO SET QTD_ATUAL = QTD_ATUAL - :vQtdRetirarCompo" +
                "sto WHERE ID_IDENTIFICADOR = :pID_IDENTIF ; END IF (:vQtdRetirarComponentes > 0)" +
                " THEN BEGIN IF (:pID_COMPPRO > 0) THEN BEGIN FOR SELECT teciu.ID_IDENTIFICADOR ," +
                " teciu.QTD_ITEM FROM TB_EST_COMP_ITEM_USADO teciu WHERE teciu.ID_COMPPROD = :pID" +
                "_COMPPRO INTO :vIdIdentifComponente , :vQtdItemComponente DO BEGIN EXECUTE PROCE" +
                "DURE SP_TRI_PRODUTO_RETIRAESTOQUE((:vQtdItemComponente * :vQtdRetirarComponentes" +
                "), :vIdIdentifComponente, 0, 0); END END ELSE BEGIN FOR SELECT teci.ID_IDENTIFIC" +
                "ADOR, teci.QTD_ITEM FROM TB_EST_COMP_ITEM teci WHERE teci.ID_COMPOSICAO = :pID_C" +
                "OMPOSICAO INTO :vIdIdentifComponente , :vQtdItemComponente DO BEGIN EXECUTE PROC" +
                "EDURE SP_TRI_PRODUTO_RETIRAESTOQUE((:vQtdItemComponente * :vQtdRetirarComponente" +
                "s), :vIdIdentifComponente, 0, 0); END END END END UPDATE TB_ESTOQUE SET ULT_VEND" +
                "A = CURRENT_DATE WHERE ID_ESTOQUE = ( SELECT ID_ESTOQUE FROM TB_EST_IDENTIFICADO" +
                "R WHERE ID_IDENTIFICADOR = :pID_IDENTIF ) ; END;\';\r\n\t\r\n\terro = \'deu certo\';\r\n\t\r\n" +
                "\tSUSPEND;\r\n\tWHEN ANY DO\r\n\tBEGIN\t\t\r\n\tEND \r\nEND;";
            this._commandCollection[16].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[17] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[17].Connection = this.Connection;
            this._commandCollection[17].CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_PROCEDURES3\r\nRETURNS (\r\n\terro VARCHAR(64)\r\n)\r\nAS" +
                "\r\nBEGIN\r\n\terro = \'sproc estproduto get by dt upd\';\r\n\texecute statement \'CREATE O" +
                "R ALTER PROCEDURE SP_TRI_ESTPROD_GETBY_DTUPD (pUltimaSync TIMESTAMP) RETURNS (ID" +
                "_IDENTIFICADOR INTEGER, DESC_CMPL VARCHAR(30), COD_BARRA VARCHAR(18), REFERENCIA" +
                " VARCHAR(18), PRC_MEDIO TYPE OF COLUMN TRI_PDV_OPER.DIN, QTD_COMPRA TYPE OF COLU" +
                "MN TRI_PDV_OPER.DIN, QTD_ATUAL TYPE OF COLUMN TRI_PDV_OPER.DIN, QTD_MINIM TYPE O" +
                "F COLUMN TRI_PDV_OPER.DIN, QTD_INICIO TYPE OF COLUMN TRI_PDV_OPER.DIN, QTD_RESER" +
                "V TYPE OF COLUMN TRI_PDV_OPER.DIN, QTD_POSVEN TYPE OF COLUMN TRI_PDV_OPER.DIN, U" +
                "LT_COMPRA DATE, PESO TYPE OF COLUMN TRI_PDV_OPER.DIN, IPI TYPE OF COLUMN TRI_PDV" +
                "_OPER.DIN, CF VARCHAR(13), IAT CHAR(1), IPPT CHAR(1), COD_NCM VARCHAR(8), ID_NIV" +
                "EL1 SMALLINT, ID_NIVEL2 SMALLINT, MVA TYPE OF COLUMN TRI_PDV_OPER.DIN, CST_IPI V" +
                "ARCHAR(3), FOTO BLOB SUB_TYPE 0, CSOSN VARCHAR(3), ANP INTEGER, EXTIPI SMALLINT," +
                " CST VARCHAR(3), FCI VARCHAR(36), COD_CEST VARCHAR(7), CENQ VARCHAR(3), VLR_IPI " +
                "TYPE OF COLUMN TRI_PDV_OPER.DIN, CST_CFE VARCHAR(3), CSOSN_CFE VARCHAR(3), CONTR" +
                "OLA_LOTE_VENDA CHAR(1), BAIXA_LOTE_NFV CHAR(1), BAIXA_LOTE_PDV CHAR(1), TRI_PDV_" +
                "DT_UPD TIMESTAMP) AS BEGIN FOR SELECT A.ID_IDENTIFICADOR, A.DESC_CMPL, A.COD_BAR" +
                "RA, A.REFERENCIA, A.PRC_MEDIO, A.QTD_COMPRA, A.QTD_ATUAL, A.QTD_MINIM, A.QTD_INI" +
                "CIO, A.QTD_RESERV, A.QTD_POSVEN, A.ULT_COMPRA, A.PESO, A.IPI, A.CF, A.IAT, A.IPP" +
                "T, A.COD_NCM, A.ID_NIVEL1, A.ID_NIVEL2, A.MVA, A.CST_IPI, A.FOTO, A.CSOSN, A.ANP" +
                ", A.EXTIPI, A.CST, A.FCI, A.COD_CEST, A.CENQ, A.VLR_IPI, A.CST_CFE, A.CSOSN_CFE," +
                " A.CONTROLA_LOTE_VENDA, A.BAIXA_LOTE_NFV, A.BAIXA_LOTE_PDV, A.TRI_PDV_DT_UPD FRO" +
                "M TB_EST_PRODUTO A JOIN TB_EST_IDENTIFICADOR B ON B.ID_IDENTIFICADOR = A.ID_IDEN" +
                "TIFICADOR JOIN TB_ESTOQUE C ON C.ID_ESTOQUE = B.ID_ESTOQUE WHERE (A.TRI_PDV_DT_U" +
                "PD > :pUltimaSync OR B.TRI_PDV_DT_UPD > :pUltimaSync OR C.TRI_PDV_DT_UPD > :pUlt" +
                "imaSync) INTO :ID_IDENTIFICADOR, :DESC_CMPL, :COD_BARRA, :REFERENCIA, :PRC_MEDIO" +
                ", :QTD_COMPRA, :QTD_ATUAL, :QTD_MINIM, :QTD_INICIO, :QTD_RESERV, :QTD_POSVEN, :U" +
                "LT_COMPRA, :PESO, :IPI, :CF, :IAT, :IPPT, :COD_NCM, :ID_NIVEL1, :ID_NIVEL2, :MVA" +
                ", :CST_IPI, :FOTO, :CSOSN, :ANP, :EXTIPI, :CST, :FCI, :COD_CEST, :CENQ, :VLR_IPI" +
                ", :CST_CFE, :CSOSN_CFE, :CONTROLA_LOTE_VENDA, :BAIXA_LOTE_NFV, :BAIXA_LOTE_PDV, " +
                ":TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;\';\r\n\terro = \'sproc estproduto sync up" +
                "sert\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_ESTPROD_UPSERT (pID" +
                "_IDENTIFICADOR INTEGER, pDESC_CMPL VARCHAR(30), pCOD_BARRA VARCHAR(18), pREFEREN" +
                "CIA VARCHAR(18), pPRC_MEDIO TYPE OF COLUMN TRI_PDV_OPER.DIN, pQTD_COMPRA TYPE OF" +
                " COLUMN TRI_PDV_OPER.DIN, pQTD_ATUAL TYPE OF COLUMN TRI_PDV_OPER.DIN, pQTD_MINIM" +
                " TYPE OF COLUMN TRI_PDV_OPER.DIN, pQTD_INICIO TYPE OF COLUMN TRI_PDV_OPER.DIN, p" +
                "QTD_RESERV TYPE OF COLUMN TRI_PDV_OPER.DIN, pQTD_POSVEN TYPE OF COLUMN TRI_PDV_O" +
                "PER.DIN, pULT_COMPRA DATE, pPESO TYPE OF COLUMN TRI_PDV_OPER.DIN, pIPI TYPE OF C" +
                "OLUMN TRI_PDV_OPER.DIN, pCF VARCHAR(13), pIAT CHAR(1), pIPPT CHAR(1), pCOD_NCM V" +
                "ARCHAR(8), pID_NIVEL1 SMALLINT, pID_NIVEL2 SMALLINT, pMVA TYPE OF COLUMN TRI_PDV" +
                "_OPER.DIN, pCST_IPI VARCHAR(3), pFOTO BLOB SUB_TYPE 0, pCSOSN VARCHAR(3), pANP I" +
                "NTEGER, pEXTIPI SMALLINT, pCST VARCHAR(3), pFCI VARCHAR(36), pCOD_CEST VARCHAR(7" +
                "), pCENQ VARCHAR(3), pVLR_IPI TYPE OF COLUMN TRI_PDV_OPER.DIN, pCST_CFE VARCHAR(" +
                "3), pCSOSN_CFE VARCHAR(3), pCONTROLA_LOTE_VENDA CHAR(1), pBAIXA_LOTE_NFV CHAR(1)" +
                ", pBAIXA_LOTE_PDV CHAR(1), pTRI_PDV_DT_UPD TIMESTAMP) RETURNS (rRowsAffected INT" +
                "EGER) AS DECLARE vCount INTEGER; BEGIN SELECT COUNT(1) FROM TB_EST_IDENTIFICADOR" +
                " WHERE ID_IDENTIFICADOR = :pID_IDENTIFICADOR INTO :vCount ; IF (:vCount = 0) THE" +
                "N BEGIN rRowsAffected = 0; SUSPEND; END UPDATE OR INSERT INTO TB_EST_PRODUTO (ID" +
                "_IDENTIFICADOR, DESC_CMPL, COD_BARRA, REFERENCIA, PRC_MEDIO, QTD_COMPRA, QTD_ATU" +
                "AL, QTD_MINIM, QTD_INICIO, QTD_RESERV, QTD_POSVEN, ULT_COMPRA, PESO, IPI, CF, IA" +
                "T, IPPT, COD_NCM, ID_NIVEL1, ID_NIVEL2, MVA, CST_IPI, FOTO, CSOSN, ANP, EXTIPI, " +
                "CST, FCI, COD_CEST, CENQ, VLR_IPI, CST_CFE, CSOSN_CFE, CONTROLA_LOTE_VENDA, BAIX" +
                "A_LOTE_NFV, BAIXA_LOTE_PDV, TRI_PDV_DT_UPD) VALUES (:pID_IDENTIFICADOR, :pDESC_C" +
                "MPL, :pCOD_BARRA, :pREFERENCIA, :pPRC_MEDIO, :pQTD_COMPRA, :pQTD_ATUAL, :pQTD_MI" +
                "NIM, :pQTD_INICIO, :pQTD_RESERV, :pQTD_POSVEN, :pULT_COMPRA, :pPESO, :pIPI, :pCF" +
                ", :pIAT, :pIPPT, :pCOD_NCM, :pID_NIVEL1, :pID_NIVEL2, :pMVA, :pCST_IPI, :pFOTO, " +
                ":pCSOSN, :pANP, :pEXTIPI, :pCST, :pFCI, :pCOD_CEST, :pCENQ, :pVLR_IPI, :pCST_CFE" +
                ", :pCSOSN_CFE, :pCONTROLA_LOTE_VENDA, :pBAIXA_LOTE_NFV, :pBAIXA_LOTE_PDV, :pTRI_" +
                "PDV_DT_UPD) MATCHING (ID_IDENTIFICADOR) ; rRowsAffected = ROW_COUNT; END;\';\r\n\t\r\n" +
                "\terro = \'sproc estidentif get by dt upd\';\r\n\texecute statement \'CREATE OR ALTER P" +
                "ROCEDURE SP_TRI_ESTIDENTIF_GETBY_DTUPD (pUltimaSync TIMESTAMP) RETURNS (ID_IDENT" +
                "IFICADOR INTEGER, ID_ESTOQUE INTEGER, CHAVE VARCHAR(32), TRI_PDV_DT_UPD TIMESTAM" +
                "P) AS BEGIN FOR SELECT A.ID_IDENTIFICADOR, A.ID_ESTOQUE, A.CHAVE, A.TRI_PDV_DT_U" +
                "PD FROM TB_EST_IDENTIFICADOR A JOIN TB_ESTOQUE B ON B.ID_ESTOQUE = A.ID_ESTOQUE " +
                "WHERE A.TRI_PDV_DT_UPD > :pUltimaSync OR B.TRI_PDV_DT_UPD > :pUltimaSync INTO :I" +
                "D_IDENTIFICADOR, :ID_ESTOQUE, :CHAVE, :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END" +
                ";\';\r\n\terro = \'sproc estidentif sync upsert\';\r\n\texecute statement \'CREATE OR ALTE" +
                "R PROCEDURE SP_TRI_ESTIDENTIF_UPSERT (pID_IDENTIFICADOR INTEGER, pID_ESTOQUE INT" +
                "EGER, pCHAVE VARCHAR(32), pTRI_PDV_DT_UPD TIMESTAMP) RETURNS (rRowsAffected INTE" +
                "GER) AS DECLARE vCount INTEGER; BEGIN SELECT COUNT(1) FROM TB_ESTOQUE WHERE ID_E" +
                "STOQUE = :pID_ESTOQUE INTO :vCount ; IF (:vCount = 0) THEN BEGIN rRowsAffected =" +
                " 0; SUSPEND; END UPDATE OR INSERT INTO TB_EST_IDENTIFICADOR (ID_IDENTIFICADOR, I" +
                "D_ESTOQUE, CHAVE, TRI_PDV_DT_UPD) VALUES (:pID_IDENTIFICADOR, :pID_ESTOQUE, :pCH" +
                "AVE, :pTRI_PDV_DT_UPD) MATCHING (ID_IDENTIFICADOR, ID_ESTOQUE) ; rRowsAffected =" +
                " ROW_COUNT; END;\';\r\n\t\r\n\terro = \'sproc cliente sync upsert\';\r\n\texecute statement " +
                "\'CREATE OR ALTER PROCEDURE SP_TRI_CLIENTE_UPSERT (pID_CLIENTE INTEGER, pID_CONVE" +
                "NIO SMALLINT, pDT_CADASTRO DATE, pNOME VARCHAR(60), pEND_CEP CHAR(9), pEND_TIPO " +
                "VARCHAR(15), pEND_NUMERO VARCHAR(5), pEND_LOGRAD VARCHAR(40), pEND_BAIRRO VARCHA" +
                "R(35), pEND_COMPLE VARCHAR(15), pDT_PRICOMP DATE, pDT_ULTCOMP DATE, pCONTATO VAR" +
                "CHAR(35), pSTATUS CHAR(1), pLIMITE TYPE OF COLUMN TB_CLIENTE.LIMITE, pDDD_RESID " +
                "CHAR(2), pFONE_RESID VARCHAR(13), pDDD_COMER CHAR(2), pFONE_COMER VARCHAR(13), p" +
                "DDD_CELUL CHAR(2), pFONE_CELUL VARCHAR(13), pDDD_FAX CHAR(2), pFONE_FAX VARCHAR(" +
                "13), pEMAIL_CONT VARCHAR(50), pEMAIL_NFE VARCHAR(50), pID_CIDADE CHAR(7), pID_TI" +
                "PO SMALLINT, pID_FUNCIONARIO SMALLINT, pID_PAIS CHAR(4), pMENSAGEM VARCHAR(100)," +
                " pID_RAMO SMALLINT, pEMAIL_ADIC VARCHAR(50), pOBSERVACAO BLOB SUB_TYPE 1, pDT_ME" +
                "LHOR_VENCTO SMALLINT, pTRI_PDV_DT_UPD TIMESTAMP) RETURNS (rRowsAffected INTEGER)" +
                " AS BEGIN UPDATE OR INSERT INTO TB_CLIENTE (ID_CLIENTE, ID_CONVENIO, DT_CADASTRO" +
                ", NOME, END_CEP, END_TIPO, END_NUMERO, END_LOGRAD, END_BAIRRO, END_COMPLE, DT_PR" +
                "ICOMP, DT_ULTCOMP, CONTATO, STATUS, LIMITE, DDD_RESID, FONE_RESID, DDD_COMER, FO" +
                "NE_COMER, DDD_CELUL, FONE_CELUL, DDD_FAX, FONE_FAX, EMAIL_CONT, EMAIL_NFE, ID_CI" +
                "DADE, ID_TIPO, ID_FUNCIONARIO, ID_PAIS, MENSAGEM, ID_RAMO, EMAIL_ADIC, OBSERVACA" +
                "O, DT_MELHOR_VENCTO, TRI_PDV_DT_UPD) VALUES (:pID_CLIENTE, :pID_CONVENIO, :pDT_C" +
                "ADASTRO, :pNOME, :pEND_CEP, :pEND_TIPO, :pEND_NUMERO, :pEND_LOGRAD, :pEND_BAIRRO" +
                ", :pEND_COMPLE, :pDT_PRICOMP, :pDT_ULTCOMP, :pCONTATO, :pSTATUS, :pLIMITE, :pDDD" +
                "_RESID, :pFONE_RESID, :pDDD_COMER, :pFONE_COMER, :pDDD_CELUL, :pFONE_CELUL, :pDD" +
                "D_FAX, :pFONE_FAX, :pEMAIL_CONT, :pEMAIL_NFE, :pID_CIDADE, :pID_TIPO, :pID_FUNCI" +
                "ONARIO, :pID_PAIS, :pMENSAGEM, :pID_RAMO, :pEMAIL_ADIC, :pOBSERVACAO, :pDT_MELHO" +
                "R_VENCTO, :pTRI_PDV_DT_UPD) MATCHING (ID_CLIENTE); rRowsAffected = ROW_COUNT; EN" +
                "D;\';\r\n\t\r\n\terro = \'sproc taxauf get by dt upd\';\r\n\texecute statement \'CREATE OR AL" +
                "TER PROCEDURE SP_TRI_TAXAUF_GETBY_DTUPD (pUltimaSync TIMESTAMP) RETURNS (ID_CTI " +
                "CHAR(3), DESCRICAO VARCHAR(40), BASE_ICMS TYPE OF COLUMN TRI_PDV_OPER.DIN, BASE_" +
                "ICMSFE TYPE OF COLUMN TRI_PDV_OPER.DIN, BASE_ICMS_ST TYPE OF COLUMN TRI_PDV_OPER" +
                ".DIN, UF_AC TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_AL TYPE OF COLUMN TRI_PDV_OPER.D" +
                "IN, UF_AM TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_AP TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", UF_BA TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_CE TYPE OF COLUMN TRI_PDV_OPER.DIN, " +
                "UF_DF TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_ES TYPE OF COLUMN TRI_PDV_OPER.DIN, UF" +
                "_GO TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_MA TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_M" +
                "G TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_MS TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_MT " +
                "TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_PA TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_PB TY" +
                "PE OF COLUMN TRI_PDV_OPER.DIN, UF_PE TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_PI TYPE" +
                " OF COLUMN TRI_PDV_OPER.DIN, UF_PR TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_RJ TYPE O" +
                "F COLUMN TRI_PDV_OPER.DIN, UF_RN TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_RO TYPE OF " +
                "COLUMN TRI_PDV_OPER.DIN, UF_RR TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_RS TYPE OF CO" +
                "LUMN TRI_PDV_OPER.DIN, UF_SC TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_SE TYPE OF COLU" +
                "MN TRI_PDV_OPER.DIN, UF_SP TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_TO TYPE OF COLUMN" +
                " TRI_PDV_OPER.DIN, BASE_ISS TYPE OF COLUMN TRI_PDV_OPER.DIN, ISS TYPE OF COLUMN " +
                "TRI_PDV_OPER.DIN, POR_DIF TYPE OF COLUMN TRI_PDV_OPER.DIN, TRI_PDV_DT_UPD TIMEST" +
                "AMP) AS BEGIN FOR SELECT ID_CTI, DESCRICAO, BASE_ICMS, BASE_ICMSFE, BASE_ICMS_ST" +
                ", UF_AC, UF_AL, UF_AM, UF_AP, UF_BA, UF_CE, UF_DF, UF_ES, UF_GO, UF_MA, UF_MG, U" +
                "F_MS, UF_MT, UF_PA, UF_PB, UF_PE, UF_PI, UF_PR, UF_RJ, UF_RN, UF_RO, UF_RR, UF_R" +
                "S, UF_SC, UF_SE, UF_SP, UF_TO, BASE_ISS, ISS, POR_DIF, TRI_PDV_DT_UPD FROM TB_TA" +
                "XA_UF WHERE TRI_PDV_DT_UPD > :pUltimaSync INTO :ID_CTI, :DESCRICAO, :BASE_ICMS, " +
                ":BASE_ICMSFE, :BASE_ICMS_ST, :UF_AC, :UF_AL, :UF_AM, :UF_AP, :UF_BA, :UF_CE, :UF" +
                "_DF, :UF_ES, :UF_GO, :UF_MA, :UF_MG, :UF_MS, :UF_MT, :UF_PA, :UF_PB, :UF_PE, :UF" +
                "_PI, :UF_PR, :UF_RJ, :UF_RN, :UF_RO, :UF_RR, :UF_RS, :UF_SC, :UF_SE, :UF_SP, :UF" +
                "_TO, :BASE_ISS, :ISS, :POR_DIF, :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;\';\r\n\t" +
                "erro = \'sproc taxauf sync upsert\';\r\n\texecute statement \'CREATE OR ALTER PROCEDUR" +
                "E SP_TRI_TAXAUF_UPSERT (pID_CTI CHAR(3), pDESCRICAO VARCHAR(40), pBASE_ICMS TYPE" +
                " OF COLUMN TRI_PDV_OPER.DIN, pBASE_ICMSFE TYPE OF COLUMN TRI_PDV_OPER.DIN, pBASE" +
                "_ICMS_ST TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_AC TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", pUF_AL TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_AM TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", pUF_AP TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_BA TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", pUF_CE TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_DF TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", pUF_ES TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_GO TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", pUF_MA TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_MG TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", pUF_MS TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_MT TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", pUF_PA TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_PB TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", pUF_PE TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_PI TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", pUF_PR TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_RJ TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", pUF_RN TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_RO TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", pUF_RR TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_RS TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", pUF_SC TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_SE TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", pUF_SP TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_TO TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", pBASE_ISS TYPE OF COLUMN TRI_PDV_OPER.DIN, pISS TYPE OF COLUMN TRI_PDV_OPER.DI" +
                "N, pPOR_DIF TYPE OF COLUMN TRI_PDV_OPER.DIN, pTRI_PDV_DT_UPD TIMESTAMP) RETURNS " +
                "(rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO TB_TAXA_UF (ID_CTI, DESCR" +
                "ICAO, BASE_ICMS, BASE_ICMSFE, BASE_ICMS_ST, UF_AC, UF_AL, UF_AM, UF_AP, UF_BA, U" +
                "F_CE, UF_DF, UF_ES, UF_GO, UF_MA, UF_MG, UF_MS, UF_MT, UF_PA, UF_PB, UF_PE, UF_P" +
                "I, UF_PR, UF_RJ, UF_RN, UF_RO, UF_RR, UF_RS, UF_SC, UF_SE, UF_SP, UF_TO, BASE_IS" +
                "S, ISS, POR_DIF, TRI_PDV_DT_UPD) VALUES (:pID_CTI, :pDESCRICAO, :pBASE_ICMS, :pB" +
                "ASE_ICMSFE, :pBASE_ICMS_ST, :pUF_AC, :pUF_AL, :pUF_AM, :pUF_AP, :pUF_BA, :pUF_CE" +
                ", :pUF_DF, :pUF_ES, :pUF_GO, :pUF_MA, :pUF_MG, :pUF_MS, :pUF_MT, :pUF_PA, :pUF_P" +
                "B, :pUF_PE, :pUF_PI, :pUF_PR, :pUF_RJ, :pUF_RN, :pUF_RO, :pUF_RR, :pUF_RS, :pUF_" +
                "SC, :pUF_SE, :pUF_SP, :pUF_TO, :pBASE_ISS, :pISS, :pPOR_DIF, :pTRI_PDV_DT_UPD) M" +
                "ATCHING (ID_CTI) ; rRowsAffected = ROW_COUNT; END;\';\r\n\t\r\n\terro = \'sproc oper get" +
                " by dt upd\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_OPER_GETBY_DT" +
                "UPD_NCAIX (pUltimaSync TIMESTAMP, pNoCaixa INTEGER) RETURNS (ID_CAIXA INTEGER, C" +
                "URRENTTIME TIMESTAMP, ABERTO VARCHAR(1), HASH VARCHAR(32), FECHADO TIMESTAMP, ID" +
                "_OPER INTEGER, ID_USER INTEGER, TRI_PDV_DT_UPD TIMESTAMP, DIN TYPE OF COLUMN TRI" +
                "_PDV_OPER.DIN, CHEQUE TYPE OF COLUMN TRI_PDV_OPER.DIN, CREDITO TYPE OF COLUMN TR" +
                "I_PDV_OPER.DIN, DEBITO TYPE OF COLUMN TRI_PDV_OPER.DIN, LOJA TYPE OF COLUMN TRI_" +
                "PDV_OPER.DIN, ALIMENTACAO TYPE OF COLUMN TRI_PDV_OPER.DIN, REFEICAO TYPE OF COLU" +
                "MN TRI_PDV_OPER.DIN, PRESENTE TYPE OF COLUMN TRI_PDV_OPER.DIN, COMBUSTIVEL TYPE " +
                "OF COLUMN TRI_PDV_OPER.DIN, OUTROS TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_1 TYPE" +
                " OF COLUMN TRI_PDV_OPER.DIN, EXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_3 TY" +
                "PE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_5 " +
                "TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_" +
                "7 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTR" +
                "A_9 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.DIN, S" +
                "ANGRIAS TYPE OF COLUMN TRI_PDV_OPER.DIN, SUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER" +
                ".DIN, TROCAS TYPE OF COLUMN TRI_PDV_OPER.DIN) AS BEGIN FOR SELECT ID_CAIXA, CURR" +
                "ENTTIME, ABERTO, HASH, FECHADO, ID_OPER, ID_USER, TRI_PDV_DT_UPD, DIN, CHEQUE, C" +
                "REDITO, DEBITO, LOJA, ALIMENTACAO, REFEICAO, PRESENTE, COMBUSTIVEL, OUTROS, EXTR" +
                "A_1, EXTRA_2, EXTRA_3, EXTRA_4, EXTRA_5, EXTRA_6, EXTRA_7, EXTRA_8, EXTRA_9, EXT" +
                "RA_10, SANGRIAS, SUPRIMENTOS, TROCAS FROM TRI_PDV_OPER WHERE TRI_PDV_DT_UPD > :p" +
                "UltimaSync AND ID_CAIXA = :pNoCaixa INTO :ID_CAIXA, :CURRENTTIME, :ABERTO, :HASH" +
                ", :FECHADO, :ID_OPER, :ID_USER, :TRI_PDV_DT_UPD, :DIN, :CHEQUE, :CREDITO, :DEBIT" +
                "O, :LOJA, :ALIMENTACAO, :REFEICAO, :PRESENTE, :COMBUSTIVEL, :OUTROS, :EXTRA_1, :" +
                "EXTRA_2, :EXTRA_3, :EXTRA_4, :EXTRA_5, :EXTRA_6, :EXTRA_7, :EXTRA_8, :EXTRA_9, :" +
                "EXTRA_10, :SANGRIAS, :SUPRIMENTOS, :TROCAS DO BEGIN SUSPEND ; END END;\';\r\n\terro " +
                "= \'sproc oper sync upsert\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE SP_TR" +
                "I_OPER_UPSERT (pID_CAIXA INTEGER, pDIN TYPE OF COLUMN TRI_PDV_OPER.DIN, pCHEQUE " +
                "TYPE OF COLUMN TRI_PDV_OPER.DIN, pCREDITO TYPE OF COLUMN TRI_PDV_OPER.DIN, pDEBI" +
                "TO TYPE OF COLUMN TRI_PDV_OPER.DIN, pLOJA TYPE OF COLUMN TRI_PDV_OPER.DIN, pALIM" +
                "ENTACAO TYPE OF COLUMN TRI_PDV_OPER.DIN, pREFEICAO TYPE OF COLUMN TRI_PDV_OPER.D" +
                "IN, pPRESENTE TYPE OF COLUMN TRI_PDV_OPER.DIN, pCOMBUSTIVEL TYPE OF COLUMN TRI_P" +
                "DV_OPER.DIN, pOUTROS TYPE OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_1 TYPE OF COLUMN TR" +
                "I_PDV_OPER.DIN, pEXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_3 TYPE OF COLUM" +
                "N TRI_PDV_OPER.DIN, pEXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_5 TYPE OF C" +
                "OLUMN TRI_PDV_OPER.DIN, pEXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_7 TYPE " +
                "OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_9 T" +
                "YPE OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.DIN, pCURR" +
                "ENTTIME TIMESTAMP, pABERTO VARCHAR(1), pHASH VARCHAR(32), pSANGRIAS TYPE OF COLU" +
                "MN TRI_PDV_OPER.DIN, pSUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.DIN, pTROCAS TYPE " +
                "OF COLUMN TRI_PDV_OPER.DIN, pFECHADO TIMESTAMP, pID_OPER INTEGER, pID_USER INTEG" +
                "ER, pTRI_PDV_DT_UPD TIMESTAMP) AS BEGIN UPDATE OR INSERT INTO TRI_PDV_OPER (ID_C" +
                "AIXA, DIN, CHEQUE, CREDITO, DEBITO, LOJA, ALIMENTACAO, REFEICAO, PRESENTE, COMBU" +
                "STIVEL, OUTROS, EXTRA_1, EXTRA_2, EXTRA_3, EXTRA_4, EXTRA_5, EXTRA_6, EXTRA_7, E" +
                "XTRA_8, EXTRA_9, EXTRA_10, CURRENTTIME, ABERTO, HASH, SANGRIAS, SUPRIMENTOS, TRO" +
                "CAS, FECHADO, ID_OPER, ID_USER, TRI_PDV_DT_UPD) VALUES (:pID_CAIXA, :pDIN, :pCHE" +
                "QUE, :pCREDITO, :pDEBITO, :pLOJA, :pALIMENTACAO, :pREFEICAO, :pPRESENTE, :pCOMBU" +
                "STIVEL, :pOUTROS, :pEXTRA_1, :pEXTRA_2, :pEXTRA_3, :pEXTRA_4, :pEXTRA_5, :pEXTRA" +
                "_6, :pEXTRA_7, :pEXTRA_8, :pEXTRA_9, :pEXTRA_10, :pCURRENTTIME, :pABERTO, :pHASH" +
                ", :pSANGRIAS, :pSUPRIMENTOS, :pTROCAS, :pFECHADO, :pID_OPER, :pID_USER, :pTRI_PD" +
                "V_DT_UPD) MATCHING (ID_OPER) ; END;\';\r\n\t\r\n\terro = \'sproc config get by dt upd\';\r" +
                "\n\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_CONFIG_GETBY_DTUPD_NCAI (p" +
                "UltimaSync TIMESTAMP, pNoCaixa INTEGER) RETURNS (ID_MAC VARCHAR(12), NO_CAIXA SM" +
                "ALLINT, EXIGE_SANGRIA CHAR(1), VALOR_MAX_CAIXA TYPE OF COLUMN TRI_PDV_OPER.DIN, " +
                "BLOQUEIA_NO_LIMITE CHAR(1), VALOR_DE_FOLGA TYPE OF COLUMN TRI_PDV_OPER.DIN, PERM" +
                "ITE_FOLGA_SANGRIA CHAR(1), INTERROMPE_NAO_ENCONTRADO CHAR(1), MENSAGEM_CORTESIA " +
                "VARCHAR(100), ICMS_CONT FLOAT, CSOSN_CONT FLOAT, PEDE_CPF INTEGER, PERMITE_ESTOQ" +
                "UE_NEGATIVO INTEGER, MODELO_CUPOM SMALLINT, MENSAGEM_RODAPE VARCHAR(100), TRI_PD" +
                "V_DT_UPD TIMESTAMP) AS BEGIN FOR SELECT ID_MAC, NO_CAIXA, EXIGE_SANGRIA, VALOR_M" +
                "AX_CAIXA, BLOQUEIA_NO_LIMITE, VALOR_DE_FOLGA, PERMITE_FOLGA_SANGRIA, INTERROMPE_" +
                "NAO_ENCONTRADO, MENSAGEM_CORTESIA, ICMS_CONT, CSOSN_CONT, PEDE_CPF, PERMITE_ESTO" +
                "QUE_NEGATIVO, MODELO_CUPOM, MENSAGEM_RODAPE, TRI_PDV_DT_UPD FROM TRI_PDV_CONFIG " +
                "WHERE TRI_PDV_DT_UPD > :pUltimaSync AND NO_CAIXA = CAST(:pNoCaixa AS SMALLINT) I" +
                "NTO :ID_MAC, :NO_CAIXA, :EXIGE_SANGRIA, :VALOR_MAX_CAIXA, :BLOQUEIA_NO_LIMITE, :" +
                "VALOR_DE_FOLGA, :PERMITE_FOLGA_SANGRIA, :INTERROMPE_NAO_ENCONTRADO, :MENSAGEM_CO" +
                "RTESIA, :ICMS_CONT, :CSOSN_CONT, :PEDE_CPF, :PERMITE_ESTOQUE_NEGATIVO, :MODELO_C" +
                "UPOM, :MENSAGEM_RODAPE, :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;\';\r\n\r\n\t\t\t\t\t\te" +
                "rro = \'sproc SP_TRI_CONFIG_UPSERT\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR ALTER PR" +
                "OCEDURE SP_TRI_CONFIG_UPSERT (PID_MAC VARCHAR(12), PNO_CAIXA SMALLINT, PEXIGE_SA" +
                "NGRIA CHAR(1), PVALOR_MAX_CAIXA DOUBLE PRECISION, PBLOQUEIA_NO_LIMITE CHAR(1), P" +
                "VALOR_DE_FOLGA DOUBLE PRECISION, PPERMITE_FOLGA_SANGRIA CHAR(1), PINTERROMPE_NAO" +
                "_ENCONTRADO CHAR(1), PMENSAGEM_CORTESIA VARCHAR(100), PICMS_CONT FLOAT, PCSOSN_C" +
                "ONT FLOAT, PPEDE_CPF INTEGER, PPERMITE_ESTOQUE_NEGATIVO INTEGER, PMODELO_CUPOM S" +
                "MALLINT, PMENSAGEM_RODAPE VARCHAR(100), PTRI_PDV_DT_UPD TIMESTAMP, PMODELO_SAT I" +
                "NTEGER, PSATSERVIDOR CHAR(1), PSAT_CODATIV VARCHAR(64), PSIGN_AC BLOB SUB_TYPE T" +
                "EXT, PSAT_USADO CHAR(1), PECF_ATIVA CHAR(1), PECF_PORTA VARCHAR(5), PIMPRESSORA_" +
                "USB VARCHAR(64), PIMPRESSORA_USB_PED VARCHAR(64), PPERGUNTA_WHATS INTEGER, PUSAT" +
                "EF CHAR(1), PTEFIP VARCHAR(15), PTEFNUMLOJA VARCHAR(8), PTEFNUMTERMINAL VARCHAR(" +
                "8), PTEFPEDECPFPELOPINPAD CHAR(1), PBALPORTA SMALLINT, PBALBITS SMALLINT, PBALBA" +
                "UD INTEGER, PBALPARITY SMALLINT, PBALMODELO SMALLINT, PACFILLPREFIX SMALLINT, PA" +
                "CFILLMODE SMALLINT, PACREFERENCIA SMALLINT, PSYSCOMISSAO SMALLINT, PSATSERVTIMEO" +
                "UT INTEGER, PSATLIFESIGNINTERVAL INTEGER, PACFILLDELAY INTEGER, PSYSPERGUNTAWHAT" +
                "S SMALLINT, PSYSPARCELA SMALLINT, PSYSEMITECOMPROVANTE SMALLINT, PINFORMA_MAQUIN" +
                "INHA CHAR(1), PLAYOUT_SAT VARCHAR(4), PVINCULA_MAQ_CTA CHAR(1)) RETURNS ( RROWSA" +
                "FFECTED INTEGER ) AS BEGIN UPDATE OR INSERT INTO TRI_PDV_CONFIG (ID_MAC, NO_CAIX" +
                "A, EXIGE_SANGRIA, VALOR_MAX_CAIXA, BLOQUEIA_NO_LIMITE, VALOR_DE_FOLGA, PERMITE_F" +
                "OLGA_SANGRIA, INTERROMPE_NAO_ENCONTRADO, MENSAGEM_CORTESIA, ICMS_CONT, CSOSN_CON" +
                "T, PEDE_CPF, PERMITE_ESTOQUE_NEGATIVO, MODELO_CUPOM, MENSAGEM_RODAPE, TRI_PDV_DT" +
                "_UPD, MODELO_SAT, SATSERVIDOR, SAT_CODATIV, SIGN_AC, SAT_USADO, ECF_ATIVA, ECF_P" +
                "ORTA, IMPRESSORA_USB, IMPRESSORA_USB_PED, PERGUNTA_WHATS, USATEF, TEFIP, TEFNUML" +
                "OJA, TEFNUMTERMINAL, TEFPEDECPFPELOPINPAD, BALPORTA, BALBITS, BALBAUD, BALPARITY" +
                ", BALMODELO, ACFILLPREFIX, ACFILLMODE, ACREFERENCIA, SYSCOMISSAO, SATSERVTIMEOUT" +
                ", SATLIFESIGNINTERVAL, ACFILLDELAY, SYSPERGUNTAWHATS, SYSPARCELA, SYSEMITECOMPRO" +
                "VANTE, INFORMA_MAQUININHA, LAYOUT_SAT, VINCULA_MAQ_CTA) VALUES (:pID_MAC, :pNO_C" +
                "AIXA, :pEXIGE_SANGRIA, :pVALOR_MAX_CAIXA, :pBLOQUEIA_NO_LIMITE, :pVALOR_DE_FOLGA" +
                ", :pPERMITE_FOLGA_SANGRIA, :pINTERROMPE_NAO_ENCONTRADO, :pMENSAGEM_CORTESIA, :pI" +
                "CMS_CONT, :pCSOSN_CONT, :pPEDE_CPF, :pPERMITE_ESTOQUE_NEGATIVO, :pMODELO_CUPOM, " +
                ":pMENSAGEM_RODAPE, :pTRI_PDV_DT_UPD, :pMODELO_SAT, :pSATSERVIDOR, :pSAT_CODATIV," +
                " :pSIGN_AC, :pSAT_USADO, :pECF_ATIVA, :pECF_PORTA, :pIMPRESSORA_USB, :pIMPRESSOR" +
                "A_USB_PED, :pPERGUNTA_WHATS, :pUSATEF, :pTEFIP, :pTEFNUMLOJA, :pTEFNUMTERMINAL, " +
                ":pTEFPEDECPFPELOPINPAD, :pBALPORTA, :pBALBITS, :pBALBAUD, :pBALPARITY, :pBALMODE" +
                "LO, :pACFILLPREFIX, :pACFILLMODE, :pACREFERENCIA, :pSYSCOMISSAO, :pSATSERVTIMEOU" +
                "T, :pSATLIFESIGNINTERVAL, :pACFILLDELAY, :pSYSPERGUNTAWHATS, :pSYSPARCELA, :pSYS" +
                "EMITECOMPROVANTE, :pINFORMA_MAQUININHA, :pLAYOUT_SAT, :pVINCULA_MAQ_CTA) MATCHIN" +
                "G (ID_MAC); rRowsAffected = ROW_COUNT; SUSPEND; END;\';\r\n\r\n\t\t\t\t\t\terro = \'sproc cf" +
                "opsis get by dt upd\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI" +
                "_CFOPSIS_GETBY_DTUPD (pUltimaSync TIMESTAMP) RETURNS (CFOP VARCHAR(4), DESCRICAO" +
                " VARCHAR(330), RESUMO VARCHAR(60), OBSERVACAO VARCHAR(50), EST_BX CHAR(1), EST_B" +
                "X_AMBOS CHAR(1), DEV_RET CHAR(1), TRI_PDV_DT_UPD TIMESTAMP) AS BEGIN FOR SELECT " +
                "CFOP, DESCRICAO, RESUMO, OBSERVACAO, EST_BX, EST_BX_AMBOS, DEV_RET, TRI_PDV_DT_U" +
                "PD FROM TB_CFOP_SIS WHERE TRI_PDV_DT_UPD > :pUltimaSync INTO :CFOP, :DESCRICAO, " +
                ":RESUMO, :OBSERVACAO, :EST_BX, :EST_BX_AMBOS, :DEV_RET, :TRI_PDV_DT_UPD DO BEGIN" +
                " SUSPEND ; END END;\';\r\n\terro = \'sproc cfopsis sync upsert\';\r\n\texecute statement " +
                "\'CREATE OR ALTER PROCEDURE SP_TRI_CFOPSIS_UPSERT (pCFOP VARCHAR(4), pDESCRICAO V" +
                "ARCHAR(330), pRESUMO VARCHAR(60), pOBSERVACAO VARCHAR(50), pEST_BX CHAR(1), pEST" +
                "_BX_AMBOS CHAR(1), pDEV_RET CHAR(1), pTRI_PDV_DT_UPD TIMESTAMP) RETURNS (rRowsAf" +
                "fected INTEGER) AS BEGIN UPDATE OR INSERT INTO TB_CFOP_SIS (CFOP, DESCRICAO, RES" +
                "UMO, OBSERVACAO, EST_BX, EST_BX_AMBOS, DEV_RET, TRI_PDV_DT_UPD) VALUES (:pCFOP, " +
                ":pDESCRICAO, :pRESUMO, :pOBSERVACAO, :pEST_BX, :pEST_BX_AMBOS, :pDEV_RET, :pTRI_" +
                "PDV_DT_UPD) MATCHING (CFOP) ; rRowsAffected = ROW_COUNT; END;\';\r\n\t\r\n\terro = \'spr" +
                "oc fornecedor get by dt upd\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE SP_" +
                "TRI_FORNEC_GETBY_DTUPD (pUltimaSync TIMESTAMP) RETURNS (ID_FORNEC INTEGER, NOME " +
                "VARCHAR(60), NOME_FANTA VARCHAR(40), CNPJ VARCHAR(18), INSC_ESTAD VARCHAR(16), I" +
                "NSC_MUNIC VARCHAR(16), END_CEP VARCHAR(9), END_TIPO VARCHAR(15), END_LOGRAD VARC" +
                "HAR(40), END_BAIRRO VARCHAR(35), END_NUMERO VARCHAR(5), END_COMPLE VARCHAR(15), " +
                "DDD_COMER CHAR(2), FONE_COMER VARCHAR(13), FONE_0800 VARCHAR(13), DDD_CELUL CHAR" +
                "(2), FONE_CELUL VARCHAR(13), DDD_FAX CHAR(2), FONE_FAX VARCHAR(13), EMAIL_CONT V" +
                "ARCHAR(50), EMAIL_NFE VARCHAR(50), SITE VARCHAR(50), STATUS VARCHAR(1), DT_PRICO" +
                "MP DATE, DT_ULTCOMP DATE, ID_CIDADE CHAR(7), LIMITE TYPE OF COLUMN TRI_PDV_OPER." +
                "DIN, ID_RAMO SMALLINT, ID_PAIS CHAR(4), OBSERVACAO BLOB SUB_TYPE 1, CONTATO VARC" +
                "HAR(35), TRI_PDV_DT_UPD TIMESTAMP) AS BEGIN FOR SELECT ID_FORNEC, NOME, NOME_FAN" +
                "TA, CNPJ, INSC_ESTAD, INSC_MUNIC, END_CEP, END_TIPO, END_LOGRAD, END_BAIRRO, END" +
                "_NUMERO, END_COMPLE, DDD_COMER, FONE_COMER, FONE_0800, DDD_CELUL, FONE_CELUL, DD" +
                "D_FAX, FONE_FAX, EMAIL_CONT, EMAIL_NFE, SITE, STATUS, DT_PRICOMP, DT_ULTCOMP, ID" +
                "_CIDADE, LIMITE, ID_RAMO, ID_PAIS, OBSERVACAO, CONTATO, TRI_PDV_DT_UPD FROM TB_F" +
                "ORNECEDOR WHERE TRI_PDV_DT_UPD > :pUltimaSync INTO :ID_FORNEC, :NOME, :NOME_FANT" +
                "A, :CNPJ, :INSC_ESTAD, :INSC_MUNIC, :END_CEP, :END_TIPO, :END_LOGRAD, :END_BAIRR" +
                "O, :END_NUMERO, :END_COMPLE, :DDD_COMER, :FONE_COMER, :FONE_0800, :DDD_CELUL, :F" +
                "ONE_CELUL, :DDD_FAX, :FONE_FAX, :EMAIL_CONT, :EMAIL_NFE, :SITE, :STATUS, :DT_PRI" +
                "COMP, :DT_ULTCOMP, :ID_CIDADE, :LIMITE, :ID_RAMO, :ID_PAIS, :OBSERVACAO, :CONTAT" +
                "O, :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;\';\r\n\terro = \'sproc fornecedor sync" +
                " upsert\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_FORNEC_UPSERT (p" +
                "ID_FORNEC INTEGER, pNOME VARCHAR(60), pNOME_FANTA VARCHAR(40), pCNPJ VARCHAR(18)" +
                ", pINSC_ESTAD VARCHAR(16), pINSC_MUNIC VARCHAR(16), pEND_CEP VARCHAR(9), pEND_TI" +
                "PO VARCHAR(15), pEND_LOGRAD VARCHAR(40), pEND_BAIRRO VARCHAR(35), pEND_NUMERO VA" +
                "RCHAR(5), pEND_COMPLE VARCHAR(15), pDDD_COMER CHAR(2), pFONE_COMER VARCHAR(13), " +
                "pFONE_0800 VARCHAR(13), pDDD_CELUL CHAR(2), pFONE_CELUL VARCHAR(13), pDDD_FAX CH" +
                "AR(2), pFONE_FAX VARCHAR(13), pEMAIL_CONT VARCHAR(50), pEMAIL_NFE VARCHAR(50), p" +
                "SITE VARCHAR(50), pSTATUS VARCHAR(1), pDT_PRICOMP DATE, pDT_ULTCOMP DATE, pID_CI" +
                "DADE CHAR(7), pLIMITE TYPE OF COLUMN TRI_PDV_OPER.DIN, pID_RAMO SMALLINT, pID_PA" +
                "IS CHAR(4), pOBSERVACAO BLOB SUB_TYPE 1, pCONTATO VARCHAR(35), pTRI_PDV_DT_UPD T" +
                "IMESTAMP) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO TB_FORN" +
                "ECEDOR (ID_FORNEC, NOME, NOME_FANTA, CNPJ, INSC_ESTAD, INSC_MUNIC, END_CEP, END_" +
                "TIPO, END_LOGRAD, END_BAIRRO, END_NUMERO, END_COMPLE, DDD_COMER, FONE_COMER, FON" +
                "E_0800, DDD_CELUL, FONE_CELUL, DDD_FAX, FONE_FAX, EMAIL_CONT, EMAIL_NFE, SITE, S" +
                "TATUS, DT_PRICOMP, DT_ULTCOMP, ID_CIDADE, LIMITE, ID_RAMO, ID_PAIS, OBSERVACAO, " +
                "CONTATO, TRI_PDV_DT_UPD) VALUES (:pID_FORNEC, :pNOME, :pNOME_FANTA, :pCNPJ, :pIN" +
                "SC_ESTAD, :pINSC_MUNIC, :pEND_CEP, :pEND_TIPO, :pEND_LOGRAD, :pEND_BAIRRO, :pEND" +
                "_NUMERO, :pEND_COMPLE, :pDDD_COMER, :pFONE_COMER, :pFONE_0800, :pDDD_CELUL, :pFO" +
                "NE_CELUL, :pDDD_FAX, :pFONE_FAX, :pEMAIL_CONT, :pEMAIL_NFE, :pSITE, :pSTATUS, :p" +
                "DT_PRICOMP, :pDT_ULTCOMP, :pID_CIDADE, :pLIMITE, :pID_RAMO, :pID_PAIS, :pOBSERVA" +
                "CAO, :pCONTATO, :pTRI_PDV_DT_UPD) MATCHING (ID_FORNEC); rRowsAffected = ROW_COUN" +
                "T; END;\';\r\n\t\r\n\terro = \'sproc ctarec set inv_referencia filthy rows\';\r\n\texecute s" +
                "tatement \'CREATE OR ALTER PROCEDURE SP_TRI_CTAREC_SET_INVREF_N AS BEGIN UPDATE T" +
                "B_CONTA_RECEBER a SET a.INV_REFERENCIA = (\'\'D\'\' || LPAD(CAST(a.ID_CTAREC AS VARC" +
                "HAR(10)), 5, \'\'0\'\') || LPAD(a.DOCUMENTO, 12, \'\'0\'\')) WHERE a.INV_REFERENCIA IS n" +
                "ull ; END;\';\r\n\t\r\n\terro = \'sproc triusers get by dt upd\';\r\n\texecute statement \'CR" +
                "EATE OR ALTER PROCEDURE SP_TRI_TRIUSERS_GETBY_DTUPD (PULTIMASYNC TIMESTAMP) RETU" +
                "RNS (  ID_USER SMALLINT,  USERNAME VARCHAR(64),  PASSWORD VARCHAR(32),  GERENCIA" +
                " VARCHAR(8),  ATIVO VARCHAR(8),  TRI_PDV_DT_UPD TIMESTAMP,  PERMISSOES INTEGER )" +
                " AS BEGIN  FOR SELECT  ID_USER,  USERNAME,  \"PASSWORD\",  GERENCIA,  ATIVO,  TRI_" +
                "PDV_DT_UPD,  PERMISSOES FROM  TRI_PDV_USERS WHERE  TRI_PDV_DT_UPD > :pUltimaSync" +
                " INTO  :ID_USER,  :USERNAME,  :\"PASSWORD\",  :GERENCIA,  :ATIVO,  :TRI_PDV_DT_UPD" +
                ",   :PERMISSOES DO BEGIN SUSPEND ; END END;\';\r\n\terro = \'sproc triusers sync upse" +
                "rt\';\r\n\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_TRIUSERS_UPSERT (PID_" +
                "USER SMALLINT, PUSERNAME VARCHAR(64), PPASSWORD VARCHAR(32), PGERENCIA VARCHAR(8" +
                "), PATIVO VARCHAR(8), PTRI_PDV_DT_UPD TIMESTAMP, PPERMISSOES INTEGER) RETURNS ( " +
                " RROWSAFFECTED INTEGER ) AS BEGIN  UPDATE  OR INSERT  INTO  TRI_PDV_USERS (ID_US" +
                "ER,  USERNAME,  \"PASSWORD\",  GERENCIA,  ATIVO,  TRI_PDV_DT_UPD,  PERMISSOES) VAL" +
                "UES (:pID_USER, :pUSERNAME, :pPASSWORD, :pGERENCIA, :pATIVO, :pTRI_PDV_DT_UPD, :" +
                "pPERMISSOES) MATCHING (ID_USER) ;  rRowsAffected = ROW_COUNT; END;\';\r\n\t\r\n\terro =" +
                " \'sproc cliente get by dt upd\';\r\n\texecute STATEMENT \'CREATE OR ALTER PROCEDURE S" +
                "P_TRI_CLIENTE_GETBY_DTUPD (PULTIMASYNC TIMESTAMP) RETURNS (ID_CLIENTE TYPE OF CO" +
                "LUMN TB_CLIENTE.ID_CLIENTE, ID_CONVENIO TYPE OF COLUMN TB_CLIENTE.ID_CONVENIO, D" +
                "T_CADASTRO TYPE OF COLUMN TB_CLIENTE.DT_CADASTRO, NOME TYPE OF COLUMN TB_CLIENTE" +
                ".NOME, END_CEP TYPE OF COLUMN TB_CLIENTE.END_CEP, END_TIPO TYPE OF COLUMN TB_CLI" +
                "ENTE.END_TIPO, END_NUMERO TYPE OF COLUMN TB_CLIENTE.END_NUMERO, END_LOGRAD TYPE " +
                "OF COLUMN TB_CLIENTE.END_LOGRAD, END_BAIRRO TYPE OF COLUMN TB_CLIENTE.END_BAIRRO" +
                ", END_COMPLE TYPE OF COLUMN TB_CLIENTE.END_COMPLE, DT_PRICOMP TYPE OF COLUMN TB_" +
                "CLIENTE.DT_PRICOMP, DT_ULTCOMP TYPE OF COLUMN TB_CLIENTE.DT_ULTCOMP, CONTATO TYP" +
                "E OF COLUMN TB_CLIENTE.CONTATO, STATUS TYPE OF COLUMN TB_CLIENTE.STATUS, LIMITE " +
                "TYPE OF COLUMN TB_CLIENTE.LIMITE, DDD_RESID TYPE OF COLUMN TB_CLIENTE.DDD_RESID," +
                " FONE_RESID TYPE OF COLUMN TB_CLIENTE.FONE_RESID, DDD_COMER TYPE OF COLUMN TB_CL" +
                "IENTE.DDD_COMER, FONE_COMER TYPE OF COLUMN TB_CLIENTE.FONE_COMER, DDD_CELUL TYPE" +
                " OF COLUMN TB_CLIENTE.DDD_CELUL, FONE_CELUL TYPE OF COLUMN TB_CLIENTE.FONE_CELUL" +
                ", DDD_FAX TYPE OF COLUMN TB_CLIENTE.DDD_FAX, FONE_FAX TYPE OF COLUMN TB_CLIENTE." +
                "FONE_FAX, EMAIL_CONT TYPE OF COLUMN TB_CLIENTE.EMAIL_CONT, EMAIL_NFE TYPE OF COL" +
                "UMN TB_CLIENTE.EMAIL_NFE, ID_CIDADE TYPE OF COLUMN TB_CLIENTE.ID_CIDADE, ID_TIPO" +
                " TYPE OF COLUMN TB_CLIENTE.ID_TIPO, ID_FUNCIONARIO TYPE OF COLUMN TB_CLIENTE.ID_" +
                "FUNCIONARIO, ID_PAIS TYPE OF COLUMN TB_CLIENTE.ID_PAIS, MENSAGEM TYPE OF COLUMN " +
                "TB_CLIENTE.MENSAGEM, ID_RAMO TYPE OF COLUMN TB_CLIENTE.ID_RAMO, EMAIL_ADIC TYPE " +
                "OF COLUMN TB_CLIENTE.EMAIL_ADIC, OBSERVACAO TYPE OF COLUMN TB_CLIENTE.OBSERVACAO" +
                ", DT_MELHOR_VENCTO TYPE OF COLUMN TB_CLIENTE.DT_MELHOR_VENCTO, TRI_PDV_DT_UPD TY" +
                "PE OF COLUMN TB_CLIENTE.TRI_PDV_DT_UPD) AS BEGIN FOR SELECT ID_CLIENTE, ID_CONVE" +
                "NIO, DT_CADASTRO, NOME, END_CEP, END_TIPO, END_NUMERO, END_LOGRAD, END_BAIRRO, E" +
                "ND_COMPLE, DT_PRICOMP, DT_ULTCOMP, CONTATO, STATUS, LIMITE, DDD_RESID, FONE_RESI" +
                "D, DDD_COMER, FONE_COMER, DDD_CELUL, FONE_CELUL, DDD_FAX, FONE_FAX, EMAIL_CONT, " +
                "EMAIL_NFE, ID_CIDADE, ID_TIPO, ID_FUNCIONARIO, ID_PAIS, MENSAGEM, ID_RAMO, EMAIL" +
                "_ADIC, OBSERVACAO, DT_MELHOR_VENCTO, TRI_PDV_DT_UPD FROM TB_CLIENTE WHERE TRI_PD" +
                "V_DT_UPD > :pUltimaSync INTO :ID_CLIENTE, :ID_CONVENIO, :DT_CADASTRO, :NOME, :EN" +
                "D_CEP, :END_TIPO, :END_NUMERO, :END_LOGRAD, :END_BAIRRO, :END_COMPLE, :DT_PRICOM" +
                "P, :DT_ULTCOMP, :CONTATO, :STATUS, :LIMITE, :DDD_RESID, :FONE_RESID, :DDD_COMER," +
                " :FONE_COMER, :DDD_CELUL, :FONE_CELUL, :DDD_FAX, :FONE_FAX, :EMAIL_CONT, :EMAIL_" +
                "NFE, :ID_CIDADE, :ID_TIPO, :ID_FUNCIONARIO, :ID_PAIS, :MENSAGEM, :ID_RAMO, :EMAI" +
                "L_ADIC, :OBSERVACAO, :DT_MELHOR_VENCTO, :TRI_PDV_DT_UPD DO BEGIN SUSPEND; END EN" +
                "D\';\r\n\terro = \'deu certo\';\r\n\t\r\n\tSUSPEND;\r\n\tWHEN ANY DO\r\n\tBEGIN\t\t\r\n\tEND \r\nEND;";
            this._commandCollection[17].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[18] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[18].Connection = this.Connection;
            this._commandCollection[18].CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_PROCEDURES4\r\nRETURNS\r\n(\r\nerro VARCHAR(64)\r\n)\r\nAS" +
                "\r\nBEGIN\r\nerro = \'sproc setup set origem\';\r\nexecute statement \'CREATE OR ALTER PR" +
                "OCEDURE SP_TRI_SETUP_SET_ORIGEM (pORIGEM VARCHAR(8)) AS BEGIN UPDATE TRI_PDV_SET" +
                "UP a SET a.ORIGEM = :pORIGEM ; END;\';\r\n\r\nerro = \'sproc emitente get by dt upd\';\r" +
                "\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_EMITENTE_GETBY_DTUPD ( pUlt" +
                "imaSync TIMESTAMP ) RETURNS ( NOME VARCHAR(60) , NOME_FANTA VARCHAR(40) , CONTAT" +
                "O VARCHAR(35) , END_CEP CHAR(9) , END_TIPO VARCHAR(15) , END_LOGRAD VARCHAR(40) " +
                ", END_NUMERO VARCHAR(5) , END_COMPLE VARCHAR(15) , END_BAIRRO VARCHAR(35) , CNPJ" +
                " VARCHAR(18) , INSC_ESTAD VARCHAR(16) , INSC_MUNIC VARCHAR(16) , DDD_COMER CHAR(" +
                "2) , FONE_COMER VARCHAR(13) , DDD_FAX CHAR(2) , FONE_FAX VARCHAR(13) , DDD_CELUL" +
                " CHAR(2) , FONE_CELUL VARCHAR(13) , EMAIL_CONT VARCHAR(50) , SITE VARCHAR(50) , " +
                "CNAE VARCHAR(17) , SIMPLES CHAR(1) , ID_CIDADE CHAR(7) , ID_RAMO SMALLINT , DT_C" +
                "OMPRA DATE , LOGO BLOB SUB_TYPE 0 , IE_ST_AC VARCHAR(16) , IE_ST_AL VARCHAR(16) " +
                ", IE_ST_AM VARCHAR(16) , IE_ST_AP VARCHAR(16) , IE_ST_BA VARCHAR(16) , IE_ST_CE " +
                "VARCHAR(16) , IE_ST_DF VARCHAR(16) , IE_ST_ES VARCHAR(16) , IE_ST_GO VARCHAR(16)" +
                " , IE_ST_MA VARCHAR(16) , IE_ST_MG VARCHAR(16) , IE_ST_MS VARCHAR(16) , IE_ST_MT" +
                " VARCHAR(16) , IE_ST_PA VARCHAR(16) , IE_ST_PB VARCHAR(16) , IE_ST_PE VARCHAR(16" +
                ") , IE_ST_PI VARCHAR(16) , IE_ST_PR VARCHAR(16) , IE_ST_RJ VARCHAR(16) , IE_ST_R" +
                "N VARCHAR(16) , IE_ST_RO VARCHAR(16) , IE_ST_RR VARCHAR(16) , IE_ST_RS VARCHAR(1" +
                "6) , IE_ST_SC VARCHAR(16) , IE_ST_SE VARCHAR(16) , IE_ST_SP VARCHAR(16) , IE_ST_" +
                "TO VARCHAR(16) , TEXTO_COBRANCA BLOB SUB_TYPE 1 , TEXTO_COBRANCA_RODAPE BLOB SUB" +
                "_TYPE 1 , TEXTO_COBRANCA_ASSUNTO VARCHAR(150) , TRI_PDV_DT_UPD TIMESTAMP ) AS BE" +
                "GIN FOR SELECT NOME , NOME_FANTA , CONTATO , END_CEP , END_TIPO , END_LOGRAD , E" +
                "ND_NUMERO , END_COMPLE , END_BAIRRO , CNPJ , INSC_ESTAD , INSC_MUNIC , DDD_COMER" +
                " , FONE_COMER , DDD_FAX , FONE_FAX , DDD_CELUL , FONE_CELUL , EMAIL_CONT , SITE " +
                ", CNAE , SIMPLES , ID_CIDADE , ID_RAMO , DT_COMPRA , LOGO , IE_ST_AC , IE_ST_AL " +
                ", IE_ST_AM , IE_ST_AP , IE_ST_BA , IE_ST_CE , IE_ST_DF , IE_ST_ES , IE_ST_GO , I" +
                "E_ST_MA , IE_ST_MG , IE_ST_MS , IE_ST_MT , IE_ST_PA , IE_ST_PB , IE_ST_PE , IE_S" +
                "T_PI , IE_ST_PR , IE_ST_RJ , IE_ST_RN , IE_ST_RO , IE_ST_RR , IE_ST_RS , IE_ST_S" +
                "C , IE_ST_SE , IE_ST_SP , IE_ST_TO , TEXTO_COBRANCA , TEXTO_COBRANCA_RODAPE , TE" +
                "XTO_COBRANCA_ASSUNTO , TRI_PDV_DT_UPD FROM TB_EMITENTE WHERE TRI_PDV_DT_UPD > :p" +
                "UltimaSync INTO :NOME , :NOME_FANTA , :CONTATO , :END_CEP , :END_TIPO , :END_LOG" +
                "RAD , :END_NUMERO , :END_COMPLE , :END_BAIRRO , :CNPJ , :INSC_ESTAD , :INSC_MUNI" +
                "C , :DDD_COMER , :FONE_COMER , :DDD_FAX , :FONE_FAX , :DDD_CELUL , :FONE_CELUL ," +
                " :EMAIL_CONT , :SITE , :CNAE , :SIMPLES , :ID_CIDADE , :ID_RAMO , :DT_COMPRA , :" +
                "LOGO , :IE_ST_AC , :IE_ST_AL , :IE_ST_AM , :IE_ST_AP , :IE_ST_BA , :IE_ST_CE , :" +
                "IE_ST_DF , :IE_ST_ES , :IE_ST_GO , :IE_ST_MA , :IE_ST_MG , :IE_ST_MS , :IE_ST_MT" +
                " , :IE_ST_PA , :IE_ST_PB , :IE_ST_PE , :IE_ST_PI , :IE_ST_PR , :IE_ST_RJ , :IE_S" +
                "T_RN , :IE_ST_RO , :IE_ST_RR , :IE_ST_RS , :IE_ST_SC , :IE_ST_SE , :IE_ST_SP , :" +
                "IE_ST_TO , :TEXTO_COBRANCA , :TEXTO_COBRANCA_RODAPE , :TEXTO_COBRANCA_ASSUNTO , " +
                ":TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;\';\r\nerro = \'sproc emitente sync upser" +
                "t\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_EMITENTE_UPSERT ( pNOME" +
                " VARCHAR(60) , pNOME_FANTA VARCHAR(40) , pCONTATO VARCHAR(35) , pEND_CEP CHAR(9)" +
                " , pEND_TIPO VARCHAR(15) , pEND_LOGRAD VARCHAR(40) , pEND_NUMERO VARCHAR(5) , pE" +
                "ND_COMPLE VARCHAR(15) , pEND_BAIRRO VARCHAR(35) , pCNPJ VARCHAR(18) , pINSC_ESTA" +
                "D VARCHAR(16) , pINSC_MUNIC VARCHAR(16) , pDDD_COMER CHAR(2) , pFONE_COMER VARCH" +
                "AR(13) , pDDD_FAX CHAR(2) , pFONE_FAX VARCHAR(13) , pDDD_CELUL CHAR(2) , pFONE_C" +
                "ELUL VARCHAR(13) , pEMAIL_CONT VARCHAR(50) , pSITE VARCHAR(50) , pCNAE VARCHAR(1" +
                "7) , pSIMPLES CHAR(1) , pID_CIDADE CHAR(7) , pID_RAMO SMALLINT , pDT_COMPRA DATE" +
                " , pLOGO BLOB SUB_TYPE 0 , pIE_ST_AC VARCHAR(16) , pIE_ST_AL VARCHAR(16) , pIE_S" +
                "T_AM VARCHAR(16) , pIE_ST_AP VARCHAR(16) , pIE_ST_BA VARCHAR(16) , pIE_ST_CE VAR" +
                "CHAR(16) , pIE_ST_DF VARCHAR(16) , pIE_ST_ES VARCHAR(16) , pIE_ST_GO VARCHAR(16)" +
                " , pIE_ST_MA VARCHAR(16) , pIE_ST_MG VARCHAR(16) , pIE_ST_MS VARCHAR(16) , pIE_S" +
                "T_MT VARCHAR(16) , pIE_ST_PA VARCHAR(16) , pIE_ST_PB VARCHAR(16) , pIE_ST_PE VAR" +
                "CHAR(16) , pIE_ST_PI VARCHAR(16) , pIE_ST_PR VARCHAR(16) , pIE_ST_RJ VARCHAR(16)" +
                " , pIE_ST_RN VARCHAR(16) , pIE_ST_RO VARCHAR(16) , pIE_ST_RR VARCHAR(16) , pIE_S" +
                "T_RS VARCHAR(16) , pIE_ST_SC VARCHAR(16) , pIE_ST_SE VARCHAR(16) , pIE_ST_SP VAR" +
                "CHAR(16) , pIE_ST_TO VARCHAR(16) , pTEXTO_COBRANCA BLOB SUB_TYPE 1 , pTEXTO_COBR" +
                "ANCA_RODAPE BLOB SUB_TYPE 1 , pTEXTO_COBRANCA_ASSUNTO VARCHAR(150) , pTRI_PDV_DT" +
                "_UPD TIMESTAMP ) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO " +
                "TB_EMITENTE (NOME , NOME_FANTA , CONTATO , END_CEP , END_TIPO , END_LOGRAD , END" +
                "_NUMERO , END_COMPLE , END_BAIRRO , CNPJ , INSC_ESTAD , INSC_MUNIC , DDD_COMER ," +
                " FONE_COMER , DDD_FAX , FONE_FAX , DDD_CELUL , FONE_CELUL , EMAIL_CONT , SITE , " +
                "CNAE , SIMPLES , ID_CIDADE , ID_RAMO , DT_COMPRA , LOGO , IE_ST_AC , IE_ST_AL , " +
                "IE_ST_AM , IE_ST_AP , IE_ST_BA , IE_ST_CE , IE_ST_DF , IE_ST_ES , IE_ST_GO , IE_" +
                "ST_MA , IE_ST_MG , IE_ST_MS , IE_ST_MT , IE_ST_PA , IE_ST_PB , IE_ST_PE , IE_ST_" +
                "PI , IE_ST_PR , IE_ST_RJ , IE_ST_RN , IE_ST_RO , IE_ST_RR , IE_ST_RS , IE_ST_SC " +
                ", IE_ST_SE , IE_ST_SP , IE_ST_TO , TEXTO_COBRANCA , TEXTO_COBRANCA_RODAPE , TEXT" +
                "O_COBRANCA_ASSUNTO , TRI_PDV_DT_UPD ) VALUES (:pNOME , :pNOME_FANTA , :pCONTATO " +
                ", :pEND_CEP , :pEND_TIPO , :pEND_LOGRAD , :pEND_NUMERO , :pEND_COMPLE , :pEND_BA" +
                "IRRO , :pCNPJ , :pINSC_ESTAD , :pINSC_MUNIC , :pDDD_COMER , :pFONE_COMER , :pDDD" +
                "_FAX , :pFONE_FAX , :pDDD_CELUL , :pFONE_CELUL , :pEMAIL_CONT , :pSITE , :pCNAE " +
                ", :pSIMPLES , :pID_CIDADE , :pID_RAMO , :pDT_COMPRA , :pLOGO , :pIE_ST_AC , :pIE" +
                "_ST_AL , :pIE_ST_AM , :pIE_ST_AP , :pIE_ST_BA , :pIE_ST_CE , :pIE_ST_DF , :pIE_S" +
                "T_ES , :pIE_ST_GO , :pIE_ST_MA , :pIE_ST_MG , :pIE_ST_MS , :pIE_ST_MT , :pIE_ST_" +
                "PA , :pIE_ST_PB , :pIE_ST_PE , :pIE_ST_PI , :pIE_ST_PR , :pIE_ST_RJ , :pIE_ST_RN" +
                " , :pIE_ST_RO , :pIE_ST_RR , :pIE_ST_RS , :pIE_ST_SC , :pIE_ST_SE , :pIE_ST_SP ," +
                " :pIE_ST_TO , :pTEXTO_COBRANCA , :pTEXTO_COBRANCA_RODAPE , :pTEXTO_COBRANCA_ASSU" +
                "NTO , :pTRI_PDV_DT_UPD ) MATCHING (CNPJ ) ; rRowsAffected = ROW_COUNT; END;\';\r\n\r" +
                "\nerro = \'sproc SP_TRI_IFS_UPSERT\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE" +
                " SP_TRI_IFS_GETBY_DTUPD ( pUltimaSync TIMESTAMP ) RETURNS ( ID_IFS SMALLINT , CA" +
                "IXA VARCHAR(6) , LOJA VARCHAR(3) , FABRICACAO VARCHAR(20) , USUARIO CHAR(3) , MA" +
                "RCA VARCHAR(20) , MF CHAR(1) , MODELO VARCHAR(20) , TIPO VARCHAR(7) , DATA_ON DA" +
                "TE , DATA_OFF DATE , ATIVO CHAR(1) , ISS_RATEIO CHAR(1) , SB_DATAIN DATE , SB_HO" +
                "RAIN TIME , SB_VERSAO VARCHAR(8) , CHAVE VARCHAR(32) , COD_NAC VARCHAR(10) , DAT" +
                "A_TEMP DATE , NUM_CREDENCIAMENTO VARCHAR(30) , TRI_PDV_DT_UPD TIMESTAMP ) AS BEG" +
                "IN FOR SELECT ID_IFS , CAIXA , LOJA , FABRICACAO , USUARIO , MARCA , MF , MODELO" +
                " , TIPO , DATA_ON , DATA_OFF , ATIVO , ISS_RATEIO , SB_DATAIN , SB_HORAIN , SB_V" +
                "ERSAO , CHAVE , COD_NAC , DATA_TEMP , NUM_CREDENCIAMENTO , TRI_PDV_DT_UPD FROM T" +
                "B_IFS WHERE TRI_PDV_DT_UPD > :pUltimaSync INTO :ID_IFS , :CAIXA , :LOJA , :FABRI" +
                "CACAO , :USUARIO , :MARCA , :MF , :MODELO , :TIPO , :DATA_ON , :DATA_OFF , :ATIV" +
                "O , :ISS_RATEIO , :SB_DATAIN , :SB_HORAIN , :SB_VERSAO , :CHAVE , :COD_NAC , :DA" +
                "TA_TEMP , :NUM_CREDENCIAMENTO , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;\';\r\ne" +
                "rro = \'sproc ifs sync upsert\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_" +
                "TRI_IFS_UPSERT ( pID_IFS SMALLINT , pCAIXA VARCHAR(6) , pLOJA VARCHAR(3) , pFABR" +
                "ICACAO VARCHAR(20) , pUSUARIO CHAR(3) , pMARCA VARCHAR(20) , pMF CHAR(1) , pMODE" +
                "LO VARCHAR(20) , pTIPO VARCHAR(7) , pDATA_ON DATE , pDATA_OFF DATE , pATIVO CHAR" +
                "(1) , pISS_RATEIO CHAR(1) , pSB_DATAIN DATE , pSB_HORAIN TIME , pSB_VERSAO VARCH" +
                "AR(8) , pCHAVE VARCHAR(32) , pCOD_NAC VARCHAR(10) , pDATA_TEMP DATE , pNUM_CREDE" +
                "NCIAMENTO VARCHAR(30) , pTRI_PDV_DT_UPD TIMESTAMP ) RETURNS (rRowsAffected INTEG" +
                "ER) AS declare newIdIfs type OF column TB_IFS.ID_IFS; BEGIN IF (pID_IFS IS NULL)" +
                " THEN SELECT COALESCE(MAX(ID_IFS), 0) + 1 FROM TB_IFS INTO :newIdIfs ; ELSE newI" +
                "dIfs = :pID_IFS; UPDATE OR INSERT INTO TB_IFS (ID_IFS , CAIXA , LOJA , FABRICACA" +
                "O , USUARIO , MARCA , MF , MODELO , TIPO , DATA_ON , DATA_OFF , ATIVO , ISS_RATE" +
                "IO , SB_DATAIN , SB_HORAIN , SB_VERSAO , CHAVE , COD_NAC , DATA_TEMP , NUM_CREDE" +
                "NCIAMENTO , TRI_PDV_DT_UPD ) VALUES (:newIdIfs , :pCAIXA , :pLOJA , :pFABRICACAO" +
                " , :pUSUARIO , :pMARCA , :pMF , :pMODELO , :pTIPO , :pDATA_ON , :pDATA_OFF , :pA" +
                "TIVO , :pISS_RATEIO , :pSB_DATAIN , :pSB_HORAIN , :pSB_VERSAO , :pCHAVE , :pCOD_" +
                "NAC , :pDATA_TEMP , :pNUM_CREDENCIAMENTO , :pTRI_PDV_DT_UPD ) MATCHING (ID_IFS )" +
                " ; rRowsAffected = ROW_COUNT; END;\';\r\n\r\nerro = \'sproc ifs get by caixa\';\r\nexecut" +
                "e statement \'CREATE OR ALTER PROCEDURE SP_TRI_IFS_GETBY_CAIXA ( pNUM_CAIXA SMALL" +
                "INT ) RETURNS ( EXISTE SMALLINT ) AS BEGIN SELECT COUNT(1) FROM TB_IFS WHERE CAS" +
                "T(CAIXA AS SMALLINT) = :pNUM_CAIXA INTO :EXISTE ; END;\';\r\n\r\nerro = \'sproc cupom " +
                "item set cancel\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_CUPOM_ITE" +
                "M_SET_CANCEL ( pCOO type of column TB_CUPOM.COO , pNUM_CAIXA type of column TB_C" +
                "UPOM.NUM_CAIXA ) AS BEGIN UPDATE TB_CUPOM_ITEM SET ITEM_CANCEL = \'\'S\'\' WHERE ID_" +
                "CUPOM IN ( SELECT ID_CUPOM FROM TB_CUPOM WHERE TB_CUPOM.COO = :pCOO and tb_cupom" +
                ".num_caixa = :pNUM_CAIXA ) ; END;\';\r\n\r\nerro = \'sproc existe caixa aberto\';\r\nexec" +
                "ute statement \'CREATE OR ALTER PROCEDURE SP_TRI_EXISTE_CAIXA_ABERTO ( NUMCAIXA I" +
                "NTEGER ) RETURNS ( RESULTADO INTEGER ) AS BEGIN SELECT COUNT(ID_CAIXA) FROM TRI_" +
                "PDV_OPER WHERE ABERTO = \'\'S\'\' AND ID_CAIXA =:NUMCAIXA INTO :RESULTADO ; END;\';\r\n" +
                "\r\nerro = \'sproc EST_GRUPO get by dt upd\';\r\nexecute statement \'CREATE OR ALTER PR" +
                "OCEDURE SP_TRI_ESTGRUPO_GETBY_DTUPD ( pUltimaSync TIMESTAMP ) RETURNS ( ID_GRUPO" +
                " type of column TB_EST_GRUPO.ID_GRUPO , DESCRICAO type of column TB_EST_GRUPO.DE" +
                "SCRICAO , TRI_PDV_DT_UPD type of column TB_EST_GRUPO.TRI_PDV_DT_UPD ) AS BEGIN F" +
                "OR SELECT ID_GRUPO , DESCRICAO , TRI_PDV_DT_UPD FROM TB_EST_GRUPO WHERE TRI_PDV_" +
                "DT_UPD > :pUltimaSync INTO :ID_GRUPO , :DESCRICAO , :TRI_PDV_DT_UPD DO BEGIN SUS" +
                "PEND ; END END;\';\r\nerro = \'sproc EST_GRUPO sync upsert\';\r\nexecute statement \'CRE" +
                "ATE OR ALTER PROCEDURE SP_TRI_EST_GRUPO_UPSERT ( pID_GRUPO type OF column TB_EST" +
                "_GRUPO.ID_GRUPO , pDESCRICAO type OF column TB_EST_GRUPO.DESCRICAO , pTRI_PDV_DT" +
                "_UPD type OF column TB_EST_GRUPO.TRI_PDV_DT_UPD ) RETURNS (rRowsAffected INTEGER" +
                ") AS BEGIN UPDATE OR INSERT INTO TB_EST_GRUPO ( ID_GRUPO , DESCRICAO , TRI_PDV_D" +
                "T_UPD ) VALUES ( :pID_GRUPO , :pDESCRICAO , :pTRI_PDV_DT_UPD ) MATCHING ( ID_GRU" +
                "PO ); rRowsAffected = ROW_COUNT; END;\';\r\n\r\nerro = \'sproc FMAPGTO get by dt upd\';" +
                "\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_FMAPGTO_GETBY_DTUPD ( pUlt" +
                "imaSync TIMESTAMP ) RETURNS ( ID_FMAPGTO type of column TB_FORMA_PAGTO_SIS.ID_FM" +
                "APGTO , DESCRICAO type of column TB_FORMA_PAGTO_SIS.DESCRICAO , STATUS type of c" +
                "olumn TB_FORMA_PAGTO_SIS.STATUS , UTILIZACAO type of column TB_FORMA_PAGTO_SIS.U" +
                "TILIZACAO , TRI_PDV_DT_UPD type of column TB_FORMA_PAGTO_SIS.TRI_PDV_DT_UPD ) AS" +
                " BEGIN FOR SELECT ID_FMAPGTO , DESCRICAO , STATUS , UTILIZACAO , TRI_PDV_DT_UPD " +
                "FROM TB_FORMA_PAGTO_SIS WHERE TRI_PDV_DT_UPD > :pUltimaSync INTO :ID_FMAPGTO , :" +
                "DESCRICAO , :STATUS , :UTILIZACAO , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;\'" +
                ";\r\nerro = \'sproc FMAPGTO sync upsert\';\r\nexecute statement \'CREATE OR ALTER PROCE" +
                "DURE SP_TRI_FMAPGTO_UPSERT ( pID_FMAPGTO type OF COLUMN TB_FORMA_PAGTO_SIS.ID_FM" +
                "APGTO ,pDESCRICAO type OF COLUMN TB_FORMA_PAGTO_SIS.DESCRICAO ,pSTATUS type OF C" +
                "OLUMN TB_FORMA_PAGTO_SIS.STATUS ,pUTILIZACAO type OF COLUMN TB_FORMA_PAGTO_SIS.U" +
                "TILIZACAO ,pTRI_PDV_DT_UPD type OF COLUMN TB_FORMA_PAGTO_SIS.TRI_PDV_DT_UPD ) RE" +
                "TURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO TB_FORMA_PAGTO_SIS " +
                "( ID_FMAPGTO ,DESCRICAO ,STATUS ,UTILIZACAO ,TRI_PDV_DT_UPD ) VALUES ( :pID_FMAP" +
                "GTO ,:pDESCRICAO ,:pSTATUS ,:pUTILIZACAO ,:pTRI_PDV_DT_UPD ) MATCHING (ID_FMAPGT" +
                "O); rRowsAffected = ROW_COUNT; END;\';\r\n\r\nerro = \'sproc est_produto get cod_cest " +
                "by id_identif\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_ESTPROD_GET" +
                "CEST_IDENTIF ( pID_IDENTIFICADOR type of column TB_EST_PRODUTO.ID_IDENTIFICADOR " +
                ") RETURNS ( COD_CEST type of column TB_EST_PRODUTO.COD_CEST ) AS BEGIN SELECT CO" +
                "D_CEST FROM TB_EST_PRODUTO WHERE ID_IDENTIFICADOR = :pID_IDENTIFICADOR INTO :COD" +
                "_CEST ; END;\';\r\n\r\nerro = \'sproc PARCELA get by dt upd\';\r\nexecute statement \'CREA" +
                "TE OR ALTER PROCEDURE SP_TRI_PARCELA_GETBY_DTUPD ( pUltimaSync TIMESTAMP ) RETUR" +
                "NS ( ID_PARCELA type of column TB_PARCELAMENTO.ID_PARCELA , DESCRICAO type of co" +
                "lumn TB_PARCELAMENTO.DESCRICAO , N_PARCELAS type of column TB_PARCELAMENTO.N_PAR" +
                "CELAS , INTERVALO type of column TB_PARCELAMENTO.INTERVALO , ENTRADA type of col" +
                "umn TB_PARCELAMENTO.ENTRADA , STATUS type of column TB_PARCELAMENTO.STATUS , ID_" +
                "FMAPGTO type of column TB_PARCELAMENTO.ID_FMAPGTO , INTERVALO_VAR type of column" +
                " TB_PARCELAMENTO.INTERVALO_VAR , TRI_PDV_DT_UPD type of column TB_PARCELAMENTO.T" +
                "RI_PDV_DT_UPD ) AS BEGIN FOR SELECT ID_PARCELA , DESCRICAO , N_PARCELAS , INTERV" +
                "ALO , ENTRADA , STATUS , ID_FMAPGTO , INTERVALO_VAR , TRI_PDV_DT_UPD FROM TB_PAR" +
                "CELAMENTO WHERE TRI_PDV_DT_UPD > :pUltimaSync INTO :ID_PARCELA , :DESCRICAO , :N" +
                "_PARCELAS , :INTERVALO , :ENTRADA , :STATUS , :ID_FMAPGTO , :INTERVALO_VAR , :TR" +
                "I_PDV_DT_UPD DO BEGIN SUSPEND ; END END;\';\r\nerro = \'sproc PARCELA sync upsert\';\r" +
                "\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_PARCELA_UPSERT ( pID_PARCEL" +
                "A type of column TB_PARCELAMENTO.ID_PARCELA , pDESCRICAO type of column TB_PARCE" +
                "LAMENTO.DESCRICAO , pN_PARCELAS type of column TB_PARCELAMENTO.N_PARCELAS , pINT" +
                "ERVALO type of column TB_PARCELAMENTO.INTERVALO , pENTRADA type of column TB_PAR" +
                "CELAMENTO.ENTRADA , pSTATUS type of column TB_PARCELAMENTO.STATUS , pID_FMAPGTO " +
                "type of column TB_PARCELAMENTO.ID_FMAPGTO , pINTERVALO_VAR type of column TB_PAR" +
                "CELAMENTO.INTERVALO_VAR , pTRI_PDV_DT_UPD type of column TB_PARCELAMENTO.TRI_PDV" +
                "_DT_UPD ) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO TB_PARC" +
                "ELAMENTO (ID_PARCELA , DESCRICAO , N_PARCELAS , INTERVALO , ENTRADA , STATUS , I" +
                "D_FMAPGTO , INTERVALO_VAR , TRI_PDV_DT_UPD ) VALUES (:pID_PARCELA , :pDESCRICAO " +
                ", :pN_PARCELAS , :pINTERVALO , :pENTRADA , :pSTATUS , :pID_FMAPGTO , :pINTERVALO" +
                "_VAR , :pTRI_PDV_DT_UPD ) MATCHING (ID_PARCELA ) ; rRowsAffected = ROW_COUNT; EN" +
                "D;\';\r\n\r\nerro = \'sproc estoque get by dt upd\';\r\nexecute statement \'CREATE OR ALTE" +
                "R PROCEDURE SP_TRI_ESTOQUE_GETBY_DTUPD ( pUltimaSync TIMESTAMP ) RETURNS ( ID_ES" +
                "TOQUE INTEGER , ID_GRUPO INTEGER , DESCRICAO VARCHAR(50) , STATUS VARCHAR(1) , D" +
                "T_CADAST DATE , HR_CADAST TIME , FRACIONADO CHAR(1) , PRC_VENDA TYPE OF COLUMN T" +
                "RI_PDV_OPER.DIN , PRC_CUSTO TYPE OF COLUMN TRI_PDV_OPER.DIN , ULT_VENDA DATE , M" +
                "ARGEM_LB TYPE OF COLUMN TRI_PDV_OPER.DIN , POR_COMISSAO TYPE OF COLUMN TRI_PDV_O" +
                "PER.DIN , ULT_FORNEC INTEGER , GRADE_SERIE CHAR(1) , ID_TIPOITEM VARCHAR(2) , ID" +
                "_CTI CHAR(3) , CST_PIS VARCHAR(3) , CST_COFINS VARCHAR(3) , PIS TYPE OF COLUMN T" +
                "RI_PDV_OPER.DIN , COFINS TYPE OF COLUMN TRI_PDV_OPER.DIN , UNI_MEDIDA VARCHAR(3)" +
                " , MARGEM_PV TYPE OF COLUMN TRI_PDV_OPER.DIN , CFOP VARCHAR(4) , OBSERVACAO BLOB" +
                " SUB_TYPE 1 , NAT_RECEITA SMALLINT , CFOP_NF VARCHAR(4) , PRC_ATACADO TYPE OF CO" +
                "LUMN TRI_PDV_OPER.DIN , ID_CTI_PART CHAR(3) , ID_CTI_FCP CHAR(3) , QTD_ATACADO T" +
                "YPE OF COLUMN TRI_PDV_OPER.DIN , TRI_PDV_DT_UPD TIMESTAMP ) AS BEGIN FOR SELECT " +
                "A.ID_ESTOQUE , A.ID_GRUPO , A.DESCRICAO , A.STATUS , A.DT_CADAST , A.HR_CADAST ," +
                " A.FRACIONADO , A.PRC_VENDA , A.PRC_CUSTO , A.ULT_VENDA , A.MARGEM_LB , A.POR_CO" +
                "MISSAO , A.ULT_FORNEC , A.GRADE_SERIE , A.ID_TIPOITEM , A.ID_CTI , A.CST_PIS , A" +
                ".CST_COFINS , A.PIS , A.COFINS , A.UNI_MEDIDA , A.MARGEM_PV , A.CFOP , A.OBSERVA" +
                "CAO , A.NAT_RECEITA , A.CFOP_NF , A.PRC_ATACADO , A.ID_CTI_PART , A.ID_CTI_FCP ," +
                " A.QTD_ATACADO , A.TRI_PDV_DT_UPD FROM TB_ESTOQUE A JOIN TB_EST_IDENTIFICADOR B " +
                "ON B.ID_ESTOQUE = A.ID_ESTOQUE WHERE ( A.TRI_PDV_DT_UPD > :pUltimaSync OR B.TRI_" +
                "PDV_DT_UPD > :pUltimaSync ) INTO :ID_ESTOQUE , :ID_GRUPO , :DESCRICAO , :STATUS " +
                ", :DT_CADAST , :HR_CADAST , :FRACIONADO , :PRC_VENDA , :PRC_CUSTO , :ULT_VENDA ," +
                " :MARGEM_LB , :POR_COMISSAO , :ULT_FORNEC , :GRADE_SERIE , :ID_TIPOITEM , :ID_CT" +
                "I , :CST_PIS , :CST_COFINS , :PIS , :COFINS , :UNI_MEDIDA , :MARGEM_PV , :CFOP ," +
                " :OBSERVACAO , :NAT_RECEITA , :CFOP_NF , :PRC_ATACADO , :ID_CTI_PART , :ID_CTI_F" +
                "CP , :QTD_ATACADO , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;\';\r\n\t\t\t\t\t\terro = " +
                "\'sproc estoque sync upsert\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR ALTER PROCEDURE" +
                " SP_TRI_ESTOQUE_UPSERT (PID_ESTOQUE INTEGER, PID_GRUPO INTEGER, PDESCRICAO VARCH" +
                "AR(50), PSTATUS VARCHAR(1), PDT_CADAST DATE, PHR_CADAST TIME, PFRACIONADO CHAR(1" +
                "), PPRC_VENDA NUMERIC(18,4), PPRC_CUSTO NUMERIC(18,4), PULT_VENDA DATE, PMARGEM_" +
                "LB NUMERIC(18,4), PPOR_COMISSAO NUMERIC(18,4), PULT_FORNEC INTEGER, PGRADE_SERIE" +
                " CHAR(1), PID_TIPOITEM VARCHAR(2), PID_CTI CHAR(3), PCST_PIS VARCHAR(3), PCST_CO" +
                "FINS VARCHAR(3), PPIS NUMERIC(18,4), PCOFINS NUMERIC(18,4), PUNI_MEDIDA VARCHAR(" +
                "3), PMARGEM_PV NUMERIC(18,4), PCFOP VARCHAR(4), POBSERVACAO BLOB, PNAT_RECEITA S" +
                "MALLINT, PCFOP_NF VARCHAR(4), PPRC_ATACADO NUMERIC(18,4), PID_CTI_PART CHAR(3), " +
                "PID_CTI_FCP CHAR(3), PQTD_ATACADO NUMERIC(18,4), PID_CTI_CFE CHAR(4), PEMPCADAST" +
                "RO VARCHAR(18), PALIQINTERNA NUMERIC(18,4), PTRI_PDV_DT_UPD TIMESTAMP, PMARGEM_L" +
                "B_ATAC NUMERIC(18,4), PINFCOMPLEMENTAR VARCHAR(250), PID_MOTIVO_DESO INTEGER, PI" +
                "D_CTAPLA INTEGER, PCOD_ANVISA VARCHAR(13), PPMC NUMERIC(18,4), PIRRF NUMERIC(18," +
                "4), PMED_MOTIVO_ISENCAO VARCHAR(255), PCONTROLEESP INTEGER, PID_SUBGRUPO SMALLIN" +
                "T, PCOD_BENEF_CFOP INTEGER, PTP_PRC_ATACADO SMALLINT) RETURNS ( \tRROWSAFFECTED I" +
                "NTEGER ) AS BEGIN \tUPDATE \tOR INSERT \tINTO \tTB_ESTOQUE (ID_ESTOQUE , \tID_GRUPO ," +
                " \tDESCRICAO , \tSTATUS , \tDT_CADAST , \tHR_CADAST , \tFRACIONADO , \tPRC_VENDA , \tPR" +
                "C_CUSTO , \tULT_VENDA , \tMARGEM_LB , \tPOR_COMISSAO , \tULT_FORNEC , \tGRADE_SERIE ," +
                " \tID_TIPOITEM , \tID_CTI , \tCST_PIS , \tCST_COFINS , \tPIS , \tCOFINS , \tUNI_MEDIDA " +
                ", \tMARGEM_PV , \tCFOP , \tOBSERVACAO , \tNAT_RECEITA , \tCFOP_NF , \tPRC_ATACADO , \tI" +
                "D_CTI_PART , \tID_CTI_FCP , \tQTD_ATACADO , \tID_CTI_CFE , \tEMPCADASTRO , \tALIQINTE" +
                "RNA ,\t \tTRI_PDV_DT_UPD , \tMARGEM_LB_ATAC , \tINFCOMPLEMENTAR , \tID_MOTIVO_DESO , " +
                "\tID_CTAPLA , \tCOD_ANVISA , \tPMC , \tIRRF , \tMED_MOTIVO_ISENCAO , \tCONTROLEESP , \t" +
                "ID_SUBGRUPO , \tCOD_BENEF_CFOP ,\t \tTP_PRC_ATACADO) VALUES (:pID_ESTOQUE , :pID_GR" +
                "UPO , :pDESCRICAO , :pSTATUS , :pDT_CADAST , :pHR_CADAST , :pFRACIONADO , :pPRC_" +
                "VENDA , :pPRC_CUSTO , :pULT_VENDA , :pMARGEM_LB , :pPOR_COMISSAO , :pULT_FORNEC " +
                ", :pGRADE_SERIE , :pID_TIPOITEM , :pID_CTI , :pCST_PIS , :pCST_COFINS , :pPIS , " +
                ":pCOFINS , :pUNI_MEDIDA , :pMARGEM_PV , :pCFOP , :pOBSERVACAO , :pNAT_RECEITA , " +
                ":pCFOP_NF , :pPRC_ATACADO , :pID_CTI_PART , :pID_CTI_FCP , :pQTD_ATACADO , :pID_" +
                "CTI_CFE , :pEMPCADASTRO , :pALIQINTERNA , :pTRI_PDV_DT_UPD , :pMARGEM_LB_ATAC , " +
                ":pINFCOMPLEMENTAR , :pID_MOTIVO_DESO , :pID_CTAPLA , :pCOD_ANVISA , :pPMC , :pIR" +
                "RF , :pMED_MOTIVO_ISENCAO , :pCONTROLEESP , :pID_SUBGRUPO , :pCOD_BENEF_CFOP , :" +
                "pTP_PRC_ATACADO) MATCHING (ID_ESTOQUE) ;  rRowsAffected = ROW_COUNT;  SUSPEND; E" +
                "ND;\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_MOV_CTAREC\';\r\n\t\t\t\t\t\texecute statement \'CREAT" +
                "E OR ALTER PROCEDURE SP_TRI_MOV_CTAREC ( NO_CUPOM VARCHAR(12) ) AS DECLARE CTARE" +
                "C integer; DECLARE MOVDIA integer; BEGIN SELECT FIRST 1 ID_CTAREC FROM TB_CONTA_" +
                "RECEBER WHERE DOCUMENTO CONTAINING :no_cupom ORDER BY ID_CTAREC DESC INTO CTAREC" +
                " ; SELECT FIRST 1 ID_MOVTO FROM TB_MOVDIARIO WHERE HISTORICO CONTAINING :no_cupo" +
                "m ORDER BY ID_MOVTO DESC INTO MOVDIA ; INSERT INTO TB_CTAREC_MOVTO (ID_MOVTO , I" +
                "D_CTAREC ) VALUES (:MOVDIA , :CTAREC ) ; SUSPEND; WHEN ANY DO BEGIN SUSPEND; END" +
                " END\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_LISTAFECHAMENTOS\';\r\n\t\t\t\t\t\texecute statement" +
                " \'CREATE OR ALTER PROCEDURE SP_TRI_LISTAFECHAMENTOS ( DATA_INICIAL TIMESTAMP , D" +
                "ATA_FINAL TIMESTAMP ) RETURNS ( FECHADO TIMESTAMP , ID_CAIXA INTEGER , OPERADOR " +
                "INTEGER , TOTALVENDA TYPE OF COLUMN TRI_PDV_OPER.DIN ) AS BEGIN for SELECT FECHA" +
                "DO , ID_CAIXA , OPERADOR , (DIN + CHEQUE + CREDITO + DEBITO + LOJA + ALIMENTACAO" +
                " + REFEICAO + PRESENTE + COMBUSTIVEL + OUTROS + EXTRA_1 + EXTRA_2 + EXTRA_3 + EX" +
                "TRA_4 + EXTRA_5 + EXTRA_6 + EXTRA_7 + EXTRA_8 + EXTRA_9 + EXTRA_10) AS TotalVend" +
                "aS FROM TRI_PDV_FECHAMENTOS WHERE FECHADO >= :DATA_INICIAL AND FECHADO <= :DATA_" +
                "FINAL INTO :FECHADO , :ID_CAIXA , :OPERADOR , :TOTALVENDA do SUSPEND ; END;\';\r\ne" +
                "rro = \'sproc fechamento get all unsynced\';\r\nexecute statement \'CREATE OR ALTER P" +
                "ROCEDURE SP_TRI_FECH_GETALL_UNSYNCED RETURNS ( DIN TYPE OF COLUMN TRI_PDV_OPER.D" +
                "IN , CHEQUE TYPE OF COLUMN TRI_PDV_OPER.DIN , CREDITO TYPE OF COLUMN TRI_PDV_OPE" +
                "R.DIN , DEBITO TYPE OF COLUMN TRI_PDV_OPER.DIN , LOJA TYPE OF COLUMN TRI_PDV_OPE" +
                "R.DIN , ALIMENTACAO TYPE OF COLUMN TRI_PDV_OPER.DIN , REFEICAO TYPE OF COLUMN TR" +
                "I_PDV_OPER.DIN , PRESENTE TYPE OF COLUMN TRI_PDV_OPER.DIN , COMBUSTIVEL TYPE OF " +
                "COLUMN TRI_PDV_OPER.DIN , OUTROS TYPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA_1 TYPE " +
                "OF COLUMN TRI_PDV_OPER.DIN , EXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA_3 T" +
                "YPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA" +
                "_5 TYPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.DIN , E" +
                "XTRA_7 TYPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                " , EXTRA_9 TYPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA_10 TYPE OF COLUMN TRI_PDV_OPE" +
                "R.DIN , OPERADOR INTEGER , ID_CAIXA INTEGER , FECHADO TIMESTAMP , SANGRIAS TYPE " +
                "OF COLUMN TRI_PDV_OPER.DIN , SUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.DIN , TROCA" +
                "S TYPE OF COLUMN TRI_PDV_OPER.DIN , SYNCED SMALLINT ) AS BEGIN FOR SELECT FIRST " +
                "200 DIN , CHEQUE , CREDITO , DEBITO , LOJA , ALIMENTACAO , REFEICAO , PRESENTE ," +
                " COMBUSTIVEL , OUTROS , EXTRA_1 , EXTRA_2 , EXTRA_3 , EXTRA_4 , EXTRA_5 , EXTRA_" +
                "6 , EXTRA_7 , EXTRA_8 , EXTRA_9 , EXTRA_10 , OPERADOR , ID_CAIXA , FECHADO , SAN" +
                "GRIAS , SUPRIMENTOS , TROCAS , SYNCED FROM TRI_PDV_FECHAMENTOS a WHERE ( a.SYNCE" +
                "D IS NULL OR a.SYNCED = 0 ) ORDER BY a.FECHADO INTO :DIN , :CHEQUE , :CREDITO , " +
                ":DEBITO , :LOJA , :ALIMENTACAO , :REFEICAO , :PRESENTE , :COMBUSTIVEL , :OUTROS " +
                ", :EXTRA_1 , :EXTRA_2 , :EXTRA_3 , :EXTRA_4 , :EXTRA_5 , :EXTRA_6 , :EXTRA_7 , :" +
                "EXTRA_8 , :EXTRA_9 , :EXTRA_10 , :OPERADOR , :ID_CAIXA , :FECHADO , :SANGRIAS , " +
                ":SUPRIMENTOS , :TROCAS , :SYNCED DO BEGIN SUSPEND ; END END;\';\r\nerro = \'sproc fe" +
                "chamento sync insert\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_FECH" +
                "_SYNC_INSERT ( pDIN TYPE OF COLUMN TRI_PDV_OPER.DIN , pCHEQUE TYPE OF COLUMN TRI" +
                "_PDV_OPER.DIN , pCREDITO TYPE OF COLUMN TRI_PDV_OPER.DIN , pDEBITO TYPE OF COLUM" +
                "N TRI_PDV_OPER.DIN , pLOJA TYPE OF COLUMN TRI_PDV_OPER.DIN , pALIMENTACAO TYPE O" +
                "F COLUMN TRI_PDV_OPER.DIN , pREFEICAO TYPE OF COLUMN TRI_PDV_OPER.DIN , pPRESENT" +
                "E TYPE OF COLUMN TRI_PDV_OPER.DIN , pCOMBUSTIVEL TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                " , pOUTROS TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_1 TYPE OF COLUMN TRI_PDV_OPE" +
                "R.DIN , pEXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_3 TYPE OF COLUMN TRI_P" +
                "DV_OPER.DIN , pEXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_5 TYPE OF COLUMN" +
                " TRI_PDV_OPER.DIN , pEXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_7 TYPE OF " +
                "COLUMN TRI_PDV_OPER.DIN , pEXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_9 TY" +
                "PE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.DIN , pOPE" +
                "RADOR INTEGER , pID_CAIXA INTEGER , pFECHADO TIMESTAMP , pSANGRIAS TYPE OF COLUM" +
                "N TRI_PDV_OPER.DIN , pSUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.DIN , pTROCAS TYPE" +
                " OF COLUMN TRI_PDV_OPER.DIN , pSYNCED SMALLINT ) AS BEGIN INSERT INTO TRI_PDV_FE" +
                "CHAMENTOS (DIN , CHEQUE , CREDITO , DEBITO , LOJA , ALIMENTACAO , REFEICAO , PRE" +
                "SENTE , COMBUSTIVEL , OUTROS , EXTRA_1 , EXTRA_2 , EXTRA_3 , EXTRA_4 , EXTRA_5 ," +
                " EXTRA_6 , EXTRA_7 , EXTRA_8 , EXTRA_9 , EXTRA_10 , OPERADOR , ID_CAIXA , FECHAD" +
                "O , SANGRIAS , SUPRIMENTOS , TROCAS , SYNCED ) VALUES (:pDIN , :pCHEQUE , :pCRED" +
                "ITO , :pDEBITO , :pLOJA , :pALIMENTACAO , :pREFEICAO , :pPRESENTE , :pCOMBUSTIVE" +
                "L , :pOUTROS , :pEXTRA_1 , :pEXTRA_2 , :pEXTRA_3 , :pEXTRA_4 , :pEXTRA_5 , :pEXT" +
                "RA_6 , :pEXTRA_7 , :pEXTRA_8 , :pEXTRA_9 , :pEXTRA_10 , :pOPERADOR , :pID_CAIXA " +
                ", :pFECHADO , :pSANGRIAS , :pSUPRIMENTOS , :pTROCAS , :pSYNCED ) ; END;\';\r\nerro " +
                "= \'sproc fechamento set synced\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE S" +
                "P_TRI_FECH_SETSYNCED ( pID_CAIXA INTEGER , pFECHADO TIMESTAMP , pSYNCED SMALLINT" +
                " ) AS BEGIN UPDATE TRI_PDV_FECHAMENTOS SET SYNCED = :pSYNCED WHERE ID_CAIXA = :p" +
                "ID_CAIXA AND FECHADO = :pFECHADO ; END;\';\r\n\r\nerro = \'deu certo\';\r\n\r\nSUSPEND;\r\nWH" +
                "EN ANY DO\r\nBEGIN\r\nEND\r\nEND;";
            this._commandCollection[18].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[19] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[19].Connection = this.Connection;
            this._commandCollection[19].CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_PROCEDURES5 \r\nRETURNS\r\n(\r\nerro VARCHAR(64)\r\n)\r\nA" +
                "S\r\nBEGIN\r\n\r\nerro = \'sproc fechamentos get by fechado e caixa\';\r\nexecute statemen" +
                "t \'CREATE OR ALTER PROCEDURE SP_TRI_FECH_GETBY_CAIXA_FECH (pID_CAIXA INTEGER, pF" +
                "ECHADO TIMESTAMP) RETURNS (DIN TYPE OF COLUMN TRI_PDV_OPER.DIN, CHEQUE TYPE OF C" +
                "OLUMN TRI_PDV_OPER.DIN, CREDITO TYPE OF COLUMN TRI_PDV_OPER.DIN, DEBITO TYPE OF " +
                "COLUMN TRI_PDV_OPER.DIN, LOJA TYPE OF COLUMN TRI_PDV_OPER.DIN, ALIMENTACAO TYPE " +
                "OF COLUMN TRI_PDV_OPER.DIN, REFEICAO TYPE OF COLUMN TRI_PDV_OPER.DIN, PRESENTE T" +
                "YPE OF COLUMN TRI_PDV_OPER.DIN, COMBUSTIVEL TYPE OF COLUMN TRI_PDV_OPER.DIN, OUT" +
                "ROS TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_1 TYPE OF COLUMN TRI_PDV_OPER.DIN, EX" +
                "TRA_2 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_3 TYPE OF COLUMN TRI_PDV_OPER.DIN, " +
                "EXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_5 TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", EXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_7 TYPE OF COLUMN TRI_PDV_OPER.D" +
                "IN, EXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_9 TYPE OF COLUMN TRI_PDV_OPER" +
                ".DIN, EXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.DIN, SANGRIAS TYPE OF COLUMN TRI_PDV_" +
                "OPER.DIN, SUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.DIN, TROCAS TYPE OF COLUMN TRI" +
                "_PDV_OPER.DIN, OPERADOR INTEGER, ID_CAIXA INTEGER, FECHADO TIMESTAMP, SYNCED SMA" +
                "LLINT) AS BEGIN for SELECT DIN, CHEQUE, CREDITO, DEBITO, LOJA, ALIMENTACAO, REFE" +
                "ICAO, PRESENTE, COMBUSTIVEL, OUTROS, EXTRA_1, EXTRA_2, EXTRA_3, EXTRA_4, EXTRA_5" +
                ", EXTRA_6, EXTRA_7, EXTRA_8, EXTRA_9, EXTRA_10, SANGRIAS, SUPRIMENTOS, TROCAS, O" +
                "PERADOR, ID_CAIXA, FECHADO, SYNCED FROM TRI_PDV_FECHAMENTOS WHERE ID_CAIXA = :pI" +
                "D_CAIXA and FECHADO = :pFECHADO INTO :DIN, :CHEQUE, :CREDITO, :DEBITO, :LOJA, :A" +
                "LIMENTACAO, :REFEICAO, :PRESENTE, :COMBUSTIVEL, :OUTROS, :EXTRA_1, :EXTRA_2, :EX" +
                "TRA_3, :EXTRA_4, :EXTRA_5, :EXTRA_6, :EXTRA_7, :EXTRA_8, :EXTRA_9, :EXTRA_10, :S" +
                "ANGRIAS, :SUPRIMENTOS, :TROCAS, :OPERADOR, :ID_CAIXA, :FECHADO, :SYNCED DO BEGIN" +
                " SUSPEND; END END;\';\r\n\r\nerro = \'sproc oper get by caixa e fechado\';\r\nexecute sta" +
                "tement \'CREATE OR ALTER PROCEDURE SP_TRI_OPER_GETBY_CAIXA_FECH (pID_CAIXA INTEGE" +
                "R, pFECHADO TIMESTAMP) RETURNS (ID_CAIXA INTEGER, CURRENTTIME TIMESTAMP, ABERTO " +
                "VARCHAR(1), HASH VARCHAR(32), FECHADO TIMESTAMP, ID_OPER INTEGER, ID_USER INTEGE" +
                "R, TRI_PDV_DT_UPD TIMESTAMP, DIN TYPE OF COLUMN TRI_PDV_OPER.DIN, CHEQUE TYPE OF" +
                " COLUMN TRI_PDV_OPER.DIN, CREDITO TYPE OF COLUMN TRI_PDV_OPER.DIN, DEBITO TYPE O" +
                "F COLUMN TRI_PDV_OPER.DIN, LOJA TYPE OF COLUMN TRI_PDV_OPER.DIN, ALIMENTACAO TYP" +
                "E OF COLUMN TRI_PDV_OPER.DIN, REFEICAO TYPE OF COLUMN TRI_PDV_OPER.DIN, PRESENTE" +
                " TYPE OF COLUMN TRI_PDV_OPER.DIN, COMBUSTIVEL TYPE OF COLUMN TRI_PDV_OPER.DIN, O" +
                "UTROS TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_1 TYPE OF COLUMN TRI_PDV_OPER.DIN, " +
                "EXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_3 TYPE OF COLUMN TRI_PDV_OPER.DIN" +
                ", EXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_5 TYPE OF COLUMN TRI_PDV_OPER.D" +
                "IN, EXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_7 TYPE OF COLUMN TRI_PDV_OPER" +
                ".DIN, EXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_9 TYPE OF COLUMN TRI_PDV_OP" +
                "ER.DIN, EXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.DIN, SANGRIAS TYPE OF COLUMN TRI_PD" +
                "V_OPER.DIN, SUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.DIN, TROCAS TYPE OF COLUMN T" +
                "RI_PDV_OPER.DIN) AS BEGIN for SELECT ID_CAIXA, CURRENTTIME, ABERTO, HASH, FECHAD" +
                "O, ID_OPER, ID_USER, TRI_PDV_DT_UPD, DIN, CHEQUE, CREDITO, DEBITO, LOJA, ALIMENT" +
                "ACAO, REFEICAO, PRESENTE, COMBUSTIVEL, OUTROS, EXTRA_1, EXTRA_2, EXTRA_3, EXTRA_" +
                "4, EXTRA_5, EXTRA_6, EXTRA_7, EXTRA_8, EXTRA_9, EXTRA_10, SANGRIAS, SUPRIMENTOS," +
                " TROCAS FROM TRI_PDV_OPER WHERE ID_CAIXA = :pID_CAIXA and FECHADO = :pFECHADO IN" +
                "TO :ID_CAIXA, :CURRENTTIME, :ABERTO, :HASH, :FECHADO, :ID_OPER, :ID_USER, :TRI_P" +
                "DV_DT_UPD, :DIN, :CHEQUE, :CREDITO, :DEBITO, :LOJA, :ALIMENTACAO, :REFEICAO, :PR" +
                "ESENTE, :COMBUSTIVEL, :OUTROS, :EXTRA_1, :EXTRA_2, :EXTRA_3, :EXTRA_4, :EXTRA_5," +
                " :EXTRA_6, :EXTRA_7, :EXTRA_8, :EXTRA_9, :EXTRA_10, :SANGRIAS, :SUPRIMENTOS, :TR" +
                "OCAS DO BEGIN SUSPEND; END END;\';\r\n\r\nerro = \'sproc conta cupons reimpressao\';\r\ne" +
                "xecute statement \'CREATE OR ALTER PROCEDURE sp_tri_contacupons_reimpress (NUMCAI" +
                "XA INTEGER, STATUS CHAR(1), pFECHADO TIMESTAMP) RETURNS (QUANT_CUPONS INTEGER) A" +
                "S DECLARE VARIABLE IDOPER INTEGER; DECLARE VARIABLE DT_ABERT DATE; DECLARE VARIA" +
                "BLE HR_ABERT TIME; BEGIN SELECT ID_OPER FROM TRI_PDV_OPER WHERE ID_CAIXA = :NUMC" +
                "AIXA AND FECHADO = :pFECHADO INTO IDOPER; HR_ABERT = (SELECT CAST (CURRENTTIME A" +
                "S TIME) FROM TRI_PDV_OPER WHERE ID_OPER = :IDOPER); DT_ABERT = (SELECT CAST (CUR" +
                "RENTTIME AS DATE) FROM TRI_PDV_OPER WHERE ID_OPER = :IDOPER); SELECT COUNT (ID_C" +
                "UPOM) FROM TB_CUPOM WHERE STATUS = :STATUS AND DT_CUPOM >= :DT_ABERT AND HR_CUPO" +
                "M >= :HR_ABERT INTO QUANT_CUPONS; SUSPEND; END;\';\r\n\r\nerro = \'sproc conta FMAPGTO" +
                "S reimpressao\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_CONTAFMPGTO" +
                "_REIMPRESS (NUMCAIXA INTEGER, STATUS CHAR(1), PFECHADO TIMESTAMP) RETURNS (IDPAG" +
                "TO_OUT INTEGER, QUANT_CUPONS INTEGER) AS DECLARE VARIABLE IDOPER INTEGER; DECLAR" +
                "E VARIABLE IDPAGAMENTO INTEGER; DECLARE VARIABLE FMAPGTO SMALLINT; DECLARE VARIA" +
                "BLE TS_ABERT TIMESTAMP; BEGIN SELECT ID_OPER FROM TRI_PDV_OPER WHERE ID_CAIXA =:" +
                "NUMCAIXA AND FECHADO = :pFECHADO INTO IDOPER; TS_ABERT = (SELECT CURRENTTIME FRO" +
                "M TRI_PDV_OPER WHERE ID_OPER =:IDOPER); FOR SELECT ID_FMAPGTO FROM TRI_PDV_REL_M" +
                "ETODO_PAGTO INTO :FMAPGTO DO BEGIN SELECT COUNT(TB_CUPOM_FMAPAGTO.ID_FMAPAGTO) F" +
                "ROM TB_CUPOM INNER JOIN TB_CUPOM_FMAPAGTO ON (TB_CUPOM_FMAPAGTO.ID_CUPOM = TB_CU" +
                "POM.ID_CUPOM) WHERE TB_CUPOM.STATUS = \'\'F\'\' AND TB_CUPOM_FMAPAGTO.ID_FMAPAGTO = " +
                ":FMAPGTO AND CAST (DT_CUPOM ||\'\' \'\'||HR_CUPOM AS TIMESTAMP) >= :TS_ABERT INTO QU" +
                "ANT_CUPONS; IDPAGTO_OUT = (SELECT TRI_PDV_REL_METODO_PAGTO.ID_PAGAMENTO FROM TRI" +
                "_PDV_REL_METODO_PAGTO WHERE TRI_PDV_REL_METODO_PAGTO.ID_FMAPGTO = :FMAPGTO); SUS" +
                "PEND; END END\';\r\n\r\nerro = \'sproc total cupons cancelados desc \';\r\nexecute statem" +
                "ent \'CREATE OR ALTER PROCEDURE SP_TRI_VAL_TOTAL_CUPONS_DESC (pNUMCAIXA INTEGER, " +
                "pFECHADO TIMESTAMP, pSTATUS CHAR(1), pCONSIDERA_DESC CHAR(1), pREIMPRESSAO CHAR(" +
                "1)) RETURNS (VALTOTAL_CUPONS TYPE OF COLUMN TRI_PDV_OPER.DIN) AS DECLARE VARIABL" +
                "E IDOPER INTEGER; DECLARE VARIABLE DT_ABERT DATE; DECLARE VARIABLE HR_ABERT TIME" +
                "; BEGIN IF (:pREIMPRESSAO = \'\'S\'\') THEN BEGIN SELECT ID_OPER FROM TRI_PDV_OPER W" +
                "HERE ID_CAIXA = :pNUMCAIXA AND FECHADO = :pFECHADO INTO IDOPER; END ELSE BEGIN S" +
                "ELECT ID_OPER FROM TRI_PDV_OPER WHERE ID_CAIXA = :pNUMCAIXA AND ABERTO = \'\'S\'\' I" +
                "NTO IDOPER; END HR_ABERT = (SELECT CAST (CURRENTTIME AS TIME) FROM TRI_PDV_OPER " +
                "WHERE ID_OPER = :IDOPER); DT_ABERT = (SELECT CAST (CURRENTTIME AS DATE) FROM TRI" +
                "_PDV_OPER WHERE ID_OPER = :IDOPER); IF (:pCONSIDERA_DESC = \'\'S\'\') THEN BEGIN SEL" +
                "ECT COALESCE((SUM (VLR_TOTAL) - SUM (VLR_DESC)), 0.0000) AS VALTOTALGERAL FROM T" +
                "B_CUPOM WHERE STATUS = :pSTATUS AND DT_CUPOM >= :DT_ABERT AND HR_CUPOM >= :HR_AB" +
                "ERT INTO VALTOTAL_CUPONS; END ELSE BEGIN SELECT COALESCE(SUM (VLR_TOTAL), 0.0000" +
                ") AS VALTOTALGERAL FROM TB_CUPOM WHERE STATUS = :pSTATUS AND DT_CUPOM >= :DT_ABE" +
                "RT AND HR_CUPOM >= :HR_ABERT INTO VALTOTAL_CUPONS; END SUSPEND; END;\';\r\n\r\nerro =" +
                " \'sproc SP_TRI_INSELECT_PDV_OPER \';\r\nexecute statement \'CREATE OR ALTER PROCEDUR" +
                "E SP_TRI_INSELECT_PDV_OPER(NUMCAIXA INTEGER, USERID INTEGER) RETURNS(RIGHTNOW TI" +
                "MESTAMP) AS DECLARE VAR1 INTEGER; BEGIN SELECT COUNT(ID_OPER) FROM TRI_PDV_OPER " +
                "WHERE ID_CAIXA =:NUMCAIXA AND ABERTO = \'\'S\'\' INTO VAR1; IF(VAR1 = 0) THEN BEGIN " +
                "INSERT INTO TRI_PDV_OPER (ID_CAIXA, CURRENTTIME, ABERTO, HASH, FECHADO, ID_USER," +
                " TRI_PDV_DT_UPD, DIN, CHEQUE, CREDITO, DEBITO, LOJA, ALIMENTACAO, REFEICAO, PRES" +
                "ENTE, COMBUSTIVEL, OUTROS, EXTRA_1, EXTRA_2, EXTRA_3, EXTRA_4, EXTRA_5, EXTRA_6," +
                " EXTRA_7, EXTRA_8, EXTRA_9, EXTRA_10, SANGRIAS, SUPRIMENTOS, TROCAS) VALUES(:NUM" +
                "CAIXA, CURRENT_TIMESTAMP, \'\'S\'\', \'\'zz\'\', null, :USERID, null, 0, 0, 0, 0, 0, 0, " +
                "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); RIGHTNOW = CURRENT_TIMESTAMP" +
                "; END ELSE BEGIN SELECT FIRST 1 CURRENTTIME FROM TRI_PDV_OPER WHERE ID_CAIXA =:N" +
                "UMCAIXA AND ABERTO = \'\'S\'\' INTO RIGHTNOW; END END\';\r\n\r\nerro = \'sproc SP_TRI_CHEC" +
                "ASTATUSTERMINAL\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_CHECASTAT" +
                "USTERMINAL (NUMCAIXA INTEGER) RETURNS (USUARIO VARCHAR(64)) AS DECLARE USERID IN" +
                "TEGER; BEGIN SELECT FIRST 1 ID_USER FROM TRI_PDV_TERMINAL_USUARIO WHERE NUM_CAIX" +
                "A = :NUMCAIXA AND STATUS = \'\'A\'\' INTO :USERID; IF (:USERID IS NULL) THEN USUARIO" +
                " = \'\'\'\'; ELSE SELECT USERNAME FROM TRI_PDV_USERS WHERE ID_USER = :USERID INTO :U" +
                "SUARIO; END\';\r\n\r\nerro = \'sproc SP_TRI_FECHACAIXA\';\r\nexecute statement \'CREATE OR" +
                " ALTER PROCEDURE SP_TRI_FECHACAIXA(CAIXA INTEGER, DIN TYPE OF COLUMN TRI_PDV_OPE" +
                "R.DIN, CHEQUE TYPE OF COLUMN TRI_PDV_OPER.DIN, CREDITO TYPE OF COLUMN TRI_PDV_OP" +
                "ER.DIN, DEBITO TYPE OF COLUMN TRI_PDV_OPER.DIN, LOJA TYPE OF COLUMN TRI_PDV_OPER" +
                ".DIN, ALIMENTACAO TYPE OF COLUMN TRI_PDV_OPER.DIN, REFEICAO TYPE OF COLUMN TRI_P" +
                "DV_OPER.DIN, PRESENTE TYPE OF COLUMN TRI_PDV_OPER.DIN, COMBUSTIVEL TYPE OF COLUM" +
                "N TRI_PDV_OPER.DIN, OUTROS TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_1 TYPE OF COLU" +
                "MN TRI_PDV_OPER.DIN, EXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_3 TYPE OF CO" +
                "LUMN TRI_PDV_OPER.DIN, EXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_5 TYPE OF " +
                "COLUMN TRI_PDV_OPER.DIN, EXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_7 TYPE O" +
                "F COLUMN TRI_PDV_OPER.DIN, EXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_9 TYPE" +
                " OF COLUMN TRI_PDV_OPER.DIN, EXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.DIN, TROCAS TY" +
                "PE OF COLUMN TRI_PDV_OPER.DIN, SUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.DIN, SANG" +
                "RIAS TYPE OF COLUMN TRI_PDV_OPER.DIN, OPERADOR INTEGER, ABERTURA TIMESTAMP) AS B" +
                "EGIN UPDATE TRI_PDV_OPER SET ABERTO = \'\'N\'\', FECHADO = CURRENT_TIMESTAMP WHERE I" +
                "D_CAIXA =:CAIXA AND ABERTO = \'\'S\'\' AND CURRENTTIME = :ABERTURA; INSERT INTO TRI_" +
                "PDV_FECHAMENTOS(DIN, CHEQUE, CREDITO, DEBITO, LOJA, ALIMENTACAO, REFEICAO, PRESE" +
                "NTE, COMBUSTIVEL, OUTROS, EXTRA_1, EXTRA_2, EXTRA_3, EXTRA_4, EXTRA_5, EXTRA_6, " +
                "EXTRA_7, EXTRA_8, EXTRA_9, EXTRA_10, OPERADOR, ID_CAIXA, FECHADO, TROCAS, SUPRIM" +
                "ENTOS, SANGRIAS) VALUES(:DIN,:CHEQUE,:CREDITO,:DEBITO,:LOJA,:ALIMENTACAO,:REFEIC" +
                "AO,:PRESENTE,:COMBUSTIVEL,:OUTROS,:EXTRA_1,:EXTRA_2,:EXTRA_3,:EXTRA_4,:EXTRA_5,:" +
                "EXTRA_6,:EXTRA_7,:EXTRA_8,:EXTRA_9,:EXTRA_10,:OPERADOR,:CAIXA, CURRENT_TIMESTAMP" +
                ",:TROCAS,:SUPRIMENTOS,:SANGRIAS); UPDATE TRI_PDV_TERMINAL_USUARIO SET STATUS = \'" +
                "\'F\'\', TS_FECHAMENTO = CURRENT_TIMESTAMP WHERE NUM_CAIXA =:CAIXA AND STATUS = \'\'A" +
                "\'\'; END\';\r\n\r\nerro = \'sproc SP_TRI_ABRENOVOCAIXA\';\r\nexecute statement \'CREATE OR " +
                "ALTER PROCEDURE SP_TRI_ABRENOVOCAIXA (NUMCAIXA INTEGER, USERID INTEGER) AS BEGIN" +
                " INSERT INTO TRI_PDV_TERMINAL_USUARIO (ID_OPER, NUM_CAIXA, STATUS, TS_ABERTURA, " +
                "TS_FECHAMENTO, ID_USER) VALUES ((SELECT NEXT VALUE FOR GEN_TRI_PDV_TERM_USUARIO " +
                "FROM RDB$DATABASE), :NUMCAIXA, \'\'A\'\', CURRENT_TIMESTAMP, NULL, :userid); END\';\r\n" +
                "\r\nerro = \'sproc SP_TRI_OBTEMDADOSDOITEM\';\r\nexecute statement \'CREATE OR ALTER PR" +
                "OCEDURE SP_TRI_OBTEMDADOSDOITEM (codigoitem INTEGER) RETURNS (DESCRICAO TYPE OF " +
                "COLUMN TB_ESTOQUE.DESCRICAO, CFOP TYPE OF COLUMN TB_ESTOQUE.CFOP, UNI_MEDIDA TYP" +
                "E OF COLUMN TB_ESTOQUE.UNI_MEDIDA, COD_NCM TYPE OF COLUMN TB_EST_PRODUTO.COD_NCM" +
                ", COD_BARRA TYPE OF COLUMN TB_EST_PRODUTO.COD_BARRA, rCSOSN_CFE TYPE OF COLUMN T" +
                "B_EST_PRODUTO.CSOSN_CFE, rCST_CFE TYPE OF COLUMN TB_EST_PRODUTO.CST_CFE, rCST_PI" +
                "S TYPE OF COLUMN TB_ESTOQUE.CST_PIS, rCST_COFINS TYPE OF COLUMN TB_ESTOQUE.CST_C" +
                "OFINS, rPIS TYPE OF COLUMN TB_ESTOQUE.PIS, rCOFINS TYPE OF COLUMN TB_ESTOQUE.COF" +
                "INS, rUF_SP TYPE OF COLUMN TB_TAXA_UF.UF_SP, rBASE_ICMS TYPE OF COLUMN TB_TAXA_U" +
                "F.BASE_ICMS, rALIQ_ISS TYPE OF COLUMN TB_EST_SERVICO.ISS_ALIQ, rID_TIPOITEM TYPE" +
                " OF COLUMN TB_ESTOQUE.ID_TIPOITEM, rSTR_CEST TYPE OF COLUMN TB_EST_PRODUTO.COD_C" +
                "EST) AS BEGIN FOR SELECT A.DESCRICAO, A.CFOP, A.UNI_MEDIDA, C.COD_NCM, C.COD_BAR" +
                "RA, C.CSOSN_CFE, C.CST_CFE, A.CST_PIS, A.CST_COFINS, A.PIS, A.COFINS, COALESCE(D" +
                ".UF_SP, 0), COALESCE(D.BASE_ICMS, 0), COALESCE(E.ISS_ALIQ, 0), A.ID_TIPOITEM, C." +
                "COD_CEST FROM TB_ESTOQUE A INNER JOIN TB_EST_IDENTIFICADOR B ON (A.ID_ESTOQUE = " +
                "B.ID_ESTOQUE) LEFT JOIN TB_TAXA_UF D ON A.ID_CTI_CFE = D.ID_CTI LEFT JOIN TB_EST" +
                "_PRODUTO C ON B.ID_IDENTIFICADOR = C.ID_IDENTIFICADOR LEFT JOIN TB_EST_SERVICO E" +
                " ON E.ID_IDENTIFICADOR = B.ID_IDENTIFICADOR WHERE B.ID_IDENTIFICADOR = :codigoit" +
                "em INTO :DESCRICAO, :CFOP, :UNI_MEDIDA, :COD_NCM, :COD_BARRA, :rCSOSN_CFE, :rCST" +
                "_CFE, :rCST_PIS, :rCST_COFINS, :rPIS, :rCOFINS, :rUF_SP, :rBASE_ICMS, :rALIQ_ISS" +
                ", :rID_TIPOITEM, :rSTR_CEST DO SUSPEND; END\';\r\n\r\nerro = \'sproc lancacupom\';\r\nEXE" +
                "CUTE STATEMENT \'CREATE OR ALTER PROCEDURE SP_TRI_LANCACUPOM(ULTIMOCUPOM INTEGER," +
                " NUMCAIXA SMALLINT, VLRTOTAL TYPE OF COLUMN TRI_PDV_OPER.DIN, VLRTROCO TYPE OF C" +
                "OLUMN TRI_PDV_OPER.DIN, VLRDESC TYPE OF COLUMN TRI_PDV_OPER.DIN, TOTIBPT TYPE OF" +
                " COLUMN TRI_PDV_OPER.DIN, TOTTRIBEST TYPE OF COLUMN TRI_PDV_OPER.DIN, IDCLIENTE " +
                "INTEGER) RETURNS (COO INTEGER) AS BEGIN SELECT MAX(COO) FROM TB_CUPOM WHERE NUM_" +
                "CAIXA = :numcaixa INTO :COO; IF (:COO IS NULL) THEN COO = 0; COO = COO + 1; UPDA" +
                "TE TB_CUPOM SET DT_CUPOM = CURRENT_DATE, COO = :COO, HR_CUPOM = CURRENT_TIMESTAM" +
                "P, NUM_CAIXA =:numcaixa, STATUS = \'\'A\'\', VLR_TROCO =:vlrtroco, VLR_TOTAL =:vlrto" +
                "tal, VLR_DESC =:vlrdesc, TOTAL_TRIBUTOS_IBPT =:totibpt, TOTAL_TRIB_EST =:tottrib" +
                "est, ID_CLIENTE = :idcliente WHERE ID_CUPOM =:ultimocupom AND STATUS = \'\'N\'\'; SU" +
                "SPEND; END;\';\r\n\r\nerro = \'sproc cancelaultimo\';\r\nEXECUTE STATEMENT \'CREATE OR ALT" +
                "ER PROCEDURE SP_TRI_CANCELAULTIMOCUPOM (NUM_CUPOM INTEGER) RETURNS (COO INTEGER)" +
                " AS DECLARE VARIABLE chve VARCHAR(32); BEGIN SELECT CHAVE FROM TB_CUPOM WHERE ID" +
                "_CUPOM = :NUM_CUPOM INTO :chve; UPDATE TB_CUPOM SET STATUS = \'\'C\'\' WHERE ID_CUPO" +
                "M = :NUM_CUPOM; UPDATE TB_CUPOM SET CHAVE = :chve ||\'\'_CANC\'\' WHERE ID_CUPOM = :" +
                "NUM_CUPOM; UPDATE TB_CUPOM_ITEM SET ITEM_CANCEL = \'\'S\'\' WHERE ID_CUPOM = :NUM_CU" +
                "POM; UPDATE TB_CUPOM SET IND_CANCEL = \'\'S\'\' WHERE ID_CUPOM = :NUM_CUPOM; SELECT " +
                "COO FROM TB_CUPOM WHERE ID_CUPOM = :NUM_CUPOM INTO COO; END\';\r\n\r\nerro = \'sproc s" +
                "p_tri_atualizaconfig\';\r\nEXECUTE STATEMENT \'CREATE OR ALTER PROCEDURE SP_TRI_ATUA" +
                "LIZACONFIG (pMAC_ADRESS TYPE OF COLUMN TRI_PDV_CONFIG.ID_MAC, pNO_CAIXA TYPE OF " +
                "COLUMN TRI_PDV_CONFIG.NO_CAIXA, pEXIGE_SANG TYPE OF COLUMN TRI_PDV_CONFIG.EXIGE_" +
                "SANGRIA, pVALOR_MAX_CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.VALOR_MAX_CAIXA, pBLOQUE" +
                "IA_NO_LIMITE TYPE OF COLUMN TRI_PDV_CONFIG.BLOQUEIA_NO_LIMITE, pVALOR_DE_FOLGA T" +
                "YPE OF COLUMN TRI_PDV_CONFIG.VALOR_DE_FOLGA, pPERMITE_FOLGA_SANGRIA TYPE OF COLU" +
                "MN TRI_PDV_CONFIG.PERMITE_FOLGA_SANGRIA, pINTERROMPE_NAO_ENCONTRADO TYPE OF COLU" +
                "MN TRI_PDV_CONFIG.INTERROMPE_NAO_ENCONTRADO, pMENSAGEM_CORTESIA TYPE OF COLUMN T" +
                "RI_PDV_CONFIG.MENSAGEM_CORTESIA, pICMS_CONT TYPE OF COLUMN TRI_PDV_CONFIG.ICMS_C" +
                "ONT, pCSOSN_CONT TYPE OF COLUMN TRI_PDV_CONFIG.CSOSN_CONT, pPEDE_CPF TYPE OF COL" +
                "UMN TRI_PDV_CONFIG.PEDE_CPF, pPERMITE_ESTOQUE_NEGATIVO TYPE OF COLUMN TRI_PDV_CO" +
                "NFIG.PERMITE_ESTOQUE_NEGATIVO, pMODELO_CUPOM TYPE OF COLUMN TRI_PDV_CONFIG.MODEL" +
                "O_CUPOM, pMENSAGEM_RODAPE TYPE OF COLUMN TRI_PDV_CONFIG.MENSAGEM_RODAPE) AS BEGI" +
                "N UPDATE OR INSERT INTO TRI_PDV_CONFIG (ID_MAC, NO_CAIXA, EXIGE_SANGRIA, VALOR_M" +
                "AX_CAIXA, BLOQUEIA_NO_LIMITE, VALOR_DE_FOLGA, PERMITE_FOLGA_SANGRIA, INTERROMPE_" +
                "NAO_ENCONTRADO, MENSAGEM_CORTESIA, ICMS_CONT, CSOSN_CONT, PEDE_CPF, PERMITE_ESTO" +
                "QUE_NEGATIVO, MODELO_CUPOM, MENSAGEM_RODAPE) VALUES (:pMAC_ADRESS, :pNO_CAIXA, :" +
                "pEXIGE_SANG, :pVALOR_MAX_CAIXA, :pBLOQUEIA_NO_LIMITE, :pVALOR_DE_FOLGA, :pPERMIT" +
                "E_FOLGA_SANGRIA, :pINTERROMPE_NAO_ENCONTRADO, :pMENSAGEM_CORTESIA, :pICMS_CONT, " +
                ":pCSOSN_CONT, :pPEDE_CPF, :pPERMITE_ESTOQUE_NEGATIVO, :pMODELO_CUPOM, :pMENSAGEM" +
                "_RODAPE) MATCHING (ID_MAC); END\';\r\n\r\nerro = \'sproc sp_tri_caixaexistente\';\r\nexec" +
                "ute statement \'CREATE OR ALTER PROCEDURE SP_TRI_CAIXAEXISTENTE RETURNS (ID_MAC T" +
                "YPE OF COLUMN TRI_PDV_CONFIG.ID_MAC, NO_CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_C" +
                "AIXA, EXIGE_SANGRIA TYPE OF COLUMN TRI_PDV_CONFIG.EXIGE_SANGRIA, VALOR_MAX_CAIXA" +
                " TYPE OF COLUMN TRI_PDV_CONFIG.VALOR_MAX_CAIXA, VALOR_DE_FOLGA TYPE OF COLUMN TR" +
                "I_PDV_CONFIG.VALOR_DE_FOLGA, PERMITE_FOLGA_SANGRIA TYPE OF COLUMN TRI_PDV_CONFIG" +
                ".PERMITE_FOLGA_SANGRIA, INTERROMPE_NAO_ENCONTRADO TYPE OF COLUMN TRI_PDV_CONFIG." +
                "INTERROMPE_NAO_ENCONTRADO, MENSAGEM_CORTESIA TYPE OF COLUMN TRI_PDV_CONFIG.MENSA" +
                "GEM_CORTESIA, ICMS_CONT TYPE OF COLUMN TRI_PDV_CONFIG.ICMS_CONT, CSOSN_CONT TYPE" +
                " OF COLUMN TRI_PDV_CONFIG.CSOSN_CONT, BLOQUEIA_NO_LIMITE TYPE OF COLUMN TRI_PDV_" +
                "CONFIG.BLOQUEIA_NO_LIMITE, PEDE_CPF TYPE OF COLUMN TRI_PDV_CONFIG.PEDE_CPF, PERM" +
                "ITE_ESTOQUE_NEGATIVO TYPE OF COLUMN TRI_PDV_CONFIG.PERMITE_ESTOQUE_NEGATIVO, MOD" +
                "ELO_CUPOM TYPE OF COLUMN TRI_PDV_CONFIG.MODELO_CUPOM, MENSAGEM_RODAPE TYPE OF CO" +
                "LUMN TRI_PDV_CONFIG.MENSAGEM_RODAPE) AS BEGIN FOR SELECT ID_MAC, NO_CAIXA, EXIGE" +
                "_SANGRIA, VALOR_MAX_CAIXA, VALOR_DE_FOLGA, PERMITE_FOLGA_SANGRIA, INTERROMPE_NAO" +
                "_ENCONTRADO, MENSAGEM_CORTESIA, ICMS_CONT, CSOSN_CONT, BLOQUEIA_NO_LIMITE, PEDE_" +
                "CPF, PERMITE_ESTOQUE_NEGATIVO, MODELO_CUPOM, MENSAGEM_RODAPE FROM TRI_PDV_CONFIG" +
                " WHERE NO_CAIXA = (SELECT FIRST 1 NO_CAIXA FROM TRI_PDV_CONFIG) INTO :ID_MAC, :N" +
                "O_CAIXA, :EXIGE_SANGRIA, :VALOR_MAX_CAIXA, :VALOR_DE_FOLGA, :PERMITE_FOLGA_SANGR" +
                "IA, :INTERROMPE_NAO_ENCONTRADO, :MENSAGEM_CORTESIA, :ICMS_CONT, :CSOSN_CONT, :BL" +
                "OQUEIA_NO_LIMITE, :PEDE_CPF, :PERMITE_ESTOQUE_NEGATIVO, :MODELO_CUPOM, :MENSAGEM" +
                "_RODAPE DO SUSPEND; END\';\r\n\r\nerro = \'sproc sp_tri_checapor_nocaixa\';\r\nexecute st" +
                "atement \'CREATE OR ALTER PROCEDURE SP_TRI_CHECAPOR_NOCAIXA (pNO_CAIXA TYPE OF CO" +
                "LUMN TRI_PDV_CONFIG.NO_CAIXA, pID_MAC TYPE OF COLUMN TRI_PDV_CONFIG.ID_MAC) RETU" +
                "RNS (QTDE_CAIXAS INTEGER) AS BEGIN FOR SELECT COUNT(*) AS Expr1 FROM TRI_PDV_CON" +
                "FIG WHERE (NO_CAIXA = :pNO_CAIXA) AND (ID_MAC <> :pID_MAC) INTO :QTDE_CAIXAS DO " +
                "SUSPEND; END\';\r\n\r\nerro = \'sproc sp_tri_config_getby_caixa\';\r\nexecute statement \'" +
                "CREATE OR ALTER PROCEDURE SP_TRI_CONFIG_GETBY_CAIXA (pNO_CAIXA TYPE OF COLUMN TR" +
                "I_PDV_CONFIG.NO_CAIXA) RETURNS (ID_MAC TYPE OF COLUMN TRI_PDV_CONFIG.ID_MAC, NO_" +
                "CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA, EXIGE_SANGRIA TYPE OF COLUMN TRI_P" +
                "DV_CONFIG.EXIGE_SANGRIA, VALOR_MAX_CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.VALOR_MAX" +
                "_CAIXA, BLOQUEIA_NO_LIMITE TYPE OF COLUMN TRI_PDV_CONFIG.BLOQUEIA_NO_LIMITE, VAL" +
                "OR_DE_FOLGA TYPE OF COLUMN TRI_PDV_CONFIG.VALOR_DE_FOLGA, PERMITE_FOLGA_SANGRIA " +
                "TYPE OF COLUMN TRI_PDV_CONFIG.PERMITE_FOLGA_SANGRIA, INTERROMPE_NAO_ENCONTRADO T" +
                "YPE OF COLUMN TRI_PDV_CONFIG.INTERROMPE_NAO_ENCONTRADO, MENSAGEM_CORTESIA TYPE O" +
                "F COLUMN TRI_PDV_CONFIG.MENSAGEM_CORTESIA, ICMS_CONT TYPE OF COLUMN TRI_PDV_CONF" +
                "IG.ICMS_CONT, CSOSN_CONT TYPE OF COLUMN TRI_PDV_CONFIG.CSOSN_CONT, PEDE_CPF TYPE" +
                " OF COLUMN TRI_PDV_CONFIG.PEDE_CPF, PERMITE_ESTOQUE_NEGATIVO TYPE OF COLUMN TRI_" +
                "PDV_CONFIG.PERMITE_ESTOQUE_NEGATIVO, MODELO_CUPOM TYPE OF COLUMN TRI_PDV_CONFIG." +
                "MODELO_CUPOM, MENSAGEM_RODAPE TYPE OF COLUMN TRI_PDV_CONFIG.MENSAGEM_RODAPE, TRI" +
                "_PDV_DT_UPD TYPE OF COLUMN TRI_PDV_CONFIG.TRI_PDV_DT_UPD) AS BEGIN FOR SELECT ID" +
                "_MAC, NO_CAIXA, EXIGE_SANGRIA, VALOR_MAX_CAIXA, BLOQUEIA_NO_LIMITE, VALOR_DE_FOL" +
                "GA, PERMITE_FOLGA_SANGRIA, INTERROMPE_NAO_ENCONTRADO, MENSAGEM_CORTESIA, ICMS_CO" +
                "NT, CSOSN_CONT, PEDE_CPF, PERMITE_ESTOQUE_NEGATIVO, MODELO_CUPOM, MENSAGEM_RODAP" +
                "E, TRI_PDV_DT_UPD FROM TRI_PDV_CONFIG where NO_CAIXA = :pNO_CAIXA INTO :ID_MAC, " +
                ":NO_CAIXA, :EXIGE_SANGRIA, :VALOR_MAX_CAIXA, :BLOQUEIA_NO_LIMITE, :VALOR_DE_FOLG" +
                "A, :PERMITE_FOLGA_SANGRIA, :INTERROMPE_NAO_ENCONTRADO, :MENSAGEM_CORTESIA, :ICMS" +
                "_CONT, :CSOSN_CONT, :PEDE_CPF, :PERMITE_ESTOQUE_NEGATIVO, :MODELO_CUPOM, :MENSAG" +
                "EM_RODAPE, :TRI_PDV_DT_UPD DO SUSPEND; END\';\r\n\r\nerro = \'sproc sp_tri_config_getb" +
                "y_mac\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_CONFIG_GETBY_MAC (p" +
                "ID_MAC TYPE OF COLUMN TRI_PDV_CONFIG.ID_MAC) RETURNS (ID_MAC TYPE OF COLUMN TRI_" +
                "PDV_CONFIG.ID_MAC, NO_CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA, EXIGE_SANGRI" +
                "A TYPE OF COLUMN TRI_PDV_CONFIG.EXIGE_SANGRIA, VALOR_MAX_CAIXA TYPE OF COLUMN TR" +
                "I_PDV_CONFIG.VALOR_MAX_CAIXA, BLOQUEIA_NO_LIMITE TYPE OF COLUMN TRI_PDV_CONFIG.B" +
                "LOQUEIA_NO_LIMITE, VALOR_DE_FOLGA TYPE OF COLUMN TRI_PDV_CONFIG.VALOR_DE_FOLGA, " +
                "PERMITE_FOLGA_SANGRIA TYPE OF COLUMN TRI_PDV_CONFIG.PERMITE_FOLGA_SANGRIA, INTER" +
                "ROMPE_NAO_ENCONTRADO TYPE OF COLUMN TRI_PDV_CONFIG.INTERROMPE_NAO_ENCONTRADO, ME" +
                "NSAGEM_CORTESIA TYPE OF COLUMN TRI_PDV_CONFIG.MENSAGEM_CORTESIA, ICMS_CONT TYPE " +
                "OF COLUMN TRI_PDV_CONFIG.ICMS_CONT, CSOSN_CONT TYPE OF COLUMN TRI_PDV_CONFIG.CSO" +
                "SN_CONT, PEDE_CPF TYPE OF COLUMN TRI_PDV_CONFIG.PEDE_CPF, PERMITE_ESTOQUE_NEGATI" +
                "VO TYPE OF COLUMN TRI_PDV_CONFIG.PERMITE_ESTOQUE_NEGATIVO, MODELO_CUPOM TYPE OF " +
                "COLUMN TRI_PDV_CONFIG.MODELO_CUPOM, MENSAGEM_RODAPE TYPE OF COLUMN TRI_PDV_CONFI" +
                "G.MENSAGEM_RODAPE, TRI_PDV_DT_UPD TYPE OF COLUMN TRI_PDV_CONFIG.TRI_PDV_DT_UPD) " +
                "AS BEGIN FOR SELECT ID_MAC, NO_CAIXA, EXIGE_SANGRIA, VALOR_MAX_CAIXA, BLOQUEIA_N" +
                "O_LIMITE, VALOR_DE_FOLGA, PERMITE_FOLGA_SANGRIA, INTERROMPE_NAO_ENCONTRADO, MENS" +
                "AGEM_CORTESIA, ICMS_CONT, CSOSN_CONT, PEDE_CPF, PERMITE_ESTOQUE_NEGATIVO, MODELO" +
                "_CUPOM, MENSAGEM_RODAPE, TRI_PDV_DT_UPD FROM TRI_PDV_CONFIG where ID_MAC = :pID_" +
                "MAC INTO :ID_MAC, :NO_CAIXA, :EXIGE_SANGRIA, :VALOR_MAX_CAIXA, :BLOQUEIA_NO_LIMI" +
                "TE, :VALOR_DE_FOLGA, :PERMITE_FOLGA_SANGRIA, :INTERROMPE_NAO_ENCONTRADO, :MENSAG" +
                "EM_CORTESIA, :ICMS_CONT, :CSOSN_CONT, :PEDE_CPF, :PERMITE_ESTOQUE_NEGATIVO, :MOD" +
                "ELO_CUPOM, :MENSAGEM_RODAPE, :TRI_PDV_DT_UPD DO SUSPEND; END\';\r\n\r\nerro = \'sproc " +
                "SP_TRI_OBTEMDADOSDOSERV\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_O" +
                "BTEMDADOSDOSERV (CODIGOITEM INTEGER) RETURNS (DESCRICAO VARCHAR(50), CFOP VARCHA" +
                "R(4), UNI_MEDIDA VARCHAR(3), COD_NCM VARCHAR(8)) AS BEGIN FOR SELECT A.DESCRICAO" +
                ", A.CFOP, A.UNI_MEDIDA, \'\'00000000\'\' FROM TB_ESTOQUE A INNER JOIN TB_EST_IDENTIF" +
                "ICADOR B ON (A.ID_ESTOQUE = B.ID_ESTOQUE) WHERE B.ID_IDENTIFICADOR = :codigoitem" +
                " INTO :DESCRICAO, :CFOP, :UNI_MEDIDA, :COD_NCM DO SUSPEND; END\';\r\n\r\nerro = \'spro" +
                "c SP_TRI_MT_ITM_USD_IDNTF_QTD_GET\';\r\nexecute statement \'CREATE OR ALTER PROCEDUR" +
                "E SP_TRI_MT_ITM_USD_IDNTF_QTD_GET (pIdCompPro INTEGER) RETURNS (ID_IDENTIFICADOR" +
                " integer, QTD_ITEM TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.QTD_ITEM) AS BEGIN FOR " +
                "SELECT teciu.ID_IDENTIFICADOR, teciu.QTD_ITEM FROM TB_EST_COMP_PRODUCAO tecp JOI" +
                "N TB_EST_COMP_ITEM_USADO teciu ON tecp.ID_COMPPRO = teciu.ID_COMPPROD WHERE tecp" +
                ".ID_COMPPRO = :pIdCompPro INTO :ID_IDENTIFICADOR, :QTD_ITEM DO SUSPEND; END;\';\r\n" +
                "\r\nerro = \'sproc SP_TRI_MAIT_PEDIDO_GETBY_ID\';\r\nexecute statement \'CREATE OR ALTE" +
                "R PROCEDURE SP_TRI_MAIT_PEDIDO_GETBY_ID (pID_MAIT_PEDIDO INTEGER) RETURNS (ID_MA" +
                "IT_PEDIDO TYPE OF COLUMN TRI_MAIT_PEDIDO.ID_MAIT_PEDIDO, TS_EMISSAO TYPE OF COLU" +
                "MN TRI_MAIT_PEDIDO.TS_EMISSAO, ID_USER TYPE OF COLUMN TRI_MAIT_PEDIDO.ID_USER, N" +
                "R_PEDIDO TYPE OF COLUMN TRI_MAIT_PEDIDO.NR_PEDIDO, ABERTO TYPE OF COLUMN TRI_MAI" +
                "T_PEDIDO.ABERTO, OBSERVACAO TYPE OF COLUMN TRI_MAIT_PEDIDO.OBSERVACAO, ID_CAIXA " +
                "TYPE OF COLUMN TRI_MAIT_PEDIDO.ID_CAIXA) AS BEGIN for SELECT ID_MAIT_PEDIDO, TS_" +
                "EMISSAO, ID_USER, NR_PEDIDO, ABERTO, OBSERVACAO, ID_CAIXA FROM TRI_MAIT_PEDIDO W" +
                "HERE ID_MAIT_PEDIDO = :pID_MAIT_PEDIDO INTO :ID_MAIT_PEDIDO, :TS_EMISSAO, :ID_US" +
                "ER, :NR_PEDIDO, :ABERTO, :OBSERVACAO, :ID_CAIXA DO BEGIN SUSPEND; END END;\';\r\n\r\n" +
                "erro = \'sproc SP_TRI_MAITPEDIDO_SYNCINSERT\';\r\nexecute statement \'CREATE OR ALTER" +
                " PROCEDURE SP_TRI_MAITPEDIDO_SYNCINSERT (pTS_EMISSAO TYPE OF COLUMN TRI_MAIT_PED" +
                "IDO.TS_EMISSAO, pID_USER TYPE OF COLUMN TRI_MAIT_PEDIDO.ID_USER, pNR_PEDIDO TYPE" +
                " OF COLUMN TRI_MAIT_PEDIDO.NR_PEDIDO, pABERTO TYPE OF COLUMN TRI_MAIT_PEDIDO.ABE" +
                "RTO, pOBSERVACAO TYPE OF COLUMN TRI_MAIT_PEDIDO.OBSERVACAO, pID_CAIXA TYPE OF CO" +
                "LUMN TRI_MAIT_PEDIDO.ID_CAIXA) RETURNS (newIdMaitPedido INTEGER) AS DECLARE VARI" +
                "ABLE ULTIMOPEDIDO INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_MAIT_PEDIDO_ID FROM R" +
                "DB$DATABASE INTO :ULTIMOPEDIDO; IF(:ULTIMOPEDIDO IS NULL) THEN ULTIMOPEDIDO = 0;" +
                " BEGIN INSERT INTO TRI_MAIT_PEDIDO (ID_MAIT_PEDIDO, TS_EMISSAO, ID_USER, NR_PEDI" +
                "DO, ABERTO, OBSERVACAO, ID_CAIXA) VALUES (:ULTIMOPEDIDO, :pTS_EMISSAO, :pID_USER" +
                ", :pNR_PEDIDO, :pABERTO, :pOBSERVACAO, :pID_CAIXA); newIdMaitPedido = ULTIMOPEDI" +
                "DO; END END;\';\r\n\r\nerro = \'sproc SP_TRI_MAIT_PEDCUPOM_SYNCINSERT\';\r\nexecute state" +
                "ment \'CREATE OR ALTER PROCEDURE SP_TRI_MAIT_PEDCUPOM_SYNCINSERT (pID_MAIT_PEDIDO" +
                " TYPE OF COLUMN TRI_MAIT_PEDIDO_CUPOM.ID_MAIT_PEDIDO, pID_CUPOM TYPE OF COLUMN T" +
                "RI_MAIT_PEDIDO_CUPOM.ID_CUPOM) AS BEGIN INSERT INTO TRI_MAIT_PEDIDO_CUPOM (ID_MA" +
                "IT_PEDIDO, ID_CUPOM) VALUES (:pID_MAIT_PEDIDO, :pID_CUPOM); END;\';\r\n\r\nerro = \'sp" +
                "roc SP_TRI_MAITPEDITEM_SYNCINSERT\';\r\nexecute statement \'CREATE OR ALTER PROCEDUR" +
                "E SP_TRI_MAITPEDITEM_SYNCINSERT (pID_MAIT_PEDIDO TYPE OF COLUMN TRI_MAIT_PEDIDO_" +
                "ITEM.ID_MAIT_PEDIDO, pID_IDENTIFICADOR TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.ID_ID" +
                "ENTIFICADOR, pQTD_ITEM TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.QTD_ITEM) RETURNS (ne" +
                "wIdMaitPedidoItem INTEGER) AS DECLARE VARIABLE ULTIMOPEDIDOITEM INTEGER; BEGIN S" +
                "ELECT NEXT VALUE FOR GEN_TRI_MAIT_PED_ITEM_ID FROM RDB$DATABASE INTO :ULTIMOPEDI" +
                "DOITEM; IF(:ULTIMOPEDIDOITEM IS NULL) THEN ULTIMOPEDIDOITEM = 0; BEGIN INSERT IN" +
                "TO TRI_MAIT_PEDIDO_ITEM (ID_MAIT_PEDIDO_ITEM, ID_MAIT_PEDIDO, ID_IDENTIFICADOR, " +
                "QTD_ITEM) VALUES (:ULTIMOPEDIDOITEM, :pID_MAIT_PEDIDO, :pID_IDENTIFICADOR, :pQTD" +
                "_ITEM); newIdMaitPedidoItem = ULTIMOPEDIDOITEM; END END;\';\r\n\r\nerro = \'sproc SP_T" +
                "RI_MAIT_PEDITEM_GETBY_ID\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_" +
                "MAIT_PEDITEM_GETBY_ID (pID_MAIT_PEDIDO_ITEM INTEGER) RETURNS (ID_MAIT_PEDIDO_ITE" +
                "M TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.ID_MAIT_PEDIDO_ITEM, ID_MAIT_PEDIDO TYPE O" +
                "F COLUMN TRI_MAIT_PEDIDO_ITEM.ID_MAIT_PEDIDO, ID_IDENTIFICADOR TYPE OF COLUMN TR" +
                "I_MAIT_PEDIDO_ITEM.ID_IDENTIFICADOR, QTD_ITEM TYPE OF COLUMN TRI_MAIT_PEDIDO_ITE" +
                "M.QTD_ITEM) AS BEGIN for SELECT ID_MAIT_PEDIDO_ITEM, ID_MAIT_PEDIDO, ID_IDENTIFI" +
                "CADOR, QTD_ITEM FROM TRI_MAIT_PEDIDO_ITEM WHERE ID_MAIT_PEDIDO_ITEM = :pID_MAIT_" +
                "PEDIDO_ITEM INTO :ID_MAIT_PEDIDO_ITEM, :ID_MAIT_PEDIDO, :ID_IDENTIFICADOR, :QTD_" +
                "ITEM DO BEGIN SUSPEND; END END;\';\r\n\r\nerro = \'sproc SP_TRI_MTPDITM_CPITM_SYNCINSE" +
                "RT\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_MTPDITM_CPITM_SYNCINSE" +
                "RT (pID_MAIT_PEDIDO_ITEM TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.ID_MAIT_PEDIDO, pID" +
                "_ITEMCUP TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.ID_IDENTIFICADOR) AS BEGIN INSERT I" +
                "NTO TRI_MAIT_PED_ITEM_CUPOM_ITEM (ID_MAIT_PEDIDO_ITEM, ID_ITEMCUP) VALUES (:pID_" +
                "MAIT_PEDIDO_ITEM, :pID_ITEMCUP); END;\';\r\n\r\nerro = \'sproc COMPOSICAO get by dt up" +
                "d\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_MAIT_ESTCOMP_GETBY_DTUP" +
                "D (pUltimaSync TIMESTAMP) RETURNS (ID_COMPOSICAO TYPE OF COLUMN TB_EST_COMPOSICA" +
                "O.ID_COMPOSICAO, DESCRICAO TYPE OF COLUMN TB_EST_COMPOSICAO.DESCRICAO, ID_IDENTI" +
                "FICADOR TYPE OF COLUMN TB_EST_COMPOSICAO.ID_IDENTIFICADOR, TRI_PDV_DT_UPD TYPE O" +
                "F COLUMN TB_EST_COMPOSICAO.TRI_PDV_DT_UPD) AS BEGIN FOR SELECT ID_COMPOSICAO, DE" +
                "SCRICAO, ID_IDENTIFICADOR, TRI_PDV_DT_UPD FROM TB_EST_COMPOSICAO WHERE TRI_PDV_D" +
                "T_UPD > :pUltimaSync INTO :ID_COMPOSICAO, :DESCRICAO, :ID_IDENTIFICADOR, :TRI_PD" +
                "V_DT_UPD DO BEGIN SUSPEND; END END;\';\r\n\r\nerro = \'sproc COMPOSICAO sync upsert\';\r" +
                "\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_MAIT_ESTCOMP_UPSERT (pID_CO" +
                "MPOSICAO TYPE OF COLUMN TB_EST_COMPOSICAO.ID_COMPOSICAO, pDESCRICAO TYPE OF COLU" +
                "MN TB_EST_COMPOSICAO.DESCRICAO, pID_IDENTIFICADOR TYPE OF COLUMN TB_EST_COMPOSIC" +
                "AO.ID_IDENTIFICADOR, pTRI_PDV_DT_UPD TYPE OF COLUMN TB_EST_COMPOSICAO.TRI_PDV_DT" +
                "_UPD) AS BEGIN UPDATE OR INSERT INTO TB_EST_COMPOSICAO (ID_COMPOSICAO, DESCRICAO" +
                ", ID_IDENTIFICADOR, TRI_PDV_DT_UPD) VALUES (:pID_COMPOSICAO, :pDESCRICAO, :pID_I" +
                "DENTIFICADOR, :pTRI_PDV_DT_UPD) MATCHING (ID_COMPOSICAO); END;\';\r\n\r\nerro = \'deu " +
                "certo\';\r\n\r\nSUSPEND;\r\nWHEN ANY DO\r\nBEGIN\r\nEND\r\nEND;";
            this._commandCollection[19].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[20] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[20].Connection = this.Connection;
            this._commandCollection[20].CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_PROCEDURES6 \r\nRETURNS\r\n(\r\nerro VARCHAR(64)\r\n)\r\nA" +
                "S\r\nBEGIN\r\n\r\nerro = \'sproc SP_TRI_MT_COMPITEM_GETBY_IDCOMP\';\r\nexecute statement \'" +
                "CREATE OR ALTER PROCEDURE SP_TRI_MT_COMPITEM_GETBY_IDCOMP ( pID_COMPOSICAO INTEG" +
                "ER ) RETURNS ( ID_ITEMCOMP TYPE OF COLUMN TB_EST_COMP_ITEM.ID_ITEMCOMP , QTD_ITE" +
                "M TYPE OF COLUMN TB_EST_COMP_ITEM.QTD_ITEM , ID_COMPOSICAO TYPE OF COLUMN TB_EST" +
                "_COMP_ITEM.ID_COMPOSICAO , ID_IDENTIFICADOR TYPE OF COLUMN TB_EST_COMP_ITEM.ID_I" +
                "DENTIFICADOR ) AS BEGIN for SELECT ID_ITEMCOMP, QTD_ITEM, ID_COMPOSICAO , ID_IDE" +
                "NTIFICADOR FROM TB_EST_COMP_ITEM WHERE ID_COMPOSICAO = :pID_COMPOSICAO INTO :ID_" +
                "ITEMCOMP , :QTD_ITEM , :ID_COMPOSICAO , :ID_IDENTIFICADOR DO BEGIN SUSPEND ; END" +
                " END;\';\r\n\r\nerro = \'sproc SP_TRI_MAIT_ESTCOMP_SYNCINSERT\';\r\nexecute statement \'CR" +
                "EATE OR ALTER PROCEDURE SP_TRI_MAIT_ESTCOMP_SYNCINSERT ( pID_COMPOSICAO TYPE OF " +
                "COLUMN TB_EST_COMPOSICAO.ID_COMPOSICAO , pDESCRICAO TYPE OF COLUMN TB_EST_COMPOS" +
                "ICAO.DESCRICAO , pID_IDENTIFICADOR TYPE OF COLUMN TB_EST_COMPOSICAO.ID_IDENTIFIC" +
                "ADOR , pTRI_PDV_DT_UPD TYPE OF COLUMN TB_EST_COMPOSICAO.TRI_PDV_DT_UPD ) RETURNS" +
                " (rRowsAffected INTEGER) AS BEGIN BEGIN UPDATE OR INSERT INTO TB_EST_COMPOSICAO " +
                "(ID_COMPOSICAO , DESCRICAO , ID_IDENTIFICADOR , TRI_PDV_DT_UPD ) VALUES (:pID_CO" +
                "MPOSICAO , :pDESCRICAO , :pID_IDENTIFICADOR , :pTRI_PDV_DT_UPD ) MATCHING (ID_CO" +
                "MPOSICAO ) ; rRowsAffected = ROW_COUNT; END END;\';\r\n\r\nerro = \'sproc SP_TRI_MAITR" +
                "E_LANCAPEDIDO\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_MAITRE_LANC" +
                "APEDIDO ( PEDIDO INTEGER , USUARIO INTEGER , OBSERVACAO BLOB SUB_TYPE 1 , ID_CAI" +
                "XA INTEGER , pID_CUPOM INTEGER ) RETURNS ( IDPEDIDO INTEGER ) AS BEGIN SELECT NE" +
                "XT VALUE FOR GEN_MAIT_PEDIDO_ID FROM RDB$DATABASE INTO :idpedido ; INSERT INTO T" +
                "RI_MAIT_PEDIDO VALUES (:idpedido , CURRENT_TIMESTAMP , :usuario , :pedido , \'\'N\'" +
                "\' , :observacao , :ID_CAIXA ) ; INSERT INTO TRI_MAIT_PEDIDO_CUPOM (ID_MAIT_PEDID" +
                "O , ID_CUPOM ) VALUES (:idpedido , :pID_CUPOM ) ; END\';\r\n\r\nerro = \'sproc SP_TRI_" +
                "MAITRE_PEDIDO_NR_GET\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_MAIT" +
                "RE_PEDIDO_NR_GET ( PEDIDOMAX INTEGER ) RETURNS ( NRPEDIDOATUAL INTEGER ) AS BEGI" +
                "N NRPEDIDOATUAL = ( SELECT NEXT VALUE FOR GEN_MAITRE_PEDIDO FROM RDB$DATABASE ) " +
                "; IF (NRPEDIDOATUAL >= PEDIDOMAX) THEN BEGIN EXECUTE STATEMENT \'\'ALTER SEQUENCE " +
                "GEN_MAITRE_PEDIDO RESTART WITH 0;\'\'; END  SUSPEND;  END\';\r\n\r\nerro = \'sproc SP_TR" +
                "I_MT_ESTCMP_ITEM_SYNCINSRT\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TR" +
                "I_MT_ESTCMP_ITEM_SYNCINSRT ( pID_ITEMCOMP TYPE OF COLUMN TB_EST_COMP_ITEM.ID_ITE" +
                "MCOMP , pQTD_ITEM TYPE OF COLUMN TB_EST_COMP_ITEM.QTD_ITEM , pID_COMPOSICAO TYPE" +
                " OF COLUMN TB_EST_COMP_ITEM.ID_COMPOSICAO , pID_IDENTIFICADOR TYPE OF COLUMN TB_" +
                "EST_COMP_ITEM.ID_IDENTIFICADOR ) RETURNS (rRowsAffected INTEGER) AS BEGIN BEGIN " +
                "UPDATE OR INSERT INTO TB_EST_COMP_ITEM (ID_ITEMCOMP , QTD_ITEM , ID_COMPOSICAO ," +
                " ID_IDENTIFICADOR ) VALUES (:pID_ITEMCOMP , :pQTD_ITEM , :pID_COMPOSICAO , :pID_" +
                "IDENTIFICADOR ) MATCHING (ID_ITEMCOMP ) ; rRowsAffected = ROW_COUNT; END END;\';\r" +
                "\n\r\nerro = \'sproc SP_TRI_MAITRE_PROCESSA_COMP\';\r\nexecute statement \'CREATE OR ALT" +
                "ER PROCEDURE SP_TRI_MAITRE_PROCESSA_COMP ( IDPEDIDOITEM INTEGER , IDIDENTIFICADO" +
                "R INTEGER , QUANT TYPE OF COLUMN TB_EST_COMP_PRODUCAO.QT_COMPPRO ) RETURNS ( ERR" +
                "O VARCHAR(50) ) AS DECLARE idcomppro INTEGER; DECLARE idcomposi INTEGER; DECLARE" +
                " idIdentifComponente INTEGER; DECLARE quantItemComponente INTEGER; DECLARE idite" +
                "musado INTEGER; DECLARE vPRC_VENDA_Componente TYPE OF COLUMN TB_EST_COMP_ITEM_US" +
                "ADO.PRC_VENDA; BEGIN ERRO = \'\'get id_composicao from id_identif\'\'; SELECT FIRST " +
                "1 ID_COMPOSICAO FROM TB_EST_COMPOSICAO WHERE ID_IDENTIFICADOR = :ididentificador" +
                " ORDER BY ID_COMPOSICAO DESC INTO :idcomposi ; ERRO = \'\'get value from GEN_TB_ES" +
                "T_COMP_PRODUCAO_ID\'\'; SELECT NEXT VALUE FOR GEN_TB_EST_COMP_PRODUCAO_ID FROM RDB" +
                "$DATABASE INTO :idcomppro ; ERRO = \'\' insert TB_EST_COMP_PRODUCAO\'\' ; INSERT INT" +
                "O TB_EST_COMP_PRODUCAO (ID_COMPPRO , ID_COMPOSICAO , QT_COMPPRO , DT_COMPPRO , H" +
                "R_COMPPRO , OBSERVACAO , GERADO , MONTADO , ID_IDENTIFICADOR ) VALUES (:idcomppr" +
                "o , :idcomposi , :quant , CURRENT_DATE , CURRENT_TIME , \'\'\'\' , \'\'S\'\' , \'\'M\'\' , :" +
                "ididentificador ) ; ERRO = \'\' select TB_EST_COMP_ITEM\'\' ; FOR SELECT ID_IDENTIFI" +
                "CADOR, QTD_ITEM FROM TB_EST_COMP_ITEM WHERE ID_COMPOSICAO = :idcomposi INTO :idI" +
                "dentifComponente, :quantItemComponente DO BEGIN SELECT te.PRC_VENDA FROM TB_ESTO" +
                "QUE te JOIN TB_EST_IDENTIFICADOR tei ON tei.ID_ESTOQUE = te.ID_ESTOQUE WHERE tei" +
                ".ID_IDENTIFICADOR = :idIdentifComponente INTO :vPRC_VENDA_Componente ; ERRO = \'\'" +
                " insert TB_EST_COMP_ITEM_USADO\'\' ; INSERT INTO TB_EST_COMP_ITEM_USADO (ID_ITEMCO" +
                "MP , ID_COMPPROD , QTD_ITEM , DT_BAIXA , HR_BAIXA , PRC_MEDIO , PRC_VENDA , ID_I" +
                "DENTIFICADOR ) VALUES (NULL , :idcomppro , :quantItemComponente , CURRENT_DATE ," +
                " CURRENT_TIME , 0 , :vPRC_VENDA_Componente , :idIdentifComponente ) ; END ERRO =" +
                " \'\' insert TRI_MAIT_PED_ITEM_COMPPROD\'\' ; INSERT INTO TRI_MAIT_PED_ITEM_COMPPROD" +
                " (ID_MAIT_PEDIDO_ITEM , ID_COMPPRO ) VALUES (:IDPEDIDOITEM , :idcomppro ) ; ERRO" +
                " = \'\'deu certo\'\'; SUSPEND; END\';\r\n\r\nerro = \'sproc SP_TRI_MAIT_COMPPROD_SYNCINSER" +
                "T\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_MAIT_COMPPROD_SYNCINSER" +
                "T ( pID_COMPOSICAO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.ID_COMPOSICAO , pQT_COMPP" +
                "RO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.QT_COMPPRO , pDT_COMPPRO TYPE OF COLUMN T" +
                "B_EST_COMP_PRODUCAO.DT_COMPPRO , pHR_COMPPRO TYPE OF COLUMN TB_EST_COMP_PRODUCAO" +
                ".HR_COMPPRO , pOBSERVACAO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.OBSERVACAO , pGERA" +
                "DO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.GERADO , pMONTADO TYPE OF COLUMN TB_EST_C" +
                "OMP_PRODUCAO.MONTADO , pID_IDENTIFICADOR TYPE OF COLUMN TB_EST_COMP_PRODUCAO.ID_" +
                "IDENTIFICADOR ) RETURNS ( newID_COMPPRO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.ID_C" +
                "OMPPRO ) AS BEGIN SELECT NEXT VALUE FOR GEN_TB_EST_COMP_PRODUCAO_ID FROM RDB$DAT" +
                "ABASE INTO :newID_COMPPRO ; IF( :newID_COMPPRO IS NULL ) THEN newID_COMPPRO = 0;" +
                " BEGIN INSERT INTO TB_EST_COMP_PRODUCAO (ID_COMPPRO , ID_COMPOSICAO , QT_COMPPRO" +
                " , DT_COMPPRO , HR_COMPPRO , OBSERVACAO , GERADO , MONTADO , ID_IDENTIFICADOR ) " +
                "VALUES (:newID_COMPPRO , :pID_COMPOSICAO , :pQT_COMPPRO , :pDT_COMPPRO , :pHR_CO" +
                "MPPRO , :pOBSERVACAO , :pGERADO , :pMONTADO , :pID_IDENTIFICADOR ) ; END END;\';\r" +
                "\n\r\nerro = \'sproc SP_TRI_MAIT_COMPPROD_GETBYID\';\r\nexecute statement \'CREATE OR AL" +
                "TER PROCEDURE SP_TRI_MAIT_COMPPROD_GETBYID ( pID_COMPPRO TYPE OF COLUMN TB_EST_C" +
                "OMP_PRODUCAO.ID_COMPPRO ) RETURNS ( ID_COMPPRO TYPE OF COLUMN TB_EST_COMP_PRODUC" +
                "AO.ID_COMPPRO , ID_COMPOSICAO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.ID_COMPOSICAO " +
                ", QT_COMPPRO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.QT_COMPPRO , DT_COMPPRO TYPE OF" +
                " COLUMN TB_EST_COMP_PRODUCAO.DT_COMPPRO , HR_COMPPRO TYPE OF COLUMN TB_EST_COMP_" +
                "PRODUCAO.HR_COMPPRO , OBSERVACAO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.OBSERVACAO " +
                ", GERADO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.GERADO , MONTADO TYPE OF COLUMN TB_" +
                "EST_COMP_PRODUCAO.MONTADO , ID_IDENTIFICADOR TYPE OF COLUMN TB_EST_COMP_PRODUCAO" +
                ".ID_IDENTIFICADOR ) AS BEGIN for SELECT ID_COMPPRO, ID_COMPOSICAO, QT_COMPPRO , " +
                "DT_COMPPRO, HR_COMPPRO , OBSERVACAO , GERADO , MONTADO , ID_IDENTIFICADOR FROM T" +
                "B_EST_COMP_PRODUCAO WHERE ID_COMPPRO = :pID_COMPPRO INTO :ID_COMPPRO , :ID_COMPO" +
                "SICAO , :QT_COMPPRO , :DT_COMPPRO , :HR_COMPPRO , :OBSERVACAO , :GERADO , :MONTA" +
                "DO , :ID_IDENTIFICADOR DO BEGIN SUSPEND ; END END;\';\r\n\r\nerro = \'sproc SP_TRI_MAI" +
                "T_COMPPRODUSD_GETBYCP\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_MAI" +
                "T_COMPPRODUSD_GETBYCP ( pID_COMPPROD TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.ID_CO" +
                "MPPROD ) RETURNS ( ID_ITEMCOMP TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.ID_ITEMCOMP" +
                " , ID_COMPPROD TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.ID_COMPPROD , QTD_ITEM TYPE" +
                " OF COLUMN TB_EST_COMP_ITEM_USADO.QTD_ITEM , DT_BAIXA TYPE OF COLUMN TB_EST_COMP" +
                "_ITEM_USADO.DT_BAIXA , HR_BAIXA TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.HR_BAIXA ," +
                " PRC_MEDIO TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.PRC_MEDIO , PRC_VENDA TYPE OF C" +
                "OLUMN TB_EST_COMP_ITEM_USADO.PRC_VENDA , ID_IDENTIFICADOR TYPE OF COLUMN TB_EST_" +
                "COMP_ITEM_USADO.ID_IDENTIFICADOR ) AS BEGIN for SELECT ID_ITEMCOMP, ID_COMPPROD," +
                " QTD_ITEM , DT_BAIXA , HR_BAIXA , PRC_MEDIO , PRC_VENDA , ID_IDENTIFICADOR FROM " +
                "TB_EST_COMP_ITEM_USADO WHERE ID_COMPPROD = :pID_COMPPROD INTO :ID_ITEMCOMP , :ID" +
                "_COMPPROD , :QTD_ITEM , :DT_BAIXA , :HR_BAIXA , :PRC_MEDIO , :PRC_VENDA , :ID_ID" +
                "ENTIFICADOR DO BEGIN SUSPEND ; END END;\';\r\n\r\nerro = \'sproc SP_TRI_MAIT_COMPITMUS" +
                "D_SYNCNSRT\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_MAIT_COMPITMUS" +
                "D_SYNCNSRT ( pID_COMPPROD TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.ID_COMPPROD , pQ" +
                "TD_ITEM TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.QTD_ITEM , pDT_BAIXA TYPE OF COLUM" +
                "N TB_EST_COMP_ITEM_USADO.DT_BAIXA , pHR_BAIXA TYPE OF COLUMN TB_EST_COMP_ITEM_US" +
                "ADO.HR_BAIXA , pPRC_MEDIO TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.PRC_MEDIO , pPRC" +
                "_VENDA TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.PRC_VENDA , pID_IDENTIFICADOR TYPE " +
                "OF COLUMN TB_EST_COMP_ITEM_USADO.ID_IDENTIFICADOR ) RETURNS ( newID_ITEMCOMP TYP" +
                "E OF COLUMN TB_EST_COMP_ITEM_USADO.ID_ITEMCOMP ) AS BEGIN SELECT NEXT VALUE FOR " +
                "GEN_TB_EST_COMP_ITEM_USADO_ID FROM RDB$DATABASE INTO :newID_ITEMCOMP ;  IF( :new" +
                "ID_ITEMCOMP IS NULL ) THEN newID_ITEMCOMP = 0; BEGIN INSERT INTO TB_EST_COMP_ITE" +
                "M_USADO (ID_ITEMCOMP , ID_COMPPROD , QTD_ITEM , DT_BAIXA , HR_BAIXA , PRC_MEDIO " +
                ", PRC_VENDA , ID_IDENTIFICADOR ) VALUES (:newID_ITEMCOMP , :pID_COMPPROD , :pQTD" +
                "_ITEM , :pDT_BAIXA , :pHR_BAIXA , :pPRC_MEDIO , :pPRC_VENDA , :pID_IDENTIFICADOR" +
                " ) ;  END END;\';\r\n\r\nerro = \'sproc SP_TRI_MT_PDITM_COMPRD_SYNCNSRT\';\r\nexecute sta" +
                "tement \'CREATE OR ALTER PROCEDURE SP_TRI_MT_PDITM_COMPRD_SYNCNSRT ( pID_MAIT_PED" +
                "IDO_ITEM TYPE OF COLUMN TRI_MAIT_PED_ITEM_COMPPROD.ID_MAIT_PEDIDO_ITEM , pID_COM" +
                "PPRO TYPE OF COLUMN TRI_MAIT_PED_ITEM_COMPPROD.ID_COMPPRO ) AS BEGIN INSERT INTO" +
                " TRI_MAIT_PED_ITEM_COMPPROD (ID_MAIT_PEDIDO_ITEM , ID_COMPPRO ) VALUES (:pID_MAI" +
                "T_PEDIDO_ITEM , :pID_COMPPRO ) ; END;\';\r\n\r\nerro = \'sproc SP_TRI_MAITRE_LANCAITEM" +
                "PEDIDO\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_MAITRE_LANCAITEMPE" +
                "DIDO ( IDPEDIDO INTEGER , IDPRODUTO INTEGER , QUANT TYPE OF COLUMN TRI_MAIT_PEDI" +
                "DO_ITEM.QTD_ITEM , OBSERVACAO TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.OBSERVACAO ) R" +
                "ETURNS (COMPOSICAO INTEGER, IDPEDIDOITEM INTEGER ) AS BEGIN SELECT NEXT VALUE FO" +
                "R GEN_TRI_MAIT_PED_ITEM_ID FROM RDB$DATABASE INTO :IDPEDIDOITEM ; INSERT INTO TR" +
                "I_MAIT_PEDIDO_ITEM VALUES (:idpedidoitem , :idpedido , :idproduto , :quant , :OB" +
                "SERVACAO, null, null ) ; SELECT COUNT(1) FROM TB_EST_COMPOSICAO WHERE ID_IDENTIF" +
                "ICADOR = :IDPRODUTO INTO :COMPOSICAO ; SUSPEND; END\';\r\n\r\nerro = \'sproc SP_TRI_EN" +
                "VIA_SAT_SERVIDOR\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_ENVIA_SA" +
                "T_SERVIDOR (PNUMCAIXA INTEGER, PXML_A_ENV BLOB SUB_TYPE 0) RETURNS (RID_TRANSACA" +
                "O INTEGER) AS BEGIN SELECT NEXT VALUE FOR GEN_TRI_PDV_SAT_ENV FROM RDB$DATABASE " +
                "INTO :rID_TRANSACAO; INSERT INTO TRI_PDV_SAT_ENV (ID_TRANSACAO, NUM_CAIXA, XML_A" +
                "_ENV, PROCESSADO, HORAATUAL) VALUES(:rID_TRANSACAO, :pNUMCAIXA, :pXML_A_ENV, \'\'N" +
                "\'\', current_timestamp); END\';\r\n\r\nerro = \'sproc ultimocupom_venda\';\r\nexecute stat" +
                "ement \'CREATE OR ALTER PROCEDURE SP_TRI_ULTIMOCUPOM_VENDA (CAIXA INTEGER) RETURN" +
                "S ( ULTIMOCUPOM INTEGER, ULTIMOCOO INTEGER ) AS BEGIN SELECT MAX(ID_CUPOM) FROM " +
                "TB_CUPOM WHERE NUM_CAIXA = :CAIXA AND CHAVE IS NOT NULL INTO :ultimocupom; IF (:" +
                "ultimocupom IS NULL) THEN BEGIN ultimocupom = 0; ultimocoo = 0; END ELSE BEGIN S" +
                "ELECT COO FROM TB_CUPOM WHERE ID_CUPOM = :ultimocupom INTO :ultimocoo; END SUSPE" +
                "ND; END\';\r\n\r\nerro = \'gen GEN_TRI_PDV_SAT_ENV\';\r\nif (NOT exists(SELECT 1 FROM RDB" +
                "$GENERATORS WHERE RDB$Generator_name= \'GEN_TRI_PDV_SAT_ENV\'))\r\nthen\r\nEXECUTE STA" +
                "TEMENT \'CREATE GENERATOR GEN_TRI_PDV_SAT_ENV;\';\r\n\r\nerro = \'trig NOVO_CFE_VENDA\';" +
                "\r\nif (NOT exists(SELECT RDB$TRIGGER_NAME FROM RDB$TRIGGERS WHERE RDB$TRIGGER_NAM" +
                "E = \'NOVO_CFE_VENDA\'))\r\nthen\r\nexecute statement \'CREATE TRIGGER NOVO_CFE_VENDA F" +
                "OR TRI_PDV_SAT_ENV AFTER INSERT AS BEGIN POST_EVENT \'\'NOVO_CFE_RECEBIDO\'\'; END;\'" +
                ";\r\n\r\nerro = \'trig NOVO_CFE_VENDA\';\r\nif (NOT exists(SELECT RDB$TRIGGER_NAME FROM " +
                "RDB$TRIGGERS WHERE RDB$TRIGGER_NAME = \'NOVA_RESP_VENDA\'))\r\nthen\r\nexecute stateme" +
                "nt \'CREATE TRIGGER NOVA_RESP_VENDA FOR TRI_PDV_SAT_REC AFTER INSERT AS BEGIN POS" +
                "T_EVENT \'\'NOVA_RESP_RECEBIDA\'\'; END;\';\r\n\r\nerro = \'sproc SP_TRI_PDV_OPR_GETBY_ID_" +
                "CX_LAST\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_PDV_OPR_GETBY_ID_" +
                "CX_LAST ( pID_CAIXA TYPE OF COLUMN TRI_PDV_OPER.ID_CAIXA ) RETURNS ( ID_CAIXA TY" +
                "PE OF COLUMN TRI_PDV_OPER.ID_CAIXA, DIN TYPE OF COLUMN TRI_PDV_OPER.DIN, CHEQUE " +
                "TYPE OF COLUMN TRI_PDV_OPER.CHEQUE, CREDITO TYPE OF COLUMN TRI_PDV_OPER.CREDITO," +
                " DEBITO TYPE OF COLUMN TRI_PDV_OPER.DEBITO, LOJA TYPE OF COLUMN TRI_PDV_OPER.LOJ" +
                "A, ALIMENTACAO TYPE OF COLUMN TRI_PDV_OPER.ALIMENTACAO, REFEICAO TYPE OF COLUMN " +
                "TRI_PDV_OPER.REFEICAO, PRESENTE TYPE OF COLUMN TRI_PDV_OPER.PRESENTE, COMBUSTIVE" +
                "L TYPE OF COLUMN TRI_PDV_OPER.COMBUSTIVEL, OUTROS TYPE OF COLUMN TRI_PDV_OPER.OU" +
                "TROS, EXTRA_1 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_1, EXTRA_2 TYPE OF COLUMN TRI_PD" +
                "V_OPER.EXTRA_2, EXTRA_3 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_3, EXTRA_4 TYPE OF COL" +
                "UMN TRI_PDV_OPER.EXTRA_4, EXTRA_5 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_5, EXTRA_6 T" +
                "YPE OF COLUMN TRI_PDV_OPER.EXTRA_6, EXTRA_7 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_7," +
                " EXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_8, EXTRA_9 TYPE OF COLUMN TRI_PDV_OPE" +
                "R.EXTRA_9, EXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_10, CURRENTTIME TYPE OF CO" +
                "LUMN TRI_PDV_OPER.CURRENTTIME, ABERTO TYPE OF COLUMN TRI_PDV_OPER.ABERTO, HASH T" +
                "YPE OF COLUMN TRI_PDV_OPER.HASH, SANGRIAS TYPE OF COLUMN TRI_PDV_OPER.SANGRIAS, " +
                "SUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.SUPRIMENTOS, TROCAS TYPE OF COLUMN TRI_P" +
                "DV_OPER.TROCAS, FECHADO TYPE OF COLUMN TRI_PDV_OPER.FECHADO, ID_OPER TYPE OF COL" +
                "UMN TRI_PDV_OPER.ID_OPER, ID_USER TYPE OF COLUMN TRI_PDV_OPER.ID_USER, TRI_PDV_D" +
                "T_UPD TYPE OF COLUMN TRI_PDV_OPER.TRI_PDV_DT_UPD ) AS BEGIN for SELECT FIRST 1 I" +
                "D_CAIXA , DIN , CHEQUE , CREDITO , DEBITO , LOJA , ALIMENTACAO, REFEICAO , PRESE" +
                "NTE , COMBUSTIVEL, OUTROS , EXTRA_1 , EXTRA_2 , EXTRA_3 , EXTRA_4 , EXTRA_5 , EX" +
                "TRA_6 , EXTRA_7 , EXTRA_8 , EXTRA_9 , EXTRA_10 , CURRENTTIME, ABERTO , HASH , SA" +
                "NGRIAS , SUPRIMENTOS, TROCAS , FECHADO , ID_OPER , ID_USER , TRI_PDV_DT_UPD FROM" +
                " TRI_PDV_OPER WHERE ID_CAIXA = :pID_CAIXA ORDER BY CURRENTTIME DESC INTO :ID_CAI" +
                "XA , :DIN , :CHEQUE , :CREDITO , :DEBITO , :LOJA , :ALIMENTACAO, :REFEICAO , :PR" +
                "ESENTE , :COMBUSTIVEL, :OUTROS , :EXTRA_1 , :EXTRA_2 , :EXTRA_3 , :EXTRA_4 , :EX" +
                "TRA_5 , :EXTRA_6 , :EXTRA_7 , :EXTRA_8 , :EXTRA_9 , :EXTRA_10 , :CURRENTTIME, :A" +
                "BERTO , :HASH , :SANGRIAS , :SUPRIMENTOS, :TROCAS , :FECHADO , :ID_OPER , :ID_US" +
                "ER , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;\';\r\n\r\nerro = \'sproc SP_TRI_PDV_O" +
                "PR_GETBY_IDCX_CURT\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_PDV_OP" +
                "R_GETBY_IDCX_CURT ( pID_CAIXA TYPE OF COLUMN TRI_PDV_OPER.ID_CAIXA, pCURRENTTIME" +
                " TYPE OF COLUMN TRI_PDV_OPER.CURRENTTIME ) RETURNS ( ID_CAIXA TYPE OF COLUMN TRI" +
                "_PDV_OPER.ID_CAIXA, DIN TYPE OF COLUMN TRI_PDV_OPER.DIN, CHEQUE TYPE OF COLUMN T" +
                "RI_PDV_OPER.CHEQUE, CREDITO TYPE OF COLUMN TRI_PDV_OPER.CREDITO, DEBITO TYPE OF " +
                "COLUMN TRI_PDV_OPER.DEBITO, LOJA TYPE OF COLUMN TRI_PDV_OPER.LOJA, ALIMENTACAO T" +
                "YPE OF COLUMN TRI_PDV_OPER.ALIMENTACAO, REFEICAO TYPE OF COLUMN TRI_PDV_OPER.REF" +
                "EICAO, PRESENTE TYPE OF COLUMN TRI_PDV_OPER.PRESENTE, COMBUSTIVEL TYPE OF COLUMN" +
                " TRI_PDV_OPER.COMBUSTIVEL, OUTROS TYPE OF COLUMN TRI_PDV_OPER.OUTROS, EXTRA_1 TY" +
                "PE OF COLUMN TRI_PDV_OPER.EXTRA_1, EXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_2, " +
                "EXTRA_3 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_3, EXTRA_4 TYPE OF COLUMN TRI_PDV_OPER" +
                ".EXTRA_4, EXTRA_5 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_5, EXTRA_6 TYPE OF COLUMN TR" +
                "I_PDV_OPER.EXTRA_6, EXTRA_7 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_7, EXTRA_8 TYPE OF" +
                " COLUMN TRI_PDV_OPER.EXTRA_8, EXTRA_9 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_9, EXTRA" +
                "_10 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_10, CURRENTTIME TYPE OF COLUMN TRI_PDV_OPE" +
                "R.CURRENTTIME, ABERTO TYPE OF COLUMN TRI_PDV_OPER.ABERTO, HASH TYPE OF COLUMN TR" +
                "I_PDV_OPER.HASH, SANGRIAS TYPE OF COLUMN TRI_PDV_OPER.SANGRIAS, SUPRIMENTOS TYPE" +
                " OF COLUMN TRI_PDV_OPER.SUPRIMENTOS, TROCAS TYPE OF COLUMN TRI_PDV_OPER.TROCAS, " +
                "FECHADO TYPE OF COLUMN TRI_PDV_OPER.FECHADO, ID_OPER TYPE OF COLUMN TRI_PDV_OPER" +
                ".ID_OPER, ID_USER TYPE OF COLUMN TRI_PDV_OPER.ID_USER, TRI_PDV_DT_UPD TYPE OF CO" +
                "LUMN TRI_PDV_OPER.TRI_PDV_DT_UPD ) AS BEGIN for SELECT ID_CAIXA , DIN , CHEQUE ," +
                " CREDITO , DEBITO , LOJA , ALIMENTACAO , REFEICAO , PRESENTE , COMBUSTIVEL , OUT" +
                "ROS , EXTRA_1 , EXTRA_2 , EXTRA_3 , EXTRA_4 , EXTRA_5 , EXTRA_6 , EXTRA_7 , EXTR" +
                "A_8 , EXTRA_9 , EXTRA_10 , CURRENTTIME , ABERTO , HASH , SANGRIAS , SUPRIMENTOS," +
                " TROCAS , FECHADO , ID_OPER , ID_USER , TRI_PDV_DT_UPD FROM TRI_PDV_OPER WHERE I" +
                "D_CAIXA = :pID_CAIXA AND CURRENTTIME = :pCURRENTTIME INTO :ID_CAIXA , :DIN , :CH" +
                "EQUE , :CREDITO , :DEBITO , :LOJA , :ALIMENTACAO, :REFEICAO , :PRESENTE , :COMBU" +
                "STIVEL, :OUTROS , :EXTRA_1 , :EXTRA_2 , :EXTRA_3 , :EXTRA_4 , :EXTRA_5 , :EXTRA_" +
                "6 , :EXTRA_7 , :EXTRA_8 , :EXTRA_9 , :EXTRA_10 , :CURRENTTIME, :ABERTO , :HASH ," +
                " :SANGRIAS , :SUPRIMENTOS, :TROCAS , :FECHADO , :ID_OPER , :ID_USER , :TRI_PDV_D" +
                "T_UPD DO BEGIN SUSPEND ; END END;\';\r\n\r\nerro = \'sproc SP_TRI_OPER_UPSERT_IDCX_CUR" +
                "T\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_OPER_UPSERT_IDCX_CURT (" +
                " pID_CAIXA INTEGER , pDIN TYPE OF COLUMN TRI_PDV_OPER.DIN , pCHEQUE TYPE OF COLU" +
                "MN TRI_PDV_OPER.DIN , pCREDITO TYPE OF COLUMN TRI_PDV_OPER.DIN , pDEBITO TYPE OF" +
                " COLUMN TRI_PDV_OPER.DIN , pLOJA TYPE OF COLUMN TRI_PDV_OPER.DIN , pALIMENTACAO " +
                "TYPE OF COLUMN TRI_PDV_OPER.DIN , pREFEICAO TYPE OF COLUMN TRI_PDV_OPER.DIN , pP" +
                "RESENTE TYPE OF COLUMN TRI_PDV_OPER.DIN , pCOMBUSTIVEL TYPE OF COLUMN TRI_PDV_OP" +
                "ER.DIN , pOUTROS TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_1 TYPE OF COLUMN TRI_P" +
                "DV_OPER.DIN , pEXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_3 TYPE OF COLUMN" +
                " TRI_PDV_OPER.DIN , pEXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_5 TYPE OF " +
                "COLUMN TRI_PDV_OPER.DIN , pEXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_7 TY" +
                "PE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTR" +
                "A_9 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.DIN " +
                ", pCURRENTTIME TIMESTAMP , pABERTO VARCHAR(1) , pHASH VARCHAR(32) , pSANGRIAS TY" +
                "PE OF COLUMN TRI_PDV_OPER.DIN , pSUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.DIN , p" +
                "TROCAS TYPE OF COLUMN TRI_PDV_OPER.DIN , pFECHADO TIMESTAMP , pID_USER INTEGER ," +
                " pTRI_PDV_DT_UPD TIMESTAMP ) AS BEGIN UPDATE OR INSERT INTO TRI_PDV_OPER (ID_CAI" +
                "XA , DIN , CHEQUE , CREDITO , DEBITO , LOJA , ALIMENTACAO , REFEICAO , PRESENTE " +
                ", COMBUSTIVEL , OUTROS , EXTRA_1 , EXTRA_2 , EXTRA_3 , EXTRA_4 , EXTRA_5 , EXTRA" +
                "_6 , EXTRA_7 , EXTRA_8 , EXTRA_9 , EXTRA_10 , CURRENTTIME , ABERTO , HASH , SANG" +
                "RIAS , SUPRIMENTOS , TROCAS , FECHADO , ID_USER , TRI_PDV_DT_UPD ) VALUES (:pID_" +
                "CAIXA , :pDIN , :pCHEQUE , :pCREDITO , :pDEBITO , :pLOJA , :pALIMENTACAO , :pREF" +
                "EICAO , :pPRESENTE , :pCOMBUSTIVEL , :pOUTROS , :pEXTRA_1 , :pEXTRA_2 , :pEXTRA_" +
                "3 , :pEXTRA_4 , :pEXTRA_5 , :pEXTRA_6 , :pEXTRA_7 , :pEXTRA_8 , :pEXTRA_9 , :pEX" +
                "TRA_10 , :pCURRENTTIME , :pABERTO , :pHASH , :pSANGRIAS , :pSUPRIMENTOS , :pTROC" +
                "AS , :pFECHADO , :pID_USER , :pTRI_PDV_DT_UPD ) MATCHING (ID_CAIXA , CURRENTTIME" +
                " ) ; END;\';\r\n\r\nerro = \'sproc SP_TRI_FUNCIONARIO_UPSERT\';\r\nexecute statement \'CRE" +
                "ATE OR ALTER PROCEDURE SP_TRI_FUNCIONARIO_UPSERT ( pID_FUNCIONARIO TYPE OF COLUM" +
                "N TB_FUNCIONARIO.ID_FUNCIONARIO, pID_CIDADE TYPE OF COLUMN TB_FUNCIONARIO.ID_CID" +
                "ADE, pN_REGISTRO TYPE OF COLUMN TB_FUNCIONARIO.N_REGISTRO, pCPF TYPE OF COLUMN T" +
                "B_FUNCIONARIO.CPF, pNOME TYPE OF COLUMN TB_FUNCIONARIO.NOME, pRG TYPE OF COLUMN " +
                "TB_FUNCIONARIO.RG, pEND_CEP TYPE OF COLUMN TB_FUNCIONARIO.END_CEP, pEND_TIPO TYP" +
                "E OF COLUMN TB_FUNCIONARIO.END_TIPO, pEND_LOGRAD TYPE OF COLUMN TB_FUNCIONARIO.E" +
                "ND_LOGRAD, pEND_NUMERO TYPE OF COLUMN TB_FUNCIONARIO.END_NUMERO, pEND_COMPLE TYP" +
                "E OF COLUMN TB_FUNCIONARIO.END_COMPLE, pEND_BAIRRO TYPE OF COLUMN TB_FUNCIONARIO" +
                ".END_BAIRRO, pDDD TYPE OF COLUMN TB_FUNCIONARIO.DDD, pFONE TYPE OF COLUMN TB_FUN" +
                "CIONARIO.FONE, pCELULAR TYPE OF COLUMN TB_FUNCIONARIO.CELULAR, pEMAIL TYPE OF CO" +
                "LUMN TB_FUNCIONARIO.EMAIL, pSALARIO TYPE OF COLUMN TB_FUNCIONARIO.SALARIO, pEXTR" +
                "A TYPE OF COLUMN TB_FUNCIONARIO.EXTRA, pDATA_NASCT TYPE OF COLUMN TB_FUNCIONARIO" +
                ".DATA_NASCT, pDATA_ADMIS TYPE OF COLUMN TB_FUNCIONARIO.DATA_ADMIS, pDATA_DEMIS T" +
                "YPE OF COLUMN TB_FUNCIONARIO.DATA_DEMIS, pRAMAL TYPE OF COLUMN TB_FUNCIONARIO.RA" +
                "MAL, pSENHA TYPE OF COLUMN TB_FUNCIONARIO.SENHA, pIP TYPE OF COLUMN TB_FUNCIONAR" +
                "IO.IP, pSTATUS TYPE OF COLUMN TB_FUNCIONARIO.STATUS, pID_SETOR TYPE OF COLUMN TB" +
                "_FUNCIONARIO.ID_SETOR, pID_CARGO TYPE OF COLUMN TB_FUNCIONARIO.ID_CARGO, pFOTO T" +
                "YPE OF COLUMN TB_FUNCIONARIO.FOTO, pPIS TYPE OF COLUMN TB_FUNCIONARIO.PIS, pAPEL" +
                "IDO TYPE OF COLUMN TB_FUNCIONARIO.APELIDO, pOBSERVACAO TYPE OF COLUMN TB_FUNCION" +
                "ARIO.OBSERVACAO ) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO" +
                " TB_FUNCIONARIO ( ID_FUNCIONARIO, ID_CIDADE, N_REGISTRO, CPF, NOME, RG, END_CEP," +
                " END_TIPO, END_LOGRAD, END_NUMERO, END_COMPLE, END_BAIRRO, DDD, FONE, CELULAR, E" +
                "MAIL, SALARIO, EXTRA, DATA_NASCT, DATA_ADMIS, DATA_DEMIS, RAMAL, SENHA, IP, STAT" +
                "US, ID_SETOR, ID_CARGO, FOTO, PIS, APELIDO, OBSERVACAO ) VALUES ( :pID_FUNCIONAR" +
                "IO, :pID_CIDADE, :pN_REGISTRO, :pCPF, :pNOME, :pRG, :pEND_CEP, :pEND_TIPO, :pEND" +
                "_LOGRAD, :pEND_NUMERO, :pEND_COMPLE, :pEND_BAIRRO, :pDDD, :pFONE, :pCELULAR, :pE" +
                "MAIL, :pSALARIO, :pEXTRA, :pDATA_NASCT, :pDATA_ADMIS, :pDATA_DEMIS, :pRAMAL, :pS" +
                "ENHA, :pIP, :pSTATUS, :pID_SETOR, :pID_CARGO, :pFOTO, :pPIS, :pAPELIDO, :pOBSERV" +
                "ACAO ) MATCHING ( ID_FUNCIONARIO ); rRowsAffected = ROW_COUNT; END;\';\r\n\r\nerro = " +
                "\'sproc SP_TRI_UNIMEDIDA_UPSERT\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE S" +
                "P_TRI_UNIMEDIDA_UPSERT ( pUNIDADE TYPE OF COLUMN TB_UNI_MEDIDA.UNIDADE, pDESCRIC" +
                "AO TYPE OF COLUMN TB_UNI_MEDIDA.DESCRICAO, pCONVERSOR TYPE OF COLUMN TB_UNI_MEDI" +
                "DA.CONVERSOR, pSTATUS TYPE OF COLUMN TB_UNI_MEDIDA.STATUS, pUNIDADE_EX TYPE OF C" +
                "OLUMN TB_UNI_MEDIDA.UNIDADE_EX ) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE" +
                " OR INSERT INTO TB_UNI_MEDIDA ( UNIDADE, DESCRICAO, CONVERSOR, STATUS, UNIDADE_E" +
                "X ) VALUES ( :pUNIDADE, :pDESCRICAO, :pCONVERSOR, :pSTATUS, :pUNIDADE_EX ) MATCH" +
                "ING ( UNIDADE ) ; rRowsAffected = ROW_COUNT; END;\';\r\n\r\nerro = \'sproc SP_TRI_FUNC" +
                "PAPEL_INSERT\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_FUNCPAPEL_IN" +
                "SERT ( pID_FUNCIONARIO TYPE OF COLUMN TB_FUNC_PAPEL.ID_FUNCIONARIO , pID_PAPEL T" +
                "YPE OF COLUMN TB_FUNC_PAPEL.ID_PAPEL ) RETURNS (rRowsAffected INTEGER) AS BEGIN " +
                "INSERT INTO TB_FUNC_PAPEL (ID_FUNCIONARIO , ID_PAPEL ) VALUES (:pID_FUNCIONARIO " +
                ", :pID_PAPEL ) ; rRowsAffected = ROW_COUNT; END;\';\r\n\r\nerro = \'sproc SP_TRI_METOD" +
                "OS_UPSERT\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_METODOS_UPSERT " +
                "( pID_PAGAMENTO TYPE OF COLUMN TRI_PDV_METODOS.ID_PAGAMENTO , pDESCRICAO TYPE OF" +
                " COLUMN TRI_PDV_METODOS.DESCRICAO , pDIAS TYPE OF COLUMN TRI_PDV_METODOS.DIAS , " +
                "pMETODO TYPE OF COLUMN TRI_PDV_METODOS.METODO , pPGTOCFE TYPE OF COLUMN TRI_PDV_" +
                "METODOS.PGTOCFE , pATIVO TYPE OF COLUMN TRI_PDV_METODOS.ATIVO ) RETURNS (rRowsAf" +
                "fected INTEGER) AS BEGIN UPDATE TRI_PDV_METODOS SET DESCRICAO=:pDESCRICAO, DIAS=" +
                ":pDIAS, METODO=:pMETODO, PGTOCFE=:pPGTOCFE, ATIVO=:pATIVO WHERE ID_PAGAMENTO=:pI" +
                "D_PAGAMENTO; rRowsAffected = ROW_COUNT; END;\';\r\n\r\nerro = \'sproc SP_TRI_PDV_AUXSY" +
                "NC_GETBY_NCAIXA\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_PDV_AUXSY" +
                "NC_GETBY_NCAIXA ( pNO_CAIXA TYPE OF COLUMN TRI_PDV_AUX_SYNC.NO_CAIXA ) RETURNS (" +
                " SEQ TYPE OF COLUMN TRI_PDV_AUX_SYNC.SEQ, ID_REG TYPE OF COLUMN TRI_PDV_AUX_SYNC" +
                ".ID_REG, TABELA TYPE OF COLUMN TRI_PDV_AUX_SYNC.TABELA, OPERACAO TYPE OF COLUMN " +
                "TRI_PDV_AUX_SYNC.OPERACAO, NO_CAIXA TYPE OF COLUMN TRI_PDV_AUX_SYNC.NO_CAIXA, TS" +
                "_OPER TYPE OF COLUMN TRI_PDV_AUX_SYNC.TS_OPER, UN_REG TYPE OF COLUMN TRI_PDV_AUX" +
                "_SYNC.UN_REG, SM_REG TYPE OF COLUMN TRI_PDV_AUX_SYNC.SM_REG, CH_REG TYPE OF COLU" +
                "MN TRI_PDV_AUX_SYNC.CH_REG ) AS BEGIN for SELECT SEQ , ID_REG , TABELA , OPERACA" +
                "O , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG FROM TRI_PDV_AUX_SYNC WHERE (N" +
                "O_CAIXA = :pNO_CAIXA OR NO_CAIXA = 0) INTO :SEQ , :ID_REG , :TABELA , :OPERACAO " +
                ", :NO_CAIXA , :TS_OPER , :UN_REG , :SM_REG , :CH_REG DO BEGIN SUSPEND ; END END;" +
                "\';\r\n\r\nerro = \'sproc SP_TRI_PDV_AUXSYNC_DELBY_NCAIXA\';\r\nexecute statement \'CREATE" +
                " OR ALTER PROCEDURE SP_TRI_PDV_AUXSYNC_DELBY_NCAIXA ( pNO_CAIXA TYPE OF COLUMN T" +
                "RI_PDV_AUX_SYNC.NO_CAIXA ) AS BEGIN DELETE FROM TRI_PDV_AUX_SYNC WHERE ( NO_CAIX" +
                "A = :pNO_CAIXA ) ; END;\';\r\n\r\nerro = \'sproc SP_TRI_ESTOQUE_GETBY_ID\';\r\nexecute st" +
                "atement \'CREATE OR ALTER PROCEDURE SP_TRI_ESTOQUE_GETBY_ID (PID_ESTOQUE INTEGER)" +
                " RETURNS ( ID_ESTOQUE INTEGER, ID_GRUPO INTEGER, DESCRICAO VARCHAR(50), STATUS V" +
                "ARCHAR(1), DT_CADAST DATE, HR_CADAST TIME, FRACIONADO CHAR(1), PRC_VENDA NUMERIC" +
                "(18,4), PRC_CUSTO NUMERIC(18,4), ULT_VENDA DATE, MARGEM_LB NUMERIC(18,4), POR_CO" +
                "MISSAO NUMERIC(18,4), ULT_FORNEC INTEGER, GRADE_SERIE CHAR(1), ID_TIPOITEM VARCH" +
                "AR(2), ID_CTI CHAR(3), CST_PIS VARCHAR(3), CST_COFINS VARCHAR(3), PIS NUMERIC(18" +
                ",4), COFINS NUMERIC(18,4), UNI_MEDIDA VARCHAR(3), MARGEM_PV NUMERIC(18,4), CFOP " +
                "VARCHAR(4), OBSERVACAO BLOB, NAT_RECEITA SMALLINT, CFOP_NF VARCHAR(4), PRC_ATACA" +
                "DO NUMERIC(18,4), ID_CTI_PART CHAR(3), ID_CTI_FCP CHAR(3), QTD_ATACADO NUMERIC(1" +
                "8,4), ID_CTI_CFE CHAR(3), EMPCADASTRO VARCHAR(18), ALIQINTERNA NUMERIC(18,4), TR" +
                "I_PDV_DT_UPD TIMESTAMP, MARGEM_LB_ATAC NUMERIC(18,4), INFCOMPLEMENTAR VARCHAR(25" +
                "0), ID_MOTIVO_DESO INTEGER, ID_CTAPLA INTEGER, COD_ANVISA VARCHAR(13), PMC NUMER" +
                "IC(18,4), IRRF NUMERIC(18,4), MED_MOTIVO_ISENCAO VARCHAR(255), CONTROLEESP INTEG" +
                "ER, ID_SUBGRUPO SMALLINT, COD_BENEF_CFOP INTEGER, TP_PRC_ATACADO SMALLINT ) AS B" +
                "EGIN FOR SELECT A.ID_ESTOQUE , A.ID_GRUPO , A.DESCRICAO , A.STATUS , A.DT_CADAST" +
                " , A.HR_CADAST , A.FRACIONADO , A.PRC_VENDA , A.PRC_CUSTO , A.ULT_VENDA , A.MARG" +
                "EM_LB , A.POR_COMISSAO , A.ULT_FORNEC , A.GRADE_SERIE , A.ID_TIPOITEM , A.ID_CTI" +
                " , A.CST_PIS , A.CST_COFINS , A.PIS , A.COFINS , A.UNI_MEDIDA , A.MARGEM_PV , A." +
                "CFOP , A.OBSERVACAO , A.NAT_RECEITA , A.CFOP_NF , A.PRC_ATACADO , A.ID_CTI_PART " +
                ", A.ID_CTI_FCP , A.QTD_ATACADO , A.ID_CTI_CFE , A.EMPCADASTRO , A.ALIQINTERNA , " +
                "A.TRI_PDV_DT_UPD , A.MARGEM_LB_ATAC , A.INFCOMPLEMENTAR , A.ID_MOTIVO_DESO , A.I" +
                "D_CTAPLA , A.COD_ANVISA , A.PMC , A.IRRF , A.MED_MOTIVO_ISENCAO , A.CONTROLEESP " +
                ", A.ID_SUBGRUPO , A.COD_BENEF_CFOP , A.TP_PRC_ATACADO FROM TB_ESTOQUE A WHERE A." +
                "ID_ESTOQUE = :pID_ESTOQUE INTO :ID_ESTOQUE , :ID_GRUPO , :DESCRICAO , :STATUS , " +
                ":DT_CADAST , :HR_CADAST , :FRACIONADO , :PRC_VENDA , :PRC_CUSTO , :ULT_VENDA , :" +
                "MARGEM_LB , :POR_COMISSAO , :ULT_FORNEC , :GRADE_SERIE , :ID_TIPOITEM , :ID_CTI " +
                ", :CST_PIS , :CST_COFINS , :PIS , :COFINS , :UNI_MEDIDA , :MARGEM_PV , :CFOP , :" +
                "OBSERVACAO , :NAT_RECEITA , :CFOP_NF , :PRC_ATACADO , :ID_CTI_PART , :ID_CTI_FCP" +
                " , :QTD_ATACADO , :ID_CTI_CFE , :EMPCADASTRO , :ALIQINTERNA , :TRI_PDV_DT_UPD , " +
                ":MARGEM_LB_ATAC , :INFCOMPLEMENTAR , :ID_MOTIVO_DESO , :ID_CTAPLA , :COD_ANVISA " +
                ", :PMC , :IRRF , :MED_MOTIVO_ISENCAO , :CONTROLEESP , :ID_SUBGRUPO , :COD_BENEF_" +
                "CFOP , :TP_PRC_ATACADO DO BEGIN SUSPEND; END END;\';\r\n\r\nerro = \'sproc SP_TRI_ESTI" +
                "DENTIF_GETBY_ID\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_ESTIDENTI" +
                "F_GETBY_ID ( pID_IDENTIFICADOR TYPE OF COLUMN TB_EST_IDENTIFICADOR.ID_IDENTIFICA" +
                "DOR ) RETURNS ( ID_IDENTIFICADOR TYPE OF COLUMN TB_EST_IDENTIFICADOR.ID_IDENTIFI" +
                "CADOR , ID_ESTOQUE TYPE OF COLUMN TB_EST_IDENTIFICADOR.ID_ESTOQUE , CHAVE TYPE O" +
                "F COLUMN TB_EST_IDENTIFICADOR.CHAVE , TRI_PDV_DT_UPD TYPE OF COLUMN TB_EST_IDENT" +
                "IFICADOR.TRI_PDV_DT_UPD ) AS BEGIN FOR SELECT ID_IDENTIFICADOR , ID_ESTOQUE , CH" +
                "AVE , TRI_PDV_DT_UPD FROM TB_EST_IDENTIFICADOR WHERE ( ID_IDENTIFICADOR = :pID_I" +
                "DENTIFICADOR ) INTO :ID_IDENTIFICADOR , :ID_ESTOQUE , :CHAVE , :TRI_PDV_DT_UPD D" +
                "O BEGIN SUSPEND ; END END;\';\r\n\r\nerro = \'sproc SP_TRI_ESTPRODUTO_GETBY_ID\';\r\nexec" +
                "ute statement \'CREATE OR ALTER PROCEDURE SP_TRI_ESTPRODUTO_GETBY_ID ( pID_IDENTI" +
                "FICADOR TYPE OF COLUMN TB_EST_PRODUTO.ID_IDENTIFICADOR ) RETURNS ( ID_IDENTIFICA" +
                "DOR TYPE OF COLUMN TB_EST_PRODUTO.ID_IDENTIFICADOR , DESC_CMPL TYPE OF COLUMN TB" +
                "_EST_PRODUTO.DESC_CMPL , COD_BARRA TYPE OF COLUMN TB_EST_PRODUTO.COD_BARRA , REF" +
                "ERENCIA TYPE OF COLUMN TB_EST_PRODUTO.REFERENCIA , PRC_MEDIO TYPE OF COLUMN TB_E" +
                "ST_PRODUTO.PRC_MEDIO , QTD_COMPRA TYPE OF COLUMN TB_EST_PRODUTO.QTD_COMPRA , QTD" +
                "_ATUAL TYPE OF COLUMN TB_EST_PRODUTO.QTD_ATUAL , QTD_MINIM TYPE OF COLUMN TB_EST" +
                "_PRODUTO.QTD_MINIM , QTD_INICIO TYPE OF COLUMN TB_EST_PRODUTO.QTD_INICIO , QTD_R" +
                "ESERV TYPE OF COLUMN TB_EST_PRODUTO.QTD_RESERV , QTD_POSVEN TYPE OF COLUMN TB_ES" +
                "T_PRODUTO.QTD_POSVEN , ULT_COMPRA TYPE OF COLUMN TB_EST_PRODUTO.ULT_COMPRA , PES" +
                "O TYPE OF COLUMN TB_EST_PRODUTO.PESO , IPI TYPE OF COLUMN TB_EST_PRODUTO.IPI , C" +
                "F TYPE OF COLUMN TB_EST_PRODUTO.CF , IAT TYPE OF COLUMN TB_EST_PRODUTO.IAT , IPP" +
                "T TYPE OF COLUMN TB_EST_PRODUTO.IPPT , COD_NCM TYPE OF COLUMN TB_EST_PRODUTO.COD" +
                "_NCM , ID_NIVEL1 TYPE OF COLUMN TB_EST_PRODUTO.ID_NIVEL1 , ID_NIVEL2 TYPE OF COL" +
                "UMN TB_EST_PRODUTO.ID_NIVEL2 , MVA TYPE OF COLUMN TB_EST_PRODUTO.MVA , CST_IPI T" +
                "YPE OF COLUMN TB_EST_PRODUTO.CST_IPI , FOTO TYPE OF COLUMN TB_EST_PRODUTO.FOTO ," +
                " CSOSN TYPE OF COLUMN TB_EST_PRODUTO.CSOSN , ANP TYPE OF COLUMN TB_EST_PRODUTO.A" +
                "NP , EXTIPI TYPE OF COLUMN TB_EST_PRODUTO.EXTIPI , CST TYPE OF COLUMN TB_EST_PRO" +
                "DUTO.CST , FCI TYPE OF COLUMN TB_EST_PRODUTO.FCI , COD_CEST TYPE OF COLUMN TB_ES" +
                "T_PRODUTO.COD_CEST , CENQ TYPE OF COLUMN TB_EST_PRODUTO.CENQ , VLR_IPI TYPE OF C" +
                "OLUMN TB_EST_PRODUTO.VLR_IPI , CST_CFE TYPE OF COLUMN TB_EST_PRODUTO.CST_CFE , C" +
                "SOSN_CFE TYPE OF COLUMN TB_EST_PRODUTO.CSOSN_CFE , CONTROLA_LOTE_VENDA TYPE OF C" +
                "OLUMN TB_EST_PRODUTO.CONTROLA_LOTE_VENDA , BAIXA_LOTE_NFV TYPE OF COLUMN TB_EST_" +
                "PRODUTO.BAIXA_LOTE_NFV , BAIXA_LOTE_PDV TYPE OF COLUMN TB_EST_PRODUTO.BAIXA_LOTE" +
                "_PDV , TRI_PDV_DT_UPD TYPE OF COLUMN TB_EST_PRODUTO.TRI_PDV_DT_UPD ) AS BEGIN FO" +
                "R SELECT ID_IDENTIFICADOR , DESC_CMPL , COD_BARRA , REFERENCIA , PRC_MEDIO , QTD" +
                "_COMPRA , QTD_ATUAL , QTD_MINIM , QTD_INICIO , QTD_RESERV , QTD_POSVEN , ULT_COM" +
                "PRA , PESO , IPI , CF , IAT , IPPT , COD_NCM , ID_NIVEL1 , ID_NIVEL2 , MVA , CST" +
                "_IPI , FOTO , CSOSN , ANP , EXTIPI , CST , FCI , COD_CEST , CENQ , VLR_IPI , CST" +
                "_CFE , CSOSN_CFE , CONTROLA_LOTE_VENDA , BAIXA_LOTE_NFV , BAIXA_LOTE_PDV , TRI_P" +
                "DV_DT_UPD FROM TB_EST_PRODUTO WHERE ( ID_IDENTIFICADOR = :pID_IDENTIFICADOR ) IN" +
                "TO :ID_IDENTIFICADOR , :DESC_CMPL , :COD_BARRA , :REFERENCIA , :PRC_MEDIO , :QTD" +
                "_COMPRA , :QTD_ATUAL , :QTD_MINIM , :QTD_INICIO , :QTD_RESERV , :QTD_POSVEN , :U" +
                "LT_COMPRA , :PESO , :IPI , :CF , :IAT , :IPPT , :COD_NCM , :ID_NIVEL1 , :ID_NIVE" +
                "L2 , :MVA , :CST_IPI , :FOTO , :CSOSN , :ANP , :EXTIPI , :CST , :FCI , :COD_CEST" +
                " , :CENQ , :VLR_IPI , :CST_CFE , :CSOSN_CFE , :CONTROLA_LOTE_VENDA , :BAIXA_LOTE" +
                "_NFV , :BAIXA_LOTE_PDV , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;\';\r\n\r\nerro =" +
                " \'deu certo\';\r\n\r\nSUSPEND;\r\nWHEN ANY DO\r\nBEGIN\r\nEND\r\nEND;";
            this._commandCollection[20].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[21] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[21].Connection = this.Connection;
            this._commandCollection[21].CommandText = "\r\n\t\t\t\t\t\tCREATE OR ALTER PROCEDURE SP_TRI_PROCEDURES7\r\n\t\t\t\t\t\tRETURNS\r\n\t\t\t\t\t\t(\r\n\t\t\t" +
                "\t\t\terro VARCHAR(64)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\tAS\r\n\t\t\t\t\t\tBEGIN\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TR" +
                "I_CLIENTE_GETBY_ID\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_" +
                "CLIENTE_GETBY_ID ( pID_CLIENTE TYPE OF COLUMN TB_CLIENTE.ID_CLIENTE ) RETURNS ( " +
                "ID_CLIENTE TYPE OF COLUMN TB_CLIENTE.ID_CLIENTE , ID_CONVENIO TYPE OF COLUMN TB_" +
                "CLIENTE.ID_CONVENIO , DT_CADASTRO TYPE OF COLUMN TB_CLIENTE.DT_CADASTRO , NOME T" +
                "YPE OF COLUMN TB_CLIENTE.NOME , END_CEP TYPE OF COLUMN TB_CLIENTE.END_CEP , END_" +
                "TIPO TYPE OF COLUMN TB_CLIENTE.END_TIPO , END_NUMERO TYPE OF COLUMN TB_CLIENTE.E" +
                "ND_NUMERO , END_LOGRAD TYPE OF COLUMN TB_CLIENTE.END_LOGRAD , END_BAIRRO TYPE OF" +
                " COLUMN TB_CLIENTE.END_BAIRRO , END_COMPLE TYPE OF COLUMN TB_CLIENTE.END_COMPLE " +
                ", DT_PRICOMP TYPE OF COLUMN TB_CLIENTE.DT_PRICOMP , DT_ULTCOMP TYPE OF COLUMN TB" +
                "_CLIENTE.DT_ULTCOMP , CONTATO TYPE OF COLUMN TB_CLIENTE.CONTATO , STATUS TYPE OF" +
                " COLUMN TB_CLIENTE.STATUS , LIMITE TYPE OF COLUMN TB_CLIENTE.LIMITE , DDD_RESID " +
                "TYPE OF COLUMN TB_CLIENTE.DDD_RESID , FONE_RESID TYPE OF COLUMN TB_CLIENTE.FONE_" +
                "RESID , DDD_COMER TYPE OF COLUMN TB_CLIENTE.DDD_COMER , FONE_COMER TYPE OF COLUM" +
                "N TB_CLIENTE.FONE_COMER , DDD_CELUL TYPE OF COLUMN TB_CLIENTE.DDD_CELUL , FONE_C" +
                "ELUL TYPE OF COLUMN TB_CLIENTE.FONE_CELUL , DDD_FAX TYPE OF COLUMN TB_CLIENTE.DD" +
                "D_FAX , FONE_FAX TYPE OF COLUMN TB_CLIENTE.FONE_FAX , EMAIL_CONT TYPE OF COLUMN " +
                "TB_CLIENTE.EMAIL_CONT , EMAIL_NFE TYPE OF COLUMN TB_CLIENTE.EMAIL_NFE , ID_CIDAD" +
                "E TYPE OF COLUMN TB_CLIENTE.ID_CIDADE , ID_TIPO TYPE OF COLUMN TB_CLIENTE.ID_TIP" +
                "O , ID_FUNCIONARIO TYPE OF COLUMN TB_CLIENTE.ID_FUNCIONARIO , ID_PAIS TYPE OF CO" +
                "LUMN TB_CLIENTE.ID_PAIS , MENSAGEM TYPE OF COLUMN TB_CLIENTE.MENSAGEM , ID_RAMO " +
                "TYPE OF COLUMN TB_CLIENTE.ID_RAMO , EMAIL_ADIC TYPE OF COLUMN TB_CLIENTE.EMAIL_A" +
                "DIC , OBSERVACAO TYPE OF COLUMN TB_CLIENTE.OBSERVACAO , DT_MELHOR_VENCTO TYPE OF" +
                " COLUMN TB_CLIENTE.DT_MELHOR_VENCTO , TRI_PDV_DT_UPD TYPE OF COLUMN TB_CLIENTE.T" +
                "RI_PDV_DT_UPD ) AS BEGIN FOR SELECT ID_CLIENTE , ID_CONVENIO , DT_CADASTRO , NOM" +
                "E , END_CEP , END_TIPO , END_NUMERO , END_LOGRAD , END_BAIRRO , END_COMPLE , DT_" +
                "PRICOMP , DT_ULTCOMP , CONTATO , STATUS , LIMITE , DDD_RESID , FONE_RESID , DDD_" +
                "COMER , FONE_COMER , DDD_CELUL , FONE_CELUL , DDD_FAX , FONE_FAX , EMAIL_CONT , " +
                "EMAIL_NFE , ID_CIDADE , ID_TIPO , ID_FUNCIONARIO , ID_PAIS , MENSAGEM , ID_RAMO " +
                ", EMAIL_ADIC , OBSERVACAO , DT_MELHOR_VENCTO , TRI_PDV_DT_UPD FROM TB_CLIENTE WH" +
                "ERE ( ID_CLIENTE = :pID_CLIENTE ) INTO :ID_CLIENTE , :ID_CONVENIO , :DT_CADASTRO" +
                " , :NOME , :END_CEP , :END_TIPO , :END_NUMERO , :END_LOGRAD , :END_BAIRRO , :END" +
                "_COMPLE , :DT_PRICOMP , :DT_ULTCOMP , :CONTATO , :STATUS , :LIMITE , :DDD_RESID " +
                ", :FONE_RESID , :DDD_COMER , :FONE_COMER , :DDD_CELUL , :FONE_CELUL , :DDD_FAX ," +
                " :FONE_FAX , :EMAIL_CONT , :EMAIL_NFE , :ID_CIDADE , :ID_TIPO , :ID_FUNCIONARIO " +
                ", :ID_PAIS , :MENSAGEM , :ID_RAMO , :EMAIL_ADIC , :OBSERVACAO , :DT_MELHOR_VENCT" +
                "O , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_" +
                "TERMARIO_GET_BYNMCX_LAST\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR ALTER PROCEDURE S" +
                "P_TRI_TERMARIO_GET_BYNMCX_LAST ( pNUM_CAIXA TYPE OF COLUMN TRI_PDV_TERMINAL_USUA" +
                "RIO.NUM_CAIXA ) RETURNS ( ID_OPER TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.ID_OPE" +
                "R, NUM_CAIXA TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.NUM_CAIXA, STATUS TYPE OF C" +
                "OLUMN TRI_PDV_TERMINAL_USUARIO.STATUS, TS_ABERTURA TYPE OF COLUMN TRI_PDV_TERMIN" +
                "AL_USUARIO.TS_ABERTURA, TS_FECHAMENTO TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.TS" +
                "_FECHAMENTO, ID_USER TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.ID_USER ) AS BEGIN " +
                "FOR SELECT FIRST 1 ID_OPER, NUM_CAIXA, STATUS, TS_ABERTURA, TS_FECHAMENTO, ID_US" +
                "ER FROM TRI_PDV_TERMINAL_USUARIO WHERE ( NUM_CAIXA = :pNUM_CAIXA ) ORDER BY TS_A" +
                "BERTURA DESC INTO :ID_OPER, :NUM_CAIXA, :STATUS, :TS_ABERTURA, :TS_FECHAMENTO, :" +
                "ID_USER DO BEGIN SUSPEND ; END END;\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_TERMARIO_UPS" +
                "ERT_1\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_TERMARIO_UPSE" +
                "RT_1 ( pNUM_CAIXA TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.NUM_CAIXA , pSTATUS TY" +
                "PE OF COLUMN TRI_PDV_TERMINAL_USUARIO.STATUS , pTS_ABERTURA TYPE OF COLUMN TRI_P" +
                "DV_TERMINAL_USUARIO.TS_ABERTURA , pTS_FECHAMENTO TYPE OF COLUMN TRI_PDV_TERMINAL" +
                "_USUARIO.TS_FECHAMENTO , pID_USER TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.ID_USE" +
                "R ) AS BEGIN UPDATE OR INSERT INTO TRI_PDV_TERMINAL_USUARIO (ID_OPER , NUM_CAIXA" +
                " , STATUS , TS_ABERTURA , TS_FECHAMENTO , ID_USER ) VALUES (( SELECT NEXT VALUE " +
                "FOR GEN_TRI_PDV_TERM_USUARIO FROM RDB$DATABASE ) , :pNUM_CAIXA , :pSTATUS , :pTS" +
                "_ABERTURA , :pTS_FECHAMENTO , :pID_USER ) MATCHING (NUM_CAIXA , TS_ABERTURA , ID" +
                "_USER ) ; END;\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_ESTOQUE_ID_GETBY_ID\';\r\n\t\t\t\t\t\texec" +
                "ute statement \'CREATE OR ALTER PROCEDURE SP_TRI_ESTOQUE_ID_GETBY_ID (PID_ESTOQUE" +
                " INTEGER) RETURNS ( ID_ESTOQUE INTEGER, ID_GRUPO INTEGER, DESCRICAO VARCHAR(50)," +
                " STATUS VARCHAR(1), DT_CADAST DATE, HR_CADAST TIME, FRACIONADO CHAR(1), PRC_VEND" +
                "A NUMERIC(18,4), PRC_CUSTO NUMERIC(18,4), ULT_VENDA DATE, MARGEM_LB NUMERIC(18,4" +
                "), POR_COMISSAO NUMERIC(18,4), ULT_FORNEC INTEGER, GRADE_SERIE CHAR(1), ID_TIPOI" +
                "TEM VARCHAR(2), ID_CTI CHAR(3), CST_PIS VARCHAR(3), CST_COFINS VARCHAR(3), PIS N" +
                "UMERIC(18,4), COFINS NUMERIC(18,4), UNI_MEDIDA VARCHAR(3), MARGEM_PV NUMERIC(18," +
                "4), CFOP VARCHAR(4), OBSERVACAO BLOB, NAT_RECEITA SMALLINT, CFOP_NF VARCHAR(4), " +
                "PRC_ATACADO NUMERIC(18,4), ID_CTI_PART CHAR(3), ID_CTI_FCP CHAR(3), QTD_ATACADO " +
                "NUMERIC(18,4), TRI_PDV_DT_UPD TIMESTAMP, ID_IDENTIFICADOR INTEGER, ID_CTI_CFE CH" +
                "AR(3), MARGEM_LB_ATAC NUMERIC(18,4), INFCOMPLEMENTAR VARCHAR(250), ID_MOTIVO_DES" +
                "O INTEGER, ID_CTAPLA INTEGER, COD_ANVISA VARCHAR(13), PMC NUMERIC(18,4), IRRF NU" +
                "MERIC(18,4), MED_MOTIVO_ISENCAO VARCHAR(255), CONTROLEESP INTEGER, ID_SUBGRUPO S" +
                "MALLINT, COD_BENEF_CFOP INTEGER, TP_PRC_ATACADO SMALLINT, EMPCADASTRO VARCHAR(18" +
                "), ALIQINTERNA NUMERIC(18,4) ) AS BEGIN FOR SELECT A.ID_ESTOQUE , A.ID_GRUPO , A" +
                ".DESCRICAO , A.STATUS , A.DT_CADAST , A.HR_CADAST , A.FRACIONADO , A.PRC_VENDA ," +
                " A.PRC_CUSTO , A.ULT_VENDA , A.MARGEM_LB , A.POR_COMISSAO , A.ULT_FORNEC , A.GRA" +
                "DE_SERIE , A.ID_TIPOITEM , A.ID_CTI , A.CST_PIS , A.CST_COFINS , A.PIS , A.COFIN" +
                "S , A.UNI_MEDIDA , A.MARGEM_PV , A.CFOP , A.OBSERVACAO , A.NAT_RECEITA , A.CFOP_" +
                "NF , A.PRC_ATACADO , A.ID_CTI_PART , A.ID_CTI_FCP , A.QTD_ATACADO , A.TRI_PDV_DT" +
                "_UPD , B.ID_IDENTIFICADOR , A.ID_CTI_CFE, A.MARGEM_LB_ATAC, A.INFCOMPLEMENTAR , " +
                "A.ID_MOTIVO_DESO , A.ID_CTAPLA , A.COD_ANVISA , A.PMC , A.IRRF , A.MED_MOTIVO_IS" +
                "ENCAO , A.CONTROLEESP , A.ID_SUBGRUPO , A.COD_BENEF_CFOP , A.TP_PRC_ATACADO , A." +
                "EMPCADASTRO , A.ALIQINTERNA FROM TB_ESTOQUE A JOIN TB_EST_IDENTIFICADOR B ON B.I" +
                "D_ESTOQUE = A.ID_ESTOQUE WHERE A.ID_ESTOQUE = :pID_ESTOQUE INTO :ID_ESTOQUE , :I" +
                "D_GRUPO , :DESCRICAO , :STATUS , :DT_CADAST , :HR_CADAST , :FRACIONADO , :PRC_VE" +
                "NDA , :PRC_CUSTO , :ULT_VENDA , :MARGEM_LB , :POR_COMISSAO , :ULT_FORNEC , :GRAD" +
                "E_SERIE , :ID_TIPOITEM , :ID_CTI , :CST_PIS , :CST_COFINS , :PIS , :COFINS , :UN" +
                "I_MEDIDA , :MARGEM_PV , :CFOP , :OBSERVACAO , :NAT_RECEITA , :CFOP_NF , :PRC_ATA" +
                "CADO , :ID_CTI_PART , :ID_CTI_FCP , :QTD_ATACADO , :TRI_PDV_DT_UPD , :ID_IDENTIF" +
                "ICADOR , :ID_CTI_CFE , :MARGEM_LB_ATAC, :INFCOMPLEMENTAR , :ID_MOTIVO_DESO , :ID" +
                "_CTAPLA , :COD_ANVISA , :PMC , :IRRF , :MED_MOTIVO_ISENCAO , :CONTROLEESP , :ID_" +
                "SUBGRUPO , :COD_BENEF_CFOP , :TP_PRC_ATACADO , :EMPCADASTRO , :ALIQINTERNA DO BE" +
                "GIN SUSPEND ; END END;\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_TERMARIO_CHECKSEQ\';\r\n\t\t\t\t" +
                "\t\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_TERMARIO_CHECKSEQ RETURNS(" +
                "rNewNextSeqValue INTEGER) AS DECLARE VARIABLE vCurrentSeqValue INTEGER; DECLARE " +
                "VARIABLE vMaxIdTermario TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.ID_OPER; DECLARE" +
                " VARIABLE vDiffNextSeqValue INTEGER; DECLARE VARIABLE vNewNextSeqValue INTEGER; " +
                "BEGIN vCurrentSeqValue = GEN_ID(GEN_TRI_PDV_TERM_USUARIO, 0 ); vMaxIdTermario = " +
                "(SELECT MAX(ID_OPER) FROM TRI_PDV_TERMINAL_USUARIO); vNewNextSeqValue = -1; IF (" +
                ":vMaxIdTermario > :vCurrentSeqValue) THEN BEGIN vDiffNextSeqValue = (:vMaxIdTerm" +
                "ario - GEN_ID(GEN_TRI_PDV_TERM_USUARIO, 0)); vNewNextSeqValue = GEN_ID(GEN_TRI_P" +
                "DV_TERM_USUARIO, :vDiffNextSeqValue); END rNewNextSeqValue = :vNewNextSeqValue; " +
                "END;\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_NATOPER_UPSERT\';\r\n\t\t\t\t\t\texecute statement \'" +
                "CREATE OR ALTER PROCEDURE SP_TRI_NATOPER_UPSERT ( pID_NATOPE TYPE OF COLUMN TB_N" +
                "AT_OPERACAO.ID_NATOPE , pDESCRICAO TYPE OF COLUMN TB_NAT_OPERACAO.DESCRICAO , pR" +
                "ET_PIS_COF_CSLL TYPE OF COLUMN TB_NAT_OPERACAO.RET_PIS_COF_CSLL , pRET_INSS TYPE" +
                " OF COLUMN TB_NAT_OPERACAO.RET_INSS , pRET_IRRF TYPE OF COLUMN TB_NAT_OPERACAO.R" +
                "ET_IRRF , pPIS_COFINS TYPE OF COLUMN TB_NAT_OPERACAO.PIS_COFINS , pSTATUS TYPE O" +
                "F COLUMN TB_NAT_OPERACAO.STATUS , pCFOP TYPE OF COLUMN TB_NAT_OPERACAO.CFOP , pI" +
                "D_CTI TYPE OF COLUMN TB_NAT_OPERACAO.ID_CTI , pGFR TYPE OF COLUMN TB_NAT_OPERACA" +
                "O.GFR , pOBSERVACAO TYPE OF COLUMN TB_NAT_OPERACAO.OBSERVACAO , pBASE_COMISSAO T" +
                "YPE OF COLUMN TB_NAT_OPERACAO.BASE_COMISSAO , pCALCULA_IPI TYPE OF COLUMN TB_NAT" +
                "_OPERACAO.CALCULA_IPI , pGRAVA_TOT_TRIBUTOS TYPE OF COLUMN TB_NAT_OPERACAO.GRAVA" +
                "_TOT_TRIBUTOS ) RETURNS ( rRowsAffected INTEGER ) AS BEGIN UPDATE OR INSERT INTO" +
                " TB_NAT_OPERACAO (ID_NATOPE , DESCRICAO , RET_PIS_COF_CSLL , RET_INSS , RET_IRRF" +
                " , PIS_COFINS , STATUS , CFOP , ID_CTI , GFR , OBSERVACAO , BASE_COMISSAO , CALC" +
                "ULA_IPI , GRAVA_TOT_TRIBUTOS ) VALUES ( :pID_NATOPE , :pDESCRICAO , :pRET_PIS_CO" +
                "F_CSLL , :pRET_INSS , :pRET_IRRF , :pPIS_COFINS , :pSTATUS , :pCFOP , :pID_CTI ," +
                " :pGFR , :pOBSERVACAO , :pBASE_COMISSAO , :pCALCULA_IPI , :pGRAVA_TOT_TRIBUTOS )" +
                " MATCHING (ID_NATOPE ) ; rRowsAffected = ROW_COUNT; END;\';\r\n\r\n\t\t\t\t\t\terro = \'spro" +
                "c SP_TRI_FMAPGTONFCE_UPSERT\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR ALTER PROCEDUR" +
                "E SP_TRI_FMAPGTONFCE_UPSERT ( pID_FMANFCE TYPE OF COLUMN TB_FORMA_PAGTO_NFCE.ID_" +
                "FMANFCE , pSTATUS TYPE OF COLUMN TB_FORMA_PAGTO_NFCE.STATUS , pID_NFCE TYPE OF C" +
                "OLUMN TB_FORMA_PAGTO_NFCE.ID_NFCE , pDESCRICAO TYPE OF COLUMN TB_FORMA_PAGTO_NFC" +
                "E.DESCRICAO ) RETURNS ( rRowsAffected INTEGER ) AS BEGIN UPDATE OR INSERT INTO T" +
                "B_FORMA_PAGTO_NFCE (ID_FMANFCE , STATUS , ID_NFCE , DESCRICAO ) VALUES ( :pID_FM" +
                "ANFCE , :pSTATUS , :pID_NFCE , :pDESCRICAO ) MATCHING (ID_FMANFCE ) ; rRowsAffec" +
                "ted = ROW_COUNT; END;\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_NFVENDA_GETALL_SYNC\';\r\n\t\t\t" +
                "\t\t\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_NFVENDA_GETALL_SYNC ( TIP" +
                "_QUERY SMALLINT ) RETURNS ( ID_NFVENDA TYPE OF COLUMN TB_NFVENDA.ID_NFVENDA , ID" +
                "_NATOPE TYPE OF COLUMN TB_NFVENDA.ID_NATOPE , ID_VENDEDOR TYPE OF COLUMN TB_NFVE" +
                "NDA.ID_VENDEDOR , ID_CLIENTE TYPE OF COLUMN TB_NFVENDA.ID_CLIENTE , NF_NUMERO TY" +
                "PE OF COLUMN TB_NFVENDA.NF_NUMERO , NF_SERIE TYPE OF COLUMN TB_NFVENDA.NF_SERIE " +
                ", NF_MODELO TYPE OF COLUMN TB_NFVENDA.NF_MODELO , DT_EMISSAO TYPE OF COLUMN TB_N" +
                "FVENDA.DT_EMISSAO , DT_SAIDA TYPE OF COLUMN TB_NFVENDA.DT_SAIDA , HR_SAIDA TYPE " +
                "OF COLUMN TB_NFVENDA.HR_SAIDA , ESPECIE TYPE OF COLUMN TB_NFVENDA.ESPECIE , TIPO" +
                "_FRETE TYPE OF COLUMN TB_NFVENDA.TIPO_FRETE , PES_LIQUID TYPE OF COLUMN TB_NFVEN" +
                "DA.PES_LIQUID , PES_BRUTO TYPE OF COLUMN TB_NFVENDA.PES_BRUTO , STATUS TYPE OF C" +
                "OLUMN TB_NFVENDA.STATUS , ENT_SAI TYPE OF COLUMN TB_NFVENDA.ENT_SAI , ID_FMAPGTO" +
                " TYPE OF COLUMN TB_NFVENDA.ID_FMAPGTO , ID_PARCELA TYPE OF COLUMN TB_NFVENDA.ID_" +
                "PARCELA , MARCA TYPE OF COLUMN TB_NFVENDA.MARCA , QTD_VOLUM TYPE OF COLUMN TB_NF" +
                "VENDA.QTD_VOLUM , NUM_VOLUM TYPE OF COLUMN TB_NFVENDA.NUM_VOLUM , PROD_REV TYPE " +
                "OF COLUMN TB_NFVENDA.PROD_REV , SOMA_FRETE TYPE OF COLUMN TB_NFVENDA.SOMA_FRETE " +
                ", VLR_TROCO TYPE OF COLUMN TB_NFVENDA.VLR_TROCO , IND_PRES TYPE OF COLUMN TB_NFV" +
                "ENDA.IND_PRES , IND_IE_DEST TYPE OF COLUMN TB_NFVENDA.IND_IE_DEST , DESCONTO_CON" +
                "DICIONAL TYPE OF COLUMN TB_NFVENDA.DESCONTO_CONDICIONAL , INF_COMP_FIXA TYPE OF " +
                "COLUMN TB_NFVENDA.INF_COMP_FIXA , INF_COMP_EDIT TYPE OF COLUMN TB_NFVENDA.INF_CO" +
                "MP_EDIT , ENDERECO_ENTREGA TYPE OF COLUMN TB_NFVENDA.ENDERECO_ENTREGA , ENVIO_AP" +
                "I TYPE OF COLUMN TB_NFVENDA.ENVIO_API , SYNCED SMALLINT , QTD_CTAREC INTEGER ) A" +
                "S BEGIN FOR SELECT FIRST 200 COALESCE(a.ID_NFVENDA, 0) , a.ID_NATOPE , a.ID_VEND" +
                "EDOR , a.ID_CLIENTE , a.NF_NUMERO , a.NF_SERIE , a.NF_MODELO , a.DT_EMISSAO , a." +
                "DT_SAIDA , a.HR_SAIDA , a.ESPECIE , a.TIPO_FRETE , a.PES_LIQUID , a.PES_BRUTO , " +
                "a.STATUS , a.ENT_SAI , a.ID_FMAPGTO , a.ID_PARCELA , a.MARCA , a.QTD_VOLUM , a.N" +
                "UM_VOLUM , a.PROD_REV , a.SOMA_FRETE , a.VLR_TROCO , a.IND_PRES , a.IND_IE_DEST " +
                ", a.DESCONTO_CONDICIONAL , a.INF_COMP_FIXA , a.INF_COMP_EDIT , a.ENDERECO_ENTREG" +
                "A , a.ENVIO_API , a.SYNCED , COUNT(b.ID_CTAREC) QTD_CTAREC FROM TB_NFVENDA a LEF" +
                "T JOIN TB_NFV_CTAREC b ON a.ID_NFVENDA = b.ID_NFVENDA WHERE ( :TIP_QUERY = 0 AND" +
                " ( ( a.SYNCED IS NULL OR a.SYNCED = 0 ) AND (a.STATUS = \'\'E\'\' OR a.STATUS = \'\'I\'" +
                "\' OR a.STATUS = \'\'C\'\') ) ) OR ( :TIP_QUERY = 1 AND ( a.SYNCED = 1 AND (a.STATUS " +
                "= \'\'C\'\' OR a.STATUS = \'\'X\'\') ) ) OR (:TIP_QUERY = 3 AND (a.SYNCED = 3 AND (a.STA" +
                "TUS = \'\'I\'\' OR a.STATUS = \'\'E\'\'))) GROUP BY a.ID_NFVENDA , a.ID_NATOPE , a.ID_VE" +
                "NDEDOR , a.ID_CLIENTE , a.NF_NUMERO , a.NF_SERIE , a.NF_MODELO , a.DT_EMISSAO , " +
                "a.DT_SAIDA , a.HR_SAIDA , a.ESPECIE , a.TIPO_FRETE , a.PES_LIQUID , a.PES_BRUTO " +
                ", a.STATUS , a.ENT_SAI , a.ID_FMAPGTO , a.ID_PARCELA , a.MARCA , a.QTD_VOLUM , a" +
                ".NUM_VOLUM , a.PROD_REV , a.SOMA_FRETE , a.VLR_TROCO , a.IND_PRES , a.IND_IE_DES" +
                "T , a.DESCONTO_CONDICIONAL , a.INF_COMP_FIXA , a.INF_COMP_EDIT , a.ENDERECO_ENTR" +
                "EGA , a.ENVIO_API , a.SYNCED ORDER BY a.DT_EMISSAO , a.DT_SAIDA , a.HR_SAIDA INT" +
                "O :ID_NFVENDA , :ID_NATOPE , :ID_VENDEDOR , :ID_CLIENTE , :NF_NUMERO , :NF_SERIE" +
                " , :NF_MODELO , :DT_EMISSAO , :DT_SAIDA , :HR_SAIDA , :ESPECIE , :TIPO_FRETE , :" +
                "PES_LIQUID , :PES_BRUTO , :STATUS , :ENT_SAI , :ID_FMAPGTO , :ID_PARCELA , :MARC" +
                "A , :QTD_VOLUM , :NUM_VOLUM , :PROD_REV , :SOMA_FRETE , :VLR_TROCO , :IND_PRES ," +
                " :IND_IE_DEST , :DESCONTO_CONDICIONAL , :INF_COMP_FIXA , :INF_COMP_EDIT , :ENDER" +
                "ECO_ENTREGA , :ENVIO_API , :SYNCED , :QTD_CTAREC DO BEGIN SUSPEND ; END END;\';\r\n" +
                "\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_NFVENDA_SYNC_INSERT\';\r\n\t\t\t\t\t\texecute statement \'CRE" +
                "ATE OR ALTER PROCEDURE SP_TRI_NFVENDA_SYNC_INSERT ( pID_NATOPE TYPE OF COLUMN TB" +
                "_NFVENDA.ID_NATOPE , pID_VENDEDOR TYPE OF COLUMN TB_NFVENDA.ID_VENDEDOR , pID_CL" +
                "IENTE TYPE OF COLUMN TB_NFVENDA.ID_CLIENTE , pNF_NUMERO TYPE OF COLUMN TB_NFVEND" +
                "A.NF_NUMERO , pNF_SERIE TYPE OF COLUMN TB_NFVENDA.NF_SERIE , pNF_MODELO TYPE OF " +
                "COLUMN TB_NFVENDA.NF_MODELO , pDT_EMISSAO TYPE OF COLUMN TB_NFVENDA.DT_EMISSAO ," +
                " pDT_SAIDA TYPE OF COLUMN TB_NFVENDA.DT_SAIDA , pHR_SAIDA TYPE OF COLUMN TB_NFVE" +
                "NDA.HR_SAIDA , pESPECIE TYPE OF COLUMN TB_NFVENDA.ESPECIE , pTIPO_FRETE TYPE OF " +
                "COLUMN TB_NFVENDA.TIPO_FRETE , pPES_LIQUID TYPE OF COLUMN TB_NFVENDA.PES_LIQUID " +
                ", pPES_BRUTO TYPE OF COLUMN TB_NFVENDA.PES_BRUTO , pSTATUS TYPE OF COLUMN TB_NFV" +
                "ENDA.STATUS , pENT_SAI TYPE OF COLUMN TB_NFVENDA.ENT_SAI , pID_FMAPGTO TYPE OF C" +
                "OLUMN TB_NFVENDA.ID_FMAPGTO , pID_PARCELA TYPE OF COLUMN TB_NFVENDA.ID_PARCELA ," +
                " pMARCA TYPE OF COLUMN TB_NFVENDA.MARCA , pQTD_VOLUM TYPE OF COLUMN TB_NFVENDA.Q" +
                "TD_VOLUM , pNUM_VOLUM TYPE OF COLUMN TB_NFVENDA.NUM_VOLUM , pPROD_REV TYPE OF CO" +
                "LUMN TB_NFVENDA.PROD_REV , pSOMA_FRETE TYPE OF COLUMN TB_NFVENDA.SOMA_FRETE , pV" +
                "LR_TROCO TYPE OF COLUMN TB_NFVENDA.VLR_TROCO , pIND_PRES TYPE OF COLUMN TB_NFVEN" +
                "DA.IND_PRES , pIND_IE_DEST TYPE OF COLUMN TB_NFVENDA.IND_IE_DEST , pDESCONTO_CON" +
                "DICIONAL TYPE OF COLUMN TB_NFVENDA.DESCONTO_CONDICIONAL , pINF_COMP_FIXA TYPE OF" +
                " COLUMN TB_NFVENDA.INF_COMP_FIXA , pINF_COMP_EDIT TYPE OF COLUMN TB_NFVENDA.INF_" +
                "COMP_EDIT , pENDERECO_ENTREGA TYPE OF COLUMN TB_NFVENDA.ENDERECO_ENTREGA , pENVI" +
                "O_API TYPE OF COLUMN TB_NFVENDA.ENVIO_API , pSYNCED SMALLINT ) RETURNS ( NFVENDA" +
                "USAVEL INTEGER ) AS DECLARE VARIABLE ULTIMONFVENDA INTEGER; BEGIN SELECT NEXT VA" +
                "LUE FOR GEN_TB_NFVENDA_ID FROM RDB$DATABASE INTO :ULTIMONFVENDA ; IF( :ULTIMONFV" +
                "ENDA IS NULL ) THEN ULTIMONFVENDA = 0; BEGIN INSERT INTO TB_NFVENDA ( ID_NFVENDA" +
                " , ID_NATOPE , ID_VENDEDOR , ID_CLIENTE , NF_NUMERO , NF_SERIE , NF_MODELO , DT_" +
                "EMISSAO , DT_SAIDA , HR_SAIDA , ESPECIE , TIPO_FRETE , PES_LIQUID , PES_BRUTO , " +
                "STATUS , ENT_SAI , ID_FMAPGTO , ID_PARCELA , MARCA , QTD_VOLUM , NUM_VOLUM , PRO" +
                "D_REV , SOMA_FRETE , VLR_TROCO , IND_PRES , IND_IE_DEST , DESCONTO_CONDICIONAL ," +
                " INF_COMP_FIXA , INF_COMP_EDIT , ENDERECO_ENTREGA , ENVIO_API , SYNCED ) VALUES " +
                "(:ULTIMONFVENDA , :pID_NATOPE , :pID_VENDEDOR , :pID_CLIENTE , :pNF_NUMERO , :pN" +
                "F_SERIE , :pNF_MODELO , :pDT_EMISSAO , :pDT_SAIDA , :pHR_SAIDA , :pESPECIE , :pT" +
                "IPO_FRETE , :pPES_LIQUID , :pPES_BRUTO , :pSTATUS , :pENT_SAI , :pID_FMAPGTO , :" +
                "pID_PARCELA , :pMARCA , :pQTD_VOLUM , :pNUM_VOLUM , :pPROD_REV , :pSOMA_FRETE , " +
                ":pVLR_TROCO , :pIND_PRES , :pIND_IE_DEST , :pDESCONTO_CONDICIONAL , :pINF_COMP_F" +
                "IXA , :pINF_COMP_EDIT , :pENDERECO_ENTREGA , :pENVIO_API , :pSYNCED ) ; NFVENDAU" +
                "SAVEL = ULTIMONFVENDA; END END;\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_NFV_FMAPAGTO_BY_" +
                "IDNFV\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_NFV_FMAPAGTO_" +
                "BY_IDNFV ( pIdNfvenda TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.ID_NFVENDA ) RETUR" +
                "NS ( ID_NUMPAG TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.ID_NUMPAG , VLR_PAGTO TYP" +
                "E OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.VLR_PAGTO , ID_NFVENDA TYPE OF COLUMN TB_NF" +
                "VENDA_FMAPAGTO_NFCE.ID_NFVENDA , ID_FMANFCE TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_N" +
                "FCE.ID_FMANFCE , ID_PARCELA TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.ID_PARCELA) " +
                "AS BEGIN FOR SELECT a.ID_NUMPAG , a.VLR_PAGTO , a.ID_NFVENDA , a.ID_FMANFCE , a." +
                "ID_PARCELA FROM TB_NFVENDA_FMAPAGTO_NFCE a WHERE a.ID_NFVENDA =:pIdNfvenda INTO " +
                ":ID_NUMPAG , :VLR_PAGTO , :ID_NFVENDA , :ID_FMANFCE , :ID_PARCELA DO SUSPEND ; E" +
                "ND;\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_NFV_FMAPAGT_SYNC_INSERT\';\r\n\t\t\t\t\t\texecute sta" +
                "tement \'CREATE OR ALTER PROCEDURE SP_TRI_NFV_FMAPAGT_SYNC_INSERT ( pVLR_PAGTO TY" +
                "PE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.VLR_PAGTO , pID_NFVENDA TYPE OF COLUMN TB_" +
                "NFVENDA_FMAPAGTO_NFCE.ID_NFVENDA , pID_FMANFCE TYPE OF COLUMN TB_NFVENDA_FMAPAGT" +
                "O_NFCE.ID_FMANFCE , pID_PARCELA TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.ID_PARCE" +
                "LA, pID_ADMINISTRADORA TYPE OF COLUMN TB_NFCE_BANDEIRA.ID_ADMINISTRADORA) RETURN" +
                "S ( rNewIdNumpag TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.ID_NUMPAG ) AS DECLARE " +
                "VARIABLE newIdNumpag TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.ID_NUMPAG; BEGIN SE" +
                "LECT NEXT VALUE FOR gen_tb_nfvenda_fmapagto_nfce_id FROM RDB$DATABASE INTO :newI" +
                "dNumpag ; IF( :newIdNumpag IS NULL ) THEN newIdNumpag = 0; BEGIN INSERT INTO TB_" +
                "NFVENDA_FMAPAGTO_NFCE (ID_NUMPAG , VLR_PAGTO , ID_NFVENDA , ID_FMANFCE , ID_PARC" +
                "ELA ) VALUES ( :newIdNumpag , :pVLR_PAGTO , :pID_NFVENDA , :pID_FMANFCE , :pID_P" +
                "ARCELA ) ; INSERT INTO TB_NFCE_BANDEIRA (ID_NUMPAG , ID_BANDEIRA , ID_ADMINISTRA" +
                "DORA , NUM_AUT , FORMA_ENVIO , SICLOS_ID , STONE_ID , PRE_TRANSACAO_ID , POS_SER" +
                "IAL) VALUES (:newIdNumpag , NULL, :pID_ADMINISTRADORA , NULL , NULL , NULL , NUL" +
                "L , NULL , NULL) ; rNewIdNumpag = newIdNumpag; END END;\';\r\n\r\n\t\t\t\t\t\terro = \'sproc" +
                " SP_TRI_NFVITEM_GETBY_IDNFVENDA\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR ALTER PROC" +
                "EDURE SP_TRI_NFVITEM_GETBY_IDNFVENDA (PIDNFVENDA INTEGER) RETURNS ( ID_NFVITEM I" +
                "NTEGER, ID_NFVENDA INTEGER, ID_IDENTIFICADOR INTEGER, CFOP VARCHAR(4), NUM_ITEM " +
                "SMALLINT, QTD_ITEM NUMERIC(18,4), UNI_MEDIDA VARCHAR(3), VLR_TOTAL NUMERIC(18,4)" +
                ", VLR_DESC NUMERIC(18,4), VLR_CUSTO NUMERIC(18,4), PRC_LISTA NUMERIC(18,4), CF V" +
                "ARCHAR(13), VLR_FRETE NUMERIC(18,4), VLR_SEGURO NUMERIC(18,4), VLR_DESPESA NUMER" +
                "IC(18,4), RET_PIS_COF_CSLL NUMERIC(18,4), RET_IRRF NUMERIC(18,4), COD_ENQ VARCHA" +
                "R(3), COD_BASE VARCHAR(2), CSOSN VARCHAR(3), NPED_COMPRA VARCHAR(15), ITEM_COMPR" +
                "A INTEGER, VLR_TOTTRIB NUMERIC(18,4), FCI VARCHAR(36), VLR_ICM_DESO NUMERIC(18,4" +
                "), ID_MOTIVO_DESO INTEGER, EST_BX CHAR(1), VLR_TRIB_FED NUMERIC(18,4), VLR_TRIB_" +
                "EST NUMERIC(18,4), VLR_TRIB_MUN NUMERIC(18,4), INCLUIR_FATURA CHAR(1), VLR_UNIT " +
                "NUMERIC(18,4), VLR_RETENCAO NUMERIC(18,4), REFERENCIA VARCHAR(18), ID_COMPOSICAO" +
                " INTEGER, CODPROMOSCANNTECH INTEGER ) AS BEGIN FOR SELECT COALESCE(a.ID_NFVITEM," +
                " 0) ID_NFVITEM , a.ID_NFVENDA , a.ID_IDENTIFICADOR , a.CFOP , a.NUM_ITEM , a.QTD" +
                "_ITEM , a.UNI_MEDIDA , a.VLR_TOTAL , a.VLR_DESC , a.VLR_CUSTO , a.PRC_LISTA , a." +
                "CF , a.VLR_FRETE , a.VLR_SEGURO , a.VLR_DESPESA , a.RET_PIS_COF_CSLL , a.RET_IRR" +
                "F , a.COD_ENQ , a.COD_BASE , a.CSOSN , a.NPED_COMPRA , a.ITEM_COMPRA , a.VLR_TOT" +
                "TRIB , a.FCI , a.VLR_ICM_DESO , a.ID_MOTIVO_DESO , a.EST_BX , a.VLR_TRIB_FED , a" +
                ".VLR_TRIB_EST , a.VLR_TRIB_MUN , a.INCLUIR_FATURA , a.VLR_UNIT , a.VLR_RETENCAO " +
                ", a.REFERENCIA , e.ID_COMPOSICAO, a.CODPROMOSCANNTECH FROM TB_NFV_ITEM a LEFT JO" +
                "IN TB_EST_COMPOSICAO e ON e.ID_IDENTIFICADOR = a.ID_IDENTIFICADOR WHERE a.ID_NFV" +
                "ENDA =:pIdNfvenda INTO :ID_NFVITEM , :ID_NFVENDA , :ID_IDENTIFICADOR , :CFOP , :" +
                "NUM_ITEM , :QTD_ITEM , :UNI_MEDIDA , :VLR_TOTAL , :VLR_DESC , :VLR_CUSTO , :PRC_" +
                "LISTA , :CF , :VLR_FRETE , :VLR_SEGURO , :VLR_DESPESA , :RET_PIS_COF_CSLL , :RET" +
                "_IRRF , :COD_ENQ , :COD_BASE , :CSOSN , :NPED_COMPRA , :ITEM_COMPRA , :VLR_TOTTR" +
                "IB , :FCI , :VLR_ICM_DESO , :ID_MOTIVO_DESO , :EST_BX , :VLR_TRIB_FED , :VLR_TRI" +
                "B_EST , :VLR_TRIB_MUN , :INCLUIR_FATURA , :VLR_UNIT , :VLR_RETENCAO , :REFERENCI" +
                "A , :ID_COMPOSICAO, :CODPROMOSCANNTECH DO SUSPEND; END;\';\r\n\r\n\t\t\t\t\t\terro = \'sproc" +
                " SP_TRI_NFVITEM_SYNC_INSERT\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR ALTER PROCEDUR" +
                "E SP_TRI_NFVITEM_SYNC_INSERT (PID_NFVENDA INTEGER, PID_IDENTIFICADOR INTEGER, PC" +
                "FOP VARCHAR(4), PNUM_ITEM SMALLINT, PQTD_ITEM NUMERIC(18,4), PUNI_MEDIDA VARCHAR" +
                "(3), PVLR_TOTAL NUMERIC(18,4), PVLR_DESC NUMERIC(18,4), PVLR_CUSTO NUMERIC(18,4)" +
                ", PPRC_LISTA NUMERIC(18,4), PCF VARCHAR(13), PVLR_FRETE NUMERIC(18,4), PVLR_SEGU" +
                "RO NUMERIC(18,4), PVLR_DESPESA NUMERIC(18,4), PRET_PIS_COF_CSLL NUMERIC(18,4), P" +
                "RET_IRRF NUMERIC(18,4), PCOD_ENQ VARCHAR(3), PCOD_BASE VARCHAR(2), PCSOSN VARCHA" +
                "R(3), PNPED_COMPRA VARCHAR(15), PITEM_COMPRA INTEGER, PVLR_TOTTRIB NUMERIC(18,4)" +
                ", PFCI VARCHAR(36), PVLR_ICM_DESO NUMERIC(18,4), PID_MOTIVO_DESO INTEGER, PEST_B" +
                "X CHAR(1), PVLR_TRIB_FED NUMERIC(18,4), PVLR_TRIB_EST NUMERIC(18,4), PVLR_TRIB_M" +
                "UN NUMERIC(18,4), PINCLUIR_FATURA CHAR(1), PVLR_UNIT NUMERIC(18,4), PVLR_RETENCA" +
                "O NUMERIC(18,4), PREFERENCIA VARCHAR(18), PCOD_SCANNTECH INTEGER) RETURNS (  RNE" +
                "WIDNFVITEM INTEGER ) AS DECLARE VARIABLE newIdNfvItem INTEGER; BEGIN  SELECT  NE" +
                "XT VALUE FOR GEN_TB_NFV_ITEM_ID FROM  RDB$DATABASE INTO  :newIdNfvItem ;  IF( :n" +
                "ewIdNfvItem IS NULL ) THEN newIdNfvItem = 0;  BEGIN INSERT  INTO  TB_NFV_ITEM ( " +
                "ID_NFVITEM ,  ID_NFVENDA ,  ID_IDENTIFICADOR ,  CFOP ,  NUM_ITEM ,  QTD_ITEM ,  " +
                "UNI_MEDIDA ,  VLR_TOTAL ,  VLR_DESC ,  VLR_CUSTO ,  PRC_LISTA ,  CF ,  VLR_FRETE" +
                " ,  VLR_SEGURO ,  VLR_DESPESA ,  RET_PIS_COF_CSLL ,  RET_IRRF ,  COD_ENQ ,  COD_" +
                "BASE ,  CSOSN ,  NPED_COMPRA ,  ITEM_COMPRA ,  VLR_TOTTRIB ,  FCI ,  VLR_ICM_DES" +
                "O ,  ID_MOTIVO_DESO ,  EST_BX ,  VLR_TRIB_FED ,  VLR_TRIB_EST ,  VLR_TRIB_MUN , " +
                " INCLUIR_FATURA ,  VLR_UNIT ,  VLR_RETENCAO ,  REFERENCIA,   CODPROMOSCANNTECH) " +
                "VALUES ( :newIdNfvItem , :pID_NFVENDA , :pID_IDENTIFICADOR , :pCFOP , :pNUM_ITEM" +
                " , :pQTD_ITEM , :pUNI_MEDIDA , :pVLR_TOTAL , :pVLR_DESC , :pVLR_CUSTO , :pPRC_LI" +
                "STA , :pCF , :pVLR_FRETE , :pVLR_SEGURO , :pVLR_DESPESA , :pRET_PIS_COF_CSLL , :" +
                "pRET_IRRF , :pCOD_ENQ , :pCOD_BASE , :pCSOSN , :pNPED_COMPRA , :pITEM_COMPRA , :" +
                "pVLR_TOTTRIB , :pFCI , :pVLR_ICM_DESO , :pID_MOTIVO_DESO , :pEST_BX , :pVLR_TRIB" +
                "_FED , :pVLR_TRIB_EST , :pVLR_TRIB_MUN , :pINCLUIR_FATURA , :pVLR_UNIT , :pVLR_R" +
                "ETENCAO , :pREFERENCIA,  :pCOD_SCANNTECH) ;  rnewIdNfvItem = newIdNfvItem; END E" +
                "ND;\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_CTAREC_GETBY_IDNFVENDA\';\r\n\t\t\t\t\t\texecute stat" +
                "ement \'CREATE OR ALTER PROCEDURE SP_TRI_CTAREC_GETBY_IDNFVENDA (PIDNFVENDA INTEG" +
                "ER) RETURNS ( ID_CTAREC INTEGER, DOCUMENTO VARCHAR(12), HISTORICO VARCHAR(50), D" +
                "T_EMISSAO DATE, DT_VENCTO DATE, VLR_CTAREC NUMERIC(18,4), TIP_CTAREC CHAR(1), ID" +
                "_PORTADOR INTEGER, ID_CLIENTE INTEGER, INV_REFERENCIA VARCHAR(18), DT_VENCTO_ORI" +
                "G DATE, NSU_CARTAO VARCHAR(32), ID_NUMPAG INTEGER, ID_CONTA INTEGER ) AS BEGIN F" +
                "OR SELECT COALESCE(a.ID_CTAREC, 0) , a.DOCUMENTO , a.HISTORICO , a.DT_EMISSAO , " +
                "a.DT_VENCTO , a.VLR_CTAREC , a.TIP_CTAREC , a.ID_PORTADOR , a.ID_CLIENTE , a.INV" +
                "_REFERENCIA , a.DT_VENCTO_ORIG , a.NSU_CARTAO , b.ID_NUMPAG , a.ID_CONTA FROM TB" +
                "_CONTA_RECEBER a JOIN TB_NFV_CTAREC b ON a.ID_CTAREC = b.ID_CTAREC WHERE b.ID_NF" +
                "VENDA =:pIdNfvenda INTO :ID_CTAREC , :DOCUMENTO , :HISTORICO , :DT_EMISSAO , :DT" +
                "_VENCTO , :VLR_CTAREC , :TIP_CTAREC , :ID_PORTADOR , :ID_CLIENTE , :INV_REFERENC" +
                "IA , :DT_VENCTO_ORIG , :NSU_CARTAO , :ID_NUMPAG, :ID_CONTA DO SUSPEND ; END;\';\r\n" +
                "\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_NFVENDA_SETSYNCED\';\r\n\t\t\t\t\t\texecute statement \'CREAT" +
                "E OR ALTER PROCEDURE SP_TRI_NFVENDA_SETSYNCED ( pIdNfvenda INTEGER , pSynced SMA" +
                "LLINT ) AS BEGIN UPDATE TB_NFVENDA SET SYNCED = :pSynced WHERE ID_NFVENDA = :pId" +
                "Nfvenda ; END;\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_CTAREC_GETBY_NFNUMSERIE\';\r\n\t\t\t\t\t\t" +
                "execute statement \'CREATE OR ALTER PROCEDURE SP_TRI_CTAREC_GETBY_NFNUMSERIE ( pN" +
                "F_NUMERO TYPE OF COLUMN TB_NFVENDA.NF_NUMERO , pNF_SERIE TYPE OF COLUMN TB_NFVEN" +
                "DA.NF_SERIE ) RETURNS ( ID_CTAREC INTEGER , DOCUMENTO VARCHAR(12) , HISTORICO VA" +
                "RCHAR(50) , DT_EMISSAO DATE , DT_VENCTO DATE , VLR_CTAREC TYPE OF COLUMN TRI_PDV" +
                "_OPER.DIN , TIP_CTAREC CHAR(1) , ID_PORTADOR INTEGER , ID_CLIENTE INTEGER , INV_" +
                "REFERENCIA VARCHAR(18) , DT_VENCTO_ORIG DATE , NSU_CARTAO VARCHAR(32) ) AS BEGIN" +
                " FOR SELECT a.ID_CTAREC , a.DOCUMENTO , a.HISTORICO , a.DT_EMISSAO , a.DT_VENCTO" +
                " , a.VLR_CTAREC , a.TIP_CTAREC , a.ID_PORTADOR , a.ID_CLIENTE , a.INV_REFERENCIA" +
                " , a.DT_VENCTO_ORIG , a.NSU_CARTAO FROM TB_CONTA_RECEBER a JOIN TB_NFV_CTAREC b " +
                "ON a.ID_CTAREC = b.ID_CTAREC JOIN TB_NFVENDA c ON c.ID_NFVENDA = b.ID_NFVENDA WH" +
                "ERE c.NF_NUMERO = :pNF_NUMERO AND c.NF_SERIE = :pNF_SERIE INTO :ID_CTAREC , :DOC" +
                "UMENTO , :HISTORICO , :DT_EMISSAO , :DT_VENCTO , :VLR_CTAREC , :TIP_CTAREC , :ID" +
                "_PORTADOR , :ID_CLIENTE , :INV_REFERENCIA , :DT_VENCTO_ORIG , :NSU_CARTAO DO SUS" +
                "PEND ; END;\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_NFV_CTAREC_SYNC_DEL\';\r\n\t\t\t\t\t\texecute" +
                " statement \'CREATE OR ALTER PROCEDURE SP_TRI_NFV_CTAREC_SYNC_DEL ( pNfNumero TYP" +
                "E OF COLUMN TB_NFVENDA.NF_NUMERO , pNfSerie TYPE OF COLUMN TB_NFVENDA.NF_SERIE ," +
                " pIdCtarec TYPE OF COLUMN TB_NFV_CTAREC.ID_CTAREC ) AS DECLARE VARIABLE idNfvend" +
                "a TYPE OF COLUMN TB_NFVENDA.ID_NFVENDA; BEGIN SELECT ID_NFVENDA FROM TB_NFVENDA " +
                "WHERE NF_NUMERO = :pNfNumero AND NF_SERIE = :pNfSerie AND NF_MODELO = 59 INTO :i" +
                "dNfvenda ; DELETE FROM TB_NFV_CTAREC WHERE ID_NFVENDA = :idNfvenda AND ID_CTAREC" +
                "= :pIdCtarec ; END;\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_NFV_UPDT_BYNFNUMSERIE\';\r\n\t\t\t" +
                "\t\t\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_NFV_UPDT_BYNFNUMSERIE (PI" +
                "D_NATOPE INTEGER, PID_VENDEDOR SMALLINT, PID_CLIENTE INTEGER, PNF_NUMERO INTEGER" +
                ", PNF_SERIE VARCHAR(3), PNF_MODELO VARCHAR(2), PDT_EMISSAO DATE, PDT_SAIDA DATE," +
                " PHR_SAIDA TIME, PESPECIE VARCHAR(15), PPES_LIQUID NUMERIC(18,4), PPES_BRUTO NUM" +
                "ERIC(18,4), PID_FMAPGTO SMALLINT, PID_PARCELA SMALLINT, PMARCA VARCHAR(15), PQTD" +
                "_VOLUM NUMERIC(18,4), PNUM_VOLUM VARCHAR(15), PVLR_TROCO NUMERIC(18,4), PIND_PRE" +
                "S CHAR(1), PIND_IE_DEST CHAR(1), PDESCONTO_CONDICIONAL CHAR(1), PINF_COMP_FIXA B" +
                "LOB, PINF_COMP_EDIT BLOB, PENDERECO_ENTREGA CHAR(1), PENVIO_API TIMESTAMP, PSYNC" +
                "ED SMALLINT, PSOMA_FRETE CHAR(1) DEFAULT \'\'N\'\', PPROD_REV CHAR(1) DEFAULT \'\'N\'\'," +
                " PSTATUS CHAR(1) DEFAULT \'\'E\'\', PENT_SAI CHAR(1) DEFAULT \'\'1\'\', PTIPO_FRETE CHAR" +
                "(1) DEFAULT \'\'9\'\') AS BEGIN UPDATE TB_NFVENDA SET ID_NATOPE =:pID_NATOPE , ID_VE" +
                "NDEDOR =:pID_VENDEDOR , ID_CLIENTE =:pID_CLIENTE , NF_MODELO =:pNF_MODELO , DT_E" +
                "MISSAO =:pDT_EMISSAO , DT_SAIDA =:pDT_SAIDA , HR_SAIDA =:pHR_SAIDA , ESPECIE =:p" +
                "ESPECIE , TIPO_FRETE =:pTIPO_FRETE , PES_LIQUID =:pPES_LIQUID , PES_BRUTO =:pPES" +
                "_BRUTO , STATUS =:pSTATUS , ENT_SAI =:pENT_SAI , ID_FMAPGTO =:pID_FMAPGTO , ID_P" +
                "ARCELA =:pID_PARCELA , MARCA =:pMARCA , QTD_VOLUM =:pQTD_VOLUM , NUM_VOLUM =:pNU" +
                "M_VOLUM , PROD_REV =:pPROD_REV , SOMA_FRETE =:pSOMA_FRETE , VLR_TROCO =:pVLR_TRO" +
                "CO , IND_PRES =:pIND_PRES , IND_IE_DEST =:pIND_IE_DEST , DESCONTO_CONDICIONAL=:p" +
                "DESCONTO_CONDICIONAL , INF_COMP_FIXA =:pINF_COMP_FIXA , INF_COMP_EDIT =:pINF_COM" +
                "P_EDIT , ENDERECO_ENTREGA =:pENDERECO_ENTREGA , ENVIO_API =:pENVIO_API , SYNCED " +
                "=:pSYNCED WHERE NF_NUMERO = :pNF_NUMERO and NF_SERIE = :pNF_SERIE ; END;\';\r\n\r\n\t\t" +
                "\t\t\t\terro = \'sproc SP_TRI_SAT_GET_BY_IDNFV\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR " +
                "ALTER PROCEDURE SP_TRI_SAT_GET_BY_IDNFV ( pIdNfvenda TYPE OF COLUMN TB_SAT.ID_NF" +
                "VENDA ) RETURNS ( ID_REGISTRO TYPE OF COLUMN TB_SAT.ID_REGISTRO , ID_NFVENDA TYP" +
                "E OF COLUMN TB_SAT.ID_NFVENDA , CHAVE TYPE OF COLUMN TB_SAT.CHAVE , DT_EMISSAO T" +
                "YPE OF COLUMN TB_SAT.DT_EMISSAO , HR_EMISSAO TYPE OF COLUMN TB_SAT.HR_EMISSAO , " +
                "STATUS TYPE OF COLUMN TB_SAT.STATUS , STATUS_DES TYPE OF COLUMN TB_SAT.STATUS_DE" +
                "S , NUMERO_CFE TYPE OF COLUMN TB_SAT.NUMERO_CFE , NUM_SERIE_SAT TYPE OF COLUMN T" +
                "B_SAT.NUM_SERIE_SAT) AS BEGIN FOR SELECT a.ID_REGISTRO , a.ID_NFVENDA , a.CHAVE " +
                ", a.DT_EMISSAO , a.HR_EMISSAO , a.STATUS , a.STATUS_DES , a.NUMERO_CFE , a.NUM_S" +
                "ERIE_SAT FROM TB_SAT a WHERE a.ID_NFVENDA =:pIdNfvenda INTO :ID_REGISTRO , :ID_N" +
                "FVENDA , :CHAVE , :DT_EMISSAO , :HR_EMISSAO , :STATUS , :STATUS_DES , :NUMERO_CF" +
                "E , :NUM_SERIE_SAT DO SUSPEND ; END;\';\r\n\r\n\t\t\t\t\t\terro = \'deu certo\';\r\n\r\n\t\t\t\t\t\tSUS" +
                "PEND;\r\n\t\t\t\t\t\tWHEN ANY DO\r\n\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\tEND\r\n\t\t\t\t\t\tEND;";
            this._commandCollection[21].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[22] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[22].Connection = this.Connection;
            this._commandCollection[22].CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_PROCEDURES8\r\nRETURNS\r\n(\r\nerro VARCHAR(64)\r\n)\r\nAS" +
                "\r\nBEGIN\r\n\r\nerro = \'sproc SP_TRI_SAT_SYNC_INSERT\';\r\nexecute statement \'CREATE OR " +
                "ALTER PROCEDURE SP_TRI_SAT_SYNC_INSERT (pID_NFVENDA TYPE OF COLUMN TB_SAT.ID_NFV" +
                "ENDA, pCHAVE TYPE OF COLUMN TB_SAT.CHAVE, pDT_EMISSAO TYPE OF COLUMN TB_SAT.DT_E" +
                "MISSAO, pHR_EMISSAO TYPE OF COLUMN TB_SAT.HR_EMISSAO, pSTATUS TYPE OF COLUMN TB_" +
                "SAT.STATUS, pSTATUS_DES TYPE OF COLUMN TB_SAT.STATUS_DES, pNUMERO_CFE TYPE OF CO" +
                "LUMN TB_SAT.NUMERO_CFE, pNUM_SERIE_SAT TYPE OF COLUMN TB_SAT.NUM_SERIE_SAT) RETU" +
                "RNS (rnewIdRegistro TYPE OF COLUMN TB_SAT.ID_REGISTRO) AS DECLARE VARIABLE newId" +
                "Registro TYPE OF COLUMN TB_SAT.ID_REGISTRO; BEGIN SELECT NEXT VALUE FOR gen_tb_s" +
                "at_id FROM RDB$DATABASE INTO :newIdRegistro; IF(:newIdRegistro IS NULL) THEN new" +
                "IdRegistro = 0; BEGIN INSERT INTO TB_SAT (ID_REGISTRO, ID_NFVENDA, CHAVE, DT_EMI" +
                "SSAO, HR_EMISSAO, STATUS, STATUS_DES, NUMERO_CFE, NUM_SERIE_SAT) VALUES (:newIdR" +
                "egistro, :pID_NFVENDA, :pCHAVE, :pDT_EMISSAO, :pHR_EMISSAO, :pSTATUS, :pSTATUS_D" +
                "ES, :pNUMERO_CFE, :pNUM_SERIE_SAT); rnewIdRegistro = newIdRegistro; END END;\';\r\n" +
                "\r\nerro = \'sproc SP_TRI_NFVITEMCOFINS_GET_BY_ID\';\r\nexecute statement \'CREATE OR A" +
                "LTER PROCEDURE SP_TRI_NFVITEMCOFINS_GET_BY_ID (pIdNfvItem TYPE OF COLUMN TB_NFV_" +
                "ITEM_COFINS.ID_NFVITEM) RETURNS (ID_NFVITEM TYPE OF COLUMN TB_NFV_ITEM_COFINS.ID" +
                "_NFVITEM, POR_BC_COFINS TYPE OF COLUMN TB_NFV_ITEM_COFINS.POR_BC_COFINS, CST_COF" +
                "INS TYPE OF COLUMN TB_NFV_ITEM_COFINS.CST_COFINS, ALIQ_COFINS TYPE OF COLUMN TB_" +
                "NFV_ITEM_COFINS.ALIQ_COFINS, VLR_COFINS TYPE OF COLUMN TB_NFV_ITEM_COFINS.VLR_CO" +
                "FINS, VLR_BC_COFINS TYPE OF COLUMN TB_NFV_ITEM_COFINS.VLR_BC_COFINS) AS BEGIN FO" +
                "R SELECT a.ID_NFVITEM, a.POR_BC_COFINS, a.CST_COFINS, a.ALIQ_COFINS, a.VLR_COFIN" +
                "S, a.VLR_BC_COFINS FROM TB_NFV_ITEM_COFINS a WHERE a.ID_NFVITEM =:pIdNfvItem INT" +
                "O :ID_NFVITEM, :POR_BC_COFINS, :CST_COFINS, :ALIQ_COFINS, :VLR_COFINS, :VLR_BC_C" +
                "OFINS DO SUSPEND; END;\';\r\n\r\nerro = \'sproc SP_TRI_NFVITEMCOFINS_SYNCINSERT\';\r\nexe" +
                "cute statement \'CREATE OR ALTER PROCEDURE SP_TRI_NFVITEMCOFINS_SYNCINSERT (pID_N" +
                "FVITEM TYPE OF COLUMN TB_NFV_ITEM_COFINS.ID_NFVITEM, pPOR_BC_COFINS TYPE OF COLU" +
                "MN TB_NFV_ITEM_COFINS.POR_BC_COFINS, pCST_COFINS TYPE OF COLUMN TB_NFV_ITEM_COFI" +
                "NS.CST_COFINS, pALIQ_COFINS TYPE OF COLUMN TB_NFV_ITEM_COFINS.ALIQ_COFINS, pVLR_" +
                "COFINS TYPE OF COLUMN TB_NFV_ITEM_COFINS.VLR_COFINS, pVLR_BC_COFINS TYPE OF COLU" +
                "MN TB_NFV_ITEM_COFINS.VLR_BC_COFINS) AS BEGIN INSERT INTO TB_NFV_ITEM_COFINS (ID" +
                "_NFVITEM, POR_BC_COFINS, CST_COFINS, ALIQ_COFINS, VLR_COFINS, VLR_BC_COFINS) VAL" +
                "UES (:pID_NFVITEM, :pPOR_BC_COFINS, :pCST_COFINS, :pALIQ_COFINS, :pVLR_COFINS, :" +
                "pVLR_BC_COFINS); END;\';\r\n\r\nerro = \'sproc SP_TRI_NFVITEMPIS_GET_BY_ID\';\r\nexecute " +
                "statement \'CREATE OR ALTER PROCEDURE SP_TRI_NFVITEMPIS_GET_BY_ID (pIdNfvItem TYP" +
                "E OF COLUMN TB_NFV_ITEM_PIS.ID_NFVITEM) RETURNS (ID_NFVITEM TYPE OF COLUMN TB_NF" +
                "V_ITEM_PIS.ID_NFVITEM, POR_BC_PIS TYPE OF COLUMN TB_NFV_ITEM_PIS.POR_BC_PIS, CST" +
                "_PIS TYPE OF COLUMN TB_NFV_ITEM_PIS.CST_PIS, ALIQ_PIS TYPE OF COLUMN TB_NFV_ITEM" +
                "_PIS.ALIQ_PIS, VLR_PIS TYPE OF COLUMN TB_NFV_ITEM_PIS.VLR_PIS, VLR_BC_PIS TYPE O" +
                "F COLUMN TB_NFV_ITEM_PIS.VLR_BC_PIS) AS BEGIN FOR SELECT a.ID_NFVITEM, a.POR_BC_" +
                "PIS, a.CST_PIS, a.ALIQ_PIS, a.VLR_PIS, a.VLR_BC_PIS FROM TB_NFV_ITEM_PIS a WHERE" +
                " a.ID_NFVITEM =:pIdNfvItem INTO :ID_NFVITEM, :POR_BC_PIS, :CST_PIS, :ALIQ_PIS, :" +
                "VLR_PIS, :VLR_BC_PIS DO SUSPEND; END;\';\r\n\r\nerro = \'sproc SP_TRI_NFVITEMPIS_SYNCI" +
                "NSERT\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_NFVITEMPIS_SYNCINSE" +
                "RT (pID_NFVITEM TYPE OF COLUMN TB_NFV_ITEM_PIS.ID_NFVITEM, pPOR_BC_PIS TYPE OF C" +
                "OLUMN TB_NFV_ITEM_PIS.POR_BC_PIS, pCST_PIS TYPE OF COLUMN TB_NFV_ITEM_PIS.CST_PI" +
                "S, pALIQ_PIS TYPE OF COLUMN TB_NFV_ITEM_PIS.ALIQ_PIS, pVLR_PIS TYPE OF COLUMN TB" +
                "_NFV_ITEM_PIS.VLR_PIS, pVLR_BC_PIS TYPE OF COLUMN TB_NFV_ITEM_PIS.VLR_BC_PIS) AS" +
                " BEGIN INSERT INTO TB_NFV_ITEM_PIS (ID_NFVITEM, POR_BC_PIS, CST_PIS, ALIQ_PIS, V" +
                "LR_PIS, VLR_BC_PIS) VALUES (:pID_NFVITEM, :pPOR_BC_PIS, :pCST_PIS, :pALIQ_PIS, :" +
                "pVLR_PIS, :pVLR_BC_PIS); END;\';\r\n\r\nerro = \'sproc SP_TRI_NFVITEMICMS_GET_BY_ID\';\r" +
                "\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_NFVITEMICMS_GET_BY_ID (pIdN" +
                "fvItem TYPE OF COLUMN TB_NFV_ITEM_ICMS.ID_NFVITEM) RETURNS (ID_NFVITEM TYPE OF C" +
                "OLUMN TB_NFV_ITEM_ICMS.ID_NFVITEM, VLR_BC_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.V" +
                "LR_BC_ICMS, POR_BC_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.POR_BC_ICMS, CST_ICMS TY" +
                "PE OF COLUMN TB_NFV_ITEM_ICMS.CST_ICMS, ALIQ_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICM" +
                "S.ALIQ_ICMS, VLR_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.VLR_ICMS) AS BEGIN FOR SEL" +
                "ECT a.ID_NFVITEM, a.VLR_BC_ICMS, a.POR_BC_ICMS, a.CST_ICMS, a.ALIQ_ICMS, a.VLR_I" +
                "CMS FROM TB_NFV_ITEM_ICMS a WHERE a.ID_NFVITEM =:pIdNfvItem INTO :ID_NFVITEM, :V" +
                "LR_BC_ICMS, :POR_BC_ICMS, :CST_ICMS, :ALIQ_ICMS, :VLR_ICMS DO SUSPEND; END;\';\r\n\r" +
                "\nerro = \'sproc SP_TRI_NFVITEMICMS_SYNCINSERT\';\r\nexecute statement \'CREATE OR ALT" +
                "ER PROCEDURE SP_TRI_NFVITEMICMS_SYNCINSERT (pID_NFVITEM TYPE OF COLUMN TB_NFV_IT" +
                "EM_ICMS.ID_NFVITEM, pVLR_BC_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.VLR_BC_ICMS, pP" +
                "OR_BC_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.POR_BC_ICMS, pCST_ICMS TYPE OF COLUMN" +
                " TB_NFV_ITEM_ICMS.CST_ICMS, pALIQ_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.ALIQ_ICMS" +
                ", pVLR_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.VLR_ICMS) AS BEGIN INSERT INTO TB_NF" +
                "V_ITEM_ICMS (ID_NFVITEM, VLR_BC_ICMS, POR_BC_ICMS, CST_ICMS, ALIQ_ICMS, VLR_ICMS" +
                ") VALUES (:pID_NFVITEM, :pVLR_BC_ICMS, :pPOR_BC_ICMS, :pCST_ICMS, :pALIQ_ICMS, :" +
                "pVLR_ICMS); END;\';\r\n\r\nerro = \'sproc SP_TRI_NFVITEMST_GET_BY_ID\';\r\nexecute statem" +
                "ent \'CREATE OR ALTER PROCEDURE SP_TRI_NFVITEMST_GET_BY_ID (pIdNfvItem TYPE OF CO" +
                "LUMN TB_NFV_ITEM_ST.ID_NFVITEM) RETURNS (ID_NFVITEM TYPE OF COLUMN TB_NFV_ITEM_S" +
                "T.ID_NFVITEM, POR_BC_ICMS_ST TYPE OF COLUMN TB_NFV_ITEM_ST.POR_BC_ICMS_ST, VLR_B" +
                "C_ICMS_ST TYPE OF COLUMN TB_NFV_ITEM_ST.VLR_BC_ICMS_ST, VLR_ST TYPE OF COLUMN TB" +
                "_NFV_ITEM_ST.VLR_ST, MVA TYPE OF COLUMN TB_NFV_ITEM_ST.MVA, ALIQ_ST_ORIG TYPE OF" +
                " COLUMN TB_NFV_ITEM_ST.ALIQ_ST_ORIG, ALIQ_ST_DEST TYPE OF COLUMN TB_NFV_ITEM_ST." +
                "ALIQ_ST_DEST, INFORMA_ST TYPE OF COLUMN TB_NFV_ITEM_ST.INFORMA_ST, ICMS_EFETIVO " +
                "TYPE OF COLUMN TB_NFV_ITEM_ST.ICMS_EFETIVO, VLR_ICMS_SUBSTITUTO TYPE OF COLUMN T" +
                "B_NFV_ITEM_ST.VLR_ICMS_SUBSTITUTO) AS BEGIN FOR SELECT a.ID_NFVITEM, a.POR_BC_IC" +
                "MS_ST, a.VLR_BC_ICMS_ST, a.VLR_ST, a.MVA, a.ALIQ_ST_ORIG, a.ALIQ_ST_DEST, a.INFO" +
                "RMA_ST, a.ICMS_EFETIVO, a.VLR_ICMS_SUBSTITUTO FROM TB_NFV_ITEM_ST a WHERE a.ID_N" +
                "FVITEM =:pIdNfvItem INTO :ID_NFVITEM, :POR_BC_ICMS_ST, :VLR_BC_ICMS_ST, :VLR_ST," +
                " :MVA, :ALIQ_ST_ORIG, :ALIQ_ST_DEST, :INFORMA_ST, :ICMS_EFETIVO, :VLR_ICMS_SUBST" +
                "ITUTO DO SUSPEND; END;\';\r\n\r\nerro = \'sproc SP_TRI_NFVITEMST_SYNCINSERT\';\r\nexecute" +
                " statement \'CREATE OR ALTER PROCEDURE SP_TRI_NFVITEMST_SYNCINSERT (pID_NFVITEM T" +
                "YPE OF COLUMN TB_NFV_ITEM_ST.ID_NFVITEM, pPOR_BC_ICMS_ST TYPE OF COLUMN TB_NFV_I" +
                "TEM_ST.POR_BC_ICMS_ST, pVLR_BC_ICMS_ST TYPE OF COLUMN TB_NFV_ITEM_ST.VLR_BC_ICMS" +
                "_ST, pVLR_ST TYPE OF COLUMN TB_NFV_ITEM_ST.VLR_ST, pMVA TYPE OF COLUMN TB_NFV_IT" +
                "EM_ST.MVA, pALIQ_ST_ORIG TYPE OF COLUMN TB_NFV_ITEM_ST.ALIQ_ST_ORIG, pALIQ_ST_DE" +
                "ST TYPE OF COLUMN TB_NFV_ITEM_ST.ALIQ_ST_DEST, pINFORMA_ST TYPE OF COLUMN TB_NFV" +
                "_ITEM_ST.INFORMA_ST, pICMS_EFETIVO TYPE OF COLUMN TB_NFV_ITEM_ST.ICMS_EFETIVO, p" +
                "VLR_ICMS_SUBSTITUTO TYPE OF COLUMN TB_NFV_ITEM_ST.VLR_ICMS_SUBSTITUTO) AS BEGIN " +
                "INSERT INTO TB_NFV_ITEM_ST (ID_NFVITEM, POR_BC_ICMS_ST, VLR_BC_ICMS_ST, VLR_ST, " +
                "MVA, ALIQ_ST_ORIG, ALIQ_ST_DEST, INFORMA_ST, ICMS_EFETIVO, VLR_ICMS_SUBSTITUTO) " +
                "VALUES (:pID_NFVITEM, :pPOR_BC_ICMS_ST, :pVLR_BC_ICMS_ST, :pVLR_ST, :pMVA, :pALI" +
                "Q_ST_ORIG, :pALIQ_ST_DEST, :pINFORMA_ST, :pICMS_EFETIVO, :pVLR_ICMS_SUBSTITUTO);" +
                " END;\';\r\n\r\nerro = \'sproc SP_TRI_SAT_CANC_GET_BY_IDREG\';\r\nexecute statement \'CREA" +
                "TE OR ALTER PROCEDURE SP_TRI_SAT_CANC_GET_BY_IDREG (pID_REGISTRO TYPE OF COLUMN " +
                "TB_SAT_CANC.ID_REGISTRO) RETURNS (ID_CANCELA TYPE OF COLUMN TB_SAT_CANC.ID_CANCE" +
                "LA, ID_REGISTRO TYPE OF COLUMN TB_SAT_CANC.ID_REGISTRO, DT_EMISSAO TYPE OF COLUM" +
                "N TB_SAT_CANC.DT_EMISSAO, HR_EMISSAO TYPE OF COLUMN TB_SAT_CANC.HR_EMISSAO, NUME" +
                "RO_CFE TYPE OF COLUMN TB_SAT_CANC.NUMERO_CFE, CHAVE TYPE OF COLUMN TB_SAT_CANC.C" +
                "HAVE, NUM_SERIE_SAT TYPE OF COLUMN TB_SAT_CANC.NUM_SERIE_SAT, ENVIO_API TYPE OF " +
                "COLUMN TB_SAT_CANC.ENVIO_API) AS BEGIN FOR SELECT a.ID_CANCELA, a.ID_REGISTRO, a" +
                ".DT_EMISSAO, a.HR_EMISSAO, a.NUMERO_CFE, a.CHAVE, a.NUM_SERIE_SAT, a.ENVIO_API F" +
                "ROM TB_SAT_CANC a WHERE a.ID_REGISTRO =:pID_REGISTRO INTO :ID_CANCELA, :ID_REGIS" +
                "TRO, :DT_EMISSAO, :HR_EMISSAO, :NUMERO_CFE, :CHAVE, :NUM_SERIE_SAT, :ENVIO_API D" +
                "O SUSPEND; END;\';\r\n\r\nerro = \'sproc SP_TRI_SAT_CANC_SYNC_INSERT\';\r\nexecute statem" +
                "ent \'CREATE OR ALTER PROCEDURE SP_TRI_SAT_CANC_SYNC_INSERT (pID_REGISTRO TYPE OF" +
                " COLUMN TB_SAT_CANC.ID_REGISTRO, pDT_EMISSAO TYPE OF COLUMN TB_SAT_CANC.DT_EMISS" +
                "AO, pHR_EMISSAO TYPE OF COLUMN TB_SAT_CANC.HR_EMISSAO, pNUMERO_CFE TYPE OF COLUM" +
                "N TB_SAT_CANC.NUMERO_CFE, pCHAVE TYPE OF COLUMN TB_SAT_CANC.CHAVE, pNUM_SERIE_SA" +
                "T TYPE OF COLUMN TB_SAT_CANC.NUM_SERIE_SAT, pENVIO_API TYPE OF COLUMN TB_SAT_CAN" +
                "C.ENVIO_API) RETURNS (rnewIdCancela TYPE OF COLUMN TB_SAT_CANC.ID_CANCELA) AS DE" +
                "CLARE VARIABLE newIdCancela TYPE OF COLUMN TB_SAT_CANC.ID_CANCELA; BEGIN SELECT " +
                "NEXT VALUE FOR GEN_TB_SAT_CANC_ID FROM RDB$DATABASE INTO :newIdCancela; IF(:newI" +
                "dCancela IS NULL) THEN newIdCancela = 0; BEGIN INSERT INTO TB_SAT_CANC (ID_CANCE" +
                "LA, ID_REGISTRO, DT_EMISSAO, HR_EMISSAO, NUMERO_CFE, CHAVE, NUM_SERIE_SAT, ENVIO" +
                "_API) VALUES (:newIdCancela, :pID_REGISTRO, :pDT_EMISSAO, :pHR_EMISSAO, :pNUMERO" +
                "_CFE, :pCHAVE, :pNUM_SERIE_SAT, :pENVIO_API); rnewIdCancela = newIdCancela; END " +
                "END;\';\r\n\r\nerro = \'sproc SP_TRI_SAT_UPSERT_BY_CHAVE\';\r\nexecute statement \'CREATE " +
                "OR ALTER PROCEDURE SP_TRI_SAT_UPSERT_BY_CHAVE (pNF_NUMERO TYPE OF COLUMN TB_NFVE" +
                "NDA.NF_NUMERO, pNF_SERIE TYPE OF COLUMN TB_NFVENDA.NF_SERIE, pCHAVE TYPE OF COLU" +
                "MN TB_SAT.CHAVE, pDT_EMISSAO TYPE OF COLUMN TB_SAT.DT_EMISSAO, pHR_EMISSAO TYPE " +
                "OF COLUMN TB_SAT.HR_EMISSAO, pSTATUS TYPE OF COLUMN TB_SAT.STATUS, pSTATUS_DES T" +
                "YPE OF COLUMN TB_SAT.STATUS_DES, pNUMERO_CFE TYPE OF COLUMN TB_SAT.NUMERO_CFE, p" +
                "NUM_SERIE_SAT TYPE OF COLUMN TB_SAT.NUM_SERIE_SAT) RETURNS (rRowsAffected INTEGE" +
                "R) AS DECLARE vID_REGISTRO TYPE OF COLUMN TB_SAT.ID_REGISTRO; DECLARE vID_NFVEND" +
                "A TYPE OF COLUMN TB_NFVENDA.ID_NFVENDA; BEGIN SELECT ID_REGISTRO FROM TB_SAT WHE" +
                "RE CHAVE = :pCHAVE INTO :vID_REGISTRO; SELECT ID_NFVENDA FROM TB_NFVENDA WHERE N" +
                "F_NUMERO = :pNF_NUMERO AND NF_SERIE = :pNF_SERIE AND NF_MODELO = \'\'59\'\' INTO :vI" +
                "D_NFVENDA; IF (:vID_REGISTRO IS NULL) THEN BEGIN vID_REGISTRO = 0; END UPDATE OR" +
                " INSERT INTO TB_SAT (ID_REGISTRO, ID_NFVENDA, CHAVE, DT_EMISSAO, HR_EMISSAO, STA" +
                "TUS, STATUS_DES, NUMERO_CFE, NUM_SERIE_SAT) VALUES (:vID_REGISTRO, :vID_NFVENDA," +
                " :pCHAVE, :pDT_EMISSAO, :pHR_EMISSAO, :pSTATUS, :pSTATUS_DES, :pNUMERO_CFE, :pNU" +
                "M_SERIE_SAT) MATCHING (ID_REGISTRO); rRowsAffected = ROW_COUNT; END;\';\r\n\r\nerro =" +
                " \'sproc SP_TRI_SATCANC_UPSERT_BY_CHAVE\';\r\nexecute statement \'CREATE OR ALTER PRO" +
                "CEDURE SP_TRI_SATCANC_UPSERT_BY_CHAVE (pCHAVE_SAT TYPE OF COLUMN TB_SAT.CHAVE, p" +
                "DT_EMISSAO TYPE OF COLUMN TB_SAT_CANC.DT_EMISSAO, pHR_EMISSAO TYPE OF COLUMN TB_" +
                "SAT_CANC.HR_EMISSAO, pNUMERO_CFE TYPE OF COLUMN TB_SAT_CANC.NUMERO_CFE, pCHAVE T" +
                "YPE OF COLUMN TB_SAT_CANC.CHAVE, pNUM_SERIE_SAT TYPE OF COLUMN TB_SAT_CANC.NUM_S" +
                "ERIE_SAT, pENVIO_API TYPE OF COLUMN TB_SAT_CANC.ENVIO_API) RETURNS (rRowsAffecte" +
                "d INTEGER) AS DECLARE vID_REGISTRO TYPE OF COLUMN TB_SAT.ID_REGISTRO; DECLARE vI" +
                "D_CANCELA TYPE OF COLUMN TB_SAT_CANC.ID_CANCELA; BEGIN SELECT ID_REGISTRO FROM T" +
                "B_SAT WHERE CHAVE = :pCHAVE_SAT INTO :vID_REGISTRO; SELECT ID_CANCELA FROM TB_SA" +
                "T_CANC WHERE CHAVE = :pCHAVE INTO :vID_CANCELA; IF (:vID_CANCELA IS NULL) THEN B" +
                "EGIN vID_CANCELA = 0; END UPDATE OR INSERT INTO TB_SAT_CANC (ID_CANCELA, ID_REGI" +
                "STRO, DT_EMISSAO, HR_EMISSAO, NUMERO_CFE, CHAVE, NUM_SERIE_SAT, ENVIO_API) VALUE" +
                "S (:vID_CANCELA, :vID_REGISTRO, :pDT_EMISSAO, :pHR_EMISSAO, :pNUMERO_CFE, :pCHAV" +
                "E, :pNUM_SERIE_SAT, :pENVIO_API) MATCHING (ID_CANCELA); rRowsAffected = ROW_COUN" +
                "T; END;\';\r\n\r\nerro = \'sproc SP_TRI_GRAVANFVENDA\';\r\nexecute statement \'CREATE OR A" +
                "LTER PROCEDURE SP_TRI_GRAVANFVENDA (PID_VENDEDOR SMALLINT, PNF_SERIE VARCHAR(3)," +
                " PDT_SAIDA DATE, PHR_SAIDA TIME, PID_FMAPGTO SMALLINT, PVLR_TROCO NUMERIC(18, 4)" +
                ", PNCFE INTEGER, PINF_FIXA BLOB SUB_TYPE TEXT) RETURNS ( RNF_NUMERO INTEGER, RID" +
                "_NFVENDA INTEGER ) AS BEGIN SELECT NEXT VALUE FOR GEN_TB_NFVENDA_ID FROM RDB$DAT" +
                "ABASE INTO :rID_NFVENDA; IF (:pNCFE = -1) THEN SELECT MAX(NF_NUMERO)+ 1 FROM TB_" +
                "NFVENDA WHERE NF_MODELO = \'\'59\'\' AND NF_SERIE = :PNF_SERIE INTO :rNF_NUMERO; ELS" +
                "E rNF_NUMERO = :pNCFE; IF (:rNF_NUMERO IS NULL) THEN rNF_NUMERO = 0; INSERT INTO" +
                " TB_NFVENDA (ID_NFVENDA, ID_NATOPE, ID_VENDEDOR, ID_CLIENTE, NF_NUMERO, NF_SERIE" +
                ", NF_MODELO, DT_EMISSAO, DT_SAIDA, HR_SAIDA, ESPECIE, TIPO_FRETE, PES_LIQUID, PE" +
                "S_BRUTO, STATUS, ENT_SAI, ID_FMAPGTO, ID_PARCELA, MARCA, QTD_VOLUM, NUM_VOLUM, P" +
                "ROD_REV, SOMA_FRETE, VLR_TROCO, IND_PRES, IND_IE_DEST, DESCONTO_CONDICIONAL, INF" +
                "_COMP_FIXA, INF_COMP_EDIT, ENDERECO_ENTREGA, ENVIO_API) VALUES (:rID_NFVENDA, 2," +
                " :pID_VENDEDOR, 0, :rNF_NUMERO, :pNF_SERIE, \'\'59\'\', CURRENT_DATE, :pDT_SAIDA, :p" +
                "HR_SAIDA, NULL, \'\'9\'\', 0, 0, \'\'E\'\', \'\'1\'\', :pID_FMAPGTO, 2, NULL, 0, NULL, \'\'N\'\'" +
                ", \'\'N\'\', :pVLR_TROCO, NULL, NULL, \'\'S\'\', :pINF_FIXA, NULL, \'\'N\'\', NULL); SUSPEND" +
                "; END\';\r\n\r\nerro = \'sproc SP_TRI_GRAVANFVITEM\';\r\nexecute statement \'CREATE OR ALT" +
                "ER PROCEDURE SP_TRI_GRAVANFVITEM (PID_NFVENDA INTEGER, PID_IDENTIFICADOR INTEGER" +
                ", PNUM_ITEM SMALLINT, PQTD_ITEM NUMERIC(18,4), PVLR_DESC NUMERIC(18,4), PCSOSN V" +
                "ARCHAR(3), PVLR_TRIB_FED NUMERIC(18,4), PVLR_TRIB_EST NUMERIC(18,4), PVLR_UNIT N" +
                "UMERIC(18,4), PCOD_SCANNTECH INTEGER, PVLR_FRETE NUMERIC(18,4)) RETURNS ( RID_NF" +
                "VITEM INTEGER ) AS DECLARE VARIABLE vCFOP TYPE OF COLUMN TB_NFV_ITEM.CFOP; DECLA" +
                "RE VARIABLE vUNI_MEDIDA TYPE OF COLUMN TB_NFV_ITEM.UNI_MEDIDA; DECLARE VARIABLE " +
                "vPRC_CUSTO TYPE OF COLUMN TB_NFV_ITEM.VLR_CUSTO; BEGIN SELECT NEXT VALUE FOR GEN" +
                "_TB_NFV_ITEM_ID FROM RDB$DATABASE INTO :rID_NFVITEM; SELECT COALESCE (A.CFOP, \'\'" +
                "5102\'\'), A.UNI_MEDIDA, A.PRC_CUSTO FROM TB_ESTOQUE A JOIN TB_EST_IDENTIFICADOR B" +
                " ON A.ID_ESTOQUE = B.ID_ESTOQUE WHERE B.ID_IDENTIFICADOR = :pID_IDENTIFICADOR IN" +
                "TO :vCFOP, :vUNI_MEDIDA, :vPRC_CUSTO; INSERT INTO TB_NFV_ITEM (ID_NFVITEM, ID_NF" +
                "VENDA, ID_IDENTIFICADOR, CFOP, NUM_ITEM, QTD_ITEM, UNI_MEDIDA, VLR_TOTAL, VLR_DE" +
                "SC, VLR_CUSTO, PRC_LISTA, CF, VLR_FRETE, VLR_SEGURO, VLR_DESPESA, RET_PIS_COF_CS" +
                "LL, RET_IRRF, COD_ENQ, COD_BASE, CSOSN, NPED_COMPRA, ITEM_COMPRA, VLR_TOTTRIB, F" +
                "CI, VLR_ICM_DESO, ID_MOTIVO_DESO, EST_BX, VLR_TRIB_FED, VLR_TRIB_EST, VLR_TRIB_M" +
                "UN, INCLUIR_FATURA, VLR_UNIT, VLR_RETENCAO, CODPROMOSCANNTECH) VALUES (:rID_NFVI" +
                "TEM, :pID_NFVENDA, :pID_IDENTIFICADOR, :vCFOP, :pNUM_ITEM, :pQTD_ITEM, :vUNI_MED" +
                "IDA, ROUND(:pVLR_UNIT * :pQTD_ITEM, 2), :pVLR_DESC, :vPRC_CUSTO, 0, NULL, :pVLR_" +
                "FRETE, 0, 0, 0, 0, NULL, NULL, :pCSOSN, NULL, 0, (:pVLR_TRIB_FED + :pVLR_TRIB_ES" +
                "T), NULL, NULL, NULL, \'\'S\'\', :pVLR_TRIB_FED, :pVLR_TRIB_EST, 0, \'\'S\'\', :pVLR_UNI" +
                "T, 0, :pCOD_SCANNTECH); SUSPEND; END\';\r\n\r\nerro = \'sproc SP_TRI_GRAVASAT\';\r\nexecu" +
                "te statement \'CREATE OR ALTER PROCEDURE SP_TRI_GRAVASAT (PID_NFVENDA INTEGER, PC" +
                "HAVE VARCHAR(44), PNUMERO_CFE INTEGER, PNUM_SERIE_SAT VARCHAR(9)) RETURNS (RID_R" +
                "EGISTRO INTEGER) AS DECLARE VARIABLE vDT_EMISSAO TYPE OF COLUMN TB_SAT.DT_EMISSA" +
                "O; DECLARE VARIABLE vHR_EMISSAO TYPE OF COLUMN TB_SAT.HR_EMISSAO; BEGIN SELECT D" +
                "T_SAIDA, HR_SAIDA FROM TB_NFVENDA WHERE ID_NFVENDA = :pID_NFVENDA INTO :vDT_EMIS" +
                "SAO, :vHR_EMISSAO; SELECT NEXT VALUE FOR GEN_TB_SAT_ID FROM RDB$DATABASE INTO :r" +
                "ID_REGISTRO; INSERT INTO TB_SAT (ID_REGISTRO, ID_NFVENDA, CHAVE, DT_EMISSAO, HR_" +
                "EMISSAO, STATUS, STATUS_DES, NUMERO_CFE, NUM_SERIE_SAT) VALUES (:rID_REGISTRO, :" +
                "pID_NFVENDA, :pCHAVE, :vDT_EMISSAO, :vHR_EMISSAO, \'\'06000\'\', \'\'Emitido com suces" +
                "so + conteúdo notas\'\', :pNUMERO_CFE, :pNUM_SERIE_SAT); SUSPEND; END\';\r\n\r\nerro = " +
                "\'sproc SP_TRI_ATUALIZANFVENDA\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP" +
                "_TRI_ATUALIZANFVENDA (pID_NFVENDA INTEGER, PID_CLIENTE INTEGER) AS BEGIN UPDATE " +
                "TB_NFVENDA SET STATUS = \'\'I\'\', ID_CLIENTE = :PID_CLIENTE WHERE ID_NFVENDA = :pID" +
                "_NFVENDA; END\';\r\n\r\nerro = \'sproc V_TRI_CUPONSCANCELAVEIS\';\r\nexecute statement \'R" +
                "ECREATE VIEW V_TRI_CUPONSCANCELAVEIS (VALOR_TOTAL, TS_VENDA, CHAVE, NF_SERIE, ID" +
                "_NFVENDA, ID_REGISTRO) AS SELECT B.TOT_NF, CAST(A.DT_SAIDA || \'\' \'\' || A.HR_SAID" +
                "A AS TIMESTAMP), COALESCE(C.CHAVE, \'\'BETERRABA\'\'), A.NF_SERIE, A.ID_NFVENDA, COA" +
                "LESCE(C.ID_REGISTRO, -1) FROM TB_NFVENDA A JOIN TB_NFVENDA_TOT B ON A.ID_NFVENDA" +
                " = B.ID_NFVENDA LEFT JOIN TB_SAT C ON A.ID_NFVENDA = C.ID_NFVENDA WHERE (DATEDIF" +
                "F(MINUTE FROM CAST(A.DT_SAIDA || \'\' \'\' || A.HR_SAIDA AS TIMESTAMP) TO CURRENT_TI" +
                "MESTAMP) < 30) AND A.STATUS = \'\'I\'\'\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_CONTANFVPAGT" +
                "O\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_CONTANFVPAGTO (PN" +
                "F_SERIE VARCHAR(3), PTS_ABERTURA TIMESTAMP, PTS_FECHAMENTO TIMESTAMP, PSTATUS CH" +
                "AR(1) = \'\'I\'\') RETURNS (RCOUNT_FMANCE INTEGER,\tRID_FMANCFE INTEGER) AS BEGIN FOR" +
                " SELECT COUNT(A.ID_FMANFCE), A.ID_FMANFCE FROM TB_NFVENDA_FMAPAGTO_NFCE A JOIN T" +
                "B_NFVENDA B ON A.ID_NFVENDA = B.ID_NFVENDA WHERE B.NF_SERIE = :pNF_SERIE AND CAS" +
                "T ((B.DT_SAIDA || \'\' \'\' || B.HR_SAIDA) AS TIMESTAMP) BETWEEN :pTS_ABERTURA AND :" +
                "pTS_FECHAMENTO AND B.STATUS = :PSTATUS GROUP BY A.ID_FMANFCE INTO :rCOUNT_FMANCE" +
                ", :rID_FMANCFE DO SUSPEND; END\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_NFVCTAREC\';\r\n\t\t\t\t" +
                "\t\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_NFVCTAREC (pID_NFVENDA INT" +
                "EGER, pDT_VENCIMENTO DATE, pDESCRICAO VARCHAR(50), pID_CLIENTE INTEGER, pID_NUMP" +
                "AG INTEGER) RETURNS (rID_CTAREC INTEGER) AS DECLARE VARIABLE vNF_SERIE TYPE OF C" +
                "OLUMN TB_NFVENDA.NF_SERIE; DECLARE VARIABLE vNF_NUMERO TYPE OF COLUMN TB_NFVENDA" +
                ".NF_NUMERO; DECLARE VARIABLE vVALOR TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.VLR_" +
                "PAGTO; BEGIN SELECT NEXT VALUE FOR GEN_TB_CTAREC_ID FROM RDB$DATABASE INTO :rID_" +
                "CTAREC; SELECT NF_SERIE, NF_NUMERO FROM TB_NFVENDA WHERE ID_NFVENDA = :pID_NFVEN" +
                "DA INTO :vNF_SERIE, :vNF_NUMERO; SELECT VLR_PAGTO FROM TB_NFVENDA_FMAPAGTO_NFCE " +
                "WHERE ID_NUMPAG = :pID_NUMPAG INTO :vVALOR; INSERT INTO TB_CONTA_RECEBER (ID_CTA" +
                "REC, DOCUMENTO, HISTORICO, DT_EMISSAO, DT_VENCTO, VLR_CTAREC, TIP_CTAREC, ID_POR" +
                "TADOR, ID_CLIENTE, INV_REFERENCIA) VALUES (:rID_CTAREC, (CAST(:vNF_SERIE AS VARC" +
                "HAR(12)) || \'\'-\'\' || CAST(:vNF_NUMERO AS VARCHAR(12))), :pDESCRICAO, CURRENT_DAT" +
                "E, :pDT_VENCIMENTO, :vVALOR, \'\'C\'\', 1, :pID_CLIENTE, \'\'D\'\' || LPAD(:rID_CTAREC,7" +
                ",\'\'0\'\') || LPAD(:vNF_SERIE, 2, \'\'0\'\') || \'\'X\'\' || LPAD(:vNF_NUMERO, 7, \'\'0\'\')); " +
                "INSERT INTO TB_NFV_CTAREC (ID_NFVENDA, ID_CTAREC, ID_NUMPAG) VALUES (:pID_NFVEND" +
                "A, :rID_CTAREC, :pID_NUMPAG); SUSPEND; END\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_LANCA" +
                "MOVDIARIO\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_LANCAMOVD" +
                "IARIO (NUMCAIXA VARCHAR(60), VALOR NUMERIC(18,4), DESCRICAO_MOV VARCHAR(60), CON" +
                "TA_ORIGEM SMALLINT, CONTA_DESTINO SMALLINT) RETURNS (ID_MOVTO INTEGER) AS DECLAR" +
                "E VARIABLE ultimo_mov INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_TB_MOVDIARIO_ID F" +
                "ROM RDB$DATABASE INTO :ID_MOVTO; INSERT INTO TB_MOVDIARIO (ID_MOVTO, DT_MOVTO, H" +
                "R_MOVTO, HISTORICO, TIP_MOVTO, VLR_MOVTO, ID_CTAPLA) VALUES ((SELECT NEXT VALUE " +
                "FOR GEN_TB_MOVDIARIO_ID FROM RDB$DATABASE), CURRENT_DATE, CURRENT_TIME, :DESCRIC" +
                "AO_MOV, \'\'C\'\', :VALOR, :CONTA_ORIGEM); INSERT INTO TB_MOVDIARIO (ID_MOVTO, DT_MO" +
                "VTO, HR_MOVTO, HISTORICO, TIP_MOVTO, VLR_MOVTO, ID_CTAPLA) VALUES (:ID_MOVTO, CU" +
                "RRENT_DATE, CURRENT_TIME, :DESCRICAO_MOV, \'\'D\'\', :VALOR, :CONTA_DESTINO); SUSPEN" +
                "D; END\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_NFVFMAPGTO_INSERT\';\r\n\t\t\t\t\t\texecute statem" +
                "ent \'CREATE OR ALTER PROCEDURE SP_TRI_NFVFMAPGTO_INSERT (PVALOR TYPE OF COLUMN T" +
                "B_NFVENDA_FMAPAGTO_NFCE.VLR_PAGTO, PID_NFVENDA INTEGER, PID_FMANFCE INTEGER, PID" +
                "_PARCELA INTEGER, PID_ADMINISTRADORA INTEGER) RETURNS (RID_FMAPAGTO INTEGER) AS " +
                "BEGIN SELECT NEXT VALUE FOR gen_tb_nfvenda_fmapagto_nfce_id FROM RDB$DATABASE IN" +
                "TO :rID_FMAPAGTO; INSERT INTO TB_NFVENDA_FMAPAGTO_NFCE (ID_NUMPAG, VLR_PAGTO, ID" +
                "_NFVENDA, ID_FMANFCE, ID_PARCELA) VALUES (:rID_FMAPAGTO, :pVALOR, :pID_NFVENDA, " +
                ":pID_FMANFCE, :pID_PARCELA); INSERT INTO TB_NFCE_BANDEIRA (ID_NUMPAG, ID_BANDEIR" +
                "A, ID_ADMINISTRADORA, NUM_AUT, FORMA_ENVIO, SICLOS_ID, STONE_ID, PRE_TRANSACAO_I" +
                "D, POS_SERIAL) VALUES (:rID_FMAPAGTO, NULL, :pID_ADMINISTRADORA, NULL, NULL, NUL" +
                "L, NULL, NULL, NULL); END\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_TRI_WHATSINSERE\';\r\n\t\t\t\t\t\te" +
                "xecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_WHATSINSERE (PNUMERO VARCHAR(" +
                "100), PMENSAGEM BLOB SUB_TYPE TEXT, PDATA TIMESTAMP, PENVIADA VARCHAR(100), PCNP" +
                "J VARCHAR(50)) AS BEGIN INSERT INTO TRI_PDV_WHATS (NUMERO, MENSAGEM, DATAENVIO, " +
                "ENVIADA,CNPJ) VALUES (:PNUMERO, :PMENSAGEM,:PDATA,:PENVIADA,:PCNPJ); END\';\r\n\r\n\t\t" +
                "\t\t\t\terro = \'sproc SP_TRI_RENDIMENTO_SOMA\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR A" +
                "LTER PROCEDURE SP_TRI_RENDIMENTO_SOMA (PDATA_INICIAL TIMESTAMP, PDATA_FINAL TIME" +
                "STAMP, CAIXA VARCHAR(3)) RETURNS (RSOMA DECIMAL(18,4), RDESCRICAO VARCHAR(30)) A" +
                "S BEGIN FOR SELECT SUM(tni.VLR_TOTAL - tni.VLR_DESC),tetis.DESCRICAO FROM TB_NFV" +
                "_ITEM tni JOIN TB_NFVENDA tn ON tni.ID_NFVENDA = tn.ID_NFVENDA JOIN TB_EST_IDENT" +
                "IFICADOR tei ON tni.ID_IDENTIFICADOR = tei.ID_IDENTIFICADOR JOIN TB_ESTOQUE te O" +
                "N tei.ID_ESTOQUE = te.ID_ESTOQUE JOIN TB_EST_TIPO_ITEM_SIS tetis ON te.ID_TIPOIT" +
                "EM = tetis.ID_TIPOITEM WHERE (tn.NF_SERIE = \'\'N\'\'||:CAIXA OR tn.NF_SERIE = :CAIX" +
                "A) AND tn.NF_MODELO = \'\'59\'\' AND tn.STATUS = \'\'I\'\' AND CAST ((tn.DT_SAIDA || \'\' " +
                "\'\' || tn.HR_SAIDA) AS TIMESTAMP) BETWEEN :PDATA_INICIAL AND :PDATA_FINAL GROUP B" +
                "Y tetis.DESCRICAO INTO :RSOMA, :RDESCRICAO DO BEGIN SUSPEND; END END\';\r\n\r\n\t\t\t\t\t\t" +
                "erro = \'sproc SP_TRI_PROMOCOES_UPSERT\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR ALTE" +
                "R PROCEDURE SP_TRI_PROMOCOES_UPSERT (PID INTEGER, PQTD NUMERIC(15,2), PTIPO VARC" +
                "HAR(20), PDET NUMERIC(15,2), PLIMITE INTEGER, PINICIO DATE, PFIM DATE, P_REJEITA" +
                "DA INTEGER, PSCANNTECH INTEGER, P_EXECUTA CHAR(1)) RETURNS ( RROWSAFFECTED INTEG" +
                "ER ) AS BEGIN IF(:P_EXECUTA = \'\'U\'\' OR :P_EXECUTA = \'\'I\'\') THEN  BEGIN UPDATE OR" +
                " INSERT INTO TB_PROMOCOES (ID , QTD , TIPO , DET , LIMITE , INICIO , FIM , REJEI" +
                "TADA , SCANNTECH) VALUES (:PID , :PQTD , :PTIPO , :PDET , :PLIMITE , :PINICIO , " +
                ":PFIM , :P_REJEITADA , :PSCANNTECH) ; END IF(:P_EXECUTA = \'\'D\'\') THEN BEGIN DELE" +
                "TE FROM TB_PROMOCOES WHERE ID = :PID; END rRowsAffected = ROW_COUNT; END\';\r\n\r\n\t\t" +
                "\t\t\t\terro = \'sproc SP_TRI_PROMOCOES_ITENS_UPSERT\';\r\n\t\t\t\t\t\texecute statement \'CREA" +
                "TE OR ALTER PROCEDURE SP_TRI_PROMOCOES_ITENS_UPSERT (PID INTEGER, PIDPROMOCAO IN" +
                "TEGER, PPRODUTONOME VARCHAR(150), PCODIGOBARRAS VARCHAR(18), P_EXECUTA CHAR(1)) " +
                "RETURNS ( RROWSAFFECTED INTEGER ) AS BEGIN IF(:P_EXECUTA = \'\'U\'\' OR :P_EXECUTA =" +
                " \'\'I\'\') THEN BEGIN UPDATE OR INSERT INTO TB_PROMOCOES_ITENS (ID , IDPROMOCAO , P" +
                "RODUTONOME , CODIGOBARRAS) VALUES (:PID , :PIDPROMOCAO , :PPRODUTONOME , :PCODIG" +
                "OBARRAS) ; END IF(:P_EXECUTA = \'\'D\'\') THEN BEGIN DELETE FROM TB_PROMOCOES_ITENS " +
                "WHERE ID = :PID; END rRowsAffected = ROW_COUNT; END\';\r\n\r\n\t\t\t\t\t\terro = \'sproc SP_" +
                "TRI_OBTEMPROMOSCANNTECH\';\r\n\t\t\t\t\t\texecute statement \'CREATE OR ALTER PROCEDURE SP" +
                "_TRI_OBTEMPROMOSCANNTECH (ID_SCANNTECH INTEGER) RETURNS ( QTD NUMERIC(15,2), TIP" +
                "O VARCHAR(20), DET NUMERIC(15,2), LIMITE INTEGER ) AS DECLARE VARIABLE VEXISTE_P" +
                "ROMO INTEGER; BEGIN SELECT COUNT(1) FROM TB_PROMOCOES TP INNER JOIN TB_PROMOCOES" +
                "_ITENS TPI ON TPI.IDPROMOCAO = TP.ID  WHERE CURRENT_DATE BETWEEN TP.INICIO AND T" +
                "P.FIM  AND TP.ID = :ID_SCANNTECH AND TP.REJEITADA = 0 INTO VEXISTE_PROMO; IF(VEX" +
                "ISTE_PROMO > 0) THEN BEGIN FOR SELECT FIRST (1) TP.QTD, TP.TIPO, TP.DET, TP.LIMI" +
                "TE FROM TB_PROMOCOES TP INNER JOIN TB_PROMOCOES_ITENS TPI ON TPI.IDPROMOCAO = TP" +
                ".ID  WHERE (TP.ID = :ID_SCANNTECH) INTO :QTD, :TIPO, :DET, :LIMITE DO SUSPEND; E" +
                "ND END\';\r\n\r\n                                                                    " +
                "                                            erro = \'sproc SP_TRI_UPDATE_NF_TO_F\'" +
                ";\r\n\t\t\t\t\t\texecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_UPDATE_NF_TO_F (PNE" +
                "W_NF_NUMERO INTEGER, PNEW_NF_SERIE VARCHAR(3), PNEW_DT_SAIDA DATE, PNEW_HR_SAIDA" +
                " TIME, PSYNCED SMALLINT, POLD_NF_NUMERO INTEGER, POLD_NF_SERIE VARCHAR(3), POLD_" +
                "NF_MODELO VARCHAR(3)) RETURNS ( RID_ALTERADO INTEGER ) AS BEGIN  UPDATE TB_NFVEN" +
                "DA SET NF_NUMERO = :PNEW_NF_NUMERO, NF_SERIE = :PNEW_NF_SERIE, DT_SAIDA = :PNEW_" +
                "DT_SAIDA, HR_SAIDA = :PNEW_HR_SAIDA, SYNCED = :PSYNCED WHERE NF_NUMERO = :POLD_N" +
                "F_NUMERO AND NF_SERIE = :POLD_NF_SERIE AND NF_MODELO = :POLD_NF_MODELO; FOR SELE" +
                "CT ID_NFVENDA FROM TB_NFVENDA WHERE NF_NUMERO = :PNEW_NF_NUMERO AND NF_SERIE = :" +
                "PNEW_NF_SERIE AND NF_MODELO = :POLD_NF_MODELO INTO :RID_ALTERADO DO  BEGIN  SUSP" +
                "END; END END\';\r\n\r\n\t\t\t\t\t\terro = \'deu certo\';\r\n\r\n\t\t\t\t\t\tSUSPEND;\r\n\t\t\t\t\t\tWHEN ANY DO" +
                "\r\n\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\tEND\r\n\t\t\t\t\t\tEND;";
            this._commandCollection[22].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[23] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[23].Connection = this.Connection;
            this._commandCollection[23].CommandText = "UPDATE OR INSERT INTO TRI_PDV_SETUP (ID_DUMMY, EXECUCAO, VERSAO, ULTIMA_AT, DT_IN" +
                "STALACAO) VALUES (1, 100, \'\'0.0.0.0\'\', \'\'2000-01-01\'\', \'\'2000-01-01\'\') MATCHING(" +
                "ID_DUMMY);";
            this._commandCollection[23].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[24] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[24].Connection = this.Connection;
            this._commandCollection[24].CommandText = "\"SP_TRI_CONFIG_GETBY_CAIXA\"";
            this._commandCollection[24].CommandType = global::System.Data.CommandType.StoredProcedure;
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PNO_CAIXA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[24].Parameters.Add(param);
            this._commandCollection[25] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[25].Connection = this.Connection;
            this._commandCollection[25].CommandText = @"SELECT ACFILLDELAY, ACFILLMODE, ACFILLPREFIX, ACREFERENCIA, BALBAUD, BALBITS, BALMODELO, BALPARITY, BALPORTA, BLOQUEIA_NO_LIMITE, CSOSN_CONT, ECF_ATIVA, ECF_PORTA, EXIGE_SANGRIA, ICMS_CONT, ID_MAC, IMPRESSORA_USB, IMPRESSORA_USB_PED, INFORMA_MAQUININHA, INTERROMPE_NAO_ENCONTRADO, LAYOUT_SAT, MENSAGEM_CORTESIA, MENSAGEM_RODAPE, MODELO_CUPOM, MODELO_SAT, NO_CAIXA, PEDE_CPF, PERGUNTA_WHATS, PERMITE_ESTOQUE_NEGATIVO, PERMITE_FOLGA_SANGRIA, SATLIFESIGNINTERVAL, SATSERVIDOR, SATSERVTIMEOUT, SAT_CODATIV, SAT_USADO, SIGN_AC, SYSCOMISSAO, SYSEMITECOMPROVANTE, SYSPARCELA, SYSPERGUNTAWHATS, TEFIP, TEFNUMLOJA, TEFNUMTERMINAL, TEFPEDECPFPELOPINPAD, TRI_PDV_DT_UPD, USATEF, VALOR_DE_FOLGA, VALOR_MAX_CAIXA, VINCULA_MAQ_CTA FROM TRI_PDV_CONFIG WHERE (ID_MAC = @param)";
            this._commandCollection[25].CommandType = global::System.Data.CommandType.Text;
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "@param";
            param.Size = 12;
            param.IsNullable = true;
            param.SourceColumn = "ID_MAC";
            this._commandCollection[25].Parameters.Add(param);
            this._commandCollection[26] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[26].Connection = this.Connection;
            this._commandCollection[26].CommandText = "\"SP_TRI_CONFIG_GETBY_MAC\"";
            this._commandCollection[26].CommandType = global::System.Data.CommandType.StoredProcedure;
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PID_MAC";
            param.Size = 12;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[26].Parameters.Add(param);
            this._commandCollection[27] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[27].Connection = this.Connection;
            this._commandCollection[27].CommandText = "\"SP_TRI_CONFIG_GETBY_DTUPD_NCAI\"";
            this._commandCollection[27].CommandType = global::System.Data.CommandType.StoredProcedure;
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PULTIMASYNC";
            param.DbType = global::System.Data.DbType.DateTime;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[27].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PNOCAIXA";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[27].Parameters.Add(param);
            this._commandCollection[28] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[28].Connection = this.Connection;
            this._commandCollection[28].CommandText = "\"SP_TRI_ATUALIZA_TB_AUX_SYNC\"";
            this._commandCollection[28].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[29] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[29].Connection = this.Connection;
            this._commandCollection[29].CommandText = "\"SP_TRI_ATUALIZATABELAS\"";
            this._commandCollection[29].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[30] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[30].Connection = this.Connection;
            this._commandCollection[30].CommandText = "\"SP_TRI_ATUALIZATABELAS2\"";
            this._commandCollection[30].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[31] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[31].Connection = this.Connection;
            this._commandCollection[31].CommandText = "\"SP_TRI_CONFIG_UPSERT\"";
            this._commandCollection[31].CommandType = global::System.Data.CommandType.StoredProcedure;
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PID_MAC";
            param.Size = 12;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PNO_CAIXA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PEXIGE_SANGRIA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PVALOR_MAX_CAIXA";
            param.DbType = global::System.Data.DbType.Double;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PBLOQUEIA_NO_LIMITE";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PVALOR_DE_FOLGA";
            param.DbType = global::System.Data.DbType.Double;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PPERMITE_FOLGA_SANGRIA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PINTERROMPE_NAO_ENCONTRADO";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PMENSAGEM_CORTESIA";
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PICMS_CONT";
            param.DbType = global::System.Data.DbType.Single;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PCSOSN_CONT";
            param.DbType = global::System.Data.DbType.Single;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PPEDE_CPF";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PPERMITE_ESTOQUE_NEGATIVO";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PMODELO_CUPOM";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PMENSAGEM_RODAPE";
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PTRI_PDV_DT_UPD";
            param.DbType = global::System.Data.DbType.DateTime;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PMODELO_SAT";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PSATSERVIDOR";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PSAT_CODATIV";
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PSIGN_AC";
            param.Size = 2147483647;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PSAT_USADO";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PECF_ATIVA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PECF_PORTA";
            param.Size = 5;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PIMPRESSORA_USB";
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PIMPRESSORA_USB_PED";
            param.Size = 64;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PPERGUNTA_WHATS";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PUSATEF";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PTEFIP";
            param.Size = 15;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PTEFNUMLOJA";
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PTEFNUMTERMINAL";
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PTEFPEDECPFPELOPINPAD";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PBALPORTA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PBALBITS";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PBALBAUD";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PBALPARITY";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PBALMODELO";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PACFILLPREFIX";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PACFILLMODE";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PACREFERENCIA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PSYSCOMISSAO";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PSATSERVTIMEOUT";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PSATLIFESIGNINTERVAL";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PACFILLDELAY";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PSYSPERGUNTAWHATS";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PSYSPARCELA";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PSYSEMITECOMPROVANTE";
            param.DbType = global::System.Data.DbType.Int16;
            param.Size = 2;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PINFORMA_MAQUININHA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PLAYOUT_SAT";
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            param = new global::FirebirdSql.Data.FirebirdClient.FbParameter();
            param.ParameterName = "PVINCULA_MAQ_CTA";
            param.Size = 1;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[31].Parameters.Add(param);
            this._commandCollection[32] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[32].Connection = this.Connection;
            this._commandCollection[32].CommandText = "\"SP_TRI_CRIATABELAS\"";
            this._commandCollection[32].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[33] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[33].Connection = this.Connection;
            this._commandCollection[33].CommandText = "\"SP_TRI_CRIATABELAS_AUX_SYNC\"";
            this._commandCollection[33].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[34] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[34].Connection = this.Connection;
            this._commandCollection[34].CommandText = "\"SP_TRI_CRIATABELAS_SERV\"";
            this._commandCollection[34].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[35] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[35].Connection = this.Connection;
            this._commandCollection[35].CommandText = "\"SP_TRI_DADOSINICIAIS\"";
            this._commandCollection[35].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[36] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[36].Connection = this.Connection;
            this._commandCollection[36].CommandText = "\"SP_TRI_DSBL_SERV_TRGGR_ON_PDV\"";
            this._commandCollection[36].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[37] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[37].Connection = this.Connection;
            this._commandCollection[37].CommandText = "\"SP_TRI_ENABLE_SERV_TRIGGERS\"";
            this._commandCollection[37].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[38] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[38].Connection = this.Connection;
            this._commandCollection[38].CommandText = "\"SP_TRI_GERATRIGGERS_AUX_SYNC\"";
            this._commandCollection[38].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[39] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[39].Connection = this.Connection;
            this._commandCollection[39].CommandText = "\"SP_TRI_GERATRIGGERS_AUX_SYNC2\"";
            this._commandCollection[39].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[40] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[40].Connection = this.Connection;
            this._commandCollection[40].CommandText = "\"SP_TRI_GERATRIGGERS_AUX_SYNC3\"";
            this._commandCollection[40].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[41] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[41].Connection = this.Connection;
            this._commandCollection[41].CommandText = "\"SP_TRI_GERATRIGGERS_AUX_SYNC4\"";
            this._commandCollection[41].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[42] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[42].Connection = this.Connection;
            this._commandCollection[42].CommandText = "\"SP_TRI_PROCEDURES\"";
            this._commandCollection[42].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[43] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[43].Connection = this.Connection;
            this._commandCollection[43].CommandText = "\"SP_TRI_PROCEDURES2\"";
            this._commandCollection[43].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[44] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[44].Connection = this.Connection;
            this._commandCollection[44].CommandText = "\"SP_TRI_PROCEDURES3\"";
            this._commandCollection[44].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[45] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[45].Connection = this.Connection;
            this._commandCollection[45].CommandText = "\"SP_TRI_PROCEDURES4\"";
            this._commandCollection[45].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[46] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[46].Connection = this.Connection;
            this._commandCollection[46].CommandText = "\"SP_TRI_PROCEDURES5\"";
            this._commandCollection[46].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[47] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[47].Connection = this.Connection;
            this._commandCollection[47].CommandText = "\"SP_TRI_PROCEDURES6\"";
            this._commandCollection[47].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[48] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[48].Connection = this.Connection;
            this._commandCollection[48].CommandText = "\"SP_TRI_PROCEDURES7\"";
            this._commandCollection[48].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[49] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[49].Connection = this.Connection;
            this._commandCollection[49].CommandText = "\"SP_TRI_PROCEDURES8\"";
            this._commandCollection[49].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[50] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            this._commandCollection[50].Connection = this.Connection;
            this._commandCollection[50].CommandText = "\"SP_TRI_TERMARIO_CHECKSEQ\"";
            this._commandCollection[50].CommandType = global::System.Data.CommandType.StoredProcedure;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FDBDataSetConfig.TRI_PDV_CONFIGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int CaixaExistente(FDBDataSetConfig.TRI_PDV_CONFIGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[13];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillById(FDBDataSetConfig.TRI_PDV_CONFIGDataTable dataTable, string param) {
            this.Adapter.SelectCommand = this.CommandCollection[25];
            if ((param == null)) {
                throw new global::System.ArgumentNullException("param");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(param));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByMacAdress(FDBDataSetConfig.TRI_PDV_CONFIGDataTable dataTable, string PID_MAC) {
            this.Adapter.SelectCommand = this.CommandCollection[26];
            if ((PID_MAC == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(PID_MAC));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByUpdateDate(FDBDataSetConfig.TRI_PDV_CONFIGDataTable dataTable, global::System.Nullable<global::System.DateTime> PULTIMASYNC, global::System.Nullable<int> PNOCAIXA) {
            this.Adapter.SelectCommand = this.CommandCollection[27];
            if ((PULTIMASYNC.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(PULTIMASYNC.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((PNOCAIXA.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(PNOCAIXA.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FDBDataSetConfig.TRI_PDV_CONFIGDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FDBDataSetConfig dataSet) {
            return this.Adapter.Update(dataSet, "TRI_PDV_CONFIG");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_ID_MAC, 
                    short Original_NO_CAIXA, 
                    string Original_EXIGE_SANGRIA, 
                    double Original_VALOR_MAX_CAIXA, 
                    string Original_BLOQUEIA_NO_LIMITE, 
                    double Original_VALOR_DE_FOLGA, 
                    string Original_PERMITE_FOLGA_SANGRIA, 
                    string Original_INTERROMPE_NAO_ENCONTRADO, 
                    string Original_MENSAGEM_CORTESIA, 
                    global::System.Nullable<float> Original_ICMS_CONT, 
                    global::System.Nullable<float> Original_CSOSN_CONT, 
                    int Original_PEDE_CPF, 
                    int Original_PERMITE_ESTOQUE_NEGATIVO, 
                    short Original_MODELO_CUPOM, 
                    string Original_MENSAGEM_RODAPE, 
                    global::System.Nullable<global::System.DateTime> Original_TRI_PDV_DT_UPD, 
                    global::System.Nullable<int> Original_MODELO_SAT, 
                    string Original_SATSERVIDOR, 
                    string Original_SAT_CODATIV, 
                    string Original_SAT_USADO, 
                    string Original_ECF_ATIVA, 
                    string Original_ECF_PORTA, 
                    string Original_IMPRESSORA_USB, 
                    string Original_IMPRESSORA_USB_PED, 
                    int Original_PERGUNTA_WHATS, 
                    string Original_USATEF, 
                    string Original_TEFIP, 
                    string Original_TEFNUMLOJA, 
                    string Original_TEFNUMTERMINAL, 
                    string Original_TEFPEDECPFPELOPINPAD, 
                    short Original_BALPORTA, 
                    short Original_BALBITS, 
                    int Original_BALBAUD, 
                    short Original_BALPARITY, 
                    short Original_BALMODELO, 
                    short Original_ACFILLPREFIX, 
                    short Original_ACFILLMODE, 
                    short Original_ACREFERENCIA, 
                    short Original_SYSCOMISSAO, 
                    int Original_SATSERVTIMEOUT, 
                    int Original_SATLIFESIGNINTERVAL, 
                    int Original_ACFILLDELAY, 
                    short Original_SYSPERGUNTAWHATS, 
                    short Original_SYSPARCELA, 
                    short Original_SYSEMITECOMPROVANTE, 
                    string Original_INFORMA_MAQUININHA, 
                    string Original_LAYOUT_SAT, 
                    string Original_VINCULA_MAQ_CTA) {
            if ((Original_ID_MAC == null)) {
                throw new global::System.ArgumentNullException("Original_ID_MAC");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_ID_MAC));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((short)(Original_NO_CAIXA));
            if ((Original_EXIGE_SANGRIA == null)) {
                throw new global::System.ArgumentNullException("Original_EXIGE_SANGRIA");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_EXIGE_SANGRIA));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((double)(Original_VALOR_MAX_CAIXA));
            if ((Original_BLOQUEIA_NO_LIMITE == null)) {
                throw new global::System.ArgumentNullException("Original_BLOQUEIA_NO_LIMITE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_BLOQUEIA_NO_LIMITE));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((double)(Original_VALOR_DE_FOLGA));
            if ((Original_PERMITE_FOLGA_SANGRIA == null)) {
                throw new global::System.ArgumentNullException("Original_PERMITE_FOLGA_SANGRIA");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_PERMITE_FOLGA_SANGRIA));
            }
            if ((Original_INTERROMPE_NAO_ENCONTRADO == null)) {
                throw new global::System.ArgumentNullException("Original_INTERROMPE_NAO_ENCONTRADO");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_INTERROMPE_NAO_ENCONTRADO));
            }
            if ((Original_MENSAGEM_CORTESIA == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_MENSAGEM_CORTESIA));
            }
            if ((Original_ICMS_CONT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((float)(Original_ICMS_CONT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_CSOSN_CONT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((float)(Original_CSOSN_CONT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_PEDE_CPF));
            this.Adapter.DeleteCommand.Parameters[15].Value = ((int)(Original_PERMITE_ESTOQUE_NEGATIVO));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((short)(Original_MODELO_CUPOM));
            if ((Original_MENSAGEM_RODAPE == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_MENSAGEM_RODAPE));
            }
            if ((Original_TRI_PDV_DT_UPD.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((System.DateTime)(Original_TRI_PDV_DT_UPD.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_MODELO_SAT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((int)(Original_MODELO_SAT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_SATSERVIDOR == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_SATSERVIDOR));
            }
            if ((Original_SAT_CODATIV == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_SAT_CODATIV));
            }
            if ((Original_SAT_USADO == null)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_SAT_USADO));
            }
            if ((Original_ECF_ATIVA == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_ECF_ATIVA));
            }
            if ((Original_ECF_PORTA == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_ECF_PORTA));
            }
            if ((Original_IMPRESSORA_USB == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_IMPRESSORA_USB));
            }
            if ((Original_IMPRESSORA_USB_PED == null)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((string)(Original_IMPRESSORA_USB_PED));
            }
            this.Adapter.DeleteCommand.Parameters[37].Value = ((int)(Original_PERGUNTA_WHATS));
            if ((Original_USATEF == null)) {
                throw new global::System.ArgumentNullException("Original_USATEF");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[38].Value = ((string)(Original_USATEF));
            }
            if ((Original_TEFIP == null)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((string)(Original_TEFIP));
            }
            if ((Original_TEFNUMLOJA == null)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((string)(Original_TEFNUMLOJA));
            }
            if ((Original_TEFNUMTERMINAL == null)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((string)(Original_TEFNUMTERMINAL));
            }
            if ((Original_TEFPEDECPFPELOPINPAD == null)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((string)(Original_TEFPEDECPFPELOPINPAD));
            }
            this.Adapter.DeleteCommand.Parameters[47].Value = ((short)(Original_BALPORTA));
            this.Adapter.DeleteCommand.Parameters[48].Value = ((short)(Original_BALBITS));
            this.Adapter.DeleteCommand.Parameters[49].Value = ((int)(Original_BALBAUD));
            this.Adapter.DeleteCommand.Parameters[50].Value = ((short)(Original_BALPARITY));
            this.Adapter.DeleteCommand.Parameters[51].Value = ((short)(Original_BALMODELO));
            this.Adapter.DeleteCommand.Parameters[52].Value = ((short)(Original_ACFILLPREFIX));
            this.Adapter.DeleteCommand.Parameters[53].Value = ((short)(Original_ACFILLMODE));
            this.Adapter.DeleteCommand.Parameters[54].Value = ((short)(Original_ACREFERENCIA));
            this.Adapter.DeleteCommand.Parameters[55].Value = ((short)(Original_SYSCOMISSAO));
            this.Adapter.DeleteCommand.Parameters[56].Value = ((int)(Original_SATSERVTIMEOUT));
            this.Adapter.DeleteCommand.Parameters[57].Value = ((int)(Original_SATLIFESIGNINTERVAL));
            this.Adapter.DeleteCommand.Parameters[58].Value = ((int)(Original_ACFILLDELAY));
            this.Adapter.DeleteCommand.Parameters[59].Value = ((short)(Original_SYSPERGUNTAWHATS));
            this.Adapter.DeleteCommand.Parameters[60].Value = ((short)(Original_SYSPARCELA));
            this.Adapter.DeleteCommand.Parameters[61].Value = ((short)(Original_SYSEMITECOMPROVANTE));
            if ((Original_INFORMA_MAQUININHA == null)) {
                throw new global::System.ArgumentNullException("Original_INFORMA_MAQUININHA");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[62].Value = ((string)(Original_INFORMA_MAQUININHA));
            }
            if ((Original_LAYOUT_SAT == null)) {
                throw new global::System.ArgumentNullException("Original_LAYOUT_SAT");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((string)(Original_LAYOUT_SAT));
            }
            if ((Original_VINCULA_MAQ_CTA == null)) {
                throw new global::System.ArgumentNullException("Original_VINCULA_MAQ_CTA");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[64].Value = ((string)(Original_VINCULA_MAQ_CTA));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string ID_MAC, 
                    short NO_CAIXA, 
                    string EXIGE_SANGRIA, 
                    double VALOR_MAX_CAIXA, 
                    string BLOQUEIA_NO_LIMITE, 
                    double VALOR_DE_FOLGA, 
                    string PERMITE_FOLGA_SANGRIA, 
                    string INTERROMPE_NAO_ENCONTRADO, 
                    string MENSAGEM_CORTESIA, 
                    global::System.Nullable<float> ICMS_CONT, 
                    global::System.Nullable<float> CSOSN_CONT, 
                    int PEDE_CPF, 
                    int PERMITE_ESTOQUE_NEGATIVO, 
                    short MODELO_CUPOM, 
                    string MENSAGEM_RODAPE, 
                    global::System.Nullable<global::System.DateTime> TRI_PDV_DT_UPD, 
                    global::System.Nullable<int> MODELO_SAT, 
                    string SATSERVIDOR, 
                    string SAT_CODATIV, 
                    string SIGN_AC, 
                    string SAT_USADO, 
                    string ECF_ATIVA, 
                    string ECF_PORTA, 
                    string IMPRESSORA_USB, 
                    string IMPRESSORA_USB_PED, 
                    int PERGUNTA_WHATS, 
                    string USATEF, 
                    string TEFIP, 
                    string TEFNUMLOJA, 
                    string TEFNUMTERMINAL, 
                    string TEFPEDECPFPELOPINPAD, 
                    short BALPORTA, 
                    short BALBITS, 
                    int BALBAUD, 
                    short BALPARITY, 
                    short BALMODELO, 
                    short ACFILLPREFIX, 
                    short ACFILLMODE, 
                    short ACREFERENCIA, 
                    short SYSCOMISSAO, 
                    int SATSERVTIMEOUT, 
                    int SATLIFESIGNINTERVAL, 
                    int ACFILLDELAY, 
                    short SYSPERGUNTAWHATS, 
                    short SYSPARCELA, 
                    short SYSEMITECOMPROVANTE, 
                    string INFORMA_MAQUININHA, 
                    string LAYOUT_SAT, 
                    string VINCULA_MAQ_CTA) {
            if ((ID_MAC == null)) {
                throw new global::System.ArgumentNullException("ID_MAC");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ID_MAC));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((short)(NO_CAIXA));
            if ((EXIGE_SANGRIA == null)) {
                throw new global::System.ArgumentNullException("EXIGE_SANGRIA");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(EXIGE_SANGRIA));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((double)(VALOR_MAX_CAIXA));
            if ((BLOQUEIA_NO_LIMITE == null)) {
                throw new global::System.ArgumentNullException("BLOQUEIA_NO_LIMITE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(BLOQUEIA_NO_LIMITE));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((double)(VALOR_DE_FOLGA));
            if ((PERMITE_FOLGA_SANGRIA == null)) {
                throw new global::System.ArgumentNullException("PERMITE_FOLGA_SANGRIA");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(PERMITE_FOLGA_SANGRIA));
            }
            if ((INTERROMPE_NAO_ENCONTRADO == null)) {
                throw new global::System.ArgumentNullException("INTERROMPE_NAO_ENCONTRADO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(INTERROMPE_NAO_ENCONTRADO));
            }
            if ((MENSAGEM_CORTESIA == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(MENSAGEM_CORTESIA));
            }
            if ((ICMS_CONT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((float)(ICMS_CONT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((CSOSN_CONT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((float)(CSOSN_CONT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((int)(PEDE_CPF));
            this.Adapter.InsertCommand.Parameters[12].Value = ((int)(PERMITE_ESTOQUE_NEGATIVO));
            this.Adapter.InsertCommand.Parameters[13].Value = ((short)(MODELO_CUPOM));
            if ((MENSAGEM_RODAPE == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(MENSAGEM_RODAPE));
            }
            if ((TRI_PDV_DT_UPD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((System.DateTime)(TRI_PDV_DT_UPD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((MODELO_SAT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((int)(MODELO_SAT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((SATSERVIDOR == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(SATSERVIDOR));
            }
            if ((SAT_CODATIV == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(SAT_CODATIV));
            }
            if ((SIGN_AC == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(SIGN_AC));
            }
            if ((SAT_USADO == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(SAT_USADO));
            }
            if ((ECF_ATIVA == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(ECF_ATIVA));
            }
            if ((ECF_PORTA == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(ECF_PORTA));
            }
            if ((IMPRESSORA_USB == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(IMPRESSORA_USB));
            }
            if ((IMPRESSORA_USB_PED == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(IMPRESSORA_USB_PED));
            }
            this.Adapter.InsertCommand.Parameters[25].Value = ((int)(PERGUNTA_WHATS));
            if ((USATEF == null)) {
                throw new global::System.ArgumentNullException("USATEF");
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(USATEF));
            }
            if ((TEFIP == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(TEFIP));
            }
            if ((TEFNUMLOJA == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(TEFNUMLOJA));
            }
            if ((TEFNUMTERMINAL == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(TEFNUMTERMINAL));
            }
            if ((TEFPEDECPFPELOPINPAD == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(TEFPEDECPFPELOPINPAD));
            }
            this.Adapter.InsertCommand.Parameters[31].Value = ((short)(BALPORTA));
            this.Adapter.InsertCommand.Parameters[32].Value = ((short)(BALBITS));
            this.Adapter.InsertCommand.Parameters[33].Value = ((int)(BALBAUD));
            this.Adapter.InsertCommand.Parameters[34].Value = ((short)(BALPARITY));
            this.Adapter.InsertCommand.Parameters[35].Value = ((short)(BALMODELO));
            this.Adapter.InsertCommand.Parameters[36].Value = ((short)(ACFILLPREFIX));
            this.Adapter.InsertCommand.Parameters[37].Value = ((short)(ACFILLMODE));
            this.Adapter.InsertCommand.Parameters[38].Value = ((short)(ACREFERENCIA));
            this.Adapter.InsertCommand.Parameters[39].Value = ((short)(SYSCOMISSAO));
            this.Adapter.InsertCommand.Parameters[40].Value = ((int)(SATSERVTIMEOUT));
            this.Adapter.InsertCommand.Parameters[41].Value = ((int)(SATLIFESIGNINTERVAL));
            this.Adapter.InsertCommand.Parameters[42].Value = ((int)(ACFILLDELAY));
            this.Adapter.InsertCommand.Parameters[43].Value = ((short)(SYSPERGUNTAWHATS));
            this.Adapter.InsertCommand.Parameters[44].Value = ((short)(SYSPARCELA));
            this.Adapter.InsertCommand.Parameters[45].Value = ((short)(SYSEMITECOMPROVANTE));
            if ((INFORMA_MAQUININHA == null)) {
                throw new global::System.ArgumentNullException("INFORMA_MAQUININHA");
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = ((string)(INFORMA_MAQUININHA));
            }
            if ((LAYOUT_SAT == null)) {
                throw new global::System.ArgumentNullException("LAYOUT_SAT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = ((string)(LAYOUT_SAT));
            }
            if ((VINCULA_MAQ_CTA == null)) {
                throw new global::System.ArgumentNullException("VINCULA_MAQ_CTA");
            }
            else {
                this.Adapter.InsertCommand.Parameters[48].Value = ((string)(VINCULA_MAQ_CTA));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ID_MAC, 
                    short NO_CAIXA, 
                    string EXIGE_SANGRIA, 
                    double VALOR_MAX_CAIXA, 
                    string BLOQUEIA_NO_LIMITE, 
                    double VALOR_DE_FOLGA, 
                    string PERMITE_FOLGA_SANGRIA, 
                    string INTERROMPE_NAO_ENCONTRADO, 
                    string MENSAGEM_CORTESIA, 
                    global::System.Nullable<float> ICMS_CONT, 
                    global::System.Nullable<float> CSOSN_CONT, 
                    int PEDE_CPF, 
                    int PERMITE_ESTOQUE_NEGATIVO, 
                    short MODELO_CUPOM, 
                    string MENSAGEM_RODAPE, 
                    global::System.Nullable<global::System.DateTime> TRI_PDV_DT_UPD, 
                    global::System.Nullable<int> MODELO_SAT, 
                    string SATSERVIDOR, 
                    string SAT_CODATIV, 
                    string SIGN_AC, 
                    string SAT_USADO, 
                    string ECF_ATIVA, 
                    string ECF_PORTA, 
                    string IMPRESSORA_USB, 
                    string IMPRESSORA_USB_PED, 
                    int PERGUNTA_WHATS, 
                    string USATEF, 
                    string TEFIP, 
                    string TEFNUMLOJA, 
                    string TEFNUMTERMINAL, 
                    string TEFPEDECPFPELOPINPAD, 
                    short BALPORTA, 
                    short BALBITS, 
                    int BALBAUD, 
                    short BALPARITY, 
                    short BALMODELO, 
                    short ACFILLPREFIX, 
                    short ACFILLMODE, 
                    short ACREFERENCIA, 
                    short SYSCOMISSAO, 
                    int SATSERVTIMEOUT, 
                    int SATLIFESIGNINTERVAL, 
                    int ACFILLDELAY, 
                    short SYSPERGUNTAWHATS, 
                    short SYSPARCELA, 
                    short SYSEMITECOMPROVANTE, 
                    string INFORMA_MAQUININHA, 
                    string LAYOUT_SAT, 
                    string VINCULA_MAQ_CTA, 
                    string Original_ID_MAC, 
                    short Original_NO_CAIXA, 
                    string Original_EXIGE_SANGRIA, 
                    double Original_VALOR_MAX_CAIXA, 
                    string Original_BLOQUEIA_NO_LIMITE, 
                    double Original_VALOR_DE_FOLGA, 
                    string Original_PERMITE_FOLGA_SANGRIA, 
                    string Original_INTERROMPE_NAO_ENCONTRADO, 
                    string Original_MENSAGEM_CORTESIA, 
                    global::System.Nullable<float> Original_ICMS_CONT, 
                    global::System.Nullable<float> Original_CSOSN_CONT, 
                    int Original_PEDE_CPF, 
                    int Original_PERMITE_ESTOQUE_NEGATIVO, 
                    short Original_MODELO_CUPOM, 
                    string Original_MENSAGEM_RODAPE, 
                    global::System.Nullable<global::System.DateTime> Original_TRI_PDV_DT_UPD, 
                    global::System.Nullable<int> Original_MODELO_SAT, 
                    string Original_SATSERVIDOR, 
                    string Original_SAT_CODATIV, 
                    string Original_SAT_USADO, 
                    string Original_ECF_ATIVA, 
                    string Original_ECF_PORTA, 
                    string Original_IMPRESSORA_USB, 
                    string Original_IMPRESSORA_USB_PED, 
                    int Original_PERGUNTA_WHATS, 
                    string Original_USATEF, 
                    string Original_TEFIP, 
                    string Original_TEFNUMLOJA, 
                    string Original_TEFNUMTERMINAL, 
                    string Original_TEFPEDECPFPELOPINPAD, 
                    short Original_BALPORTA, 
                    short Original_BALBITS, 
                    int Original_BALBAUD, 
                    short Original_BALPARITY, 
                    short Original_BALMODELO, 
                    short Original_ACFILLPREFIX, 
                    short Original_ACFILLMODE, 
                    short Original_ACREFERENCIA, 
                    short Original_SYSCOMISSAO, 
                    int Original_SATSERVTIMEOUT, 
                    int Original_SATLIFESIGNINTERVAL, 
                    int Original_ACFILLDELAY, 
                    short Original_SYSPERGUNTAWHATS, 
                    short Original_SYSPARCELA, 
                    short Original_SYSEMITECOMPROVANTE, 
                    string Original_INFORMA_MAQUININHA, 
                    string Original_LAYOUT_SAT, 
                    string Original_VINCULA_MAQ_CTA) {
            if ((ID_MAC == null)) {
                throw new global::System.ArgumentNullException("ID_MAC");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ID_MAC));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((short)(NO_CAIXA));
            if ((EXIGE_SANGRIA == null)) {
                throw new global::System.ArgumentNullException("EXIGE_SANGRIA");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(EXIGE_SANGRIA));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(VALOR_MAX_CAIXA));
            if ((BLOQUEIA_NO_LIMITE == null)) {
                throw new global::System.ArgumentNullException("BLOQUEIA_NO_LIMITE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(BLOQUEIA_NO_LIMITE));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(VALOR_DE_FOLGA));
            if ((PERMITE_FOLGA_SANGRIA == null)) {
                throw new global::System.ArgumentNullException("PERMITE_FOLGA_SANGRIA");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(PERMITE_FOLGA_SANGRIA));
            }
            if ((INTERROMPE_NAO_ENCONTRADO == null)) {
                throw new global::System.ArgumentNullException("INTERROMPE_NAO_ENCONTRADO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(INTERROMPE_NAO_ENCONTRADO));
            }
            if ((MENSAGEM_CORTESIA == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(MENSAGEM_CORTESIA));
            }
            if ((ICMS_CONT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((float)(ICMS_CONT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((CSOSN_CONT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((float)(CSOSN_CONT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(PEDE_CPF));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(PERMITE_ESTOQUE_NEGATIVO));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((short)(MODELO_CUPOM));
            if ((MENSAGEM_RODAPE == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(MENSAGEM_RODAPE));
            }
            if ((TRI_PDV_DT_UPD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(TRI_PDV_DT_UPD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((MODELO_SAT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(MODELO_SAT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((SATSERVIDOR == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(SATSERVIDOR));
            }
            if ((SAT_CODATIV == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(SAT_CODATIV));
            }
            if ((SIGN_AC == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(SIGN_AC));
            }
            if ((SAT_USADO == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(SAT_USADO));
            }
            if ((ECF_ATIVA == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(ECF_ATIVA));
            }
            if ((ECF_PORTA == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(ECF_PORTA));
            }
            if ((IMPRESSORA_USB == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(IMPRESSORA_USB));
            }
            if ((IMPRESSORA_USB_PED == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(IMPRESSORA_USB_PED));
            }
            this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(PERGUNTA_WHATS));
            if ((USATEF == null)) {
                throw new global::System.ArgumentNullException("USATEF");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(USATEF));
            }
            if ((TEFIP == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(TEFIP));
            }
            if ((TEFNUMLOJA == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(TEFNUMLOJA));
            }
            if ((TEFNUMTERMINAL == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(TEFNUMTERMINAL));
            }
            if ((TEFPEDECPFPELOPINPAD == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(TEFPEDECPFPELOPINPAD));
            }
            this.Adapter.UpdateCommand.Parameters[31].Value = ((short)(BALPORTA));
            this.Adapter.UpdateCommand.Parameters[32].Value = ((short)(BALBITS));
            this.Adapter.UpdateCommand.Parameters[33].Value = ((int)(BALBAUD));
            this.Adapter.UpdateCommand.Parameters[34].Value = ((short)(BALPARITY));
            this.Adapter.UpdateCommand.Parameters[35].Value = ((short)(BALMODELO));
            this.Adapter.UpdateCommand.Parameters[36].Value = ((short)(ACFILLPREFIX));
            this.Adapter.UpdateCommand.Parameters[37].Value = ((short)(ACFILLMODE));
            this.Adapter.UpdateCommand.Parameters[38].Value = ((short)(ACREFERENCIA));
            this.Adapter.UpdateCommand.Parameters[39].Value = ((short)(SYSCOMISSAO));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((int)(SATSERVTIMEOUT));
            this.Adapter.UpdateCommand.Parameters[41].Value = ((int)(SATLIFESIGNINTERVAL));
            this.Adapter.UpdateCommand.Parameters[42].Value = ((int)(ACFILLDELAY));
            this.Adapter.UpdateCommand.Parameters[43].Value = ((short)(SYSPERGUNTAWHATS));
            this.Adapter.UpdateCommand.Parameters[44].Value = ((short)(SYSPARCELA));
            this.Adapter.UpdateCommand.Parameters[45].Value = ((short)(SYSEMITECOMPROVANTE));
            if ((INFORMA_MAQUININHA == null)) {
                throw new global::System.ArgumentNullException("INFORMA_MAQUININHA");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(INFORMA_MAQUININHA));
            }
            if ((LAYOUT_SAT == null)) {
                throw new global::System.ArgumentNullException("LAYOUT_SAT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(LAYOUT_SAT));
            }
            if ((VINCULA_MAQ_CTA == null)) {
                throw new global::System.ArgumentNullException("VINCULA_MAQ_CTA");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((string)(VINCULA_MAQ_CTA));
            }
            if ((Original_ID_MAC == null)) {
                throw new global::System.ArgumentNullException("Original_ID_MAC");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(Original_ID_MAC));
            }
            this.Adapter.UpdateCommand.Parameters[50].Value = ((short)(Original_NO_CAIXA));
            if ((Original_EXIGE_SANGRIA == null)) {
                throw new global::System.ArgumentNullException("Original_EXIGE_SANGRIA");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((string)(Original_EXIGE_SANGRIA));
            }
            this.Adapter.UpdateCommand.Parameters[52].Value = ((double)(Original_VALOR_MAX_CAIXA));
            if ((Original_BLOQUEIA_NO_LIMITE == null)) {
                throw new global::System.ArgumentNullException("Original_BLOQUEIA_NO_LIMITE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((string)(Original_BLOQUEIA_NO_LIMITE));
            }
            this.Adapter.UpdateCommand.Parameters[54].Value = ((double)(Original_VALOR_DE_FOLGA));
            if ((Original_PERMITE_FOLGA_SANGRIA == null)) {
                throw new global::System.ArgumentNullException("Original_PERMITE_FOLGA_SANGRIA");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((string)(Original_PERMITE_FOLGA_SANGRIA));
            }
            if ((Original_INTERROMPE_NAO_ENCONTRADO == null)) {
                throw new global::System.ArgumentNullException("Original_INTERROMPE_NAO_ENCONTRADO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((string)(Original_INTERROMPE_NAO_ENCONTRADO));
            }
            if ((Original_MENSAGEM_CORTESIA == null)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((string)(Original_MENSAGEM_CORTESIA));
            }
            if ((Original_ICMS_CONT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((float)(Original_ICMS_CONT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Original_CSOSN_CONT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[62].Value = ((float)(Original_CSOSN_CONT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[63].Value = ((int)(Original_PEDE_CPF));
            this.Adapter.UpdateCommand.Parameters[64].Value = ((int)(Original_PERMITE_ESTOQUE_NEGATIVO));
            this.Adapter.UpdateCommand.Parameters[65].Value = ((short)(Original_MODELO_CUPOM));
            if ((Original_MENSAGEM_RODAPE == null)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((string)(Original_MENSAGEM_RODAPE));
            }
            if ((Original_TRI_PDV_DT_UPD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((System.DateTime)(Original_TRI_PDV_DT_UPD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            if ((Original_MODELO_SAT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[71].Value = ((int)(Original_MODELO_SAT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            if ((Original_SATSERVIDOR == null)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((string)(Original_SATSERVIDOR));
            }
            if ((Original_SAT_CODATIV == null)) {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[75].Value = ((string)(Original_SAT_CODATIV));
            }
            if ((Original_SAT_USADO == null)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[77].Value = ((string)(Original_SAT_USADO));
            }
            if ((Original_ECF_ATIVA == null)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[79].Value = ((string)(Original_ECF_ATIVA));
            }
            if ((Original_ECF_PORTA == null)) {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[81].Value = ((string)(Original_ECF_PORTA));
            }
            if ((Original_IMPRESSORA_USB == null)) {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[83].Value = ((string)(Original_IMPRESSORA_USB));
            }
            if ((Original_IMPRESSORA_USB_PED == null)) {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[85].Value = ((string)(Original_IMPRESSORA_USB_PED));
            }
            this.Adapter.UpdateCommand.Parameters[86].Value = ((int)(Original_PERGUNTA_WHATS));
            if ((Original_USATEF == null)) {
                throw new global::System.ArgumentNullException("Original_USATEF");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((string)(Original_USATEF));
            }
            if ((Original_TEFIP == null)) {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[89].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[89].Value = ((string)(Original_TEFIP));
            }
            if ((Original_TEFNUMLOJA == null)) {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[91].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[91].Value = ((string)(Original_TEFNUMLOJA));
            }
            if ((Original_TEFNUMTERMINAL == null)) {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[93].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[93].Value = ((string)(Original_TEFNUMTERMINAL));
            }
            if ((Original_TEFPEDECPFPELOPINPAD == null)) {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[95].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[95].Value = ((string)(Original_TEFPEDECPFPELOPINPAD));
            }
            this.Adapter.UpdateCommand.Parameters[96].Value = ((short)(Original_BALPORTA));
            this.Adapter.UpdateCommand.Parameters[97].Value = ((short)(Original_BALBITS));
            this.Adapter.UpdateCommand.Parameters[98].Value = ((int)(Original_BALBAUD));
            this.Adapter.UpdateCommand.Parameters[99].Value = ((short)(Original_BALPARITY));
            this.Adapter.UpdateCommand.Parameters[100].Value = ((short)(Original_BALMODELO));
            this.Adapter.UpdateCommand.Parameters[101].Value = ((short)(Original_ACFILLPREFIX));
            this.Adapter.UpdateCommand.Parameters[102].Value = ((short)(Original_ACFILLMODE));
            this.Adapter.UpdateCommand.Parameters[103].Value = ((short)(Original_ACREFERENCIA));
            this.Adapter.UpdateCommand.Parameters[104].Value = ((short)(Original_SYSCOMISSAO));
            this.Adapter.UpdateCommand.Parameters[105].Value = ((int)(Original_SATSERVTIMEOUT));
            this.Adapter.UpdateCommand.Parameters[106].Value = ((int)(Original_SATLIFESIGNINTERVAL));
            this.Adapter.UpdateCommand.Parameters[107].Value = ((int)(Original_ACFILLDELAY));
            this.Adapter.UpdateCommand.Parameters[108].Value = ((short)(Original_SYSPERGUNTAWHATS));
            this.Adapter.UpdateCommand.Parameters[109].Value = ((short)(Original_SYSPARCELA));
            this.Adapter.UpdateCommand.Parameters[110].Value = ((short)(Original_SYSEMITECOMPROVANTE));
            if ((Original_INFORMA_MAQUININHA == null)) {
                throw new global::System.ArgumentNullException("Original_INFORMA_MAQUININHA");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[111].Value = ((string)(Original_INFORMA_MAQUININHA));
            }
            if ((Original_LAYOUT_SAT == null)) {
                throw new global::System.ArgumentNullException("Original_LAYOUT_SAT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[112].Value = ((string)(Original_LAYOUT_SAT));
            }
            if ((Original_VINCULA_MAQ_CTA == null)) {
                throw new global::System.ArgumentNullException("Original_VINCULA_MAQ_CTA");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[113].Value = ((string)(Original_VINCULA_MAQ_CTA));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    short NO_CAIXA, 
                    string EXIGE_SANGRIA, 
                    double VALOR_MAX_CAIXA, 
                    string BLOQUEIA_NO_LIMITE, 
                    double VALOR_DE_FOLGA, 
                    string PERMITE_FOLGA_SANGRIA, 
                    string INTERROMPE_NAO_ENCONTRADO, 
                    string MENSAGEM_CORTESIA, 
                    global::System.Nullable<float> ICMS_CONT, 
                    global::System.Nullable<float> CSOSN_CONT, 
                    int PEDE_CPF, 
                    int PERMITE_ESTOQUE_NEGATIVO, 
                    short MODELO_CUPOM, 
                    string MENSAGEM_RODAPE, 
                    global::System.Nullable<global::System.DateTime> TRI_PDV_DT_UPD, 
                    global::System.Nullable<int> MODELO_SAT, 
                    string SATSERVIDOR, 
                    string SAT_CODATIV, 
                    string SIGN_AC, 
                    string SAT_USADO, 
                    string ECF_ATIVA, 
                    string ECF_PORTA, 
                    string IMPRESSORA_USB, 
                    string IMPRESSORA_USB_PED, 
                    int PERGUNTA_WHATS, 
                    string USATEF, 
                    string TEFIP, 
                    string TEFNUMLOJA, 
                    string TEFNUMTERMINAL, 
                    string TEFPEDECPFPELOPINPAD, 
                    short BALPORTA, 
                    short BALBITS, 
                    int BALBAUD, 
                    short BALPARITY, 
                    short BALMODELO, 
                    short ACFILLPREFIX, 
                    short ACFILLMODE, 
                    short ACREFERENCIA, 
                    short SYSCOMISSAO, 
                    int SATSERVTIMEOUT, 
                    int SATLIFESIGNINTERVAL, 
                    int ACFILLDELAY, 
                    short SYSPERGUNTAWHATS, 
                    short SYSPARCELA, 
                    short SYSEMITECOMPROVANTE, 
                    string INFORMA_MAQUININHA, 
                    string LAYOUT_SAT, 
                    string VINCULA_MAQ_CTA, 
                    string Original_ID_MAC, 
                    short Original_NO_CAIXA, 
                    string Original_EXIGE_SANGRIA, 
                    double Original_VALOR_MAX_CAIXA, 
                    string Original_BLOQUEIA_NO_LIMITE, 
                    double Original_VALOR_DE_FOLGA, 
                    string Original_PERMITE_FOLGA_SANGRIA, 
                    string Original_INTERROMPE_NAO_ENCONTRADO, 
                    string Original_MENSAGEM_CORTESIA, 
                    global::System.Nullable<float> Original_ICMS_CONT, 
                    global::System.Nullable<float> Original_CSOSN_CONT, 
                    int Original_PEDE_CPF, 
                    int Original_PERMITE_ESTOQUE_NEGATIVO, 
                    short Original_MODELO_CUPOM, 
                    string Original_MENSAGEM_RODAPE, 
                    global::System.Nullable<global::System.DateTime> Original_TRI_PDV_DT_UPD, 
                    global::System.Nullable<int> Original_MODELO_SAT, 
                    string Original_SATSERVIDOR, 
                    string Original_SAT_CODATIV, 
                    string Original_SAT_USADO, 
                    string Original_ECF_ATIVA, 
                    string Original_ECF_PORTA, 
                    string Original_IMPRESSORA_USB, 
                    string Original_IMPRESSORA_USB_PED, 
                    int Original_PERGUNTA_WHATS, 
                    string Original_USATEF, 
                    string Original_TEFIP, 
                    string Original_TEFNUMLOJA, 
                    string Original_TEFNUMTERMINAL, 
                    string Original_TEFPEDECPFPELOPINPAD, 
                    short Original_BALPORTA, 
                    short Original_BALBITS, 
                    int Original_BALBAUD, 
                    short Original_BALPARITY, 
                    short Original_BALMODELO, 
                    short Original_ACFILLPREFIX, 
                    short Original_ACFILLMODE, 
                    short Original_ACREFERENCIA, 
                    short Original_SYSCOMISSAO, 
                    int Original_SATSERVTIMEOUT, 
                    int Original_SATLIFESIGNINTERVAL, 
                    int Original_ACFILLDELAY, 
                    short Original_SYSPERGUNTAWHATS, 
                    short Original_SYSPARCELA, 
                    short Original_SYSEMITECOMPROVANTE, 
                    string Original_INFORMA_MAQUININHA, 
                    string Original_LAYOUT_SAT, 
                    string Original_VINCULA_MAQ_CTA) {
            return this.Update(Original_ID_MAC, NO_CAIXA, EXIGE_SANGRIA, VALOR_MAX_CAIXA, BLOQUEIA_NO_LIMITE, VALOR_DE_FOLGA, PERMITE_FOLGA_SANGRIA, INTERROMPE_NAO_ENCONTRADO, MENSAGEM_CORTESIA, ICMS_CONT, CSOSN_CONT, PEDE_CPF, PERMITE_ESTOQUE_NEGATIVO, MODELO_CUPOM, MENSAGEM_RODAPE, TRI_PDV_DT_UPD, MODELO_SAT, SATSERVIDOR, SAT_CODATIV, SIGN_AC, SAT_USADO, ECF_ATIVA, ECF_PORTA, IMPRESSORA_USB, IMPRESSORA_USB_PED, PERGUNTA_WHATS, USATEF, TEFIP, TEFNUMLOJA, TEFNUMTERMINAL, TEFPEDECPFPELOPINPAD, BALPORTA, BALBITS, BALBAUD, BALPARITY, BALMODELO, ACFILLPREFIX, ACFILLMODE, ACREFERENCIA, SYSCOMISSAO, SATSERVTIMEOUT, SATLIFESIGNINTERVAL, ACFILLDELAY, SYSPERGUNTAWHATS, SYSPARCELA, SYSEMITECOMPROVANTE, INFORMA_MAQUININHA, LAYOUT_SAT, VINCULA_MAQ_CTA, Original_ID_MAC, Original_NO_CAIXA, Original_EXIGE_SANGRIA, Original_VALOR_MAX_CAIXA, Original_BLOQUEIA_NO_LIMITE, Original_VALOR_DE_FOLGA, Original_PERMITE_FOLGA_SANGRIA, Original_INTERROMPE_NAO_ENCONTRADO, Original_MENSAGEM_CORTESIA, Original_ICMS_CONT, Original_CSOSN_CONT, Original_PEDE_CPF, Original_PERMITE_ESTOQUE_NEGATIVO, Original_MODELO_CUPOM, Original_MENSAGEM_RODAPE, Original_TRI_PDV_DT_UPD, Original_MODELO_SAT, Original_SATSERVIDOR, Original_SAT_CODATIV, Original_SAT_USADO, Original_ECF_ATIVA, Original_ECF_PORTA, Original_IMPRESSORA_USB, Original_IMPRESSORA_USB_PED, Original_PERGUNTA_WHATS, Original_USATEF, Original_TEFIP, Original_TEFNUMLOJA, Original_TEFNUMTERMINAL, Original_TEFPEDECPFPELOPINPAD, Original_BALPORTA, Original_BALBITS, Original_BALBAUD, Original_BALPARITY, Original_BALMODELO, Original_ACFILLPREFIX, Original_ACFILLMODE, Original_ACREFERENCIA, Original_SYSCOMISSAO, Original_SATSERVTIMEOUT, Original_SATLIFESIGNINTERVAL, Original_ACFILLDELAY, Original_SYSPERGUNTAWHATS, Original_SYSPARCELA, Original_SYSEMITECOMPROVANTE, Original_INFORMA_MAQUININHA, Original_LAYOUT_SAT, Original_VINCULA_MAQ_CTA);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object A_CRIATABELAS() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[1];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object A_CRIATABELAS_AUX_SYNC() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[2];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object B_ATUALIZA_TB_AUX_SYNC() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[3];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object B_ATUALIZATABELAS() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[4];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object B_ATUALIZATABELAS2() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[5];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object B_DSBL_SERV_TRGGR_ON_PDV() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[6];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object B_ENABLE_SERV_TRIGGERS() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[7];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object B_GERATRIGGERS_AUX_SYNC() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[8];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object B_GERATRIGGERS_AUX_SYNC2() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[9];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object B_GERATRIGGERS_AUX_SYNC3() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[10];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object B_GERATRIGGERS_AUX_SYNC4() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[11];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object C_DADOSINICIAIS() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[12];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object ChecaPorNoCaixa(global::System.Nullable<short> PNO_CAIXA, string PID_MAC) {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[14];
            if ((PNO_CAIXA.HasValue == true)) {
                command.Parameters[0].Value = ((short)(PNO_CAIXA.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((PID_MAC == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(PID_MAC));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object D_PROCEDURES() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[15];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object D_PROCEDURES2() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[16];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object D_PROCEDURES3() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[17];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object D_PROCEDURES4() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[18];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object D_PROCEDURES5() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[19];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object D_PROCEDURES6() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[20];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object D_PROCEDURES7() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[21];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object D_PROCEDURES8() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[22];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object E_ULTIMOPASSO() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[23];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object FillByCaixa(global::System.Nullable<short> PNO_CAIXA) {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[24];
            if ((PNO_CAIXA.HasValue == true)) {
                command.Parameters[0].Value = ((short)(PNO_CAIXA.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_ATUALIZA_TB_AUX_SYNC() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[28];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_ATUALIZATABELAS() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[29];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_ATUALIZATABELAS2() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[30];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_CONFIG_UPSERT(
                    string PID_MAC, 
                    global::System.Nullable<short> PNO_CAIXA, 
                    string PEXIGE_SANGRIA, 
                    global::System.Nullable<double> PVALOR_MAX_CAIXA, 
                    string PBLOQUEIA_NO_LIMITE, 
                    global::System.Nullable<double> PVALOR_DE_FOLGA, 
                    string PPERMITE_FOLGA_SANGRIA, 
                    string PINTERROMPE_NAO_ENCONTRADO, 
                    string PMENSAGEM_CORTESIA, 
                    global::System.Nullable<float> PICMS_CONT, 
                    global::System.Nullable<float> PCSOSN_CONT, 
                    global::System.Nullable<int> PPEDE_CPF, 
                    global::System.Nullable<int> PPERMITE_ESTOQUE_NEGATIVO, 
                    global::System.Nullable<short> PMODELO_CUPOM, 
                    string PMENSAGEM_RODAPE, 
                    global::System.Nullable<global::System.DateTime> PTRI_PDV_DT_UPD, 
                    global::System.Nullable<int> PMODELO_SAT, 
                    string PSATSERVIDOR, 
                    string PSAT_CODATIV, 
                    string PSIGN_AC, 
                    string PSAT_USADO, 
                    string PECF_ATIVA, 
                    string PECF_PORTA, 
                    string PIMPRESSORA_USB, 
                    string PIMPRESSORA_USB_PED, 
                    global::System.Nullable<int> PPERGUNTA_WHATS, 
                    string PUSATEF, 
                    string PTEFIP, 
                    string PTEFNUMLOJA, 
                    string PTEFNUMTERMINAL, 
                    string PTEFPEDECPFPELOPINPAD, 
                    global::System.Nullable<short> PBALPORTA, 
                    global::System.Nullable<short> PBALBITS, 
                    global::System.Nullable<int> PBALBAUD, 
                    global::System.Nullable<short> PBALPARITY, 
                    global::System.Nullable<short> PBALMODELO, 
                    global::System.Nullable<short> PACFILLPREFIX, 
                    global::System.Nullable<short> PACFILLMODE, 
                    global::System.Nullable<short> PACREFERENCIA, 
                    global::System.Nullable<short> PSYSCOMISSAO, 
                    global::System.Nullable<int> PSATSERVTIMEOUT, 
                    global::System.Nullable<int> PSATLIFESIGNINTERVAL, 
                    global::System.Nullable<int> PACFILLDELAY, 
                    global::System.Nullable<short> PSYSPERGUNTAWHATS, 
                    global::System.Nullable<short> PSYSPARCELA, 
                    global::System.Nullable<short> PSYSEMITECOMPROVANTE, 
                    string PINFORMA_MAQUININHA, 
                    string PLAYOUT_SAT, 
                    string PVINCULA_MAQ_CTA) {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[31];
            if ((PID_MAC == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(PID_MAC));
            }
            if ((PNO_CAIXA.HasValue == true)) {
                command.Parameters[1].Value = ((short)(PNO_CAIXA.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((PEXIGE_SANGRIA == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(PEXIGE_SANGRIA));
            }
            if ((PVALOR_MAX_CAIXA.HasValue == true)) {
                command.Parameters[3].Value = ((double)(PVALOR_MAX_CAIXA.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((PBLOQUEIA_NO_LIMITE == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(PBLOQUEIA_NO_LIMITE));
            }
            if ((PVALOR_DE_FOLGA.HasValue == true)) {
                command.Parameters[5].Value = ((double)(PVALOR_DE_FOLGA.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((PPERMITE_FOLGA_SANGRIA == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(PPERMITE_FOLGA_SANGRIA));
            }
            if ((PINTERROMPE_NAO_ENCONTRADO == null)) {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(PINTERROMPE_NAO_ENCONTRADO));
            }
            if ((PMENSAGEM_CORTESIA == null)) {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(PMENSAGEM_CORTESIA));
            }
            if ((PICMS_CONT.HasValue == true)) {
                command.Parameters[9].Value = ((float)(PICMS_CONT.Value));
            }
            else {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((PCSOSN_CONT.HasValue == true)) {
                command.Parameters[10].Value = ((float)(PCSOSN_CONT.Value));
            }
            else {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((PPEDE_CPF.HasValue == true)) {
                command.Parameters[11].Value = ((int)(PPEDE_CPF.Value));
            }
            else {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((PPERMITE_ESTOQUE_NEGATIVO.HasValue == true)) {
                command.Parameters[12].Value = ((int)(PPERMITE_ESTOQUE_NEGATIVO.Value));
            }
            else {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((PMODELO_CUPOM.HasValue == true)) {
                command.Parameters[13].Value = ((short)(PMODELO_CUPOM.Value));
            }
            else {
                command.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((PMENSAGEM_RODAPE == null)) {
                command.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[14].Value = ((string)(PMENSAGEM_RODAPE));
            }
            if ((PTRI_PDV_DT_UPD.HasValue == true)) {
                command.Parameters[15].Value = ((System.DateTime)(PTRI_PDV_DT_UPD.Value));
            }
            else {
                command.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((PMODELO_SAT.HasValue == true)) {
                command.Parameters[16].Value = ((int)(PMODELO_SAT.Value));
            }
            else {
                command.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((PSATSERVIDOR == null)) {
                command.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[17].Value = ((string)(PSATSERVIDOR));
            }
            if ((PSAT_CODATIV == null)) {
                command.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[18].Value = ((string)(PSAT_CODATIV));
            }
            if ((PSIGN_AC == null)) {
                command.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[19].Value = ((string)(PSIGN_AC));
            }
            if ((PSAT_USADO == null)) {
                command.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[20].Value = ((string)(PSAT_USADO));
            }
            if ((PECF_ATIVA == null)) {
                command.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[21].Value = ((string)(PECF_ATIVA));
            }
            if ((PECF_PORTA == null)) {
                command.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[22].Value = ((string)(PECF_PORTA));
            }
            if ((PIMPRESSORA_USB == null)) {
                command.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[23].Value = ((string)(PIMPRESSORA_USB));
            }
            if ((PIMPRESSORA_USB_PED == null)) {
                command.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[24].Value = ((string)(PIMPRESSORA_USB_PED));
            }
            if ((PPERGUNTA_WHATS.HasValue == true)) {
                command.Parameters[25].Value = ((int)(PPERGUNTA_WHATS.Value));
            }
            else {
                command.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((PUSATEF == null)) {
                command.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[26].Value = ((string)(PUSATEF));
            }
            if ((PTEFIP == null)) {
                command.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[27].Value = ((string)(PTEFIP));
            }
            if ((PTEFNUMLOJA == null)) {
                command.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[28].Value = ((string)(PTEFNUMLOJA));
            }
            if ((PTEFNUMTERMINAL == null)) {
                command.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[29].Value = ((string)(PTEFNUMTERMINAL));
            }
            if ((PTEFPEDECPFPELOPINPAD == null)) {
                command.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[30].Value = ((string)(PTEFPEDECPFPELOPINPAD));
            }
            if ((PBALPORTA.HasValue == true)) {
                command.Parameters[31].Value = ((short)(PBALPORTA.Value));
            }
            else {
                command.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((PBALBITS.HasValue == true)) {
                command.Parameters[32].Value = ((short)(PBALBITS.Value));
            }
            else {
                command.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((PBALBAUD.HasValue == true)) {
                command.Parameters[33].Value = ((int)(PBALBAUD.Value));
            }
            else {
                command.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((PBALPARITY.HasValue == true)) {
                command.Parameters[34].Value = ((short)(PBALPARITY.Value));
            }
            else {
                command.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((PBALMODELO.HasValue == true)) {
                command.Parameters[35].Value = ((short)(PBALMODELO.Value));
            }
            else {
                command.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((PACFILLPREFIX.HasValue == true)) {
                command.Parameters[36].Value = ((short)(PACFILLPREFIX.Value));
            }
            else {
                command.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((PACFILLMODE.HasValue == true)) {
                command.Parameters[37].Value = ((short)(PACFILLMODE.Value));
            }
            else {
                command.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((PACREFERENCIA.HasValue == true)) {
                command.Parameters[38].Value = ((short)(PACREFERENCIA.Value));
            }
            else {
                command.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((PSYSCOMISSAO.HasValue == true)) {
                command.Parameters[39].Value = ((short)(PSYSCOMISSAO.Value));
            }
            else {
                command.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((PSATSERVTIMEOUT.HasValue == true)) {
                command.Parameters[40].Value = ((int)(PSATSERVTIMEOUT.Value));
            }
            else {
                command.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((PSATLIFESIGNINTERVAL.HasValue == true)) {
                command.Parameters[41].Value = ((int)(PSATLIFESIGNINTERVAL.Value));
            }
            else {
                command.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((PACFILLDELAY.HasValue == true)) {
                command.Parameters[42].Value = ((int)(PACFILLDELAY.Value));
            }
            else {
                command.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((PSYSPERGUNTAWHATS.HasValue == true)) {
                command.Parameters[43].Value = ((short)(PSYSPERGUNTAWHATS.Value));
            }
            else {
                command.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((PSYSPARCELA.HasValue == true)) {
                command.Parameters[44].Value = ((short)(PSYSPARCELA.Value));
            }
            else {
                command.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((PSYSEMITECOMPROVANTE.HasValue == true)) {
                command.Parameters[45].Value = ((short)(PSYSEMITECOMPROVANTE.Value));
            }
            else {
                command.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((PINFORMA_MAQUININHA == null)) {
                command.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[46].Value = ((string)(PINFORMA_MAQUININHA));
            }
            if ((PLAYOUT_SAT == null)) {
                command.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[47].Value = ((string)(PLAYOUT_SAT));
            }
            if ((PVINCULA_MAQ_CTA == null)) {
                command.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[48].Value = ((string)(PVINCULA_MAQ_CTA));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_CRIATABELAS() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[32];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_CRIATABELAS_AUX_SYNC() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[33];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_CRIATABELAS_SERV() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[34];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_DADOSINICIAIS() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[35];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_DSBL_SERV_TRGGR_ON_PDV() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[36];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_ENABLE_SERV_TRIGGERS() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[37];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_GERATRIGGERS_AUX_SYNC() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[38];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_GERATRIGGERS_AUX_SYNC2() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[39];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_GERATRIGGERS_AUX_SYNC3() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[40];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_GERATRIGGERS_AUX_SYNC4() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[41];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_PROCEDURES() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[42];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_PROCEDURES2() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[43];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_PROCEDURES3() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[44];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_PROCEDURES4() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[45];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_PROCEDURES5() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[46];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_PROCEDURES6() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[47];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_PROCEDURES7() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[48];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_PROCEDURES8() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[49];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_TERMARIO_CHECKSEQ() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = this.CommandCollection[50];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private TRI_PDV_CONFIGTableAdapter _tRI_PDV_CONFIGTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public TRI_PDV_CONFIGTableAdapter TRI_PDV_CONFIGTableAdapter {
            get {
                return this._tRI_PDV_CONFIGTableAdapter;
            }
            set {
                this._tRI_PDV_CONFIGTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._tRI_PDV_CONFIGTableAdapter != null) 
                            && (this._tRI_PDV_CONFIGTableAdapter.Connection != null))) {
                    return this._tRI_PDV_CONFIGTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._tRI_PDV_CONFIGTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateUpdatedRows(FDBDataSetConfig dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._tRI_PDV_CONFIGTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TRI_PDV_CONFIG.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tRI_PDV_CONFIGTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateInsertedRows(FDBDataSetConfig dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._tRI_PDV_CONFIGTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TRI_PDV_CONFIG.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tRI_PDV_CONFIGTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateDeletedRows(FDBDataSetConfig dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._tRI_PDV_CONFIGTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TRI_PDV_CONFIG.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tRI_PDV_CONFIGTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public virtual int UpdateAll(FDBDataSetConfig dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._tRI_PDV_CONFIGTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tRI_PDV_CONFIGTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Todos os TableAdapters gerenciados por um TableAdapterManager devem usar a mesma " +
                        "cadeia de conexão.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager não contém informações de conexão. Defina cada propriedade Ta" +
                        "bleAdapter de TableAdapterManager como uma instância válida de TableAdapter.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("Não é possível iniciar a transação. Os dados de conexão atuais não oferecem supor" +
                        "te às transações ou o estado atual não permite que a transação inicie.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._tRI_PDV_CONFIGTableAdapter != null)) {
                    revertConnections.Add(this._tRI_PDV_CONFIGTableAdapter, this._tRI_PDV_CONFIGTableAdapter.Connection);
                    this._tRI_PDV_CONFIGTableAdapter.Connection = ((global::FirebirdSql.Data.FirebirdClient.FbConnection)(workConnection));
                    this._tRI_PDV_CONFIGTableAdapter.Transaction = ((global::FirebirdSql.Data.FirebirdClient.FbTransaction)(workTransaction));
                    if (this._tRI_PDV_CONFIGTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tRI_PDV_CONFIGTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tRI_PDV_CONFIGTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._tRI_PDV_CONFIGTableAdapter != null)) {
                    this._tRI_PDV_CONFIGTableAdapter.Connection = ((global::FirebirdSql.Data.FirebirdClient.FbConnection)(revertConnections[this._tRI_PDV_CONFIGTableAdapter]));
                    this._tRI_PDV_CONFIGTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591