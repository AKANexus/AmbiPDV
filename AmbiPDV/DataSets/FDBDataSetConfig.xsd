<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="FDBDataSetConfig" targetNamespace="http://tempuri.org/FDBDataSetConfig.xsd" xmlns:mstns="http://tempuri.org/FDBDataSetConfig.xsd" xmlns="http://tempuri.org/FDBDataSetConfig.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:msprop="urn:schemas-microsoft-com:xml-msprop" attributeFormDefault="qualified" elementFormDefault="qualified">
  <xs:annotation>
    <xs:appinfo source="urn:schemas-microsoft-com:xml-msdatasource">
      <DataSource DefaultConnectionIndex="0" FunctionsComponentName="QueriesTableAdapter" Modifier="AutoLayout, AnsiClass, Class, Public" SchemaSerializationMode="IncludeSchema" xmlns="urn:schemas-microsoft-com:xml-msdatasource">
        <Connections>
          <Connection AppSettingsObjectName="Settings" AppSettingsPropertyName="FDBConnString" ConnectionStringObject="" IsAppSettingsProperty="true" Modifier="Assembly" Name="FDBConnString (Settings)" ParameterPrefix="@" PropertyReference="ApplicationSettings.PDV_WPF.Properties.Settings.GlobalReference.Default.FDBConnString" Provider="FirebirdSql.Data.FirebirdClient" />
        </Connections>
        <Tables>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="TRI_PDV_CONFIGTableAdapter" GeneratorDataComponentClassName="TRI_PDV_CONFIGTableAdapter" Name="TRI_PDV_CONFIG" UserDataComponentName="TRI_PDV_CONFIGTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="TRI_PDV_CONFIG" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM "TRI_PDV_CONFIG" WHERE (("ID_MAC" = @Original_ID_MAC) AND ("NO_CAIXA" = @Original_NO_CAIXA) AND ("EXIGE_SANGRIA" = @Original_EXIGE_SANGRIA) AND ("VALOR_MAX_CAIXA" = @Original_VALOR_MAX_CAIXA) AND ("BLOQUEIA_NO_LIMITE" = @Original_BLOQUEIA_NO_LIMITE) AND ("VALOR_DE_FOLGA" = @Original_VALOR_DE_FOLGA) AND ("PERMITE_FOLGA_SANGRIA" = @Original_PERMITE_FOLGA_SANGRIA) AND ("INTERROMPE_NAO_ENCONTRADO" = @Original_INTERROMPE_NAO_ENCONTRADO) AND ((@IsNull_MENSAGEM_CORTESIA = 1 AND "MENSAGEM_CORTESIA" IS NULL) OR ("MENSAGEM_CORTESIA" = @Original_MENSAGEM_CORTESIA)) AND ((@IsNull_ICMS_CONT = 1 AND "ICMS_CONT" IS NULL) OR ("ICMS_CONT" = @Original_ICMS_CONT)) AND ((@IsNull_CSOSN_CONT = 1 AND "CSOSN_CONT" IS NULL) OR ("CSOSN_CONT" = @Original_CSOSN_CONT)) AND ("PEDE_CPF" = @Original_PEDE_CPF) AND ("PERMITE_ESTOQUE_NEGATIVO" = @Original_PERMITE_ESTOQUE_NEGATIVO) AND ("MODELO_CUPOM" = @Original_MODELO_CUPOM) AND ((@IsNull_MENSAGEM_RODAPE = 1 AND "MENSAGEM_RODAPE" IS NULL) OR ("MENSAGEM_RODAPE" = @Original_MENSAGEM_RODAPE)) AND ((@IsNull_TRI_PDV_DT_UPD = 1 AND "TRI_PDV_DT_UPD" IS NULL) OR ("TRI_PDV_DT_UPD" = @Original_TRI_PDV_DT_UPD)) AND ((@IsNull_MODELO_SAT = 1 AND "MODELO_SAT" IS NULL) OR ("MODELO_SAT" = @Original_MODELO_SAT)) AND ((@IsNull_SATSERVIDOR = 1 AND "SATSERVIDOR" IS NULL) OR ("SATSERVIDOR" = @Original_SATSERVIDOR)) AND ((@IsNull_SAT_CODATIV = 1 AND "SAT_CODATIV" IS NULL) OR ("SAT_CODATIV" = @Original_SAT_CODATIV)) AND ((@IsNull_SAT_USADO = 1 AND "SAT_USADO" IS NULL) OR ("SAT_USADO" = @Original_SAT_USADO)) AND ((@IsNull_ECF_ATIVA = 1 AND "ECF_ATIVA" IS NULL) OR ("ECF_ATIVA" = @Original_ECF_ATIVA)) AND ((@IsNull_ECF_PORTA = 1 AND "ECF_PORTA" IS NULL) OR ("ECF_PORTA" = @Original_ECF_PORTA)) AND ((@IsNull_IMPRESSORA_USB = 1 AND "IMPRESSORA_USB" IS NULL) OR ("IMPRESSORA_USB" = @Original_IMPRESSORA_USB)) AND ((@IsNull_IMPRESSORA_USB_PED = 1 AND "IMPRESSORA_USB_PED" IS NULL) OR ("IMPRESSORA_USB_PED" = @Original_IMPRESSORA_USB_PED)) AND ("PERGUNTA_WHATS" = @Original_PERGUNTA_WHATS) AND ("USATEF" = @Original_USATEF) AND ((@IsNull_TEFIP = 1 AND "TEFIP" IS NULL) OR ("TEFIP" = @Original_TEFIP)) AND ((@IsNull_TEFNUMLOJA = 1 AND "TEFNUMLOJA" IS NULL) OR ("TEFNUMLOJA" = @Original_TEFNUMLOJA)) AND ((@IsNull_TEFNUMTERMINAL = 1 AND "TEFNUMTERMINAL" IS NULL) OR ("TEFNUMTERMINAL" = @Original_TEFNUMTERMINAL)) AND ((@IsNull_TEFPEDECPFPELOPINPAD = 1 AND "TEFPEDECPFPELOPINPAD" IS NULL) OR ("TEFPEDECPFPELOPINPAD" = @Original_TEFPEDECPFPELOPINPAD)) AND ("BALPORTA" = @Original_BALPORTA) AND ("BALBITS" = @Original_BALBITS) AND ("BALBAUD" = @Original_BALBAUD) AND ("BALPARITY" = @Original_BALPARITY) AND ("BALMODELO" = @Original_BALMODELO) AND ("ACFILLPREFIX" = @Original_ACFILLPREFIX) AND ("ACFILLMODE" = @Original_ACFILLMODE) AND ("ACREFERENCIA" = @Original_ACREFERENCIA) AND ("SYSCOMISSAO" = @Original_SYSCOMISSAO) AND ("SATSERVTIMEOUT" = @Original_SATSERVTIMEOUT) AND ("SATLIFESIGNINTERVAL" = @Original_SATLIFESIGNINTERVAL) AND ("ACFILLDELAY" = @Original_ACFILLDELAY) AND ("SYSPERGUNTAWHATS" = @Original_SYSPERGUNTAWHATS) AND ("SYSPARCELA" = @Original_SYSPARCELA) AND ("SYSEMITECOMPROVANTE" = @Original_SYSEMITECOMPROVANTE) AND ("INFORMA_MAQUININHA" = @Original_INFORMA_MAQUININHA) AND ("LAYOUT_SAT" = @Original_LAYOUT_SAT))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ID_MAC" Precision="0" Scale="0" Size="12" SourceColumn="ID_MAC" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_NO_CAIXA" Precision="0" Scale="0" Size="2" SourceColumn="NO_CAIXA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_EXIGE_SANGRIA" Precision="0" Scale="0" Size="1" SourceColumn="EXIGE_SANGRIA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_VALOR_MAX_CAIXA" Precision="0" Scale="0" Size="8" SourceColumn="VALOR_MAX_CAIXA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_BLOQUEIA_NO_LIMITE" Precision="0" Scale="0" Size="1" SourceColumn="BLOQUEIA_NO_LIMITE" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_VALOR_DE_FOLGA" Precision="0" Scale="0" Size="8" SourceColumn="VALOR_DE_FOLGA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_PERMITE_FOLGA_SANGRIA" Precision="0" Scale="0" Size="1" SourceColumn="PERMITE_FOLGA_SANGRIA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_INTERROMPE_NAO_ENCONTRADO" Precision="0" Scale="0" Size="1" SourceColumn="INTERROMPE_NAO_ENCONTRADO" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_MENSAGEM_CORTESIA" Precision="0" Scale="0" Size="100" SourceColumn="MENSAGEM_CORTESIA" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MENSAGEM_CORTESIA" Precision="0" Scale="0" Size="100" SourceColumn="MENSAGEM_CORTESIA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_ICMS_CONT" Precision="0" Scale="0" Size="4" SourceColumn="ICMS_CONT" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Single" Direction="Input" ParameterName="@Original_ICMS_CONT" Precision="0" Scale="0" Size="4" SourceColumn="ICMS_CONT" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_CSOSN_CONT" Precision="0" Scale="0" Size="4" SourceColumn="CSOSN_CONT" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Single" Direction="Input" ParameterName="@Original_CSOSN_CONT" Precision="0" Scale="0" Size="4" SourceColumn="CSOSN_CONT" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_PEDE_CPF" Precision="0" Scale="0" Size="4" SourceColumn="PEDE_CPF" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_PERMITE_ESTOQUE_NEGATIVO" Precision="0" Scale="0" Size="4" SourceColumn="PERMITE_ESTOQUE_NEGATIVO" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_MODELO_CUPOM" Precision="0" Scale="0" Size="2" SourceColumn="MODELO_CUPOM" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_MENSAGEM_RODAPE" Precision="0" Scale="0" Size="100" SourceColumn="MENSAGEM_RODAPE" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MENSAGEM_RODAPE" Precision="0" Scale="0" Size="100" SourceColumn="MENSAGEM_RODAPE" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_TRI_PDV_DT_UPD" Precision="0" Scale="0" Size="8" SourceColumn="TRI_PDV_DT_UPD" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="DateTime" Direction="Input" ParameterName="@Original_TRI_PDV_DT_UPD" Precision="0" Scale="0" Size="8" SourceColumn="TRI_PDV_DT_UPD" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_MODELO_SAT" Precision="0" Scale="0" Size="4" SourceColumn="MODELO_SAT" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_MODELO_SAT" Precision="0" Scale="0" Size="4" SourceColumn="MODELO_SAT" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_SATSERVIDOR" Precision="0" Scale="0" Size="1" SourceColumn="SATSERVIDOR" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_SATSERVIDOR" Precision="0" Scale="0" Size="1" SourceColumn="SATSERVIDOR" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_SAT_CODATIV" Precision="0" Scale="0" Size="64" SourceColumn="SAT_CODATIV" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_SAT_CODATIV" Precision="0" Scale="0" Size="64" SourceColumn="SAT_CODATIV" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_SAT_USADO" Precision="0" Scale="0" Size="1" SourceColumn="SAT_USADO" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_SAT_USADO" Precision="0" Scale="0" Size="1" SourceColumn="SAT_USADO" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_ECF_ATIVA" Precision="0" Scale="0" Size="1" SourceColumn="ECF_ATIVA" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ECF_ATIVA" Precision="0" Scale="0" Size="1" SourceColumn="ECF_ATIVA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_ECF_PORTA" Precision="0" Scale="0" Size="5" SourceColumn="ECF_PORTA" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ECF_PORTA" Precision="0" Scale="0" Size="5" SourceColumn="ECF_PORTA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_IMPRESSORA_USB" Precision="0" Scale="0" Size="64" SourceColumn="IMPRESSORA_USB" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_IMPRESSORA_USB" Precision="0" Scale="0" Size="64" SourceColumn="IMPRESSORA_USB" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_IMPRESSORA_USB_PED" Precision="0" Scale="0" Size="64" SourceColumn="IMPRESSORA_USB_PED" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_IMPRESSORA_USB_PED" Precision="0" Scale="0" Size="64" SourceColumn="IMPRESSORA_USB_PED" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_PERGUNTA_WHATS" Precision="0" Scale="0" Size="4" SourceColumn="PERGUNTA_WHATS" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_USATEF" Precision="0" Scale="0" Size="1" SourceColumn="USATEF" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_TEFIP" Precision="0" Scale="0" Size="15" SourceColumn="TEFIP" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_TEFIP" Precision="0" Scale="0" Size="15" SourceColumn="TEFIP" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_TEFNUMLOJA" Precision="0" Scale="0" Size="8" SourceColumn="TEFNUMLOJA" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_TEFNUMLOJA" Precision="0" Scale="0" Size="8" SourceColumn="TEFNUMLOJA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_TEFNUMTERMINAL" Precision="0" Scale="0" Size="8" SourceColumn="TEFNUMTERMINAL" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_TEFNUMTERMINAL" Precision="0" Scale="0" Size="8" SourceColumn="TEFNUMTERMINAL" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_TEFPEDECPFPELOPINPAD" Precision="0" Scale="0" Size="1" SourceColumn="TEFPEDECPFPELOPINPAD" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_TEFPEDECPFPELOPINPAD" Precision="0" Scale="0" Size="1" SourceColumn="TEFPEDECPFPELOPINPAD" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_BALPORTA" Precision="0" Scale="0" Size="2" SourceColumn="BALPORTA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_BALBITS" Precision="0" Scale="0" Size="2" SourceColumn="BALBITS" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_BALBAUD" Precision="0" Scale="0" Size="4" SourceColumn="BALBAUD" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_BALPARITY" Precision="0" Scale="0" Size="2" SourceColumn="BALPARITY" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_BALMODELO" Precision="0" Scale="0" Size="2" SourceColumn="BALMODELO" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_ACFILLPREFIX" Precision="0" Scale="0" Size="2" SourceColumn="ACFILLPREFIX" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_ACFILLMODE" Precision="0" Scale="0" Size="2" SourceColumn="ACFILLMODE" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_ACREFERENCIA" Precision="0" Scale="0" Size="2" SourceColumn="ACREFERENCIA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_SYSCOMISSAO" Precision="0" Scale="0" Size="2" SourceColumn="SYSCOMISSAO" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_SATSERVTIMEOUT" Precision="0" Scale="0" Size="4" SourceColumn="SATSERVTIMEOUT" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_SATLIFESIGNINTERVAL" Precision="0" Scale="0" Size="4" SourceColumn="SATLIFESIGNINTERVAL" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_ACFILLDELAY" Precision="0" Scale="0" Size="4" SourceColumn="ACFILLDELAY" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_SYSPERGUNTAWHATS" Precision="0" Scale="0" Size="2" SourceColumn="SYSPERGUNTAWHATS" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_SYSPARCELA" Precision="0" Scale="0" Size="2" SourceColumn="SYSPARCELA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_SYSEMITECOMPROVANTE" Precision="0" Scale="0" Size="2" SourceColumn="SYSEMITECOMPROVANTE" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_INFORMA_MAQUININHA" Precision="0" Scale="0" Size="1" SourceColumn="INFORMA_MAQUININHA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_LAYOUT_SAT" Precision="0" Scale="0" Size="3" SourceColumn="LAYOUT_SAT" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO "TRI_PDV_CONFIG" ("ID_MAC", "NO_CAIXA", "EXIGE_SANGRIA", "VALOR_MAX_CAIXA", "BLOQUEIA_NO_LIMITE", "VALOR_DE_FOLGA", "PERMITE_FOLGA_SANGRIA", "INTERROMPE_NAO_ENCONTRADO", "MENSAGEM_CORTESIA", "ICMS_CONT", "CSOSN_CONT", "PEDE_CPF", "PERMITE_ESTOQUE_NEGATIVO", "MODELO_CUPOM", "MENSAGEM_RODAPE", "TRI_PDV_DT_UPD", "MODELO_SAT", "SATSERVIDOR", "SAT_CODATIV", "SIGN_AC", "SAT_USADO", "ECF_ATIVA", "ECF_PORTA", "IMPRESSORA_USB", "IMPRESSORA_USB_PED", "PERGUNTA_WHATS", "USATEF", "TEFIP", "TEFNUMLOJA", "TEFNUMTERMINAL", "TEFPEDECPFPELOPINPAD", "BALPORTA", "BALBITS", "BALBAUD", "BALPARITY", "BALMODELO", "ACFILLPREFIX", "ACFILLMODE", "ACREFERENCIA", "SYSCOMISSAO", "SATSERVTIMEOUT", "SATLIFESIGNINTERVAL", "ACFILLDELAY", "SYSPERGUNTAWHATS", "SYSPARCELA", "SYSEMITECOMPROVANTE", "INFORMA_MAQUININHA", "LAYOUT_SAT") VALUES (@ID_MAC, @NO_CAIXA, @EXIGE_SANGRIA, @VALOR_MAX_CAIXA, @BLOQUEIA_NO_LIMITE, @VALOR_DE_FOLGA, @PERMITE_FOLGA_SANGRIA, @INTERROMPE_NAO_ENCONTRADO, @MENSAGEM_CORTESIA, @ICMS_CONT, @CSOSN_CONT, @PEDE_CPF, @PERMITE_ESTOQUE_NEGATIVO, @MODELO_CUPOM, @MENSAGEM_RODAPE, @TRI_PDV_DT_UPD, @MODELO_SAT, @SATSERVIDOR, @SAT_CODATIV, @SIGN_AC, @SAT_USADO, @ECF_ATIVA, @ECF_PORTA, @IMPRESSORA_USB, @IMPRESSORA_USB_PED, @PERGUNTA_WHATS, @USATEF, @TEFIP, @TEFNUMLOJA, @TEFNUMTERMINAL, @TEFPEDECPFPELOPINPAD, @BALPORTA, @BALBITS, @BALBAUD, @BALPARITY, @BALMODELO, @ACFILLPREFIX, @ACFILLMODE, @ACREFERENCIA, @SYSCOMISSAO, @SATSERVTIMEOUT, @SATLIFESIGNINTERVAL, @ACFILLDELAY, @SYSPERGUNTAWHATS, @SYSPARCELA, @SYSEMITECOMPROVANTE, @INFORMA_MAQUININHA, @LAYOUT_SAT)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ID_MAC" Precision="0" Scale="0" Size="12" SourceColumn="ID_MAC" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@NO_CAIXA" Precision="0" Scale="0" Size="2" SourceColumn="NO_CAIXA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@EXIGE_SANGRIA" Precision="0" Scale="0" Size="1" SourceColumn="EXIGE_SANGRIA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@VALOR_MAX_CAIXA" Precision="0" Scale="0" Size="8" SourceColumn="VALOR_MAX_CAIXA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@BLOQUEIA_NO_LIMITE" Precision="0" Scale="0" Size="1" SourceColumn="BLOQUEIA_NO_LIMITE" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@VALOR_DE_FOLGA" Precision="0" Scale="0" Size="8" SourceColumn="VALOR_DE_FOLGA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@PERMITE_FOLGA_SANGRIA" Precision="0" Scale="0" Size="1" SourceColumn="PERMITE_FOLGA_SANGRIA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@INTERROMPE_NAO_ENCONTRADO" Precision="0" Scale="0" Size="1" SourceColumn="INTERROMPE_NAO_ENCONTRADO" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MENSAGEM_CORTESIA" Precision="0" Scale="0" Size="100" SourceColumn="MENSAGEM_CORTESIA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Single" Direction="Input" ParameterName="@ICMS_CONT" Precision="0" Scale="0" Size="4" SourceColumn="ICMS_CONT" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Single" Direction="Input" ParameterName="@CSOSN_CONT" Precision="0" Scale="0" Size="4" SourceColumn="CSOSN_CONT" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@PEDE_CPF" Precision="0" Scale="0" Size="4" SourceColumn="PEDE_CPF" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@PERMITE_ESTOQUE_NEGATIVO" Precision="0" Scale="0" Size="4" SourceColumn="PERMITE_ESTOQUE_NEGATIVO" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@MODELO_CUPOM" Precision="0" Scale="0" Size="2" SourceColumn="MODELO_CUPOM" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MENSAGEM_RODAPE" Precision="0" Scale="0" Size="100" SourceColumn="MENSAGEM_RODAPE" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="DateTime" Direction="Input" ParameterName="@TRI_PDV_DT_UPD" Precision="0" Scale="0" Size="8" SourceColumn="TRI_PDV_DT_UPD" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@MODELO_SAT" Precision="0" Scale="0" Size="4" SourceColumn="MODELO_SAT" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@SATSERVIDOR" Precision="0" Scale="0" Size="1" SourceColumn="SATSERVIDOR" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@SAT_CODATIV" Precision="0" Scale="0" Size="64" SourceColumn="SAT_CODATIV" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@SIGN_AC" Precision="0" Scale="0" Size="2147483647" SourceColumn="SIGN_AC" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@SAT_USADO" Precision="0" Scale="0" Size="1" SourceColumn="SAT_USADO" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ECF_ATIVA" Precision="0" Scale="0" Size="1" SourceColumn="ECF_ATIVA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ECF_PORTA" Precision="0" Scale="0" Size="5" SourceColumn="ECF_PORTA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@IMPRESSORA_USB" Precision="0" Scale="0" Size="64" SourceColumn="IMPRESSORA_USB" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@IMPRESSORA_USB_PED" Precision="0" Scale="0" Size="64" SourceColumn="IMPRESSORA_USB_PED" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@PERGUNTA_WHATS" Precision="0" Scale="0" Size="4" SourceColumn="PERGUNTA_WHATS" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@USATEF" Precision="0" Scale="0" Size="1" SourceColumn="USATEF" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@TEFIP" Precision="0" Scale="0" Size="15" SourceColumn="TEFIP" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@TEFNUMLOJA" Precision="0" Scale="0" Size="8" SourceColumn="TEFNUMLOJA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@TEFNUMTERMINAL" Precision="0" Scale="0" Size="8" SourceColumn="TEFNUMTERMINAL" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@TEFPEDECPFPELOPINPAD" Precision="0" Scale="0" Size="1" SourceColumn="TEFPEDECPFPELOPINPAD" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@BALPORTA" Precision="0" Scale="0" Size="2" SourceColumn="BALPORTA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@BALBITS" Precision="0" Scale="0" Size="2" SourceColumn="BALBITS" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@BALBAUD" Precision="0" Scale="0" Size="4" SourceColumn="BALBAUD" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@BALPARITY" Precision="0" Scale="0" Size="2" SourceColumn="BALPARITY" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@BALMODELO" Precision="0" Scale="0" Size="2" SourceColumn="BALMODELO" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@ACFILLPREFIX" Precision="0" Scale="0" Size="2" SourceColumn="ACFILLPREFIX" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@ACFILLMODE" Precision="0" Scale="0" Size="2" SourceColumn="ACFILLMODE" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@ACREFERENCIA" Precision="0" Scale="0" Size="2" SourceColumn="ACREFERENCIA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@SYSCOMISSAO" Precision="0" Scale="0" Size="2" SourceColumn="SYSCOMISSAO" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@SATSERVTIMEOUT" Precision="0" Scale="0" Size="4" SourceColumn="SATSERVTIMEOUT" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@SATLIFESIGNINTERVAL" Precision="0" Scale="0" Size="4" SourceColumn="SATLIFESIGNINTERVAL" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@ACFILLDELAY" Precision="0" Scale="0" Size="4" SourceColumn="ACFILLDELAY" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@SYSPERGUNTAWHATS" Precision="0" Scale="0" Size="2" SourceColumn="SYSPERGUNTAWHATS" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@SYSPARCELA" Precision="0" Scale="0" Size="2" SourceColumn="SYSPARCELA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@SYSEMITECOMPROVANTE" Precision="0" Scale="0" Size="2" SourceColumn="SYSEMITECOMPROVANTE" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@INFORMA_MAQUININHA" Precision="0" Scale="0" Size="1" SourceColumn="INFORMA_MAQUININHA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@LAYOUT_SAT" Precision="0" Scale="0" Size="3" SourceColumn="LAYOUT_SAT" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>SELECT "ID_MAC", "NO_CAIXA", "EXIGE_SANGRIA", "VALOR_MAX_CAIXA", "BLOQUEIA_NO_LIMITE", "VALOR_DE_FOLGA", "PERMITE_FOLGA_SANGRIA", "INTERROMPE_NAO_ENCONTRADO", "MENSAGEM_CORTESIA", "ICMS_CONT", "CSOSN_CONT", "PEDE_CPF", "PERMITE_ESTOQUE_NEGATIVO", "MODELO_CUPOM", "MENSAGEM_RODAPE", "TRI_PDV_DT_UPD", "MODELO_SAT", "SATSERVIDOR", "SAT_CODATIV", "SIGN_AC", "SAT_USADO", "ECF_ATIVA", "ECF_PORTA", "IMPRESSORA_USB", "IMPRESSORA_USB_PED", "PERGUNTA_WHATS", "USATEF", "TEFIP", "TEFNUMLOJA", "TEFNUMTERMINAL", "TEFPEDECPFPELOPINPAD", "BALPORTA", "BALBITS", "BALBAUD", "BALPARITY", "BALMODELO", "ACFILLPREFIX", "ACFILLMODE", "ACREFERENCIA", "SYSCOMISSAO", "SATSERVTIMEOUT", "SATLIFESIGNINTERVAL", "ACFILLDELAY", "SYSPERGUNTAWHATS", "SYSPARCELA", "SYSEMITECOMPROVANTE", "INFORMA_MAQUININHA", "LAYOUT_SAT" FROM "TRI_PDV_CONFIG"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE "TRI_PDV_CONFIG" SET "ID_MAC" = @ID_MAC, "NO_CAIXA" = @NO_CAIXA, "EXIGE_SANGRIA" = @EXIGE_SANGRIA, "VALOR_MAX_CAIXA" = @VALOR_MAX_CAIXA, "BLOQUEIA_NO_LIMITE" = @BLOQUEIA_NO_LIMITE, "VALOR_DE_FOLGA" = @VALOR_DE_FOLGA, "PERMITE_FOLGA_SANGRIA" = @PERMITE_FOLGA_SANGRIA, "INTERROMPE_NAO_ENCONTRADO" = @INTERROMPE_NAO_ENCONTRADO, "MENSAGEM_CORTESIA" = @MENSAGEM_CORTESIA, "ICMS_CONT" = @ICMS_CONT, "CSOSN_CONT" = @CSOSN_CONT, "PEDE_CPF" = @PEDE_CPF, "PERMITE_ESTOQUE_NEGATIVO" = @PERMITE_ESTOQUE_NEGATIVO, "MODELO_CUPOM" = @MODELO_CUPOM, "MENSAGEM_RODAPE" = @MENSAGEM_RODAPE, "TRI_PDV_DT_UPD" = @TRI_PDV_DT_UPD, "MODELO_SAT" = @MODELO_SAT, "SATSERVIDOR" = @SATSERVIDOR, "SAT_CODATIV" = @SAT_CODATIV, "SIGN_AC" = @SIGN_AC, "SAT_USADO" = @SAT_USADO, "ECF_ATIVA" = @ECF_ATIVA, "ECF_PORTA" = @ECF_PORTA, "IMPRESSORA_USB" = @IMPRESSORA_USB, "IMPRESSORA_USB_PED" = @IMPRESSORA_USB_PED, "PERGUNTA_WHATS" = @PERGUNTA_WHATS, "USATEF" = @USATEF, "TEFIP" = @TEFIP, "TEFNUMLOJA" = @TEFNUMLOJA, "TEFNUMTERMINAL" = @TEFNUMTERMINAL, "TEFPEDECPFPELOPINPAD" = @TEFPEDECPFPELOPINPAD, "BALPORTA" = @BALPORTA, "BALBITS" = @BALBITS, "BALBAUD" = @BALBAUD, "BALPARITY" = @BALPARITY, "BALMODELO" = @BALMODELO, "ACFILLPREFIX" = @ACFILLPREFIX, "ACFILLMODE" = @ACFILLMODE, "ACREFERENCIA" = @ACREFERENCIA, "SYSCOMISSAO" = @SYSCOMISSAO, "SATSERVTIMEOUT" = @SATSERVTIMEOUT, "SATLIFESIGNINTERVAL" = @SATLIFESIGNINTERVAL, "ACFILLDELAY" = @ACFILLDELAY, "SYSPERGUNTAWHATS" = @SYSPERGUNTAWHATS, "SYSPARCELA" = @SYSPARCELA, "SYSEMITECOMPROVANTE" = @SYSEMITECOMPROVANTE, "INFORMA_MAQUININHA" = @INFORMA_MAQUININHA, "LAYOUT_SAT" = @LAYOUT_SAT WHERE (("ID_MAC" = @Original_ID_MAC) AND ("NO_CAIXA" = @Original_NO_CAIXA) AND ("EXIGE_SANGRIA" = @Original_EXIGE_SANGRIA) AND ("VALOR_MAX_CAIXA" = @Original_VALOR_MAX_CAIXA) AND ("BLOQUEIA_NO_LIMITE" = @Original_BLOQUEIA_NO_LIMITE) AND ("VALOR_DE_FOLGA" = @Original_VALOR_DE_FOLGA) AND ("PERMITE_FOLGA_SANGRIA" = @Original_PERMITE_FOLGA_SANGRIA) AND ("INTERROMPE_NAO_ENCONTRADO" = @Original_INTERROMPE_NAO_ENCONTRADO) AND ((@IsNull_MENSAGEM_CORTESIA = 1 AND "MENSAGEM_CORTESIA" IS NULL) OR ("MENSAGEM_CORTESIA" = @Original_MENSAGEM_CORTESIA)) AND ((@IsNull_ICMS_CONT = 1 AND "ICMS_CONT" IS NULL) OR ("ICMS_CONT" = @Original_ICMS_CONT)) AND ((@IsNull_CSOSN_CONT = 1 AND "CSOSN_CONT" IS NULL) OR ("CSOSN_CONT" = @Original_CSOSN_CONT)) AND ("PEDE_CPF" = @Original_PEDE_CPF) AND ("PERMITE_ESTOQUE_NEGATIVO" = @Original_PERMITE_ESTOQUE_NEGATIVO) AND ("MODELO_CUPOM" = @Original_MODELO_CUPOM) AND ((@IsNull_MENSAGEM_RODAPE = 1 AND "MENSAGEM_RODAPE" IS NULL) OR ("MENSAGEM_RODAPE" = @Original_MENSAGEM_RODAPE)) AND ((@IsNull_TRI_PDV_DT_UPD = 1 AND "TRI_PDV_DT_UPD" IS NULL) OR ("TRI_PDV_DT_UPD" = @Original_TRI_PDV_DT_UPD)) AND ((@IsNull_MODELO_SAT = 1 AND "MODELO_SAT" IS NULL) OR ("MODELO_SAT" = @Original_MODELO_SAT)) AND ((@IsNull_SATSERVIDOR = 1 AND "SATSERVIDOR" IS NULL) OR ("SATSERVIDOR" = @Original_SATSERVIDOR)) AND ((@IsNull_SAT_CODATIV = 1 AND "SAT_CODATIV" IS NULL) OR ("SAT_CODATIV" = @Original_SAT_CODATIV)) AND ((@IsNull_SAT_USADO = 1 AND "SAT_USADO" IS NULL) OR ("SAT_USADO" = @Original_SAT_USADO)) AND ((@IsNull_ECF_ATIVA = 1 AND "ECF_ATIVA" IS NULL) OR ("ECF_ATIVA" = @Original_ECF_ATIVA)) AND ((@IsNull_ECF_PORTA = 1 AND "ECF_PORTA" IS NULL) OR ("ECF_PORTA" = @Original_ECF_PORTA)) AND ((@IsNull_IMPRESSORA_USB = 1 AND "IMPRESSORA_USB" IS NULL) OR ("IMPRESSORA_USB" = @Original_IMPRESSORA_USB)) AND ((@IsNull_IMPRESSORA_USB_PED = 1 AND "IMPRESSORA_USB_PED" IS NULL) OR ("IMPRESSORA_USB_PED" = @Original_IMPRESSORA_USB_PED)) AND ("PERGUNTA_WHATS" = @Original_PERGUNTA_WHATS) AND ("USATEF" = @Original_USATEF) AND ((@IsNull_TEFIP = 1 AND "TEFIP" IS NULL) OR ("TEFIP" = @Original_TEFIP)) AND ((@IsNull_TEFNUMLOJA = 1 AND "TEFNUMLOJA" IS NULL) OR ("TEFNUMLOJA" = @Original_TEFNUMLOJA)) AND ((@IsNull_TEFNUMTERMINAL = 1 AND "TEFNUMTERMINAL" IS NULL) OR ("TEFNUMTERMINAL" = @Original_TEFNUMTERMINAL)) AND ((@IsNull_TEFPEDECPFPELOPINPAD = 1 AND "TEFPEDECPFPELOPINPAD" IS NULL) OR ("TEFPEDECPFPELOPINPAD" = @Original_TEFPEDECPFPELOPINPAD)) AND ("BALPORTA" = @Original_BALPORTA) AND ("BALBITS" = @Original_BALBITS) AND ("BALBAUD" = @Original_BALBAUD) AND ("BALPARITY" = @Original_BALPARITY) AND ("BALMODELO" = @Original_BALMODELO) AND ("ACFILLPREFIX" = @Original_ACFILLPREFIX) AND ("ACFILLMODE" = @Original_ACFILLMODE) AND ("ACREFERENCIA" = @Original_ACREFERENCIA) AND ("SYSCOMISSAO" = @Original_SYSCOMISSAO) AND ("SATSERVTIMEOUT" = @Original_SATSERVTIMEOUT) AND ("SATLIFESIGNINTERVAL" = @Original_SATLIFESIGNINTERVAL) AND ("ACFILLDELAY" = @Original_ACFILLDELAY) AND ("SYSPERGUNTAWHATS" = @Original_SYSPERGUNTAWHATS) AND ("SYSPARCELA" = @Original_SYSPARCELA) AND ("SYSEMITECOMPROVANTE" = @Original_SYSEMITECOMPROVANTE) AND ("INFORMA_MAQUININHA" = @Original_INFORMA_MAQUININHA) AND ("LAYOUT_SAT" = @Original_LAYOUT_SAT))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ID_MAC" Precision="0" Scale="0" Size="12" SourceColumn="ID_MAC" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@NO_CAIXA" Precision="0" Scale="0" Size="2" SourceColumn="NO_CAIXA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@EXIGE_SANGRIA" Precision="0" Scale="0" Size="1" SourceColumn="EXIGE_SANGRIA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@VALOR_MAX_CAIXA" Precision="0" Scale="0" Size="8" SourceColumn="VALOR_MAX_CAIXA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@BLOQUEIA_NO_LIMITE" Precision="0" Scale="0" Size="1" SourceColumn="BLOQUEIA_NO_LIMITE" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@VALOR_DE_FOLGA" Precision="0" Scale="0" Size="8" SourceColumn="VALOR_DE_FOLGA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@PERMITE_FOLGA_SANGRIA" Precision="0" Scale="0" Size="1" SourceColumn="PERMITE_FOLGA_SANGRIA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@INTERROMPE_NAO_ENCONTRADO" Precision="0" Scale="0" Size="1" SourceColumn="INTERROMPE_NAO_ENCONTRADO" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MENSAGEM_CORTESIA" Precision="0" Scale="0" Size="100" SourceColumn="MENSAGEM_CORTESIA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Single" Direction="Input" ParameterName="@ICMS_CONT" Precision="0" Scale="0" Size="4" SourceColumn="ICMS_CONT" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Single" Direction="Input" ParameterName="@CSOSN_CONT" Precision="0" Scale="0" Size="4" SourceColumn="CSOSN_CONT" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@PEDE_CPF" Precision="0" Scale="0" Size="4" SourceColumn="PEDE_CPF" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@PERMITE_ESTOQUE_NEGATIVO" Precision="0" Scale="0" Size="4" SourceColumn="PERMITE_ESTOQUE_NEGATIVO" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@MODELO_CUPOM" Precision="0" Scale="0" Size="2" SourceColumn="MODELO_CUPOM" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MENSAGEM_RODAPE" Precision="0" Scale="0" Size="100" SourceColumn="MENSAGEM_RODAPE" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="DateTime" Direction="Input" ParameterName="@TRI_PDV_DT_UPD" Precision="0" Scale="0" Size="8" SourceColumn="TRI_PDV_DT_UPD" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@MODELO_SAT" Precision="0" Scale="0" Size="4" SourceColumn="MODELO_SAT" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@SATSERVIDOR" Precision="0" Scale="0" Size="1" SourceColumn="SATSERVIDOR" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@SAT_CODATIV" Precision="0" Scale="0" Size="64" SourceColumn="SAT_CODATIV" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@SIGN_AC" Precision="0" Scale="0" Size="2147483647" SourceColumn="SIGN_AC" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@SAT_USADO" Precision="0" Scale="0" Size="1" SourceColumn="SAT_USADO" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ECF_ATIVA" Precision="0" Scale="0" Size="1" SourceColumn="ECF_ATIVA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ECF_PORTA" Precision="0" Scale="0" Size="5" SourceColumn="ECF_PORTA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@IMPRESSORA_USB" Precision="0" Scale="0" Size="64" SourceColumn="IMPRESSORA_USB" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@IMPRESSORA_USB_PED" Precision="0" Scale="0" Size="64" SourceColumn="IMPRESSORA_USB_PED" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@PERGUNTA_WHATS" Precision="0" Scale="0" Size="4" SourceColumn="PERGUNTA_WHATS" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@USATEF" Precision="0" Scale="0" Size="1" SourceColumn="USATEF" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@TEFIP" Precision="0" Scale="0" Size="15" SourceColumn="TEFIP" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@TEFNUMLOJA" Precision="0" Scale="0" Size="8" SourceColumn="TEFNUMLOJA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@TEFNUMTERMINAL" Precision="0" Scale="0" Size="8" SourceColumn="TEFNUMTERMINAL" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@TEFPEDECPFPELOPINPAD" Precision="0" Scale="0" Size="1" SourceColumn="TEFPEDECPFPELOPINPAD" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@BALPORTA" Precision="0" Scale="0" Size="2" SourceColumn="BALPORTA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@BALBITS" Precision="0" Scale="0" Size="2" SourceColumn="BALBITS" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@BALBAUD" Precision="0" Scale="0" Size="4" SourceColumn="BALBAUD" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@BALPARITY" Precision="0" Scale="0" Size="2" SourceColumn="BALPARITY" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@BALMODELO" Precision="0" Scale="0" Size="2" SourceColumn="BALMODELO" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@ACFILLPREFIX" Precision="0" Scale="0" Size="2" SourceColumn="ACFILLPREFIX" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@ACFILLMODE" Precision="0" Scale="0" Size="2" SourceColumn="ACFILLMODE" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@ACREFERENCIA" Precision="0" Scale="0" Size="2" SourceColumn="ACREFERENCIA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@SYSCOMISSAO" Precision="0" Scale="0" Size="2" SourceColumn="SYSCOMISSAO" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@SATSERVTIMEOUT" Precision="0" Scale="0" Size="4" SourceColumn="SATSERVTIMEOUT" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@SATLIFESIGNINTERVAL" Precision="0" Scale="0" Size="4" SourceColumn="SATLIFESIGNINTERVAL" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@ACFILLDELAY" Precision="0" Scale="0" Size="4" SourceColumn="ACFILLDELAY" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@SYSPERGUNTAWHATS" Precision="0" Scale="0" Size="2" SourceColumn="SYSPERGUNTAWHATS" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@SYSPARCELA" Precision="0" Scale="0" Size="2" SourceColumn="SYSPARCELA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@SYSEMITECOMPROVANTE" Precision="0" Scale="0" Size="2" SourceColumn="SYSEMITECOMPROVANTE" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@INFORMA_MAQUININHA" Precision="0" Scale="0" Size="1" SourceColumn="INFORMA_MAQUININHA" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@LAYOUT_SAT" Precision="0" Scale="0" Size="3" SourceColumn="LAYOUT_SAT" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ID_MAC" Precision="0" Scale="0" Size="12" SourceColumn="ID_MAC" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_NO_CAIXA" Precision="0" Scale="0" Size="2" SourceColumn="NO_CAIXA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_EXIGE_SANGRIA" Precision="0" Scale="0" Size="1" SourceColumn="EXIGE_SANGRIA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_VALOR_MAX_CAIXA" Precision="0" Scale="0" Size="8" SourceColumn="VALOR_MAX_CAIXA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_BLOQUEIA_NO_LIMITE" Precision="0" Scale="0" Size="1" SourceColumn="BLOQUEIA_NO_LIMITE" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_VALOR_DE_FOLGA" Precision="0" Scale="0" Size="8" SourceColumn="VALOR_DE_FOLGA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_PERMITE_FOLGA_SANGRIA" Precision="0" Scale="0" Size="1" SourceColumn="PERMITE_FOLGA_SANGRIA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_INTERROMPE_NAO_ENCONTRADO" Precision="0" Scale="0" Size="1" SourceColumn="INTERROMPE_NAO_ENCONTRADO" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_MENSAGEM_CORTESIA" Precision="0" Scale="0" Size="100" SourceColumn="MENSAGEM_CORTESIA" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MENSAGEM_CORTESIA" Precision="0" Scale="0" Size="100" SourceColumn="MENSAGEM_CORTESIA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_ICMS_CONT" Precision="0" Scale="0" Size="4" SourceColumn="ICMS_CONT" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Single" Direction="Input" ParameterName="@Original_ICMS_CONT" Precision="0" Scale="0" Size="4" SourceColumn="ICMS_CONT" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_CSOSN_CONT" Precision="0" Scale="0" Size="4" SourceColumn="CSOSN_CONT" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Single" Direction="Input" ParameterName="@Original_CSOSN_CONT" Precision="0" Scale="0" Size="4" SourceColumn="CSOSN_CONT" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_PEDE_CPF" Precision="0" Scale="0" Size="4" SourceColumn="PEDE_CPF" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_PERMITE_ESTOQUE_NEGATIVO" Precision="0" Scale="0" Size="4" SourceColumn="PERMITE_ESTOQUE_NEGATIVO" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_MODELO_CUPOM" Precision="0" Scale="0" Size="2" SourceColumn="MODELO_CUPOM" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_MENSAGEM_RODAPE" Precision="0" Scale="0" Size="100" SourceColumn="MENSAGEM_RODAPE" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MENSAGEM_RODAPE" Precision="0" Scale="0" Size="100" SourceColumn="MENSAGEM_RODAPE" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_TRI_PDV_DT_UPD" Precision="0" Scale="0" Size="8" SourceColumn="TRI_PDV_DT_UPD" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="DateTime" Direction="Input" ParameterName="@Original_TRI_PDV_DT_UPD" Precision="0" Scale="0" Size="8" SourceColumn="TRI_PDV_DT_UPD" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_MODELO_SAT" Precision="0" Scale="0" Size="4" SourceColumn="MODELO_SAT" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_MODELO_SAT" Precision="0" Scale="0" Size="4" SourceColumn="MODELO_SAT" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_SATSERVIDOR" Precision="0" Scale="0" Size="1" SourceColumn="SATSERVIDOR" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_SATSERVIDOR" Precision="0" Scale="0" Size="1" SourceColumn="SATSERVIDOR" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_SAT_CODATIV" Precision="0" Scale="0" Size="64" SourceColumn="SAT_CODATIV" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_SAT_CODATIV" Precision="0" Scale="0" Size="64" SourceColumn="SAT_CODATIV" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_SAT_USADO" Precision="0" Scale="0" Size="1" SourceColumn="SAT_USADO" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_SAT_USADO" Precision="0" Scale="0" Size="1" SourceColumn="SAT_USADO" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_ECF_ATIVA" Precision="0" Scale="0" Size="1" SourceColumn="ECF_ATIVA" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ECF_ATIVA" Precision="0" Scale="0" Size="1" SourceColumn="ECF_ATIVA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_ECF_PORTA" Precision="0" Scale="0" Size="5" SourceColumn="ECF_PORTA" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ECF_PORTA" Precision="0" Scale="0" Size="5" SourceColumn="ECF_PORTA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_IMPRESSORA_USB" Precision="0" Scale="0" Size="64" SourceColumn="IMPRESSORA_USB" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_IMPRESSORA_USB" Precision="0" Scale="0" Size="64" SourceColumn="IMPRESSORA_USB" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_IMPRESSORA_USB_PED" Precision="0" Scale="0" Size="64" SourceColumn="IMPRESSORA_USB_PED" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_IMPRESSORA_USB_PED" Precision="0" Scale="0" Size="64" SourceColumn="IMPRESSORA_USB_PED" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_PERGUNTA_WHATS" Precision="0" Scale="0" Size="4" SourceColumn="PERGUNTA_WHATS" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_USATEF" Precision="0" Scale="0" Size="1" SourceColumn="USATEF" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_TEFIP" Precision="0" Scale="0" Size="15" SourceColumn="TEFIP" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_TEFIP" Precision="0" Scale="0" Size="15" SourceColumn="TEFIP" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_TEFNUMLOJA" Precision="0" Scale="0" Size="8" SourceColumn="TEFNUMLOJA" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_TEFNUMLOJA" Precision="0" Scale="0" Size="8" SourceColumn="TEFNUMLOJA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_TEFNUMTERMINAL" Precision="0" Scale="0" Size="8" SourceColumn="TEFNUMTERMINAL" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_TEFNUMTERMINAL" Precision="0" Scale="0" Size="8" SourceColumn="TEFNUMTERMINAL" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_TEFPEDECPFPELOPINPAD" Precision="0" Scale="0" Size="1" SourceColumn="TEFPEDECPFPELOPINPAD" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_TEFPEDECPFPELOPINPAD" Precision="0" Scale="0" Size="1" SourceColumn="TEFPEDECPFPELOPINPAD" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_BALPORTA" Precision="0" Scale="0" Size="2" SourceColumn="BALPORTA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_BALBITS" Precision="0" Scale="0" Size="2" SourceColumn="BALBITS" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_BALBAUD" Precision="0" Scale="0" Size="4" SourceColumn="BALBAUD" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_BALPARITY" Precision="0" Scale="0" Size="2" SourceColumn="BALPARITY" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_BALMODELO" Precision="0" Scale="0" Size="2" SourceColumn="BALMODELO" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_ACFILLPREFIX" Precision="0" Scale="0" Size="2" SourceColumn="ACFILLPREFIX" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_ACFILLMODE" Precision="0" Scale="0" Size="2" SourceColumn="ACFILLMODE" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_ACREFERENCIA" Precision="0" Scale="0" Size="2" SourceColumn="ACREFERENCIA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_SYSCOMISSAO" Precision="0" Scale="0" Size="2" SourceColumn="SYSCOMISSAO" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_SATSERVTIMEOUT" Precision="0" Scale="0" Size="4" SourceColumn="SATSERVTIMEOUT" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_SATLIFESIGNINTERVAL" Precision="0" Scale="0" Size="4" SourceColumn="SATLIFESIGNINTERVAL" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_ACFILLDELAY" Precision="0" Scale="0" Size="4" SourceColumn="ACFILLDELAY" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_SYSPERGUNTAWHATS" Precision="0" Scale="0" Size="2" SourceColumn="SYSPERGUNTAWHATS" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_SYSPARCELA" Precision="0" Scale="0" Size="2" SourceColumn="SYSPARCELA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="@Original_SYSEMITECOMPROVANTE" Precision="0" Scale="0" Size="2" SourceColumn="SYSEMITECOMPROVANTE" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_INFORMA_MAQUININHA" Precision="0" Scale="0" Size="1" SourceColumn="INFORMA_MAQUININHA" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_LAYOUT_SAT" Precision="0" Scale="0" Size="3" SourceColumn="LAYOUT_SAT" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="ID_MAC" DataSetColumn="ID_MAC" />
              <Mapping SourceColumn="NO_CAIXA" DataSetColumn="NO_CAIXA" />
              <Mapping SourceColumn="EXIGE_SANGRIA" DataSetColumn="EXIGE_SANGRIA" />
              <Mapping SourceColumn="VALOR_MAX_CAIXA" DataSetColumn="VALOR_MAX_CAIXA" />
              <Mapping SourceColumn="BLOQUEIA_NO_LIMITE" DataSetColumn="BLOQUEIA_NO_LIMITE" />
              <Mapping SourceColumn="VALOR_DE_FOLGA" DataSetColumn="VALOR_DE_FOLGA" />
              <Mapping SourceColumn="PERMITE_FOLGA_SANGRIA" DataSetColumn="PERMITE_FOLGA_SANGRIA" />
              <Mapping SourceColumn="INTERROMPE_NAO_ENCONTRADO" DataSetColumn="INTERROMPE_NAO_ENCONTRADO" />
              <Mapping SourceColumn="MENSAGEM_CORTESIA" DataSetColumn="MENSAGEM_CORTESIA" />
              <Mapping SourceColumn="ICMS_CONT" DataSetColumn="ICMS_CONT" />
              <Mapping SourceColumn="CSOSN_CONT" DataSetColumn="CSOSN_CONT" />
              <Mapping SourceColumn="PEDE_CPF" DataSetColumn="PEDE_CPF" />
              <Mapping SourceColumn="PERMITE_ESTOQUE_NEGATIVO" DataSetColumn="PERMITE_ESTOQUE_NEGATIVO" />
              <Mapping SourceColumn="MODELO_CUPOM" DataSetColumn="MODELO_CUPOM" />
              <Mapping SourceColumn="MENSAGEM_RODAPE" DataSetColumn="MENSAGEM_RODAPE" />
              <Mapping SourceColumn="TRI_PDV_DT_UPD" DataSetColumn="TRI_PDV_DT_UPD" />
              <Mapping SourceColumn="MODELO_SAT" DataSetColumn="MODELO_SAT" />
              <Mapping SourceColumn="SATSERVIDOR" DataSetColumn="SATSERVIDOR" />
              <Mapping SourceColumn="SAT_CODATIV" DataSetColumn="SAT_CODATIV" />
              <Mapping SourceColumn="SIGN_AC" DataSetColumn="SIGN_AC" />
              <Mapping SourceColumn="SAT_USADO" DataSetColumn="SAT_USADO" />
              <Mapping SourceColumn="ECF_ATIVA" DataSetColumn="ECF_ATIVA" />
              <Mapping SourceColumn="ECF_PORTA" DataSetColumn="ECF_PORTA" />
              <Mapping SourceColumn="IMPRESSORA_USB" DataSetColumn="IMPRESSORA_USB" />
              <Mapping SourceColumn="IMPRESSORA_USB_PED" DataSetColumn="IMPRESSORA_USB_PED" />
              <Mapping SourceColumn="PERGUNTA_WHATS" DataSetColumn="PERGUNTA_WHATS" />
              <Mapping SourceColumn="USATEF" DataSetColumn="USATEF" />
              <Mapping SourceColumn="TEFIP" DataSetColumn="TEFIP" />
              <Mapping SourceColumn="TEFNUMLOJA" DataSetColumn="TEFNUMLOJA" />
              <Mapping SourceColumn="TEFNUMTERMINAL" DataSetColumn="TEFNUMTERMINAL" />
              <Mapping SourceColumn="TEFPEDECPFPELOPINPAD" DataSetColumn="TEFPEDECPFPELOPINPAD" />
              <Mapping SourceColumn="BALPORTA" DataSetColumn="BALPORTA" />
              <Mapping SourceColumn="BALBITS" DataSetColumn="BALBITS" />
              <Mapping SourceColumn="BALBAUD" DataSetColumn="BALBAUD" />
              <Mapping SourceColumn="BALPARITY" DataSetColumn="BALPARITY" />
              <Mapping SourceColumn="BALMODELO" DataSetColumn="BALMODELO" />
              <Mapping SourceColumn="ACFILLPREFIX" DataSetColumn="ACFILLPREFIX" />
              <Mapping SourceColumn="ACFILLMODE" DataSetColumn="ACFILLMODE" />
              <Mapping SourceColumn="ACREFERENCIA" DataSetColumn="ACREFERENCIA" />
              <Mapping SourceColumn="SYSCOMISSAO" DataSetColumn="SYSCOMISSAO" />
              <Mapping SourceColumn="SATSERVTIMEOUT" DataSetColumn="SATSERVTIMEOUT" />
              <Mapping SourceColumn="SATLIFESIGNINTERVAL" DataSetColumn="SATLIFESIGNINTERVAL" />
              <Mapping SourceColumn="ACFILLDELAY" DataSetColumn="ACFILLDELAY" />
              <Mapping SourceColumn="SYSPERGUNTAWHATS" DataSetColumn="SYSPERGUNTAWHATS" />
              <Mapping SourceColumn="SYSPARCELA" DataSetColumn="SYSPARCELA" />
              <Mapping SourceColumn="SYSEMITECOMPROVANTE" DataSetColumn="SYSEMITECOMPROVANTE" />
              <Mapping SourceColumn="INFORMA_MAQUININHA" DataSetColumn="INFORMA_MAQUININHA" />
              <Mapping SourceColumn="LAYOUT_SAT" DataSetColumn="LAYOUT_SAT" />
            </Mappings>
            <Sources>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="A_CRIATABELAS" Modifier="Public" Name="A_CRIATABELAS" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy" UserSourceName="A_CRIATABELAS">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>CREATE OR ALTER PROCEDURE SP_TRI_CRIATABELAS
RETURNS (
erro VARCHAR(64)
)
AS
BEGIN

erro = 'create gen_pdv_log';
if (NOT exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= 'GEN_TRI_LOG'))
then
EXECUTE STATEMENT 'CREATE GENERATOR GEN_TRI_LOG;';

erro = 'create gen_pdv_oper';
if (NOT exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= 'GEN_TRI_OPER'))
then
EXECUTE STATEMENT 'CREATE GENERATOR GEN_TRI_OPER;';

erro = 'create gen_pdv_nsu';
if (NOT exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= 'GEN_TRI_NSU'))
then
EXECUTE STATEMENT 'CREATE GENERATOR GEN_TRI_NSU;';

erro = 'create tri_pdv_setup';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_SETUP'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_SETUP (ID_DUMMY SMALLINT DEFAULT 1, EXECUCAO SMALLINT DEFAULT 0, VERSAO VARCHAR(36) NOT NULL, ULTIMA_AT DATE NOT NULL, DT_INSTALACAO DATE NOT NULL);';

erro = 'create tri_pdv_users';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_USERS'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_USERS (ID_USER SMALLINT NOT NULL, USERNAME VARCHAR(64) NOT NULL, PASSWORD VARCHAR(32) NOT NULL, GERENCIA VARCHAR(8) NOT NULL, ATIVO VARCHAR(8) DEFAULT ''SIM'' NOT NULL, PRIMARY KEY(ID_USER), UNIQUE(USERNAME));';

erro = 'create tri_pdv_sat_env';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_SAT_ENV'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_SAT_ENV (ID_TRANSACAO INTEGER NOT NULL, NUM_CAIXA INTEGER NOT NULL, XML_A_ENV BLOB NOT NULL, PROCESSADO CHAR(1) NOT NULL, HORAATUAL TIMESTAMP NOT NULL, PRIMARY KEY (ID_TRANSACAO));';

erro = 'create tri_pdv_sat_rec';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_SAT_REC'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_SAT_REC (ID_TRANSACAO INTEGER NOT NULL, NUM_CAIXA INTEGER NOT NULL, XML_RECEB BLOB, RETORNO_SAT VARCHAR(10), PROCESSADO CHAR(1) NOT NULL, HORAATUAL TIMESTAMP NOT NULL, PRIMARY KEY (ID_TRANSACAO));';

erro = 'create tri_pdv_config';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_CONFIG'))
THEN
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_CONFIG (ID_MAC VARCHAR(12) NOT NULL,NO_CAIXA SMALLINT NOT NULL,EXIGE_SANGRIA CHAR(1) NOT NULL,VALOR_MAX_CAIXA DOUBLE PRECISION NOT NULL,BLOQUEIA_NO_LIMITE CHAR(1) NOT NULL,VALOR_DE_FOLGA DOUBLE PRECISION NOT NULL,PERMITE_FOLGA_SANGRIA CHAR(1) NOT NULL,INTERROMPE_NAO_ENCONTRADO CHAR(1) NOT NULL,MENSAGEM_CORTESIA VARCHAR(100),ICMS_CONT FLOAT,CSOSN_CONT FLOAT,PEDE_CPF INT NOT NULL, PERMITE_ESTOQUE_NEGATIVO INT NOT NULL, MODELO_CUPOM SMALLINT DEFAULT 1 NOT NULL, PRIMARY KEY(ID_MAC));';

erro = 'create tri_pdv_nsu';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_NSU'))
THEN
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_NSU (ID_TEF INTEGER NOT NULL, ID_CUPOM INTEGER NOT NULL, NSU VARCHAR(40) NOT NULL, REDE_ADQ VARCHAR(3) NOT NULL, AUTORIZ VARCHAR(6), CONSTRAINT TRI_PDV_NSU_PK PRIMARY KEY (ID_TEF), CONSTRAINT TRI_PDV_NSU_TB_CUPOM_FK FOREIGN KEY (ID_CUPOM) REFERENCES TB_CUPOM(ID_CUPOM));';

erro = 'create tri_pdv_oper';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_OPER'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_OPER ( ID_CAIXA INTEGER NOT NULL , DIN NUMERIC(18,4) NOT NULL , CHEQUE NUMERIC(18,4) NOT NULL , CREDITO NUMERIC(18,4) NOT NULL , DEBITO NUMERIC(18,4) NOT NULL , LOJA NUMERIC(18,4) NOT NULL , ALIMENTACAO NUMERIC(18,4) NOT NULL , REFEICAO NUMERIC(18,4) NOT NULL , PRESENTE NUMERIC(18,4) NOT NULL , COMBUSTIVEL NUMERIC(18,4) NOT NULL , OUTROS NUMERIC(18,4) NOT NULL , EXTRA_1 NUMERIC(18,4) NOT NULL , EXTRA_2 NUMERIC(18,4) NOT NULL , EXTRA_3 NUMERIC(18,4) NOT NULL , EXTRA_4 NUMERIC(18,4) NOT NULL , EXTRA_5 NUMERIC(18,4) NOT NULL , EXTRA_6 NUMERIC(18,4) NOT NULL , EXTRA_7 NUMERIC(18,4) NOT NULL , EXTRA_8 NUMERIC(18,4) NOT NULL , EXTRA_9 NUMERIC(18,4) NOT NULL , EXTRA_10 NUMERIC(18,4) NOT NULL , CURRENTTIME TIMESTAMP NOT NULL , ABERTO VARCHAR(1) NOT NULL , HASH VARCHAR(32) NOT NULL , SANGRIAS NUMERIC(18,4) NOT NULL , SUPRIMENTOS NUMERIC(18,4) NOT NULL , TROCAS NUMERIC(18,4) NOT NULL , FECHADO TIMESTAMP , ID_OPER INTEGER NOT NULL , ID_USER INTEGER NOT NULL , CONSTRAINT TRI_PDV_OPER_PK PRIMARY KEY (ID_OPER) ) ;';

erro = 'create tri_pdv_fechamentos';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_FECHAMENTOS'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_FECHAMENTOS ( DIN NUMERIC(18, 4) , CHEQUE NUMERIC(18, 4) , CREDITO NUMERIC(18, 4) , DEBITO NUMERIC(18, 4) , LOJA NUMERIC(18, 4) , ALIMENTACAO NUMERIC(18, 4) , REFEICAO NUMERIC(18, 4) , PRESENTE NUMERIC(18, 4) , COMBUSTIVEL NUMERIC(18, 4) , OUTROS NUMERIC(18, 4) , EXTRA_1 NUMERIC(18, 4) , EXTRA_2 NUMERIC(18, 4) , EXTRA_3 NUMERIC(18, 4) , EXTRA_4 NUMERIC(18, 4) , EXTRA_5 NUMERIC(18, 4) , EXTRA_6 NUMERIC(18, 4) , EXTRA_7 NUMERIC(18, 4) , EXTRA_8 NUMERIC(18, 4) , EXTRA_9 NUMERIC(18, 4) , EXTRA_10 NUMERIC(18, 4) , SANGRIAS NUMERIC(18, 4) , SUPRIMENTOS NUMERIC(18, 4) , TROCAS NUMERIC(18, 4) , OPERADOR INTEGER NOT NULL , ID_CAIXA INTEGER NOT NULL , FECHADO TIMESTAMP NOT NULL , CONSTRAINT TRI_PDV_FECHAMENTOS_PK PRIMARY KEY (ID_CAIXA,FECHADO) ) ;';


erro = 'create pdv_log';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_LOG'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_LOG (ID_ENTRY INTEGER NOT NULL, METODO VARCHAR(32) NOT NULL, INFO VARCHAR(128) NOT NULL, RESULTADO SMALLINT NOT NULL, TERMINAL VARCHAR(8) NOT NULL, "TIMESTAMP" TIMESTAMP NOT NULL, PRIMARY KEY(ID_ENTRY));';

erro = 'create triger_log';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TRI_LOG_TRI'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TRI_LOG_TRI for TRI_PDV_LOG active before INSERT as begin new.ID_ENTRY = next value for GEN_TRI_LOG; end;';

erro = 'create triger_oper';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TRI_OPER_TRI'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TRI_OPER_TRI for TRI_PDV_OPER active before INSERT as begin new.ID_OPER = next value for GEN_TRI_OPER; end;';

erro = 'create pdv_metodos';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_METODOS'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_METODOS (ID_PAGAMENTO INTEGER NOT NULL, DESCRICAO VARCHAR(255), DIAS INTEGER, METODO VARCHAR(1) DEFAULT ''C'' NOT NULL, PGTOCFE VARCHAR(2) DEFAULT ''01'' NOT NULL, ATIVO VARCHAR(1) NOT NULL, PRIMARY KEY (ID_PAGAMENTO));';

erro = 'create pdv_rel_metodo';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_REL_METODO_PAGTO'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_REL_METODO_PAGTO (ID_PAGAMENTO INTEGER, ID_FMAPGTO SMALLINT, CONSTRAINT FK_METODO_CLI FOREIGN KEY (ID_FMAPGTO) REFERENCES TB_FORMA_PAGTO_SIS(ID_FMAPGTO), CONSTRAINT FK_METODO_TRI FOREIGN KEY (ID_PAGAMENTO) REFERENCES TRI_PDV_METODOS(ID_PAGAMENTO));';

erro = 'create fk_metodo_cli';
if (not exists(select 1 from RDB$INDICES where rdb$index_name = 'FK_METODO_CLI'))
then
EXECUTE STATEMENT 'CREATE INDEX FK_METODO_CLI ON TRI_PDV_REL_METODO_PAGTO (ID_FMAPGTO);';

erro = 'create fk_metodo_tri';
if (not exists(select 1 from RDB$INDICES where rdb$index_name = 'FK_METODO_TRI'))
then
EXECUTE STATEMENT 'CREATE INDEX FK_METODO_TRI ON TRI_PDV_REL_METODO_PAGTO (ID_PAGAMENTO);';

erro = 'create PK_TB_EMITENTE';
if (not exists(select 1 from RDB$INDICES where rdb$index_name = 'PK_TB_EMITENTE'))
then
EXECUTE STATEMENT 'ALTER TABLE TB_EMITENTE ADD CONSTRAINT PK_TB_EMITENTE PRIMARY KEY (CNPJ);';



erro = 'create IDX_TB_CUPOM_DESC';
if (not exists(select 1 from RDB$INDEX_SEGMENTS where rdb$index_name = 'IDX_TB_CUPOM_DESC'))
then
EXECUTE STATEMENT 'CREATE DESCENDING INDEX IDX_TB_CUPOM_DESC ON TB_CUPOM (ID_CUPOM);';

erro = 'create IDX_TB_CUPOM_ITEM_DESC';
if (not exists(select 1 from RDB$INDEX_SEGMENTS where rdb$index_name = 'IDX_TB_CUPOM_ITEM_DESC'))
then
EXECUTE STATEMENT 'CREATE DESCENDING INDEX IDX_TB_CUPOM_ITEM_DESC ON TB_CUPOM_ITEM (ID_ITEMCUP);';

erro = 'create IDX_TB_MOVDIARIO_DESC';
if (not exists(select 1 from RDB$INDEX_SEGMENTS where rdb$index_name = 'IDX_TB_MOVDIARIO_DESC'))
then
EXECUTE STATEMENT 'CREATE DESCENDING INDEX IDX_TB_MOVDIARIO_DESC ON TB_MOVDIARIO (ID_MOVTO);';

erro = 'create IDX_TB_CONTA_RECEBER_DESC';
if (not exists(select 1 from RDB$INDEX_SEGMENTS where rdb$index_name = 'IDX_TB_CONTA_RECEBER_DESC'))
then
EXECUTE STATEMENT 'CREATE DESCENDING INDEX IDX_TB_CONTA_RECEBER_DESC ON TB_CONTA_RECEBER (ID_CTAREC);';

erro = 'create PK_TB_EST_PRODUTO';
if (not exists(select 1 from RDB$INDICES where rdb$index_name = 'PK_TB_EST_PRODUTO'))
then
EXECUTE STATEMENT 'ALTER TABLE TB_EST_PRODUTO ADD CONSTRAINT PK_TB_EST_PRODUTO PRIMARY KEY (ID_IDENTIFICADOR);';

erro = 'create TRI_PDV_TERMINAL_USUARIO';
if (not exists (select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_TERMINAL_USUARIO'))
then
execute statement 'CREATE TABLE TRI_PDV_TERMINAL_USUARIO (ID_OPER INTEGER NOT NULL, NUM_CAIXA INTEGER NOT NULL, STATUS CHAR(1) NOT NULL, TS_ABERTURA TIMESTAMP NOT NULL, TS_FECHAMENTO TIMESTAMP, ID_USER INTEGER NOT NULL, CONSTRAINT PK_TRI_PDV_TERM_USUARIO PRIMARY KEY (ID_OPER));';

erro = 'create gen_tri_pdv_term_usuario';
if (NOT exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= 'GEN_TRI_PDV_TERM_USUARIO'))
then
EXECUTE STATEMENT 'CREATE GENERATOR GEN_TRI_PDV_TERM_USUARIO;';

erro = 'create TRI_PDV_VALID_ONLINE';
if (not exists (select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_VALID_ONLINE'))
then
execute statement 'CREATE TABLE TRI_PDV_VALID_ONLINE (PK_SERIAL VARCHAR(18), LASTVALIDCHECK TIMESTAMP, LASTSERIALCHECK TIMESTAMP) ;';

erro = 'create TRI_PDV_VALID_OFFLINE';
if (not exists (select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_VALID_OFFLINE'))
then
execute statement 'CREATE TABLE TRI_PDV_VALID_OFFLINE (LASTLOG INTEGER, UNIKEY INTEGER, UNIKEYHD VARCHAR(12));';

erro = 'create TB_CUPOM_STATUS_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_CUPOM_STATUS_IDX'))
then
execute statement 'CREATE INDEX TB_CUPOM_STATUS_IDX ON TB_CUPOM (STATUS) ;';
erro = 'create TB_CUPOM_DT_CUPOM_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_CUPOM_DT_CUPOM_IDX'))
then
execute statement 'CREATE INDEX TB_CUPOM_DT_CUPOM_IDX ON TB_CUPOM (DT_CUPOM) ;';
erro = 'create TB_CUPOM_HR_CUPOM_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_CUPOM_HR_CUPOM_IDX'))
then
execute statement 'CREATE INDEX TB_CUPOM_HR_CUPOM_IDX ON TB_CUPOM (HR_CUPOM) ;';

erro = 'create gen_maitre_pedido';
if (NOT exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= 'GEN_MAITRE_PEDIDO'))
then
EXECUTE STATEMENT 'CREATE GENERATOR GEN_MAITRE_PEDIDO;';

erro = 'create TRI_MAIT_PEDIDO';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_MAIT_PEDIDO'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_MAIT_PEDIDO ( ID_MAIT_PEDIDO INTEGER NOT NULL , TS_EMISSAO TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, ID_USER INTEGER DEFAULT 0 NOT NULL , NR_PEDIDO SMALLINT DEFAULT 1 NOT NULL, ABERTO VARCHAR(1) DEFAULT ''S'' NOT NULL , OBSERVACAO BLOB SUB_TYPE 1 , ID_CAIXA INTEGER DEFAULT 0 NOT NULL , CONSTRAINT TRI_MAIT_PEDIDO_PK PRIMARY KEY (ID_MAIT_PEDIDO) ) ;';
erro = 'create TRI_MAIT_PEDIDO_ABERTO_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_MAIT_PEDIDO_ABERTO_IDX'))
then
execute statement 'CREATE INDEX TRI_MAIT_PEDIDO_ABERTO_IDX ON TRI_MAIT_PEDIDO (ABERTO) ;';
erro = 'create TRI_MAIT_PEDIDO_NR_PEDIDO_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_MAIT_PEDIDO_NR_PEDIDO_IDX'))
then
execute statement 'CREATE INDEX TRI_MAIT_PEDIDO_NR_PEDIDO_IDX ON TRI_MAIT_PEDIDO (NR_PEDIDO) ;';
erro = 'create TRI_MAIT_PEDIDO_TS_EMISSAO_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_MAIT_PEDIDO_TS_EMISSAO_IDX'))
then
execute statement 'CREATE INDEX TRI_MAIT_PEDIDO_TS_EMISSAO_IDX ON TRI_MAIT_PEDIDO (TS_EMISSAO) ;';
erro = 'create TRI_MAIT_PEDIDO_ID_CAIXA_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_MAIT_PEDIDO_ID_CAIXA_IDX'))
then
execute statement 'CREATE INDEX TRI_MAIT_PEDIDO_ID_CAIXA_IDX ON TRI_MAIT_PEDIDO (ID_CAIXA) ;';

erro = 'create TRI_MAIT_PEDIDO_ITEM';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_MAIT_PEDIDO_ITEM'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_MAIT_PEDIDO_ITEM ( ID_MAIT_PEDIDO_ITEM INTEGER NOT NULL, ID_MAIT_PEDIDO INTEGER NOT NULL, ID_IDENTIFICADOR INTEGER NOT NULL, QTD_ITEM NUMERIC(18,4) DEFAULT 0 NOT NULL, CONSTRAINT TRI_MAIT_PEDIDO_ITEM_PK PRIMARY KEY (ID_MAIT_PEDIDO_ITEM), CONSTRAINT TRI_MAIT_PED_ITEM_EST_IDENT_FK FOREIGN KEY (ID_IDENTIFICADOR) REFERENCES TB_EST_IDENTIFICADOR(ID_IDENTIFICADOR), CONSTRAINT TRI_MAIT_PED_ITEM_PEDIDO_FK FOREIGN KEY (ID_MAIT_PEDIDO) REFERENCES TRI_MAIT_PEDIDO(ID_MAIT_PEDIDO) ) ;';

erro = 'create TRI_MAIT_PED_ITEM_COMPPROD';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_MAIT_PED_ITEM_COMPPROD'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_MAIT_PED_ITEM_COMPPROD ( ID_MAIT_PEDIDO_ITEM INTEGER NOT NULL, ID_COMPPRO INTEGER NOT NULL, CONSTRAINT TRI_MAIT_PED_ITEM_COMPPROD_PK PRIMARY KEY (ID_MAIT_PEDIDO_ITEM,ID_COMPPRO), CONSTRAINT TRI_MAIT_PED_ITEM_COMPPROD_FK FOREIGN KEY (ID_MAIT_PEDIDO_ITEM) REFERENCES TRI_MAIT_PEDIDO_ITEM(ID_MAIT_PEDIDO_ITEM), CONSTRAINT TRI_MT_PDITM_COMPPROD_CMPRD_FK FOREIGN KEY (ID_COMPPRO) REFERENCES TB_EST_COMP_PRODUCAO(ID_COMPPRO) ) ;';

erro = 'create TRI_MAIT_PEDIDO_CUPOM';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_MAIT_PEDIDO_CUPOM'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_MAIT_PEDIDO_CUPOM ( ID_MAIT_PEDIDO INTEGER NOT NULL, ID_CUPOM INTEGER NOT NULL, CONSTRAINT TRI_MAIT_PEDIDO_CUPOM_PK PRIMARY KEY (ID_MAIT_PEDIDO,ID_CUPOM), CONSTRAINT TRI_MAIT_PED_CUPOM_MAIT_PED_FK FOREIGN KEY (ID_MAIT_PEDIDO) REFERENCES TRI_MAIT_PEDIDO(ID_MAIT_PEDIDO), CONSTRAINT TRI_MAIT_PED_CUPOM_TB_CUPOM_FK FOREIGN KEY (ID_CUPOM) REFERENCES TB_CUPOM(ID_CUPOM) ) ;';

erro = 'create GEN_MAIT_PEDIDO_ID';
if (NOT exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= 'GEN_MAIT_PEDIDO_ID'))
then
EXECUTE STATEMENT 'CREATE SEQUENCE GEN_MAIT_PEDIDO_ID;';

erro = 'create TRI_MAIT_PED_ITEM_CUPOM_ITEM';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_MAIT_PED_ITEM_CUPOM_ITEM'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_MAIT_PED_ITEM_CUPOM_ITEM ( ID_MAIT_PEDIDO_ITEM INTEGER NOT NULL, ID_ITEMCUP INTEGER NOT NULL, CONSTRAINT TRI_MAIT_PED_ITEM_CUPOM_ITEM_PK PRIMARY KEY (ID_MAIT_PEDIDO_ITEM,ID_ITEMCUP), CONSTRAINT TRI_MT_PDITM_CPM_ITM_CPMITM_FK FOREIGN KEY (ID_ITEMCUP) REFERENCES TB_CUPOM_ITEM(ID_ITEMCUP), CONSTRAINT TRI_MT_PDITM_CPM_ITM_MT_PDTM_FK FOREIGN KEY (ID_MAIT_PEDIDO_ITEM) REFERENCES TRI_MAIT_PEDIDO_ITEM(ID_MAIT_PEDIDO_ITEM) ) ;';

erro = 'create gen_tri_mait_ped_item_id';
if (NOT exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= 'GEN_TRI_MAIT_PED_ITEM_ID'))
then
EXECUTE STATEMENT 'CREATE GENERATOR GEN_TRI_MAIT_PED_ITEM_ID;';

erro = 'create TRI_PDV_SAT_XML';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_SAT_XML'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_SAT_XML (ID_XML INTEGER NOT NULL, XML BLOB SUB_TYPE 1 NOT NULL, VALOR_TOTAL NUMERIC(18,4) NOT NULL, TS_VENDA TIMESTAMP NOT NULL, CHAVE_CFE VARCHAR(44) NOT NULL, CANCEL_CFE CHAR(1) NOT NULL, NUM_CAIXA INTEGER NOT NULL, ID_CUPOM INTEGER NOT NULL);';

erro = 'create GEN_TRI_PDV_SAT_XML_ID';
if (NOT exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= 'GEN_TRI_PDV_SAT_XML_ID'))
then
EXECUTE STATEMENT 'CREATE SEQUENCE GEN_TRI_PDV_SAT_XML_ID;';

erro = 'create TRI_PDV_SAT_XML_ID';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TRI_PDV_SAT_XML_ID'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TRI_PDV_SAT_XML_ID FOR TRI_PDV_SAT_XML BEFORE INSERT AS BEGIN IF ((NEW.ID_XML IS null) OR (NEW.ID_XML = 0)) THEN BEGIN NEW.ID_XML = (SELECT NEXT VALUE FOR GEN_TRI_PDV_SAT_XML_ID FROM RDB$DATABASE); END END;';

erro = 'create TRI_PDV_TERMARIO_NUM_CAIXA_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_TERMARIO_NUM_CAIXA_IDX'))
then
execute statement 'CREATE INDEX TRI_PDV_TERMARIO_NUM_CAIXA_IDX ON TRI_PDV_TERMINAL_USUARIO (NUM_CAIXA);';

erro = 'create TRI_PDV_TERMARIO_NUM_CAIXA_IDX2';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_TERMARIO_NUM_CAIXA_IDX2'))
then
execute statement 'CREATE INDEX TRI_PDV_TERMARIO_NUM_CAIXA_IDX2 ON TRI_PDV_TERMINAL_USUARIO (NUM_CAIXA , TS_ABERTURA , ID_USER);';

erro = 'create TRI_PDV_SANSUP';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_SANSUP'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_SANSUP (ID_SANSUP INTEGER NOT NULL, ID_CAIXA INTEGER NOT NULL, TS_ABERTURA TIMESTAMP NOT NULL, OPERACAO CHAR(1) NOT NULL, VALOR NUMERIC(18,4) NOT NULL, TS_OPERACAO TIMESTAMP NOT NULL, CONSTRAINT TRI_PDV_SANSUP_PK PRIMARY KEY (ID_SANSUP));';

erro = 'create GEN_TRI_SANSUP';
if (NOT exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= 'GEN_TRI_SANSUP'))
then
EXECUTE STATEMENT 'CREATE SEQUENCE GEN_TRI_SANSUP;';

erro = 'create TRI_SANSUP_TRI';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TRI_SANSUP_TRI'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TRI_SANSUP_TRI FOR TRI_PDV_SANSUP BEFORE INSERT as begin new.ID_SANSUP = next value for GEN_TRI_SANSUP; END;';

erro = 'create TRI_PDV_WHATS';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_WHATS'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_WHATS (ID_MSG INTEGER NOT NULL, NUMERO VARCHAR(100), MENSAGEM BLOB SUB_TYPE 1, DATAENVIO TIMESTAMP, ENVIADA VARCHAR(100), CNPJ VARCHAR(50), CONSTRAINT TRI_PDV_WHATS_PK PRIMARY KEY (ID_MSG));';

erro = 'create GEN_TRI_WHATS';
if (not exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= 'GEN_TRI_PDV_WHATS'))
then
EXECUTE STATEMENT 'CREATE GENERATOR GEN_TRI_PDV_WHATS;';

erro = 'create NOTIFICA_WHATS_TRI';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'NOTIFICA_WHATS_TRI'))
then
EXECUTE STATEMENT 'CREATE TRIGGER NOTIFICA_WHATS_TRI FOR TRI_PDV_WHATS AFTER INSERT AS BEGIN POST_EVENT ''NOVA_MENSAGEM''; END';

erro = 'create TRI_PDV_DEVOL';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_DEVOL'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_DEVOL (ID_DEVOLUCAO INTEGER NOT NULL, ID_NFVITEM INTEGER NOT NULL, VALOR NUMERIC(18,4) NOT NULL, USADO CHAR(1) DEFAULT ''N'' NOT NULL, DATA_DEVOL TIMESTAMP NOT NULL, DATA_USADO TIMESTAMP, QTD_DEVOL INTEGER, CONSTRAINT "TRI_PDV_DEVOL_PK" PRIMARY KEY (ID_DEVOLUCAO), CONSTRAINT TRI_PDV_DEVOL_FK FOREIGN KEY (ID_NFVITEM) REFERENCES TB_NFV_ITEM(ID_NFVITEM));';

erro = 'deu certo';
SUSPEND;
WHEN ANY DO
BEGIN

END
END;</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="A_CRIATABELAS_AUX_SYNC" Modifier="Public" Name="A_CRIATABELAS_AUX_SYNC" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy1" UserSourceName="A_CRIATABELAS_AUX_SYNC">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>CREATE OR ALTER PROCEDURE SP_TRI_CRIATABELAS_AUX_SYNC
RETURNS (
erro VARCHAR(64)
)
AS
BEGIN

erro = 'create gen_pdv_aux_sync_seq';
if (NOT exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= 'GEN_PDV_AUX_SYNC_SEQ'))
then
EXECUTE STATEMENT 'CREATE SEQUENCE GEN_PDV_AUX_SYNC_SEQ;';

erro = 'create tri_pdv_aux_sync';
if (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = 'TRI_PDV_AUX_SYNC'))
then
EXECUTE STATEMENT 'CREATE TABLE TRI_PDV_AUX_SYNC ( SEQ INTEGER NOT NULL, ID_REG INTEGER NOT NULL, TABELA VARCHAR(31) NOT NULL, OPERACAO VARCHAR(1) NOT NULL, NO_CAIXA SMALLINT NOT NULL, TS_OPER TIMESTAMP );';

erro = 'create TRI_PDV_AUX_SYNC_OPERACAO_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_AUX_SYNC_OPERACAO_IDX'))
then
execute statement 'CREATE INDEX TRI_PDV_AUX_SYNC_OPERACAO_IDX ON TRI_PDV_AUX_SYNC (OPERACAO);';

erro = 'create TRI_PDV_AUX_SYNC_TRIGG1_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_AUX_SYNC_TRIGG1_IDX'))
then
execute statement 'CREATE INDEX TRI_PDV_AUX_SYNC_TRIGG1_IDX ON TRI_PDV_AUX_SYNC (ID_REG,TABELA,OPERACAO,NO_CAIXA);';

erro = 'deu certo';
SUSPEND;
WHEN ANY DO
BEGIN

END
END;</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="B_ATUALIZA_TB_AUX_SYNC" Modifier="Public" Name="B_ATUALIZA_TB_AUX_SYNC" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy2" UserSourceName="B_ATUALIZA_TB_AUX_SYNC">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>CREATE OR ALTER PROCEDURE SP_TRI_ATUALIZA_TB_AUX_SYNC
RETURNS( erro VARCHAR( 64 )) AS BEGIN 

erro = 'alter table TRI_PDV_AUX_SYNC add UN_REG';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TRI_PDV_AUX_SYNC'
AND RDB$FIELD_NAME = 'UN_REG' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_AUX_SYNC ADD UN_REG VARCHAR(100);';

erro = 'create TRI_PDV_AUX_SYNC_UNREG_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_AUX_SYNC_UNREG_IDX'))
then
execute statement 'CREATE INDEX TRI_PDV_AUX_SYNC_UNREG_IDX ON TRI_PDV_AUX_SYNC (UN_REG);';

erro = 'alter table TRI_PDV_AUX_SYNC add SM_REG';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TRI_PDV_AUX_SYNC'
AND RDB$FIELD_NAME = 'SM_REG' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_AUX_SYNC ADD SM_REG SMALLINT;';

erro = 'create TRI_PDV_AUX_SYNC_SMREG_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_AUX_SYNC_SMREG_IDX'))
then
execute statement 'CREATE INDEX TRI_PDV_AUX_SYNC_SMREG_IDX ON TRI_PDV_AUX_SYNC (SM_REG);';

erro = 'alter table TRI_PDV_AUX_SYNC add CH_REG';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TRI_PDV_AUX_SYNC'
AND RDB$FIELD_NAME = 'CH_REG' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_AUX_SYNC ADD CH_REG CHAR(3);';

erro = 'create TRI_PDV_AUX_SYNC_CHREG_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_AUX_SYNC_CHREG_IDX'))
then
execute statement 'CREATE INDEX TRI_PDV_AUX_SYNC_CHREG_IDX ON TRI_PDV_AUX_SYNC (CH_REG);';

erro = 'create TRI_PDV_AUX_SYNC_ID_REG_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_AUX_SYNC_ID_REG_IDX'))
then
execute statement 'CREATE INDEX TRI_PDV_AUX_SYNC_ID_REG_IDX ON TRI_PDV_AUX_SYNC (ID_REG);';

erro = 'create TRI_PDV_AUX_SYNC_TABELA_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_AUX_SYNC_TABELA_IDX'))
then
execute statement 'CREATE INDEX TRI_PDV_AUX_SYNC_TABELA_IDX ON TRI_PDV_AUX_SYNC (TABELA);';

erro = 'create TRI_PDV_AUX_SYNC_NO_CAIXA_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_AUX_SYNC_NO_CAIXA_IDX'))
then
execute statement 'CREATE INDEX TRI_PDV_AUX_SYNC_NO_CAIXA_IDX ON TRI_PDV_AUX_SYNC (NO_CAIXA);';

erro = 'create TRI_PDV_AUX_SYNC_TRIGG2_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_AUX_SYNC_TRIGG2_IDX'))
then
execute statement 'CREATE INDEX TRI_PDV_AUX_SYNC_TRIGG2_IDX ON TRI_PDV_AUX_SYNC (UN_REG,TABELA,OPERACAO,NO_CAIXA);';

erro = 'create TRI_PDV_AUX_SYNC_TRIGG3_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_AUX_SYNC_TRIGG3_IDX'))
then
execute statement 'CREATE INDEX TRI_PDV_AUX_SYNC_TRIGG3_IDX ON TRI_PDV_AUX_SYNC (SM_REG,TABELA,OPERACAO,NO_CAIXA);';

erro = 'create TRI_PDV_AUX_SYNC_TRIGG4_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_AUX_SYNC_TRIGG4_IDX'))
then
execute statement 'CREATE INDEX TRI_PDV_AUX_SYNC_TRIGG4_IDX ON TRI_PDV_AUX_SYNC (CH_REG,TABELA,OPERACAO,NO_CAIXA);';

erro = 'deu certo';

SUSPEND;
WHEN ANY DO BEGIN
END
END;</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="B_ATUALIZATABELAS" Modifier="Public" Name="B_ATUALIZATABELAS" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy3" UserSourceName="B_ATUALIZATABELAS">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>CREATE OR ALTER PROCEDURE SP_TRI_ATUALIZATABELAS 
RETURNS( erro VARCHAR( 64 )) AS BEGIN 

erro = 'atualiza tri_pdv_oper';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TRI_PDV_OPER'
AND RDB$FIELD_NAME = 'ID_USER' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_OPER ADD ID_USER INTEGER NOT NULL;';

erro = 'acrescenta qtd_atacado';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_ESTOQUE'
AND RDB$FIELD_NAME = 'QTD_ATACADO' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_ESTOQUE ADD QTD_ATACADO NUMERIC(18,4);';

erro = 'acrescenta controla_lote_venda';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_EST_PRODUTO'
AND RDB$FIELD_NAME = 'CONTROLA_LOTE_VENDA' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_EST_PRODUTO ADD CONTROLA_LOTE_VENDA CHAR(1) DEFAULT ''N'';';

erro = 'acrescenta baixa_lote_nfv';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_EST_PRODUTO'
AND RDB$FIELD_NAME = 'BAIXA_LOTE_NFV' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_EST_PRODUTO ADD BAIXA_LOTE_NFV CHAR(1) DEFAULT ''A'';';

erro = 'acrescenta baixa_lote_pdv';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_EST_PRODUTO'
AND RDB$FIELD_NAME = 'BAIXA_LOTE_PDV' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_EST_PRODUTO ADD BAIXA_LOTE_PDV CHAR(1) DEFAULT ''A'';';

erro = 'acrescenta dt_melhor_vencto';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_CLIENTE'
AND RDB$FIELD_NAME = 'DT_MELHOR_VENCTO' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_CLIENTE ADD DT_MELHOR_VENCTO SMALLINT;';

erro = 'add tb_cupom.synced';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_CUPOM'
AND RDB$FIELD_NAME = 'SYNCED' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_CUPOM ADD SYNCED SMALLINT ;';

erro = 'add tri_pdv_config.modelo_cupom';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TRI_PDV_CONFIG'
AND RDB$FIELD_NAME = 'MODELO_CUPOM' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_CONFIG ADD MODELO_CUPOM SMALLINT DEFAULT 1 NOT NULL;';

erro = 'add tri_pdv_config.mensagem_rodape';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TRI_PDV_CONFIG'
AND RDB$FIELD_NAME = 'MENSAGEM_RODAPE' )) THEN EXECUTE STATEMENT
'ALTER TABLE TRI_PDV_CONFIG ADD MENSAGEM_RODAPE VARCHAR(100) DEFAULT ''OBRIGADO E VOLTE SEMPRE'';';



erro = 'create TRI_PDV_INDEX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_INDEX'))
then
execute statement 'CREATE UNIQUE INDEX TRI_PDV_INDEX ON TRI_PDV_OPER (ID_OPER) ; ';


erro = 'create TB_CUPOM_ITEM.DESCRICAO';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_CUPOM_ITEM'
AND RDB$FIELD_NAME = 'DESCRICAO' )) THEN EXECUTE STATEMENT

'ALTER TABLE TB_CUPOM_ITEM ADD DESCRICAO VARCHAR(100) CHARACTER SET WIN_1252 ;';

erro = 'add TB_MOVDIARIO.SYNCED';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_MOVDIARIO'
AND RDB$FIELD_NAME = 'SYNCED' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_MOVDIARIO ADD SYNCED SMALLINT ;';

erro = 'add TB_IFS.NUM_CREDENCIAMENTO';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_IFS'
AND RDB$FIELD_NAME = 'NUM_CREDENCIAMENTO' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_IFS ADD NUM_CREDENCIAMENTO VARCHAR(30) CHARACTER SET NONE;';

erro = 'add TB_ESTOQUE.TRI_PDV_DT_UPD';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_ESTOQUE'
AND RDB$FIELD_NAME = 'TRI_PDV_DT_UPD' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_ESTOQUE ADD TRI_PDV_DT_UPD TIMESTAMP ;';

erro = 'create TB_ESTOQUE_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTOQUE_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTOQUE_TRIPDV_UPD_SYNC FOR TB_ESTOQUE INACTIVE AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_ESTOQUE SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE id_estoque = NEW.id_estoque and (TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP); END;';

erro = 'add TRI_PDV_SETUP.ULTIMA_SYNC';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TRI_PDV_SETUP'
AND RDB$FIELD_NAME = 'ULTIMA_SYNC' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_SETUP ADD ULTIMA_SYNC TIMESTAMP ;';

erro = 'create TB_ESTOQUE_TRI_PDV_DT_UPD_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_ESTOQUE_TRI_PDV_DT_UPD_IDX'))
then
execute statement 'CREATE INDEX TB_ESTOQUE_TRI_PDV_DT_UPD_IDX ON TB_ESTOQUE (TRI_PDV_DT_UPD) ;';

erro = 'add TB_EST_PRODUTO.TRI_PDV_DT_UPD';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_EST_PRODUTO'
AND RDB$FIELD_NAME = 'TRI_PDV_DT_UPD' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_EST_PRODUTO ADD TRI_PDV_DT_UPD TIMESTAMP ;';

erro = 'create TB_ESTPROD_TRI_PDV_DT_UPD_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_ESTPROD_TRI_PDV_DT_UPD_IDX'))
then
execute statement 'CREATE INDEX TB_ESTPROD_TRI_PDV_DT_UPD_IDX ON TB_EST_PRODUTO (TRI_PDV_DT_UPD) ;';

erro = 'create TB_ESTPROD_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTPROD_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTPROD_TRIPDV_UPD_SYNC FOR TB_EST_PRODUTO INACTIVE AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_EST_PRODUTO SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_IDENTIFICADOR = NEW.ID_IDENTIFICADOR and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP ) ; END;';

erro = 'add TB_EST_IDENTIFICADOR.TRI_PDV_DT_UPD';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_EST_IDENTIFICADOR'
AND RDB$FIELD_NAME = 'TRI_PDV_DT_UPD' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_EST_IDENTIFICADOR ADD TRI_PDV_DT_UPD TIMESTAMP ;';

erro = 'create TB_ESTIDENT_TRI_PDV_DT_UPD_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_ESTIDENT_TRI_PDV_DT_UPD_IDX'))
then
execute statement 'CREATE INDEX TB_ESTIDENT_TRI_PDV_DT_UPD_IDX ON TB_EST_IDENTIFICADOR (TRI_PDV_DT_UPD) ;';

erro = 'create TB_ESTIDENT_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTIDENT_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTIDENT_TRIPDV_UPD_SYNC FOR TB_EST_IDENTIFICADOR INACTIVE AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_EST_IDENTIFICADOR SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_IDENTIFICADOR = NEW.ID_IDENTIFICADOR AND ID_ESTOQUE = NEW.ID_ESTOQUE and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP ) ; END;';

erro = 'add TB_CLIENTE.TRI_PDV_DT_UPD';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_CLIENTE'
AND RDB$FIELD_NAME = 'TRI_PDV_DT_UPD' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_CLIENTE ADD TRI_PDV_DT_UPD TIMESTAMP ;';

erro = 'create TB_CLIENTE_TRI_PDV_DT_UPD_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_CLIENTE_TRI_PDV_DT_UPD_IDX'))
then
execute statement 'CREATE INDEX TB_CLIENTE_TRI_PDV_DT_UPD_IDX ON TB_CLIENTE (TRI_PDV_DT_UPD) ;';

erro = 'create TB_CLIENTE_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CLIENTE_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_CLIENTE_TRIPDV_UPD_SYNC FOR TB_CLIENTE AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_CLIENTE SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_CLIENTE = NEW.ID_CLIENTE and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP ) ; END;';

erro = 'add TB_TAXA_UF.TRI_PDV_DT_UPD';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_TAXA_UF'
AND RDB$FIELD_NAME = 'TRI_PDV_DT_UPD' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_TAXA_UF ADD TRI_PDV_DT_UPD TIMESTAMP ;';

erro = 'create TB_TAXA_UF_TRI_PDV_DT_UPD_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_TAXA_UF_TRI_PDV_DT_UPD_IDX'))
then
execute statement 'CREATE INDEX TB_TAXA_UF_TRI_PDV_DT_UPD_IDX ON TB_TAXA_UF (TRI_PDV_DT_UPD) ;';

erro = 'create TB_TAXA_UF_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TAXA_UF_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_TAXA_UF_TRIPDV_UPD_SYNC FOR TB_TAXA_UF AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_TAXA_UF SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_CTI = NEW.ID_CTI and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP ) ; END;';

erro = 'add TRI_PDV_OPER.TRI_PDV_DT_UPD';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TRI_PDV_OPER'
AND RDB$FIELD_NAME = 'TRI_PDV_DT_UPD' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_OPER ADD TRI_PDV_DT_UPD TIMESTAMP ;';

erro = 'create TB_OPER_TRI_PDV_DT_UPD_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_OPER_TRI_PDV_DT_UPD_IDX'))
then
execute statement 'CREATE INDEX TB_OPER_TRI_PDV_DT_UPD_IDX ON TRI_PDV_OPER (TRI_PDV_DT_UPD) ;';

erro = 'create TB_OPER_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_OPER_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_OPER_TRIPDV_UPD_SYNC FOR TRI_PDV_OPER AFTER INSERT OR UPDATE AS BEGIN UPDATE TRI_PDV_OPER SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_OPER = NEW.ID_OPER and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP ) ; END;';

erro = 'add TRI_PDV_CONFIG.TRI_PDV_DT_UPD';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TRI_PDV_CONFIG'
AND RDB$FIELD_NAME = 'TRI_PDV_DT_UPD' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_CONFIG ADD TRI_PDV_DT_UPD TIMESTAMP ;';

erro = 'create TB_CONFIG_TRI_PDV_DT_UPD_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_CONFIG_TRI_PDV_DT_UPD_IDX'))
then
execute statement 'CREATE INDEX TB_CONFIG_TRI_PDV_DT_UPD_IDX ON TRI_PDV_CONFIG (TRI_PDV_DT_UPD) ;';

erro = 'create TB_CONFIG_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CONFIG_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_CONFIG_TRIPDV_UPD_SYNC FOR TRI_PDV_CONFIG AFTER INSERT OR UPDATE AS BEGIN UPDATE TRI_PDV_CONFIG SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_MAC = NEW.ID_MAC and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP ) ; END;';

erro = 'add TB_CFOP_SIS.TRI_PDV_DT_UPD';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_CFOP_SIS'
AND RDB$FIELD_NAME = 'TRI_PDV_DT_UPD' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_CFOP_SIS ADD TRI_PDV_DT_UPD TIMESTAMP ;';

erro = 'create TB_CFOPSIS_TRI_PDV_DT_UPD_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_CFOPSIS_TRI_PDV_DT_UPD_IDX'))
then
execute statement 'CREATE INDEX TB_CFOPSIS_TRI_PDV_DT_UPD_IDX ON TB_CFOP_SIS (TRI_PDV_DT_UPD) ;';

erro = 'create TB_CFOPSIS_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CFOPSIS_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_CFOPSIS_TRIPDV_UPD_SYNC FOR TB_CFOP_SIS AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_CFOP_SIS SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE CFOP = NEW.CFOP and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP ) ; END;';

erro = 'add TB_FORNECEDOR.TRI_PDV_DT_UPD';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_FORNECEDOR'
AND RDB$FIELD_NAME = 'TRI_PDV_DT_UPD' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_FORNECEDOR ADD TRI_PDV_DT_UPD TIMESTAMP ;';

erro = 'create TB_FORNEC_TRI_PDV_DT_UPD_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_FORNEC_TRI_PDV_DT_UPD_IDX'))
then
execute statement 'CREATE INDEX TB_FORNEC_TRI_PDV_DT_UPD_IDX ON TB_FORNECEDOR (TRI_PDV_DT_UPD) ;';

erro = 'create TB_FORNEC_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FORNEC_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_FORNEC_TRIPDV_UPD_SYNC FOR TB_FORNECEDOR AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_FORNECEDOR SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_FORNEC = NEW.ID_FORNEC and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP ) ; END;';

erro = 'add TRI_PDV_USERS.TRI_PDV_DT_UPD';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TRI_PDV_USERS'
AND RDB$FIELD_NAME = 'TRI_PDV_DT_UPD' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_USERS ADD TRI_PDV_DT_UPD TIMESTAMP ;';

erro = 'create TB_TRIUSERS_TRI_PDV_DT_UPD_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_TRIUSERS_TRI_PDV_DT_UPD_IDX'))
then
execute statement 'CREATE INDEX TB_TRIUSERS_TRI_PDV_DT_UPD_IDX ON TRI_PDV_USERS (TRI_PDV_DT_UPD) ;';

erro = 'create TB_TRIUSERS_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TRIUSERS_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_TRIUSERS_TRIPDV_UPD_SYNC FOR TRI_PDV_USERS AFTER INSERT OR UPDATE AS BEGIN UPDATE TRI_PDV_USERS SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_USER = NEW.ID_USER and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP ) ; END;';

erro = 'add TRI_PDV_SETUP.ORIGEM';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TRI_PDV_SETUP'
AND RDB$FIELD_NAME = 'ORIGEM' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_SETUP ADD ORIGEM VARCHAR(8) ;';

erro = 'add TB_EMITENTE.TEXTO_COBRANCA_RODAPE';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_EMITENTE'
AND RDB$FIELD_NAME = 'TEXTO_COBRANCA_RODAPE' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_EMITENTE ADD TEXTO_COBRANCA_RODAPE BLOB SUB_TYPE 1 CHARACTER SET WIN1252 COLLATE WIN_PTBR;';

erro = 'add TB_EMITENTE.TEXTO_COBRANCA_ASSUNTO';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_EMITENTE'
AND RDB$FIELD_NAME = 'TEXTO_COBRANCA_ASSUNTO' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_EMITENTE ADD TEXTO_COBRANCA_ASSUNTO BLOB SUB_TYPE 1 CHARACTER SET WIN1252 COLLATE WIN_PTBR;';

erro = 'add TB_ESTOQUE.QTD_ATACADO';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_ESTOQUE'
AND RDB$FIELD_NAME = 'QTD_ATACADO' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_ESTOQUE ADD QTD_ATACADO Numeric(18,4) ;';

erro = 'add TB_EST_PRODUTO.VLR_IPI';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_EST_PRODUTO'
AND RDB$FIELD_NAME = 'VLR_IPI' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_EST_PRODUTO ADD VLR_IPI Numeric(18,4) ;';

erro = 'add TB_EST_PRODUTO.CST_CFE';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_EST_PRODUTO'
AND RDB$FIELD_NAME = 'CST_CFE' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_EST_PRODUTO ADD CST_CFE Varchar(3) ;';

erro = 'add TB_EST_PRODUTO.CSOSN_CFE';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_EST_PRODUTO'
AND RDB$FIELD_NAME = 'CSOSN_CFE' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_EST_PRODUTO ADD CSOSN_CFE Varchar(3) ;';

erro = 'add TB_EST_PRODUTO.CONTROLA_LOTE_VENDA';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_EST_PRODUTO'
AND RDB$FIELD_NAME = 'CONTROLA_LOTE_VENDA' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_EST_PRODUTO ADD CONTROLA_LOTE_VENDA Char(1) DEFAULT ''N'' NOT NULL ;';

erro = 'add TB_EST_PRODUTO.BAIXA_LOTE_NFV';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_EST_PRODUTO'
AND RDB$FIELD_NAME = 'BAIXA_LOTE_NFV' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_EST_PRODUTO ADD BAIXA_LOTE_NFV Char(1) DEFAULT ''A'' ;';

erro = 'add TB_EST_PRODUTO.BAIXA_LOTE_PDV';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_EST_PRODUTO'
AND RDB$FIELD_NAME = 'BAIXA_LOTE_PDV' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_EST_PRODUTO ADD BAIXA_LOTE_PDV Char(1) DEFAULT ''A'' ;';

erro = 'add TB_IFS.NUM_CREDENCIAMENTO';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_IFS'
AND RDB$FIELD_NAME = 'NUM_CREDENCIAMENTO' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_IFS ADD NUM_CREDENCIAMENTO Varchar(30) ;';

erro = 'add TB_UNI_MEDIDA.UNIDADE_EX';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_UNI_MEDIDA'
AND RDB$FIELD_NAME = 'UNIDADE_EX' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_UNI_MEDIDA ADD UNIDADE_EX Varchar(6) ;';

erro = 'add TB_CONTA_RECEBER.DT_VENCTO_ORIG';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_CONTA_RECEBER'
AND RDB$FIELD_NAME = 'DT_VENCTO_ORIG' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_CONTA_RECEBER ADD DT_VENCTO_ORIG Date ;';

erro = 'add TB_EMITENTE.TRI_PDV_DT_UPD';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_EMITENTE'
AND RDB$FIELD_NAME = 'TRI_PDV_DT_UPD' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_EMITENTE ADD TRI_PDV_DT_UPD TIMESTAMP ;';

erro = 'create TB_EMITENTE_TRI_PDV_DT_UPD_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_EMITENTE_TRI_PDV_DT_UPD_IDX'))
then
execute statement 'CREATE INDEX TB_EMITENTE_TRI_PDV_DT_UPD_IDX ON TB_EMITENTE (TRI_PDV_DT_UPD) ;';

erro = 'create TB_EMITENTE_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_EMITENTE_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_EMITENTE_TRIPDV_UPD_SYNC FOR TB_EMITENTE AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_EMITENTE SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE CNPJ = NEW.CNPJ and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP ) ; END;';

erro = 'add TB_IFS.TRI_PDV_DT_UPD';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_IFS'
AND RDB$FIELD_NAME = 'TRI_PDV_DT_UPD' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_IFS ADD TRI_PDV_DT_UPD TIMESTAMP ;';

erro = 'create TB_IFS_TRI_PDV_DT_UPD_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_IFS_TRI_PDV_DT_UPD_IDX'))
then
execute statement 'CREATE INDEX TB_IFS_TRI_PDV_DT_UPD_IDX ON TB_IFS (TRI_PDV_DT_UPD) ;';

erro = 'create TB_IFS_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_IFS_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_IFS_TRIPDV_UPD_SYNC FOR TB_IFS AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_IFS SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_IFS = NEW.ID_IFS and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP ) ; END;';

erro = 'add TB_EST_GRUPO.TRI_PDV_DT_UPD';

IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_EST_GRUPO'
AND RDB$FIELD_NAME = 'TRI_PDV_DT_UPD' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_EST_GRUPO ADD TRI_PDV_DT_UPD TIMESTAMP ;';

erro = 'create TB_GRUPO_TRI_PDV_DT_UPD_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_GRUPO_TRI_PDV_DT_UPD_IDX'))
then
execute statement 'CREATE INDEX TB_GRUPO_TRI_PDV_DT_UPD_IDX ON TB_EST_GRUPO (TRI_PDV_DT_UPD) ;';

erro = 'create TB_GRUPO_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_GRUPO_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_GRUPO_TRIPDV_UPD_SYNC FOR TB_EST_GRUPO AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_EST_GRUPO SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_GRUPO = NEW.ID_GRUPO and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP ) ; END;';

erro = 'add TB_FORMA_PAGTO_SIS.TRI_PDV_DT_UPD';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_FORMA_PAGTO_SIS'
AND RDB$FIELD_NAME = 'TRI_PDV_DT_UPD' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_FORMA_PAGTO_SIS ADD TRI_PDV_DT_UPD TIMESTAMP ;';

erro = 'create TB_FMAPGTO_TRI_PDV_DT_UPD_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_FMAPGTO_TRI_PDV_DT_UPD_IDX'))
then
execute statement 'CREATE INDEX TB_FMAPGTO_TRI_PDV_DT_UPD_IDX ON TB_FORMA_PAGTO_SIS (TRI_PDV_DT_UPD) ;';

erro = 'create TB_FMAPGTO_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTO_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_FMAPGTO_TRIPDV_UPD_SYNC FOR TB_FORMA_PAGTO_SIS AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_FORMA_PAGTO_SIS SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_FMAPGTO = NEW.ID_FMAPGTO and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP ) ; END;';

erro = 'add TB_PARCELAMENTO.TRI_PDV_DT_UPD';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_PARCELAMENTO'
AND RDB$FIELD_NAME = 'TRI_PDV_DT_UPD' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_PARCELAMENTO ADD TRI_PDV_DT_UPD TIMESTAMP ;';

erro = 'create TB_PARCELA_TRI_PDV_DT_UPD_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_PARCELA_TRI_PDV_DT_UPD_IDX'))
then
execute statement 'CREATE INDEX TB_PARCELA_TRI_PDV_DT_UPD_IDX ON TB_PARCELAMENTO (TRI_PDV_DT_UPD) ;';

erro = 'create TB_PARCELA_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_PARCELA_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_PARCELA_TRIPDV_UPD_SYNC FOR TB_PARCELAMENTO AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_PARCELAMENTO SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_PARCELA = NEW.ID_PARCELA and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP ) ; END;';

erro = 'add TRI_PDV_FECHAMENTOS.SYNCED';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TRI_PDV_FECHAMENTOS'
AND RDB$FIELD_NAME = 'SYNCED' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_FECHAMENTOS ADD SYNCED SMALLINT;';
erro = 'create TRI_PDV_FECH_SYNCED_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_FECH_SYNCED_IDX'))
then
execute statement 'CREATE INDEX TRI_PDV_FECH_SYNCED_IDX ON TRI_PDV_FECHAMENTOS (SYNCED) ;';

erro = 'add TRI_PDV_SETUP.DESC_MAX_OP';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TRI_PDV_SETUP'
AND RDB$FIELD_NAME = 'DESC_MAX_OP' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_SETUP ADD DESC_MAX_OP DOUBLE PRECISION DEFAULT 0 NOT NULL;';

erro = 'add TB_CIDADE_SIS.CODIGO_SIAFI';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_CIDADE_SIS'
AND RDB$FIELD_NAME = 'CODIGO_SIAFI' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_CIDADE_SIS ADD CODIGO_SIAFI VARCHAR(4);';

erro = 'add TB_CIDADE_SIS.CODIGO_SEDETEC';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_CIDADE_SIS'
AND RDB$FIELD_NAME = 'CODIGO_SEDETEC' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_CIDADE_SIS ADD CODIGO_SEDETEC VARCHAR(7);';

erro = 'add TB_EST_COMPOSICAO.TRI_PDV_DT_UPD';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TB_EST_COMPOSICAO'
AND RDB$FIELD_NAME = 'TRI_PDV_DT_UPD' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_EST_COMPOSICAO ADD TRI_PDV_DT_UPD TIMESTAMP ;';

erro = 'create TB_ESTCOMP_TRI_PDV_DT_UPD_IDX';
if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_ESTCOMP_TRI_PDV_DT_UPD_IDX'))
then
execute statement 'CREATE INDEX TB_ESTCOMP_TRI_PDV_DT_UPD_IDX ON TB_EST_COMPOSICAO (TRI_PDV_DT_UPD) ;';

erro = 'create TB_ESTCOMP_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMP_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTCOMP_TRIPDV_UPD_SYNC FOR TB_EST_COMPOSICAO AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_EST_COMPOSICAO SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_COMPOSICAO = NEW.ID_COMPOSICAO and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP ) ; END;';

erro = 'create TB_ESTCOMPITEM_TRIPDV_UPD_SYNC';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMPITEM_TRIPDV_UPD_SYNC'))
then
EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTCOMPITEM_TRIPDV_UPD_SYNC FOR TB_EST_COMP_ITEM AFTER INSERT OR UPDATE AS BEGIN UPDATE TB_EST_COMPOSICAO SET TRI_PDV_DT_UPD = CURRENT_TIMESTAMP WHERE ID_COMPOSICAO = NEW.ID_COMPOSICAO and ( TRI_PDV_DT_UPD IS null OR TRI_PDV_DT_UPD &lt;&gt; CURRENT_TIMESTAMP ) ; END;';


erro = 'deu certo';

SUSPEND;
WHEN ANY DO BEGIN
END
END;</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="B_ATUALIZATABELAS2" Modifier="Public" Name="B_ATUALIZATABELAS2" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy4" UserSourceName="B_ATUALIZATABELAS2">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>
						CREATE OR ALTER PROCEDURE SP_TRI_ATUALIZATABELAS2
						RETURNS( erro VARCHAR( 64 )) AS BEGIN

						erro = 'create trigger TRI_MAIT_PEDIDO_BI';
						if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TRI_MAIT_PEDIDO_BI'))
						then
						EXECUTE STATEMENT 'CREATE TRIGGER TRI_MAIT_PEDIDO_BI FOR TRI_MAIT_PEDIDO BEFORE INSERT AS BEGIN IF (NEW.ID_MAIT_PEDIDO = 0 OR NEW.ID_MAIT_PEDIDO IS NULL ) THEN NEW.ID_MAIT_PEDIDO = GEN_ID ( GEN_MAIT_PEDIDO_ID , 1 ) ; END';

						erro = 'create FK TRI_MAIT_PEDIDO_PDV_USERS_FK';
						if (not exists(select 1 from RDB$RELATION_CONSTRAINTS where RDB$CONSTRAINT_NAME = 'TRI_MAIT_PEDIDO_PDV_USERS_FK'))
						then
						EXECUTE STATEMENT 'ALTER TABLE TRI_MAIT_PEDIDO ADD CONSTRAINT TRI_MAIT_PEDIDO_PDV_USERS_FK FOREIGN KEY (ID_USER) REFERENCES TRI_PDV_USERS(ID_USER);';

						erro = 'create trigger TRI_MAIT_PEDIDO_ITEM_BI';
						if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TRI_MAIT_PEDIDO_ITEM_BI'))
						then
						EXECUTE STATEMENT 'CREATE TRIGGER TRI_MAIT_PEDIDO_ITEM_BI FOR TRI_MAIT_PEDIDO_ITEM BEFORE INSERT AS BEGIN IF (NEW.ID_MAIT_PEDIDO_ITEM = 0 OR NEW.ID_MAIT_PEDIDO_ITEM IS NULL ) THEN NEW.ID_MAIT_PEDIDO_ITEM = GEN_ID ( GEN_TRI_MAIT_PED_ITEM_ID , 1 ) ; END';

						erro = 'alter table tri_mait_pedido_item add observacao';
						IF( NOT EXISTS( SELECT 1
						FROM RDB$RELATION_FIELDS
						WHERE RDB$RELATION_NAME = 'TRI_MAIT_PEDIDO_ITEM'
						AND RDB$FIELD_NAME = 'OBSERVACAO' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_MAIT_PEDIDO_ITEM ADD OBSERVACAO BLOB SUB_TYPE 1;';

						erro = 'alter table tri_pdv_setup add mait_max_mesas';
						IF( NOT EXISTS( SELECT 1
						FROM RDB$RELATION_FIELDS
						WHERE RDB$RELATION_NAME = 'TRI_PDV_SETUP'
						AND RDB$FIELD_NAME = 'MAIT_MAX_MESAS' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_SETUP ADD MAIT_MAX_MESAS SMALLINT;';

						erro = 'create TB_EST_PRODUTO_REFERENCIA_IDX';
						if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_EST_PRODUTO_REFERENCIA_IDX'))
						then
						execute statement 'CREATE INDEX TB_EST_PRODUTO_REFERENCIA_IDX ON TB_EST_PRODUTO (REFERENCIA);';

						erro = 'alter table tri_pdv_nsu add vlr_oper';
						IF( NOT EXISTS( SELECT 1
						FROM RDB$RELATION_FIELDS
						WHERE RDB$RELATION_NAME = 'TRI_PDV_NSU'
						AND RDB$FIELD_NAME = 'VLR_OPER' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_NSU ADD VLR_OPER NUMERIC(18,4);';

						erro = 'alter table TRI_MAIT_PEDIDO_ITEM add TS_EMISSAO';
						IF( NOT EXISTS( SELECT 1
						FROM RDB$RELATION_FIELDS
						WHERE RDB$RELATION_NAME = 'TRI_MAIT_PEDIDO_ITEM'
						AND RDB$FIELD_NAME = 'TS_EMISSAO' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_MAIT_PEDIDO_ITEM ADD TS_EMISSAO TIMESTAMP DEFAULT CURRENT_TIMESTAMP;';

						erro = 'alter table TRI_MAIT_PEDIDO_ITEM add STATUS';
						IF( NOT EXISTS( SELECT 1
						FROM RDB$RELATION_FIELDS
						WHERE RDB$RELATION_NAME = 'TRI_MAIT_PEDIDO_ITEM'
						AND RDB$FIELD_NAME = 'STATUS' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_MAIT_PEDIDO_ITEM ADD STATUS VARCHAR(1) DEFAULT ''P'' NOT NULL;';

						erro = 'create TRI_PDV_OPR_ID_CX_CURT_IDX';
						if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_OPR_ID_CX_CURT_IDX'))
						then
						execute statement 'CREATE INDEX TRI_PDV_OPR_ID_CX_CURT_IDX ON TRI_PDV_OPER (ID_CAIXA,CURRENTTIME);';

						erro = 'alter table TRI_PDV_CONFIG add LOTSA STUFF';
						IF ( NOT EXISTS (SELECT 1 FROM RDB$RELATION_FIELDS WHERE RDB$RELATION_NAME = 'TRI_PDV_CONFIG' AND RDB$FIELD_NAME = 'MODELO_SAT'))
						then begin
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD MODELO_SAT INTEGER;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD SATSERVIDOR CHAR(1);';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD IMPRESSORA_USB VARCHAR(64);';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD IMPRESSORA_USB_PED VARCHAR(64);';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD SAT_CODATIV VARCHAR(64);';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD SIGN_AC BLOB SUB_TYPE 1;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD SAT_USADO CHAR(1);';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD ECF_ATIVA CHAR(1);';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD ECF_PORTA VARCHAR(5);';
						end

						erro = 'create TRI_PDV_CONFIG_NO_CAIXA_UIDX';
						if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_CONFIG_NO_CAIXA_UIDX'))
						then
						execute statement 'CREATE INDEX TRI_PDV_CONFIG_NO_CAIXA_UIDX ON TRI_PDV_CONFIG (NO_CAIXA);';

						erro = 'add TB_NFVENDA.SYNCED';
						IF( NOT EXISTS( SELECT 1
						FROM RDB$RELATION_FIELDS
						WHERE RDB$RELATION_NAME = 'TB_NFVENDA'
						AND RDB$FIELD_NAME = 'SYNCED' )) THEN EXECUTE STATEMENT 'ALTER TABLE TB_NFVENDA ADD SYNCED SMALLINT ;';


						erro = 'create TB_ESTOQUE_TRI_PDV_DT_UPD_IDX';
						if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_ESTOQUE_TRI_PDV_DT_UPD_IDX'))
						then
						execute statement 'CREATE INDEX TB_ESTOQUE_TRI_PDV_DT_UPD_IDX ON TB_ESTOQUE (TRI_PDV_DT_UPD) ;';

						erro = 'create TB_TRI_NFVENDA_STATUS_IDX';
						if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_TRI_NFVENDA_STATUS_IDX'))
						then
						execute statement 'CREATE INDEX TB_TRI_NFVENDA_STATUS_IDX ON TB_NFVENDA (STATUS);';

						erro = 'create TB_NFVENDA_SYNCED_IDX';
						if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_NFVENDA_SYNCED_IDX'))
						then
						execute statement 'CREATE INDEX TB_NFVENDA_SYNCED_IDX ON TB_NFVENDA (SYNCED);';

						erro = 'create TB_TRI_NFVENDA_NF_NUMERO_IDX';
						if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_TRI_NFVENDA_NF_NUMERO_IDX'))
						then
						execute statement 'CREATE INDEX TB_TRI_NFVENDA_NF_NUMERO_IDX ON TB_NFVENDA (NF_NUMERO);';

						erro = 'create TB_TRI_NFVENDA_NF_SERIE_IDX';
						if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_TRI_NFVENDA_NF_SERIE_IDX'))
						then
						execute statement 'CREATE INDEX TB_TRI_NFVENDA_NF_SERIE_IDX ON TB_NFVENDA (NF_SERIE);';

						erro = 'create TB_TRI_NFVENDA_DT_SAIDA_IDX';
						if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_TRI_NFVENDA_DT_SAIDA_IDX'))
						then
						execute statement 'CREATE INDEX TB_TRI_NFVENDA_DT_SAIDA_IDX ON TB_NFVENDA (DT_SAIDA);';

						erro = 'create TB_TRI_NFVENDA_HR_SAIDA_IDX';
						if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_TRI_NFVENDA_HR_SAIDA_IDX'))
						then
						execute statement 'CREATE INDEX TB_TRI_NFVENDA_HR_SAIDA_IDX ON TB_NFVENDA (HR_SAIDA);';

						erro = 'create TB_TRI_MOVDIARIO_SYNCED_IDX';
						if (not exists (select 1 from RDB$INDICES where rdb$index_name = 'TB_TRI_MOVDIARIO_SYNCED_IDX'))
						then
						execute statement 'CREATE INDEX TB_TRI_MOVDIARIO_SYNCED_IDX ON TB_MOVDIARIO (SYNCED);';

						erro = 'alter table tri_pdv_setup add usa_recargas';
						IF( NOT EXISTS( SELECT 1
						FROM RDB$RELATION_FIELDS
						WHERE RDB$RELATION_NAME = 'TRI_PDV_SETUP'
						AND RDB$FIELD_NAME = 'USA_RECARGAS' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_SETUP ADD USA_RECARGAS CHAR(1) DEFAULT ''N'' NOT NULL;';

						erro = 'alter table tri_pdv_sansun add synched';
						IF( NOT EXISTS( SELECT 1
						FROM RDB$RELATION_FIELDS
						WHERE RDB$RELATION_NAME = 'TRI_PDV_SANSUP'
						AND RDB$FIELD_NAME = 'SYNCHED' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_SANSUP ADD SYNCHED CHAR(1) DEFAULT ''N'' NOT NULL;';

						erro = 'alter table tri_pdv_config add pergunta_whats';
						IF( NOT EXISTS( SELECT 1
						FROM RDB$RELATION_FIELDS
						WHERE RDB$RELATION_NAME = 'TRI_PDV_CONFIG'
						AND RDB$FIELD_NAME = 'PERGUNTA_WHATS' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_CONFIG ADD PERGUNTA_WHATS INTEGER DEFAULT 0 NOT NULL;';

						erro = 'alter table TRI_PDV_CONFIG add MORE CONFIGS';
						IF ( NOT EXISTS (SELECT 1 FROM RDB$RELATION_FIELDS WHERE RDB$RELATION_NAME = 'TRI_PDV_CONFIG' AND RDB$FIELD_NAME = 'USATEF'))
						then begin
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD USATEF CHAR(1) DEFAULT ''N'' NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD TEFIP VARCHAR(15);';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD TEFNUMLOJA VARCHAR(8);';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD TEFNUMTERMINAL VARCHAR(8);';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD TEFPEDECPFPELOPINPAD CHAR(1);';
						execute statement 'ALTER TABLE TRI_PDV_SETUP ADD DETALHADESCONTO CHAR(1) DEFAULT ''N'' NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_SETUP ADD COD10PORCENTO INTEGER;';
						execute statement 'ALTER TABLE TRI_PDV_SETUP ADD MODOBAR CHAR(1) DEFAULT ''N'' NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_SETUP ADD TIPO_LICENCA INT;';
						execute statement 'ALTER TABLE TRI_PDV_SETUP ADD USA_COMANDA CHAR(1) DEFAULT ''N'' NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_SETUP ADD PEDESENHACANCEL CHAR(1) DEFAULT ''S'' NOT NULL;';
						end

						erro = 'alter table TRI_PDV_CONFIG add EVEN MORE CONFIGS';
						IF ( NOT EXISTS (SELECT 1 FROM RDB$RELATION_FIELDS WHERE RDB$RELATION_NAME = 'TRI_PDV_CONFIG' AND RDB$FIELD_NAME = 'BALPORTA'))
						then begin
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD BALPORTA SMALLINT DEFAULT -1 NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD BALBITS SMALLINT DEFAULT -1 NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD BALBAUD INTEGER DEFAULT -1 NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD BALPARITY SMALLINT DEFAULT -1 NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD BALMODELO SMALLINT DEFAULT 0 NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD ACFILLPREFIX SMALLINT DEFAULT 3 NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD ACFILLMODE SMALLINT DEFAULT 1 NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD ACREFERENCIA SMALLINT DEFAULT 0 NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD SYSCOMISSAO SMALLINT DEFAULT 0 NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD SATSERVTIMEOUT INTEGER DEFAULT 10 NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD SATLIFESIGNINTERVAL INTEGER DEFAULT 1 NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD ACFILLDELAY INTEGER DEFAULT 3000 NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD SYSEMITECOMPROVANTE SMALLINT DEFAULT 0 NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD SYSPERGUNTAWHATS SMALLINT DEFAULT 0 NOT NULL;';
						execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD SYSPARCELA SMALLINT DEFAULT 0 NOT NULL;';
                                                                                                                end

                                                                                                                erro = 'alter table TRI_PDV_CONFIG add CONFIGS MAQUININHA';
                                                                                                                IF ( NOT EXISTS (SELECT 1 FROM RDB$RELATION_FIELDS WHERE RDB$RELATION_NAME = 'TRI_PDV_CONFIG' AND RDB$FIELD_NAME = 'INFORMA_MAQUININHA'))
						then begin
                                                                                                                execute statement 'ALTER TABLE TRI_PDV_CONFIG ADD INFORMA_MAQUININHA CHAR(1) DEFAULT ''N'' NOT NULL;';
						end
                                                                                                              
						erro = 'delete UK TRI_PDV_DEVOL_PK';
						if (exists (select 1 from RDB$INDICES where rdb$index_name = 'TRI_PDV_DEVOL_PK'))
						then
						execute statement 'ALTER TABLE TRI_PDV_DEVOL DROP CONSTRAINT TRI_PDV_DEVOL_PK';

						erro = 'create gen TRI_PDV_DEVOL_ID';
						if (NOT exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= 'TRI_PDV_DEVOL_ID'))
						then
						EXECUTE STATEMENT 'CREATE GENERATOR TRI_PDV_DEVOL_ID;';

						erro = 'create trigger DEVOL_ID_NEW';
						if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'DEVOL_ID_NEW'))
						then
						EXECUTE STATEMENT 'CREATE TRIGGER DEVOL_ID_NEW FOR TRI_PDV_DEVOL BEFORE INSERT AS BEGIN IF (NEW.ID_DEVOLUCAO = -1) THEN NEW.ID_DEVOLUCAO = GEN_ID(TRI_PDV_DEVOL_ID,1); END';


						erro = 'deu certo';

						SUSPEND;
						WHEN ANY DO BEGIN
						END
						END;</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="B_DSBL_SERV_TRGGR_ON_PDV" Modifier="Public" Name="B_DSBL_SERV_TRGGR_ON_PDV" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy5" UserSourceName="B_DSBL_SERV_TRGGR_ON_PDV">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>CREATE OR ALTER PROCEDURE SP_TRI_DSBL_SERV_TRGGR_ON_PDV
RETURNS (
erro VARCHAR(64)
)
AS
BEGIN

erro = 'disable tb_estoque_aux_upd_sync_ins';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTOQUE_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER tb_estoque_aux_upd_sync_ins INACTIVE;';

erro = 'disable tb_estoque_aux_upd_sync_upd';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTOQUE_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable tb_estoque_aux_upd_sync_del';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTOQUE_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable tb_estidentif_aux_upd_sync_ins';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTIDENTIF_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTIDENTIF_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable tb_estidentif_aux_upd_sync_upd';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTIDENTIF_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTIDENTIF_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable tb_estidentif_aux_upd_sync_del';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTIDENTIF_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTIDENTIF_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable tb_estprod_aux_upd_sync_ins';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTPROD_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTPROD_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable tb_estprod_aux_upd_sync_upd';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTPROD_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTPROD_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable tb_estprod_aux_upd_sync_del';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTPROD_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTPROD_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TB_FORNEC_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FORNEC_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FORNEC_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TB_FORNEC_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FORNEC_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FORNEC_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_FORNEC_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FORNEC_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FORNEC_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TB_ESTGRUPO_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTGRUPO_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TB_ESTGRUPO_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTGRUPO_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_ESTGRUPO_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTGRUPO_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TB_CLIENTE_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CLIENTE_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_CLIENTE_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TB_CLIENTE_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CLIENTE_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_CLIENTE_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_CLIENTE_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CLIENTE_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_CLIENTE_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TB_FUNC_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FUNC_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FUNC_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TB_FUNC_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FUNC_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FUNC_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_FUNC_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FUNC_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FUNC_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TB_UNIMED_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_UNIMED_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_UNIMED_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TB_UNIMED_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_UNIMED_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_UNIMED_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_UNIMED_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_UNIMED_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_UNIMED_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TB_FUNCPAPEL_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FUNCPAPEL_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FUNCPAPEL_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TB_FUNCPAPEL_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FUNCPAPEL_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FUNCPAPEL_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TB_TRIMETODOS_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TRIMETODOS_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_TRIMETODOS_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_EMITENTE_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_EMITENTE_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_EMITENTE_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_TRIUSERS_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TRIUSERS_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TB_TRIUSERS_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TRIUSERS_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_TRIUSERS_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TRIUSERS_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TB_TAXAUF_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TAXAUF_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_TAXAUF_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TB_TAXAUF_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TAXAUF_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_TAXAUF_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_TAXAUF_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TAXAUF_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_TAXAUF_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TB_CFOPSIS_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CFOPSIS_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TB_CFOPSIS_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CFOPSIS_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_CFOPSIS_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CFOPSIS_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TB_FMAPGTOSIS_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTOSIS_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TB_PARCELA_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_PARCELA_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_PARCELA_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TB_PARCELA_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_PARCELA_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_PARCELA_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_PARCELA_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_PARCELA_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_PARCELA_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TB_ESTCOMP_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMP_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TB_ESTCOMP_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMP_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_ESTCOMP_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMP_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TB_ESTCOMPITEM_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMPITEM_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TB_IFS_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_IFS_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_IFS_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TB_IFS_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_IFS_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_IFS_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_IFS_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_IFS_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_IFS_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TRI_PDV_CONFIG_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TRI_PDV_CONFIG_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TB_NATOPER_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_NATOPER_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_NATOPER_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TB_NATOPER_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_NATOPER_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_NATOPER_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_NATOPER_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_NATOPER_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_NATOPER_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'disable TB_FMAPGTONFCE_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTONFCE_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_INS INACTIVE;';

erro = 'disable TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD INACTIVE;';

erro = 'disable TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL INACTIVE;';

erro = 'deu certo';
SUSPEND;
WHEN ANY DO
BEGIN

END
END;
</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="B_ENABLE_SERV_TRIGGERS" Modifier="Public" Name="B_ENABLE_SERV_TRIGGERS" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy6" UserSourceName="B_ENABLE_SERV_TRIGGERS">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>CREATE OR ALTER PROCEDURE SP_TRI_ENABLE_SERV_TRIGGERS
RETURNS (
erro VARCHAR(64)
)
AS
BEGIN

erro = 'enable tb_estoque_aux_upd_sync_ins';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTOQUE_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER tb_estoque_aux_upd_sync_ins ACTIVE;';

erro = 'enable tb_estoque_aux_upd_sync_upd';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTOQUE_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable tb_estoque_aux_upd_sync_del';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTOQUE_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable tb_estidentif_aux_upd_sync_ins';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTIDENTIF_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTIDENTIF_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable tb_estidentif_aux_upd_sync_upd';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTIDENTIF_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTIDENTIF_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable tb_estidentif_aux_upd_sync_del';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTIDENTIF_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTIDENTIF_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable tb_estprod_aux_upd_sync_ins';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTPROD_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTPROD_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable tb_estprod_aux_upd_sync_upd';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTPROD_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTPROD_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable tb_estprod_aux_upd_sync_del';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTPROD_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTPROD_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TB_FORNEC_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FORNEC_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FORNEC_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TB_FORNEC_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FORNEC_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FORNEC_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_FORNEC_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FORNEC_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FORNEC_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TB_ESTGRUPO_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTGRUPO_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TB_ESTGRUPO_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTGRUPO_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_ESTGRUPO_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTGRUPO_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TB_CLIENTE_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CLIENTE_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_CLIENTE_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TB_CLIENTE_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CLIENTE_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_CLIENTE_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_CLIENTE_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CLIENTE_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_CLIENTE_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TB_FUNC_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FUNC_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FUNC_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TB_FUNC_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FUNC_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FUNC_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_FUNC_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FUNC_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FUNC_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TB_UNIMED_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_UNIMED_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_UNIMED_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TB_UNIMED_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_UNIMED_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_UNIMED_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_UNIMED_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_UNIMED_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_UNIMED_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TB_FUNCPAPEL_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FUNCPAPEL_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FUNCPAPEL_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TB_FUNCPAPEL_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FUNCPAPEL_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FUNCPAPEL_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TB_TRIMETODOS_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TRIMETODOS_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_TRIMETODOS_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_EMITENTE_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_EMITENTE_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_EMITENTE_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_TRIUSERS_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TRIUSERS_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TB_TRIUSERS_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TRIUSERS_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_TRIUSERS_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TRIUSERS_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TB_TAXAUF_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TAXAUF_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_TAXAUF_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TB_TAXAUF_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TAXAUF_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_TAXAUF_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_TAXAUF_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TAXAUF_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_TAXAUF_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TB_CFOPSIS_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CFOPSIS_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TB_CFOPSIS_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CFOPSIS_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_CFOPSIS_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CFOPSIS_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TB_FMAPGTOSIS_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTOSIS_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TB_PARCELA_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_PARCELA_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_PARCELA_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TB_PARCELA_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_PARCELA_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_PARCELA_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_PARCELA_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_PARCELA_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_PARCELA_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TB_ESTCOMP_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMP_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TB_ESTCOMP_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMP_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_ESTCOMP_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMP_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TB_ESTCOMPITEM_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMPITEM_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TB_IFS_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_IFS_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_IFS_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TB_IFS_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_IFS_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_IFS_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_IFS_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_IFS_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_IFS_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TRI_PDV_CONFIG_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TRI_PDV_CONFIG_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TB_NATOPER_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_NATOPER_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_NATOPER_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TB_NATOPER_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_NATOPER_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_NATOPER_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_NATOPER_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_NATOPER_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_NATOPER_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'enable TB_FMAPGTONFCE_AUX_UPD_SYNC_INS';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTONFCE_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_INS ACTIVE;';

erro = 'enable TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD ACTIVE;';

erro = 'enable TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL';
if (not exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'ALTER TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL ACTIVE;';

erro = 'deu certo';
SUSPEND;
WHEN ANY DO
BEGIN

END
END;
</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="B_GERATRIGGERS_AUX_SYNC" Modifier="Public" Name="B_GERATRIGGERS_AUX_SYNC" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy7" UserSourceName="B_GERATRIGGERS_AUX_SYNC">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>
						CREATE OR ALTER PROCEDURE SP_TRI_GERATRIGGERS_AUX_SYNC
						RETURNS (
						erro VARCHAR(64)
						)
						AS
						BEGIN

						erro = 'drop tb_estoque_aux_upd_sync_ins';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTOQUE_AUX_UPD_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_INS;';
						erro = 'create tb_estoque_aux_upd_sync_ins';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_INS FOR TB_ESTOQUE ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1), new.ID_ESTOQUE, ''TB_ESTOQUE'', ''I'', :VNUMCAIXA, CURRENT_TIMESTAMP); END END;';

						erro = 'drop tb_estoque_aux_upd_sync_upd';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTOQUE_AUX_UPD_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_UPD;';
						erro = 'create tb_estoque_aux_upd_sync_upd';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_UPD FOR TB_ESTOQUE ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN IF (old.ID_GRUPO IS DISTINCT FROM new.ID_GRUPO OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.STATUS IS DISTINCT FROM new.STATUS OR old.DT_CADAST IS DISTINCT FROM new.DT_CADAST OR old.HR_CADAST IS DISTINCT FROM new.HR_CADAST OR old.FRACIONADO IS DISTINCT FROM new.FRACIONADO OR old.PRC_VENDA IS DISTINCT FROM new.PRC_VENDA OR old.PRC_CUSTO IS DISTINCT FROM new.PRC_CUSTO OR old.ULT_VENDA IS DISTINCT FROM new.ULT_VENDA OR old.MARGEM_LB IS DISTINCT FROM new.MARGEM_LB OR old.POR_COMISSAO IS DISTINCT FROM new.POR_COMISSAO OR old.ULT_FORNEC IS DISTINCT FROM new.ULT_FORNEC OR old.GRADE_SERIE IS DISTINCT FROM new.GRADE_SERIE OR old.ID_TIPOITEM IS DISTINCT FROM new.ID_TIPOITEM OR old.ID_CTI IS DISTINCT FROM new.ID_CTI OR old.CST_PIS IS DISTINCT FROM new.CST_PIS OR old.CST_COFINS IS DISTINCT FROM new.CST_COFINS OR old.PIS IS DISTINCT FROM new.PIS OR old.COFINS IS DISTINCT FROM new.COFINS OR old.UNI_MEDIDA IS DISTINCT FROM new.UNI_MEDIDA OR old.MARGEM_PV IS DISTINCT FROM new.MARGEM_PV OR old.CFOP IS DISTINCT FROM new.CFOP OR old.OBSERVACAO IS DISTINCT FROM new.OBSERVACAO OR old.NAT_RECEITA IS DISTINCT FROM new.NAT_RECEITA OR old.CFOP_NF IS DISTINCT FROM new.CFOP_NF OR old.PRC_ATACADO IS DISTINCT FROM new.PRC_ATACADO OR old.ID_CTI_PART IS DISTINCT FROM new.ID_CTI_PART OR old.ID_CTI_FCP IS DISTINCT FROM new.ID_CTI_FCP OR old.QTD_ATACADO IS DISTINCT FROM new.QTD_ATACADO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ((SELECT COUNT (1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_ESTOQUE AND TABELA = ''TB_ESTOQUE'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1), old.ID_ESTOQUE, ''TB_ESTOQUE'', ''U'', :VNUMCAIXA, CURRENT_TIMESTAMP); END END END END;';

						erro = 'drop tb_estoque_aux_upd_sync_del';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTOQUE_AUX_UPD_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_DEL';
						erro = 'create tb_estoque_aux_upd_sync_del';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTOQUE_AUX_UPD_SYNC_DEL FOR TB_ESTOQUE ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1), old.ID_ESTOQUE, ''TB_ESTOQUE'', ''D'', :VNUMCAIXA, CURRENT_TIMESTAMP); END END;';

						erro = 'drop tb_estidentif_aux_upd_sync_ins';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTIDENTIF_AUX_UPD_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ESTIDENTIF_AUX_UPD_SYNC_INS;';
						erro = 'create tb_estidentif_aux_upd_sync_ins';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTIDENTIF_AUX_UPD_SYNC_INS FOR TB_EST_IDENTIFICADOR ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1), new.ID_IDENTIFICADOR, ''TB_EST_IDENTIFICADOR'', ''I'', :VNUMCAIXA, CURRENT_TIMESTAMP); END END;';

						erro = 'drop tb_estidentif_aux_upd_sync_upd';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTIDENTIF_AUX_UPD_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ESTIDENTIF_AUX_UPD_SYNC_UPD;';
						erro = 'create tb_estidentif_aux_upd_sync_upd';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTIDENTIF_AUX_UPD_SYNC_UPD FOR TB_EST_IDENTIFICADOR ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN IF (old.ID_ESTOQUE IS DISTINCT FROM new.ID_ESTOQUE OR old.CHAVE IS DISTINCT FROM new.CHAVE) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ((SELECT COUNT (1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_IDENTIFICADOR AND TABELA = ''TB_EST_IDENTIFICADOR'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1), old.ID_IDENTIFICADOR, ''TB_EST_IDENTIFICADOR'', ''U'', :VNUMCAIXA, CURRENT_TIMESTAMP); END END END END;';

						erro = 'drop tb_estidentif_aux_upd_sync_del';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTIDENTIF_AUX_UPD_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ESTIDENTIF_AUX_UPD_SYNC_DEL;';
						erro = 'create tb_estidentif_aux_upd_sync_del';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTIDENTIF_AUX_UPD_SYNC_DEL FOR TB_EST_IDENTIFICADOR ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1), old.ID_IDENTIFICADOR, ''TB_EST_IDENTIFICADOR'', ''D'', :VNUMCAIXA, CURRENT_TIMESTAMP); END END;';

						erro = 'drop tb_estprod_aux_upd_sync_ins';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTPROD_AUX_UPD_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ESTPROD_AUX_UPD_SYNC_INS;';
						erro = 'create tb_estprod_aux_upd_sync_ins';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTPROD_AUX_UPD_SYNC_INS FOR TB_EST_PRODUTO ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1), new.ID_IDENTIFICADOR, ''TB_EST_PRODUTO'', ''I'', :VNUMCAIXA, CURRENT_TIMESTAMP); END END;';

						erro = 'drop tb_estprod_aux_upd_sync_upd';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTPROD_AUX_UPD_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ESTPROD_AUX_UPD_SYNC_UPD;';
						erro = 'create tb_estprod_aux_upd_sync_upd';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTPROD_AUX_UPD_SYNC_UPD FOR TB_EST_PRODUTO ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.DESC_CMPL IS DISTINCT FROM new.DESC_CMPL OR old.COD_BARRA IS DISTINCT FROM new.COD_BARRA OR old.REFERENCIA IS DISTINCT FROM new.REFERENCIA OR old.QTD_ATUAL IS DISTINCT FROM new.QTD_ATUAL OR old.PESO IS DISTINCT FROM new.PESO OR old.IPI IS DISTINCT FROM new.IPI OR old.CF IS DISTINCT FROM new.CF OR old.IAT IS DISTINCT FROM new.IAT OR old.IPPT IS DISTINCT FROM new.IPPT OR old.COD_NCM IS DISTINCT FROM new.COD_NCM OR old.ID_NIVEL1 IS DISTINCT FROM new.ID_NIVEL1 OR old.ID_NIVEL2 IS DISTINCT FROM new.ID_NIVEL2 OR old.MVA IS DISTINCT FROM new.MVA OR old.CST_IPI IS DISTINCT FROM new.CST_IPI OR old.FOTO IS DISTINCT FROM new.FOTO OR old.CSOSN IS DISTINCT FROM new.CSOSN OR old.CSOSN_CFE IS DISTINCT FROM new.CSOSN_CFE OR old.ANP IS DISTINCT FROM new.ANP OR old.EXTIPI IS DISTINCT FROM new.EXTIPI OR old.CST IS DISTINCT FROM new.CST OR old.FCI IS DISTINCT FROM new.FCI OR old.COD_CEST IS DISTINCT FROM new.COD_CEST OR old.CENQ IS DISTINCT FROM new.CENQ OR old.VLR_IPI IS DISTINCT FROM new.VLR_IPI) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ((SELECT COUNT (1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_IDENTIFICADOR AND TABELA = ''TB_EST_PRODUTO'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , old.ID_IDENTIFICADOR , ''TB_EST_PRODUTO'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END END END;';

						erro = 'drop tb_estprod_aux_upd_sync_del';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTPROD_AUX_UPD_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ESTPROD_AUX_UPD_SYNC_DEL;';
						erro = 'create tb_estprod_aux_upd_sync_del';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTPROD_AUX_UPD_SYNC_DEL FOR TB_EST_PRODUTO ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1), old.ID_IDENTIFICADOR, ''TB_EST_PRODUTO'', ''D'', :VNUMCAIXA, CURRENT_TIMESTAMP); END END;';

						erro = 'drop tb_fornec_aux_upd_sync_ins';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FORNEC_AUX_UPD_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_FORNEC_AUX_UPD_SYNC_INS;';
						erro = 'create TB_FORNEC_AUX_UPD_SYNC_INS';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_FORNEC_AUX_UPD_SYNC_INS FOR TB_FORNECEDOR ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ ,ID_REG ,TABELA ,OPERACAO ,NO_CAIXA ,TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) ,new.ID_FORNEC ,''TB_FORNECEDOR'' ,''I'' ,:VNUMCAIXA ,CURRENT_TIMESTAMP); END END;';

						erro = 'drop TB_FORNEC_AUX_UPD_SYNC_UPD';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FORNEC_AUX_UPD_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_FORNEC_AUX_UPD_SYNC_UPD;';
						erro = 'create TB_FORNEC_AUX_UPD_SYNC_UPD';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_FORNEC_AUX_UPD_SYNC_UPD FOR TB_FORNECEDOR ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.NOME IS DISTINCT FROM new.NOME OR old.NOME_FANTA IS DISTINCT FROM new.NOME_FANTA OR old.CNPJ IS DISTINCT FROM new.CNPJ OR old.INSC_ESTAD IS DISTINCT FROM new.INSC_ESTAD OR old.INSC_MUNIC IS DISTINCT FROM new.INSC_MUNIC OR old.END_CEP IS DISTINCT FROM new.END_CEP OR old.END_TIPO IS DISTINCT FROM new.END_TIPO OR old.END_LOGRAD IS DISTINCT FROM new.END_LOGRAD OR old.END_BAIRRO IS DISTINCT FROM new.END_BAIRRO OR old.END_NUMERO IS DISTINCT FROM new.END_NUMERO OR old.END_COMPLE IS DISTINCT FROM new.END_COMPLE OR old.DDD_COMER IS DISTINCT FROM new.DDD_COMER OR old.FONE_COMER IS DISTINCT FROM new.FONE_COMER OR old.FONE_0800 IS DISTINCT FROM new.FONE_0800 OR old.DDD_CELUL IS DISTINCT FROM new.DDD_CELUL OR old.FONE_CELUL IS DISTINCT FROM new.FONE_CELUL OR old.DDD_FAX IS DISTINCT FROM new.DDD_FAX OR old.FONE_FAX IS DISTINCT FROM new.FONE_FAX OR old.EMAIL_CONT IS DISTINCT FROM new.EMAIL_CONT OR old.EMAIL_NFE IS DISTINCT FROM new.EMAIL_NFE OR old.SITE IS DISTINCT FROM new.SITE OR old.STATUS IS DISTINCT FROM new.STATUS OR old.DT_PRICOMP IS DISTINCT FROM new.DT_PRICOMP OR old.DT_ULTCOMP IS DISTINCT FROM new.DT_ULTCOMP OR old.ID_CIDADE IS DISTINCT FROM new.ID_CIDADE OR old.LIMITE IS DISTINCT FROM new.LIMITE OR old.ID_RAMO IS DISTINCT FROM new.ID_RAMO OR old.ID_PAIS IS DISTINCT FROM new.ID_PAIS OR old.OBSERVACAO IS DISTINCT FROM new.OBSERVACAO OR old.CONTATO IS DISTINCT FROM new.CONTATO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ((SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_FORNEC AND TABELA = ''TB_FORNECEDOR'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_FORNEC ,''TB_FORNECEDOR'' ,''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END END END;';

						erro = 'drop TB_FORNEC_AUX_UPD_SYNC_DEL';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FORNEC_AUX_UPD_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_FORNEC_AUX_UPD_SYNC_DEL;';
						erro = 'create TB_FORNEC_AUX_UPD_SYNC_DEL';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_FORNEC_AUX_UPD_SYNC_DEL FOR TB_FORNECEDOR ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , old.ID_FORNEC , ''TB_FORNECEDOR'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END;';

						erro = 'drop TB_ESTGRUPO_AUX_UPD_SYNC_INS';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTGRUPO_AUX_UPD_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_INS;';
						erro = 'create TB_ESTGRUPO_AUX_UPD_SYNC_INS';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_INS FOR TB_EST_GRUPO ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , new.ID_GRUPO ,''TB_EST_GRUPO'' ,''I'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END;';

						erro = 'drop TB_ESTGRUPO_AUX_UPD_SYNC_UPD';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTGRUPO_AUX_UPD_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_UPD;';
						erro = 'create TB_ESTGRUPO_AUX_UPD_SYNC_UPD';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_UPD FOR TB_EST_GRUPO ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.DESCRICAO IS DISTINCT FROM new.DESCRICAO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ((SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_GRUPO AND TABELA = ''TB_EST_GRUPO'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_GRUPO ,''TB_EST_GRUPO'' ,''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END END END;';

						erro = 'drop TB_ESTGRUPO_AUX_UPD_SYNC_DEL';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTGRUPO_AUX_UPD_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_DEL;';
						erro = 'create TB_ESTGRUPO_AUX_UPD_SYNC_DEL';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTGRUPO_AUX_UPD_SYNC_DEL FOR TB_EST_GRUPO ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , old.ID_GRUPO , ''TB_EST_GRUPO'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END;';

						erro = 'drop TB_CLIENTE_AUX_UPD_SYNC_INS';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CLIENTE_AUX_UPD_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_CLIENTE_AUX_UPD_SYNC_INS;';
						erro = 'create TB_CLIENTE_AUX_UPD_SYNC_INS';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_CLIENTE_AUX_UPD_SYNC_INS FOR TB_CLIENTE ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , new.ID_CLIENTE , ''TB_CLIENTE'' , ''I'' , :VNUMCAIXA , CURRENT_TIMESTAMP); END END;';

						erro = 'drop TB_CLIENTE_AUX_UPD_SYNC_UPD';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CLIENTE_AUX_UPD_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_CLIENTE_AUX_UPD_SYNC_UPD;';
						erro = 'create TB_CLIENTE_AUX_UPD_SYNC_UPD';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_CLIENTE_AUX_UPD_SYNC_UPD FOR TB_CLIENTE ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN IF (old.ID_CONVENIO IS DISTINCT FROM new.ID_CONVENIO OR old.DT_CADASTRO IS DISTINCT FROM new.DT_CADASTRO OR old.NOME IS DISTINCT FROM new.NOME OR old.END_CEP IS DISTINCT FROM new.END_CEP OR old.END_TIPO IS DISTINCT FROM new.END_TIPO OR old.END_NUMERO IS DISTINCT FROM new.END_NUMERO OR old.END_LOGRAD IS DISTINCT FROM new.END_LOGRAD OR old.END_BAIRRO IS DISTINCT FROM new.END_BAIRRO OR old.END_COMPLE IS DISTINCT FROM new.END_COMPLE OR old.DT_PRICOMP IS DISTINCT FROM new.DT_PRICOMP OR old.DT_ULTCOMP IS DISTINCT FROM new.DT_ULTCOMP OR old.CONTATO IS DISTINCT FROM new.CONTATO OR old.STATUS IS DISTINCT FROM new.STATUS OR old.LIMITE IS DISTINCT FROM new.LIMITE OR old.DDD_RESID IS DISTINCT FROM new.DDD_RESID OR old.FONE_RESID IS DISTINCT FROM new.FONE_RESID OR old.DDD_COMER IS DISTINCT FROM new.DDD_COMER OR old.FONE_COMER IS DISTINCT FROM new.FONE_COMER OR old.DDD_CELUL IS DISTINCT FROM new.DDD_CELUL OR old.FONE_CELUL IS DISTINCT FROM new.FONE_CELUL OR old.DDD_FAX IS DISTINCT FROM new.DDD_FAX OR old.FONE_FAX IS DISTINCT FROM new.FONE_FAX OR old.EMAIL_CONT IS DISTINCT FROM new.EMAIL_CONT OR old.EMAIL_NFE IS DISTINCT FROM new.EMAIL_NFE OR old.ID_CIDADE IS DISTINCT FROM new.ID_CIDADE OR old.ID_TIPO IS DISTINCT FROM new.ID_TIPO OR old.ID_FUNCIONARIO IS DISTINCT FROM new.ID_FUNCIONARIO OR old.ID_PAIS IS DISTINCT FROM new.ID_PAIS OR old.MENSAGEM IS DISTINCT FROM new.MENSAGEM OR old.ID_RAMO IS DISTINCT FROM new.ID_RAMO OR old.EMAIL_ADIC IS DISTINCT FROM new.EMAIL_ADIC OR old.OBSERVACAO IS DISTINCT FROM new.OBSERVACAO OR old.DT_MELHOR_VENCTO IS DISTINCT FROM new.DT_MELHOR_VENCTO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ((SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_CLIENTE AND TABELA = ''TB_CLIENTE'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_CLIENTE , ''TB_CLIENTE'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP); END END END END;';

						erro = 'drop TB_CLIENTE_AUX_UPD_SYNC_DEL';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CLIENTE_AUX_UPD_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_CLIENTE_AUX_UPD_SYNC_DEL;';
						erro = 'create TB_CLIENTE_AUX_UPD_SYNC_DEL';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_CLIENTE_AUX_UPD_SYNC_DEL FOR TB_CLIENTE ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , old.ID_CLIENTE , ''TB_CLIENTE'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP); END END;';

						erro = 'drop TB_ADMIN_AUX_UPD_SYNC_INS';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ADMIN_AUX_UPD_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ADMIN_AUX_UPD_SYNC_INS;';
						erro = 'create TB_ADMIN_AUX_UPD_SYNC_INS';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ADMIN_AUX_UPD_SYNC_INS FOR TB_CARTAO_ADMINISTRADORA BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ ,ID_REG ,TABELA ,OPERACAO ,NO_CAIXA ,TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) ,NEW.ID_ADMINISTRADORA ,''TB_CARTAO_ADMINISTRADORA'' ,''I'' ,:VNUMCAIXA ,CURRENT_TIMESTAMP); END END;';

						erro = 'drop TB_ADMIN_AUX_UPD_SYNC_UPD';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ADMIN_AUX_UPD_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ADMIN_AUX_UPD_SYNC_UPD;';
						erro = 'create TB_ADMIN_AUX_UPD_SYNC_UPD';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ADMIN_AUX_UPD_SYNC_UPD FOR TB_CARTAO_ADMINISTRADORA BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (OLD.ID_CLIENTE IS DISTINCT FROM new.ID_CLIENTE OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.TAXA_CREDITO IS DISTINCT FROM new.TAXA_CREDITO OR old.TAXA_DEBITO IS DISTINCT FROM new.TAXA_DEBITO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF (( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_ADMINISTRADORA AND TABELA = ''TB_CARTAO_ADMINISTRADORA'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_ADMINISTRADORA , ''TB_CARTAO_ADMINISTRADORA'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END END END;';

						erro = 'drop TB_ADMIN_AUX_UPD_SYNC_DEL';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ADMIN_AUX_UPD_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ADMIN_AUX_UPD_SYNC_DEL;';
						erro = 'create TB_ADMIN_AUX_UPD_SYNC_DEL';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ADMIN_AUX_UPD_SYNC_DEL FOR TB_CARTAO_ADMINISTRADORA BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_ADMINISTRADORA , ''TB_CARTAO_ADMINISTRADORA'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END;';

						erro = 'drop TB_FUNC_AUX_UPD_SYNC_INS';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FUNC_AUX_UPD_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_FUNC_AUX_UPD_SYNC_INS;';
						erro = 'create TB_FUNC_AUX_UPD_SYNC_INS';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_FUNC_AUX_UPD_SYNC_INS FOR TB_FUNCIONARIO ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , new.ID_FUNCIONARIO , ''TB_FUNCIONARIO'' , ''I'' , :VNUMCAIXA , CURRENT_TIMESTAMP); END END;';

						erro = 'drop TB_FUNC_AUX_UPD_SYNC_UPD';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FUNC_AUX_UPD_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_FUNC_AUX_UPD_SYNC_UPD;';
						erro = 'create TB_FUNC_AUX_UPD_SYNC_UPD';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_FUNC_AUX_UPD_SYNC_UPD FOR TB_FUNCIONARIO ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.ID_FUNCIONARIO IS DISTINCT FROM new.ID_FUNCIONARIO OR old.ID_CIDADE IS DISTINCT FROM new.ID_CIDADE OR old.N_REGISTRO IS DISTINCT FROM new.N_REGISTRO OR old.CPF IS DISTINCT FROM new.CPF OR old.NOME IS DISTINCT FROM new.NOME OR old.RG IS DISTINCT FROM new.RG OR old.END_CEP IS DISTINCT FROM new.END_CEP OR old.END_TIPO IS DISTINCT FROM new.END_TIPO OR old.END_LOGRAD IS DISTINCT FROM new.END_LOGRAD OR old.END_NUMERO IS DISTINCT FROM new.END_NUMERO OR old.END_COMPLE IS DISTINCT FROM new.END_COMPLE OR old.END_BAIRRO IS DISTINCT FROM new.END_BAIRRO OR old.DDD IS DISTINCT FROM new.DDD OR old.FONE IS DISTINCT FROM new.FONE OR old.CELULAR IS DISTINCT FROM new.CELULAR OR old.EMAIL IS DISTINCT FROM new.EMAIL OR old.SALARIO IS DISTINCT FROM new.SALARIO OR old.EXTRA IS DISTINCT FROM new.EXTRA OR old.DATA_NASCT IS DISTINCT FROM new.DATA_NASCT OR old.DATA_ADMIS IS DISTINCT FROM new.DATA_ADMIS OR old.DATA_DEMIS IS DISTINCT FROM new.DATA_DEMIS OR old.RAMAL IS DISTINCT FROM new.RAMAL OR old.SENHA IS DISTINCT FROM new.SENHA OR old.IP IS DISTINCT FROM new.IP OR old.STATUS IS DISTINCT FROM new.STATUS OR old.ID_SETOR IS DISTINCT FROM new.ID_SETOR OR old.ID_CARGO IS DISTINCT FROM new.ID_CARGO OR old.FOTO IS DISTINCT FROM new.FOTO OR old.PIS IS DISTINCT FROM new.PIS OR old.APELIDO IS DISTINCT FROM new.APELIDO OR old.OBSERVACAO IS DISTINCT FROM new.OBSERVACAO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ((SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_FUNCIONARIO AND TABELA = ''TB_FUNCIONARIO'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_FUNCIONARIO , ''TB_FUNCIONARIO'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END END END;';

						erro = 'drop TB_FUNC_AUX_UPD_SYNC_DEL';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FUNC_AUX_UPD_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_FUNC_AUX_UPD_SYNC_DEL;';
						erro = 'create TB_FUNC_AUX_UPD_SYNC_DEL';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_FUNC_AUX_UPD_SYNC_DEL FOR TB_FUNCIONARIO ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , old.ID_FUNCIONARIO , ''TB_FUNCIONARIO'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP); END END;';

						erro = 'drop TB_UNIMED_AUX_UPD_SYNC_INS';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_UNIMED_AUX_UPD_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_UNIMED_AUX_UPD_SYNC_INS;';
						erro = 'create TB_UNIMED_AUX_UPD_SYNC_INS';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_UNIMED_AUX_UPD_SYNC_INS FOR TB_UNI_MEDIDA ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , ''TB_UNI_MEDIDA'' , ''I'' , :VNUMCAIXA , CURRENT_TIMESTAMP , CAST (new.UNIDADE AS VARCHAR(100))) ; END END;';

						erro = 'drop TB_UNIMED_AUX_UPD_SYNC_UPD';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_UNIMED_AUX_UPD_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_UNIMED_AUX_UPD_SYNC_UPD;';
						erro = 'create TB_UNIMED_AUX_UPD_SYNC_UPD';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_UNIMED_AUX_UPD_SYNC_UPD FOR TB_UNI_MEDIDA ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.UNIDADE IS DISTINCT FROM new.UNIDADE OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.CONVERSOR IS DISTINCT FROM new.CONVERSOR OR old.STATUS IS DISTINCT FROM new.STATUS OR old.UNIDADE_EX IS DISTINCT FROM new.UNIDADE_EX) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ((SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE UN_REG = old.UNIDADE AND TABELA = ''TB_UNI_MEDIDA'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , ''TB_UNI_MEDIDA'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP , old.UNIDADE) ; END END END END;';

						erro = 'drop TB_UNIMED_AUX_UPD_SYNC_DEL';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_UNIMED_AUX_UPD_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_UNIMED_AUX_UPD_SYNC_DEL;';
						erro = 'create TB_UNIMED_AUX_UPD_SYNC_DEL';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_UNIMED_AUX_UPD_SYNC_DEL FOR TB_UNI_MEDIDA ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , 0 , ''TB_UNI_MEDIDA'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP , old.UNIDADE) ; END END;';

						erro = 'drop TB_FUNCPAPEL_AUX_UPD_SYNC_INS';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FUNCPAPEL_AUX_UPD_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_FUNCPAPEL_AUX_UPD_SYNC_INS;';
						erro = 'create TB_FUNCPAPEL_AUX_UPD_SYNC_INS';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_FUNCPAPEL_AUX_UPD_SYNC_INS FOR TB_FUNC_PAPEL ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , new.ID_FUNCIONARIO , ''TB_FUNC_PAPEL'' , ''I'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , new.ID_PAPEL) ; END END;';

						erro = 'drop TB_FUNCPAPEL_AUX_UPD_SYNC_DEL';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FUNCPAPEL_AUX_UPD_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_FUNCPAPEL_AUX_UPD_SYNC_DEL;';
						erro = 'create TB_FUNCPAPEL_AUX_UPD_SYNC_DEL';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_FUNCPAPEL_AUX_UPD_SYNC_DEL FOR TB_FUNC_PAPEL ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , old.ID_FUNCIONARIO , ''TB_FUNC_PAPEL'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , old.ID_PAPEL) ; END END;';

						erro = 'drop TB_TRIMETODOS_AUX_UPD_SYNC_UPD';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TRIMETODOS_AUX_UPD_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_TRIMETODOS_AUX_UPD_SYNC_UPD;';
						erro = 'create TB_TRIMETODOS_AUX_UPD_SYNC_UPD';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_TRIMETODOS_AUX_UPD_SYNC_UPD FOR TRI_PDV_METODOS ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.ID_PAGAMENTO IS DISTINCT FROM new.ID_PAGAMENTO OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.DIAS IS DISTINCT FROM new.DIAS OR old.METODO IS DISTINCT FROM new.METODO OR old.PGTOCFE IS DISTINCT FROM new.PGTOCFE OR old.ATIVO IS DISTINCT FROM new.ATIVO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ((SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_PAGAMENTO AND TABELA = ''TRI_PDV_METODOS'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_PAGAMENTO , ''TRI_PDV_METODOS'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END END END;';

						erro = 'deu certo';
						SUSPEND;
						WHEN ANY DO
						BEGIN

						END
						END;</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="B_GERATRIGGERS_AUX_SYNC2" Modifier="Public" Name="B_GERATRIGGERS_AUX_SYNC2" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy8" UserSourceName="B_GERATRIGGERS_AUX_SYNC2">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>CREATE OR ALTER PROCEDURE SP_TRI_GERATRIGGERS_AUX_SYNC2
RETURNS (
erro VARCHAR(64)
)
AS
BEGIN

erro = 'drop TB_EMITENTE_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_EMITENTE_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_EMITENTE_AUX_UPD_SYNC_UPD;';
erro = 'create TB_EMITENTE_AUX_UPD_SYNC_UPD';
EXECUTE STATEMENT 'CREATE TRIGGER TB_EMITENTE_AUX_UPD_SYNC_UPD FOR TB_EMITENTE ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF ( old.NOME IS DISTINCT FROM new.NOME OR old.NOME_FANTA IS DISTINCT FROM new.NOME_FANTA OR old.CONTATO IS DISTINCT FROM new.CONTATO OR old.END_CEP IS DISTINCT FROM new.END_CEP OR old.END_TIPO IS DISTINCT FROM new.END_TIPO OR old.END_LOGRAD IS DISTINCT FROM new.END_LOGRAD OR old.END_NUMERO IS DISTINCT FROM new.END_NUMERO OR old.END_COMPLE IS DISTINCT FROM new.END_COMPLE OR old.END_BAIRRO IS DISTINCT FROM new.END_BAIRRO OR old.CNPJ IS DISTINCT FROM new.CNPJ OR old.INSC_ESTAD IS DISTINCT FROM new.INSC_ESTAD OR old.INSC_MUNIC IS DISTINCT FROM new.INSC_MUNIC OR old.DDD_COMER IS DISTINCT FROM new.DDD_COMER OR old.FONE_COMER IS DISTINCT FROM new.FONE_COMER OR old.DDD_FAX IS DISTINCT FROM new.DDD_FAX OR old.FONE_FAX IS DISTINCT FROM new.FONE_FAX OR old.DDD_CELUL IS DISTINCT FROM new.DDD_CELUL OR old.FONE_CELUL IS DISTINCT FROM new.FONE_CELUL OR old.EMAIL_CONT IS DISTINCT FROM new.EMAIL_CONT OR old.SITE IS DISTINCT FROM new.SITE OR old.CNAE IS DISTINCT FROM new.CNAE OR old.SIMPLES IS DISTINCT FROM new.SIMPLES OR old.ID_CIDADE IS DISTINCT FROM new.ID_CIDADE OR old.ID_RAMO IS DISTINCT FROM new.ID_RAMO OR old.DT_COMPRA IS DISTINCT FROM new.DT_COMPRA OR old.LOGO IS DISTINCT FROM new.LOGO OR old.IE_ST_AC IS DISTINCT FROM new.IE_ST_AC OR old.IE_ST_AL IS DISTINCT FROM new.IE_ST_AL OR old.IE_ST_AM IS DISTINCT FROM new.IE_ST_AM OR old.IE_ST_AP IS DISTINCT FROM new.IE_ST_AP OR old.IE_ST_BA IS DISTINCT FROM new.IE_ST_BA OR old.IE_ST_CE IS DISTINCT FROM new.IE_ST_CE OR old.IE_ST_DF IS DISTINCT FROM new.IE_ST_DF OR old.IE_ST_ES IS DISTINCT FROM new.IE_ST_ES OR old.IE_ST_GO IS DISTINCT FROM new.IE_ST_GO OR old.IE_ST_MA IS DISTINCT FROM new.IE_ST_MA OR old.IE_ST_MG IS DISTINCT FROM new.IE_ST_MG OR old.IE_ST_MS IS DISTINCT FROM new.IE_ST_MS OR old.IE_ST_MT IS DISTINCT FROM new.IE_ST_MT OR old.IE_ST_PA IS DISTINCT FROM new.IE_ST_PA OR old.IE_ST_PB IS DISTINCT FROM new.IE_ST_PB OR old.IE_ST_PE IS DISTINCT FROM new.IE_ST_PE OR old.IE_ST_PI IS DISTINCT FROM new.IE_ST_PI OR old.IE_ST_PR IS DISTINCT FROM new.IE_ST_PR OR old.IE_ST_RJ IS DISTINCT FROM new.IE_ST_RJ OR old.IE_ST_RN IS DISTINCT FROM new.IE_ST_RN OR old.IE_ST_RO IS DISTINCT FROM new.IE_ST_RO OR old.IE_ST_RR IS DISTINCT FROM new.IE_ST_RR OR old.IE_ST_RS IS DISTINCT FROM new.IE_ST_RS OR old.IE_ST_SC IS DISTINCT FROM new.IE_ST_SC OR old.IE_ST_SE IS DISTINCT FROM new.IE_ST_SE OR old.IE_ST_SP IS DISTINCT FROM new.IE_ST_SP OR old.IE_ST_TO IS DISTINCT FROM new.IE_ST_TO OR old.TEXTO_COBRANCA IS DISTINCT FROM new.TEXTO_COBRANCA OR old.TEXTO_COBRANCA_RODAPE IS DISTINCT FROM new.TEXTO_COBRANCA_RODAPE OR old.TEXTO_COBRANCA_ASSUNTO IS DISTINCT FROM new.TEXTO_COBRANCA_ASSUNTO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE UN_REG = old.CNPJ AND TABELA = ''TB_EMITENTE'' AND ( OPERACAO = ''I'' OR OPERACAO = ''U'' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , ''TB_EMITENTE'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP , old.CNPJ ) ; END END END END;';

erro = 'drop TB_TRIUSERS_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TRIUSERS_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_INS;';
erro = 'create TB_TRIUSERS_AUX_UPD_SYNC_INS';
EXECUTE STATEMENT 'CREATE TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_INS FOR TRI_PDV_USERS ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , ''TRI_PDV_USERS'' , ''I'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , new.ID_USER ) ; END IF (ROW_COUNT = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , ''TRI_PDV_USERS'' , ''I'' , 0 , CURRENT_TIMESTAMP , null , new.ID_USER ) ; END END;';

erro = 'drop TB_TRIUSERS_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TRIUSERS_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_UPD;';
erro = 'create TB_TRIUSERS_AUX_UPD_SYNC_UPD';
EXECUTE STATEMENT 'CREATE TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_UPD FOR TRI_PDV_USERS ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF ( old.ID_USER IS DISTINCT FROM new.ID_USER OR old.USERNAME IS DISTINCT FROM new.USERNAME OR old.PASSWORD IS DISTINCT FROM new.PASSWORD OR old.GERENCIA IS DISTINCT FROM new.GERENCIA OR old.ATIVO IS DISTINCT FROM new.ATIVO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE SM_REG     = old.ID_USER AND TABELA = ''TRI_PDV_USERS'' AND ( OPERACAO    = ''I'' OR OPERACAO = ''U'' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , ''TRI_PDV_USERS'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , old.ID_USER ) ;  END END END END;';

erro = 'drop TB_TRIUSERS_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TRIUSERS_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_DEL;';
erro = 'create TB_TRIUSERS_AUX_UPD_SYNC_DEL';
EXECUTE STATEMENT 'CREATE TRIGGER TB_TRIUSERS_AUX_UPD_SYNC_DEL FOR TRI_PDV_USERS ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , 0 , ''TRI_PDV_USERS'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , old.ID_USER ) ;  END END;';

erro = 'drop TB_TAXAUF_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TAXAUF_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_TAXAUF_AUX_UPD_SYNC_INS;';
erro = 'create TB_TAXAUF_AUX_UPD_SYNC_INS';
EXECUTE STATEMENT 'CREATE TRIGGER TB_TAXAUF_AUX_UPD_SYNC_INS FOR TB_TAXA_UF ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ;  BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 , ''TB_TAXA_UF'' , ''I'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , null , new.ID_CTI ) ;  END END;';

erro = 'drop TB_TAXAUF_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TAXAUF_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_TAXAUF_AUX_UPD_SYNC_UPD;';
erro = 'create TB_TAXAUF_AUX_UPD_SYNC_UPD';
EXECUTE STATEMENT 'CREATE TRIGGER TB_TAXAUF_AUX_UPD_SYNC_UPD FOR TB_TAXA_UF ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF ( old.ID_CTI IS DISTINCT FROM new.ID_CTI OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.BASE_ICMS IS DISTINCT FROM new.BASE_ICMS OR old.BASE_ICMSFE IS DISTINCT FROM new.BASE_ICMSFE OR old.BASE_ICMS_ST IS DISTINCT FROM new.BASE_ICMS_ST OR old.UF_AC IS DISTINCT FROM new.UF_AC OR old.UF_AL IS DISTINCT FROM new.UF_AL OR old.UF_AM IS DISTINCT FROM new.UF_AM OR old.UF_AP IS DISTINCT FROM new.UF_AP OR old.UF_BA IS DISTINCT FROM new.UF_BA OR  old.UF_CE IS DISTINCT FROM new.UF_CE OR old.UF_DF IS DISTINCT FROM new.UF_DF OR old.UF_ES IS DISTINCT FROM new.UF_ES OR old.UF_GO IS DISTINCT FROM new.UF_GO OR old.UF_MA IS DISTINCT FROM new.UF_MA OR old.UF_MG IS DISTINCT FROM new.UF_MG OR old.UF_MS IS DISTINCT FROM new.UF_MS OR old.UF_MT IS DISTINCT FROM new.UF_MT OR old.UF_PA IS DISTINCT FROM new.UF_PA OR old.UF_PB IS DISTINCT FROM new.UF_PB OR  old.UF_PE IS DISTINCT FROM new.UF_PE OR old.UF_PI IS DISTINCT FROM new.UF_PI OR old.UF_PR IS DISTINCT FROM new.UF_PR OR old.UF_RJ IS DISTINCT FROM new.UF_RJ OR old.UF_RN IS DISTINCT FROM new.UF_RN OR old.UF_RO IS DISTINCT FROM new.UF_RO OR old.UF_RR IS DISTINCT FROM new.UF_RR OR old.UF_RS IS DISTINCT FROM new.UF_RS OR old.UF_SC IS DISTINCT FROM new.UF_SC OR old.UF_SE IS DISTINCT FROM new.UF_SE OR  old.UF_SP IS DISTINCT FROM new.UF_SP OR old.UF_TO IS DISTINCT FROM new.UF_TO OR old.BASE_ISS IS DISTINCT FROM new.BASE_ISS OR old.ISS IS DISTINCT FROM new.ISS OR old.POR_DIF IS DISTINCT FROM new.POR_DIF) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE CH_REG     = old.ID_CTI AND TABELA = ''TB_TAXA_UF'' AND ( OPERACAO    = ''I'' OR OPERACAO = ''U'' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , ''TB_TAXA_UF'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , null , old.ID_CTI ) ;  END END END END;';

erro = 'drop TB_TAXAUF_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_TAXAUF_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_TAXAUF_AUX_UPD_SYNC_DEL;';
erro = 'create TB_TAXAUF_AUX_UPD_SYNC_DEL';
EXECUTE STATEMENT 'CREATE TRIGGER TB_TAXAUF_AUX_UPD_SYNC_DEL FOR TB_TAXA_UF ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , 0 , ''TB_TAXA_UF'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , null , old.ID_CTI ) ;  END END;';

erro = 'drop TB_CFOPSIS_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CFOPSIS_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_INS;';
erro = 'create TB_CFOPSIS_AUX_UPD_SYNC_INS';
EXECUTE STATEMENT 'CREATE TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_INS FOR TB_CFOP_SIS ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 , ''TB_CFOP_SIS'' , ''I'' , :VNUMCAIXA , CURRENT_TIMESTAMP , new.CFOP , null , null ) ; END END;';

erro = 'drop TB_CFOPSIS_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CFOPSIS_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_UPD;';
erro = 'create TB_CFOPSIS_AUX_UPD_SYNC_UPD';
EXECUTE STATEMENT 'CREATE TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_UPD FOR TB_CFOP_SIS ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF ( old.CFOP IS DISTINCT FROM new.CFOP OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.RESUMO IS DISTINCT FROM new.RESUMO OR old.OBSERVACAO IS DISTINCT FROM new.OBSERVACAO OR old.EST_BX IS DISTINCT FROM new.EST_BX OR old.EST_BX_AMBOS IS DISTINCT FROM new.EST_BX_AMBOS OR old.DEV_RET IS DISTINCT FROM new.DEV_RET) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE UN_REG = old.CFOP AND TABELA = ''TB_CFOP_SIS'' AND ( OPERACAO = ''I'' OR OPERACAO = ''U'' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , ''TB_CFOP_SIS'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP , old.CFOP , null , null ) ; END END END END;';

erro = 'drop TB_CFOPSIS_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_CFOPSIS_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_DEL;';
erro = 'create TB_CFOPSIS_AUX_UPD_SYNC_DEL';
EXECUTE STATEMENT 'CREATE TRIGGER TB_CFOPSIS_AUX_UPD_SYNC_DEL FOR TB_CFOP_SIS ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , 0 , ''TB_CFOP_SIS'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP , old.CFOP , null , null ) ; END END;';

erro = 'drop TB_FMAPGTOSIS_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTOSIS_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_INS;';
erro = 'create TB_FMAPGTOSIS_AUX_UPD_SYNC_INS';
EXECUTE STATEMENT 'CREATE TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_INS FOR TB_FORMA_PAGTO_SIS ACTIVE AFTER INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 , ''TB_FORMA_PAGTO_SIS'' , ''I'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , new.ID_FMAPGTO , null ) ; END END;';

erro = 'drop TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD;';
erro = 'create TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD';
EXECUTE STATEMENT 'CREATE TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_UPD FOR TB_FORMA_PAGTO_SIS ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF ( old.ID_FMAPGTO IS DISTINCT FROM new.ID_FMAPGTO OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.STATUS IS DISTINCT FROM new.STATUS OR old.UTILIZACAO IS DISTINCT FROM new.UTILIZACAO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE SM_REG = old.ID_FMAPGTO AND TABELA = ''TB_FORMA_PAGTO_SIS'' AND ( OPERACAO = ''I'' OR OPERACAO = ''U'' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , ''TB_FORMA_PAGTO_SIS'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , old.ID_FMAPGTO , null ) ; END END END END;';

erro = 'drop TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL;';
erro = 'create TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL';
EXECUTE STATEMENT 'CREATE TRIGGER TB_FMAPGTOSIS_AUX_UPD_SYNC_DEL FOR TB_FORMA_PAGTO_SIS ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , 0 , ''TB_FORMA_PAGTO_SIS'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , old.ID_FMAPGTO , null ) ; END END;';

erro = 'drop TB_PARCELA_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_PARCELA_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_PARCELA_AUX_UPD_SYNC_INS;';
erro = 'create TB_PARCELA_AUX_UPD_SYNC_INS';
EXECUTE STATEMENT 'CREATE TRIGGER TB_PARCELA_AUX_UPD_SYNC_INS FOR TB_PARCELAMENTO ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ ,ID_REG ,TABELA ,OPERACAO ,NO_CAIXA ,TS_OPER ,UN_REG ,SM_REG ,CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) ,- 1 ,''TB_PARCELAMENTO'' ,''I'' ,:VNUMCAIXA ,CURRENT_TIMESTAMP ,NULL ,new.ID_PARCELA ,NULL ); END END;';

erro = 'drop TB_PARCELA_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_PARCELA_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_PARCELA_AUX_UPD_SYNC_UPD;';
erro = 'create TB_PARCELA_AUX_UPD_SYNC_UPD';
EXECUTE STATEMENT 'CREATE TRIGGER TB_PARCELA_AUX_UPD_SYNC_UPD FOR TB_PARCELAMENTO ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.ID_PARCELA IS DISTINCT FROM new.ID_PARCELA OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.N_PARCELAS IS DISTINCT FROM new.N_PARCELAS OR old.INTERVALO IS DISTINCT FROM new.INTERVALO OR old.ENTRADA IS DISTINCT FROM new.ENTRADA OR old.STATUS IS DISTINCT FROM new.STATUS OR old.ID_FMAPGTO IS DISTINCT FROM new.ID_FMAPGTO OR old.INTERVALO_VAR IS DISTINCT FROM new.INTERVALO_VAR) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE SM_REG = old.ID_PARCELA AND TABELA = ''TB_PARCELAMENTO'' AND ( OPERACAO = ''I'' OR OPERACAO = ''U'' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , 0 , ''TB_PARCELAMENTO'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , old.ID_PARCELA , null ) ; END END END END;';

erro = 'drop TB_PARCELA_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_PARCELA_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_PARCELA_AUX_UPD_SYNC_DEL;';
erro = 'create TB_PARCELA_AUX_UPD_SYNC_DEL';
EXECUTE STATEMENT 'CREATE TRIGGER TB_PARCELA_AUX_UPD_SYNC_DEL FOR TB_PARCELAMENTO ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , 0 , ''TB_PARCELAMENTO'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , old.ID_PARCELA , null ) ; END END;';

erro = 'drop TB_ESTCOMP_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMP_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_INS;';
erro = 'create TB_ESTCOMP_AUX_UPD_SYNC_INS';
EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_INS FOR TB_EST_COMPOSICAO ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , new.ID_COMPOSICAO ,''TB_EST_COMPOSICAO'' ,''I'' , :VNUMCAIXA , CURRENT_TIMESTAMP , NULL , NULL , NULL ) ; END END;';

erro = 'drop TB_ESTCOMP_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMP_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_UPD;';
erro = 'create TB_ESTCOMP_AUX_UPD_SYNC_UPD';
EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_UPD FOR TB_EST_COMPOSICAO ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.ID_COMPOSICAO IS DISTINCT FROM new.ID_COMPOSICAO OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.ID_IDENTIFICADOR IS DISTINCT FROM new.ID_IDENTIFICADOR) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_COMPOSICAO AND TABELA = ''TB_EST_COMPOSICAO'' AND ( OPERACAO = ''I'' OR OPERACAO = ''U'' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_COMPOSICAO , ''TB_EST_COMPOSICAO'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , null , null ) ; END END END END;';

erro = 'drop TB_ESTCOMP_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMP_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_DEL;';
erro = 'create TB_ESTCOMP_AUX_UPD_SYNC_DEL';
EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTCOMP_AUX_UPD_SYNC_DEL FOR TB_EST_COMPOSICAO ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , old.ID_COMPOSICAO , ''TB_EST_COMPOSICAO'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , null , null ) ; END END;';

erro = 'drop TB_ESTCOMPITEM_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMPITEM_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_INS;';
erro = 'create TB_ESTCOMPITEM_AUX_UPD_SYNC_INS';
EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_INS FOR TB_EST_COMP_ITEM ACTIVE AFTER INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , new.ID_ITEMCOMP ,''TB_EST_COMP_ITEM'' ,''I'' , :VNUMCAIXA , CURRENT_TIMESTAMP , NULL , NULL , NULL ) ; END END;';

erro = 'drop TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD;';
erro = 'create TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD';
EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_UPD FOR TB_EST_COMP_ITEM ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.ID_ITEMCOMP IS DISTINCT FROM new.ID_ITEMCOMP OR old.QTD_ITEM IS DISTINCT FROM new.QTD_ITEM OR old.ID_COMPOSICAO IS DISTINCT FROM new.ID_COMPOSICAO OR old.ID_IDENTIFICADOR IS DISTINCT FROM new.ID_IDENTIFICADOR) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_ITEMCOMP AND TABELA = ''TB_EST_COMP_ITEM'' AND ( OPERACAO = ''I'' OR OPERACAO = ''U'' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_ITEMCOMP , ''TB_EST_COMP_ITEM'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , null , null ) ; END END END END;';

erro = 'drop TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL;';
erro = 'create TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL';
EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTCOMPITEM_AUX_UPD_SYNC_DEL FOR TB_EST_COMP_ITEM ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , old.ID_ITEMCOMP , ''TB_EST_COMP_ITEM'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , null , null ) ; END END;';

erro = 'drop TB_IFS_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_IFS_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_IFS_AUX_UPD_SYNC_INS;';
erro = 'create TB_IFS_AUX_UPD_SYNC_INS';
EXECUTE STATEMENT 'CREATE TRIGGER TB_IFS_AUX_UPD_SYNC_INS FOR TB_IFS ACTIVE AFTER INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 ,''TB_IFS'' ,''I'' , :VNUMCAIXA , CURRENT_TIMESTAMP , NULL , new.ID_IFS , NULL ) ; END IF (ROW_COUNT = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 ,''TB_IFS'' ,''I'' , 0 , CURRENT_TIMESTAMP , NULL , new.ID_IFS , NULL ) ; END END;';

erro = 'drop TB_IFS_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_IFS_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_IFS_AUX_UPD_SYNC_UPD;';
erro = 'create TB_IFS_AUX_UPD_SYNC_UPD';
EXECUTE STATEMENT 'CREATE TRIGGER TB_IFS_AUX_UPD_SYNC_UPD FOR TB_IFS ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (old.ID_IFS IS DISTINCT FROM new.ID_IFS OR old.CAIXA IS DISTINCT FROM new.CAIXA OR old.LOJA IS DISTINCT FROM new.LOJA OR old.FABRICACAO IS DISTINCT FROM new.FABRICACAO OR old.USUARIO IS DISTINCT FROM new.USUARIO OR old.MARCA IS DISTINCT FROM new.MARCA OR old.MF IS DISTINCT FROM new.MF OR old.MODELO IS DISTINCT FROM new.MODELO OR old.TIPO IS DISTINCT FROM new.TIPO OR old.DATA_ON IS DISTINCT FROM new.DATA_ON OR old.DATA_OFF IS DISTINCT FROM new.DATA_OFF OR old.ATIVO IS DISTINCT FROM new.ATIVO OR old.ISS_RATEIO IS DISTINCT FROM new.ISS_RATEIO OR old.SB_DATAIN IS DISTINCT FROM new.SB_DATAIN OR old.SB_HORAIN IS DISTINCT FROM new.SB_HORAIN OR old.SB_VERSAO IS DISTINCT FROM new.SB_VERSAO OR old.CHAVE IS DISTINCT FROM new.CHAVE OR old.COD_NAC IS DISTINCT FROM new.COD_NAC OR old.DATA_TEMP IS DISTINCT FROM new.DATA_TEMP OR old.NUM_CREDENCIAMENTO IS DISTINCT FROM new.NUM_CREDENCIAMENTO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE SM_REG = old.ID_IFS AND TABELA = ''TB_IFS'' AND ( OPERACAO = ''I'' OR OPERACAO = ''U'' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 , ''TB_IFS'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , old.ID_IFS , null ) ; END END END END;';

erro = 'drop TB_IFS_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_IFS_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_IFS_AUX_UPD_SYNC_DEL;';
erro = 'create TB_IFS_AUX_UPD_SYNC_DEL';
EXECUTE STATEMENT 'CREATE TRIGGER TB_IFS_AUX_UPD_SYNC_DEL FOR TB_IFS ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , -1 , ''TB_IFS'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , old.ID_IFS , null ) ; END END;';

erro = 'deu certo';
SUSPEND;
WHEN ANY DO
BEGIN

END
END;
</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="B_GERATRIGGERS_AUX_SYNC3" Modifier="Public" Name="B_GERATRIGGERS_AUX_SYNC3" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy9" UserSourceName="B_GERATRIGGERS_AUX_SYNC3">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>CREATE OR ALTER PROCEDURE SP_TRI_GERATRIGGERS_AUX_SYNC3
RETURNS (
erro VARCHAR(64)
)
AS
BEGIN

erro = 'drop TRI_PDV_CONFIG_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TRI_PDV_CONFIG_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'DROP TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_INS;';
erro = 'create TRI_PDV_CONFIG_AUX_UPD_SYNC_INS';
EXECUTE STATEMENT 'CREATE TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_INS FOR TRI_PDV_CONFIG ACTIVE AFTER INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 ,''TRI_PDV_CONFIG'' ,''I'' , :VNUMCAIXA , CURRENT_TIMESTAMP , new.ID_MAC , NULL , NULL ) ; END IF (ROW_COUNT = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 ,''TRI_PDV_CONFIG'' ,''I'' , 0 , CURRENT_TIMESTAMP , new.ID_MAC , NULL , NULL ); END END;';

erro = 'drop TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'DROP TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD;';
erro = 'create TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD';
EXECUTE STATEMENT 'CREATE TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_UPD FOR TRI_PDV_CONFIG ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN  FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE UN_REG = old.ID_MAC AND TABELA = ''TRI_PDV_CONFIG'' AND ( OPERACAO = ''I'' OR OPERACAO = ''U'' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 , ''TRI_PDV_CONFIG'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP , old.ID_MAC , NULL , NULL ); END END END;';

erro = 'drop TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'DROP TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL;';
erro = 'create TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL';
EXECUTE STATEMENT 'CREATE TRIGGER TRI_PDV_CONFIG_AUX_UPD_SYNC_DEL FOR TRI_PDV_CONFIG ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , -1 , ''TRI_PDV_CONFIG'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP , old.ID_MAC , NULL , null ) ; END END;';

erro = 'drop TB_NATOPER_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_NATOPER_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_NATOPER_AUX_UPD_SYNC_INS;';
erro = 'create TB_NATOPER_AUX_UPD_SYNC_INS';
EXECUTE STATEMENT 'CREATE TRIGGER TB_NATOPER_AUX_UPD_SYNC_INS FOR TB_NAT_OPERACAO ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , new.ID_NATOPE , ''TB_NAT_OPERACAO'' , ''I'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , null , null ) ; END END;';

erro = 'drop TB_NATOPER_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_NATOPER_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_NATOPER_AUX_UPD_SYNC_UPD;';
erro = 'create TB_NATOPER_AUX_UPD_SYNC_UPD';
EXECUTE STATEMENT 'CREATE TRIGGER TB_NATOPER_AUX_UPD_SYNC_UPD FOR TB_NAT_OPERACAO ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF ( old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.RET_PIS_COF_CSLL IS DISTINCT FROM new.RET_PIS_COF_CSLL OR old.RET_INSS IS DISTINCT FROM new.RET_INSS OR old.RET_IRRF IS DISTINCT FROM new.RET_IRRF OR old.PIS_COFINS IS DISTINCT FROM new.PIS_COFINS OR old.STATUS IS DISTINCT FROM new.STATUS OR old.CFOP IS DISTINCT FROM new.CFOP OR old.ID_CTI IS DISTINCT FROM new.ID_CTI OR old.GFR IS DISTINCT FROM new.GFR OR old.OBSERVACAO IS DISTINCT FROM new.OBSERVACAO OR old.BASE_COMISSAO IS DISTINCT FROM new.BASE_COMISSAO OR old.CALCULA_IPI IS DISTINCT FROM new.CALCULA_IPI OR old.GRAVA_TOT_TRIBUTOS IS DISTINCT FROM new.GRAVA_TOT_TRIBUTOS) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_NATOPE AND TABELA = ''TB_NAT_OPERACAO'' AND ( OPERACAO = ''I'' OR OPERACAO = ''U'' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_NATOPE , ''TB_NAT_OPERACAO'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , null , null ) ; END END END END;';

erro = 'drop TB_NATOPER_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_NATOPER_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_NATOPER_AUX_UPD_SYNC_DEL;';
erro = 'create TB_NATOPER_AUX_UPD_SYNC_DEL';
EXECUTE STATEMENT 'CREATE TRIGGER TB_NATOPER_AUX_UPD_SYNC_DEL FOR TB_NAT_OPERACAO ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , old.ID_NATOPE , ''TB_NAT_OPERACAO'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , null , null ) ; END END;';

erro = 'drop TB_FMAPGTONFCE_AUX_UPD_SYNC_INS';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTONFCE_AUX_UPD_SYNC_INS'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_INS;';
erro = 'create TB_FMAPGTONFCE_AUX_UPD_SYNC_INS';
EXECUTE STATEMENT 'CREATE TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_INS FOR TB_FORMA_PAGTO_NFCE ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 , ''TB_FORMA_PAGTO_NFCE'' , ''I'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , new.ID_FMANFCE , null ) ; END END;';

erro = 'drop TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD;';
erro = 'create TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD';
EXECUTE STATEMENT 'CREATE TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_UPD FOR TB_FORMA_PAGTO_NFCE ACTIVE BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF ( old.STATUS IS DISTINCT FROM new.STATUS OR old.ID_NFCE IS DISTINCT FROM new.ID_NFCE OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ( ( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE SM_REG = old.ID_FMANFCE AND TABELA = ''TB_FORMA_PAGTO_NFCE'' AND ( OPERACAO = ''I'' OR OPERACAO = ''U'' ) AND NO_CAIXA = :VNUMCAIXA ) = 0 ) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , -1 , ''TB_FORMA_PAGTO_NFCE'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , old.ID_FMANFCE , null ) ; END END END END;';

erro = 'drop TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL';
if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL'))
then
EXECUTE STATEMENT 'DROP TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL;';
erro = 'create TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL';
EXECUTE STATEMENT 'CREATE TRIGGER TB_FMAPGTONFCE_AUX_UPD_SYNC_DEL FOR TB_FORMA_PAGTO_NFCE ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC ( SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG ) VALUES ( GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1) , -1 , ''TB_FORMA_PAGTO_NFCE'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP , null , old.ID_FMANFCE , null ) ; END END;';

erro = 'drop tb_estpreco_aux_sync_ins';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTPRECO_AUX_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ESTPRECO_AUX_SYNC_INS;';
						erro = 'create tb_estpreco_aux_sync_ins';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTPRECO_AUX_SYNC_INS FOR TB_ESTOQUE_PRECOS ACTIVE BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1), new.ID_IDENTIFICADOR, ''TB_ESTOQUE_PRECOS'', ''I'', :VNUMCAIXA, CURRENT_TIMESTAMP); END END;';

erro = 'drop tb_estpreco_aux_sync_upd';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTPRECO_AUX_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ESTPRECO_AUX_SYNC_UPD;';
						erro = 'create tb_estpreco_aux_sync_upd';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTPRECO_AUX_SYNC_UPD FOR TB_ESTOQUE_PRECOS BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (OLD.PRC_VENDA IS DISTINCT FROM new.PRC_VENDA OR old.DT_INICIO IS DISTINCT FROM new.DT_INICIO OR old.DT_FIM IS DISTINCT FROM new.DT_FIM OR old.PERIODO IS DISTINCT FROM new.PERIODO OR OLD.DIAS_SEMANA IS DISTINCT  FROM  NEW.DIAS_SEMANA) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF (( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_IDENTIFICADOR AND TABELA = ''TB_ESTOQUE_PRECOS'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_IDENTIFICADOR , ''TB_ESTOQUE_PRECOS'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END END END;';

erro = 'drop tb_estpreco_aux_sync_del';
						if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ESTPRECO_AUX_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ESTPRECO_AUX_SYNC_DEL';
						erro = 'create tb_estpreco_aux_sync_del';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ESTPRECO_AUX_SYNC_DEL FOR TB_ESTOQUE_PRECOS ACTIVE BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ, ID_REG, TABELA, OPERACAO, NO_CAIXA, TS_OPER) VALUES(GEN_ID(GEN_PDV_AUX_SYNC_SEQ,1), old.ID_IDENTIFICADOR, ''TB_ESTOQUE_PRECOS'', ''D'', :VNUMCAIXA, CURRENT_TIMESTAMP); END END;';

erro = 'drop tb_est_kit_sync_ins';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_EST_KIT_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_EST_KIT_SYNC_INS';
						erro = 'create tb_est_kit_sync_ins';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_EST_KIT_SYNC_INS FOR TB_EST_KIT BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , NEW.ID_KIT , ''TB_EST_KIT'' , ''I'' , :VNUMCAIXA , CURRENT_TIMESTAMP); END END;';                                                                                                    

erro = 'drop tb_est_kit_sync_upd';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_EST_KIT_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_EST_KIT_SYNC_UPD';
						erro = 'create tb_est_kit_sync_upd';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_EST_KIT_SYNC_UPD FOR TB_EST_KIT BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (OLD.ID_KIT IS DISTINCT FROM new.ID_KIT OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.STATUS IS DISTINCT FROM new.STATUS) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ((SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_KIT AND TABELA = ''TB_EST_KIT'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_KIT , ''TB_EST_KIT'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END END END;';    

erro = 'drop tb_est_kit_sync_del';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_EST_KIT_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_EST_KIT_SYNC_DEL';
						erro = 'create tb_est_kit_sync_del';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_EST_KIT_SYNC_DEL FOR TB_EST_KIT BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_KIT , ''TB_EST_KIT'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END;';    

erro = 'drop tb_est_kit_item_sync_ins';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_EST_KIT_ITEM_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_EST_KIT_ITEM_SYNC_INS';
						erro = 'create tb_est_kit_item_sync_ins';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_EST_KIT_ITEM_SYNC_INS FOR TB_EST_KIT_ITEM BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , NEW.ID_ESTKIT , ''TB_EST_KIT_ITEM'' , ''I'' ,:VNUMCAIXA , CURRENT_TIMESTAMP); END END;';   

erro = 'drop tb_est_kit_item_sync_upd';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_EST_KIT_ITEM_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_EST_KIT_ITEM_SYNC_UPD';
						erro = 'create tb_est_kit_item_sync_upd';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_EST_KIT_ITEM_SYNC_UPD FOR TB_EST_KIT_ITEM BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (OLD.ID_IDENTIFICADOR IS DISTINCT FROM new.ID_IDENTIFICADOR OR old.ID_KIT IS DISTINCT FROM new.ID_KIT OR old.QTD_ITEM IS DISTINCT FROM new.QTD_ITEM OR OLD.STATUS IS DISTINCT FROM NEW.STATUS OR OLD.VLR_ITEM IS DISTINCT FROM NEW.VLR_ITEM OR OLD.ID_ESTKIT IS DISTINCT FROM NEW.ID_ESTKIT) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF ((SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_ESTKIT AND TABELA = ''TB_EST_KIT_ITEM'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_ESTKIT , ''TB_EST_KIT_ITEM'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END END END;';          

erro = 'drop tb_est_kit_item_sync_del';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_EST_KIT_ITEM_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_EST_KIT_ITEM_SYNC_DEL';
						erro = 'create tb_est_kit_item_sync_del';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_EST_KIT_ITEM_SYNC_DEL FOR TB_EST_KIT_ITEM BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER ) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_ESTKIT , ''TB_EST_KIT_ITEM'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END;';       

erro = 'drop tb_nivel1_aux_sync_ins';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_NIVEL1_AUX_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_NIVEL1_AUX_SYNC_INS';
						erro = 'create tb_nivel1_aux_sync_ins';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_NIVEL1_AUX_SYNC_INS FOR TB_EST_PROD_NIVEL1 AFTER INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , NEW.ID_NIVEL1 , ''TB_EST_PROD_NIVEL1'' , ''I'' ,:VNUMCAIXA , CURRENT_TIMESTAMP); END END;';   

erro = 'drop tb_nivel1_aux_sync_upd';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_NIVEL1_AUX_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_NIVEL1_AUX_SYNC_UPD';
						erro = 'create tb_nivel1_aux_sync_upd';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_NIVEL1_AUX_SYNC_UPD FOR TB_EST_PROD_NIVEL1 BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (OLD.ID_NIVEL1 IS DISTINCT FROM new.ID_NIVEL1 OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.STATUS IS DISTINCT FROM new.STATUS) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF (( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_NIVEL1 AND TABELA = ''TB_EST_PROD_NIVEL1'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_NIVEL1 , ''TB_EST_PROD_NIVEL1'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END END END;';     

erro = 'drop tb_nivel1_aux_sync_del';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_NIVEL1_AUX_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_NIVEL1_AUX_SYNC_DEL';
						erro = 'create tb_nivel1_aux_sync_del';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_NIVEL1_AUX_SYNC_DEL FOR TB_EST_PROD_NIVEL1 BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_NIVEL1 , ''TB_EST_PROD_NIVEL1'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END;';

erro = 'drop tb_nivel2_aux_sync_ins';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_NIVEL2_AUX_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_NIVEL2_AUX_SYNC_INS';
						erro = 'create tb_nivel2_aux_sync_ins';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_NIVEL2_AUX_SYNC_INS FOR TB_EST_PROD_NIVEL2 AFTER INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , NEW.ID_NIVEL2 , ''TB_EST_PROD_NIVEL2'' , ''I'' ,:VNUMCAIXA , CURRENT_TIMESTAMP); END END;'; 

erro = 'drop tb_nivel2_aux_sync_upd';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_NIVEL2_AUX_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_NIVEL2_AUX_SYNC_UPD';
						erro = 'create tb_nivel2_aux_sync_upd';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_NIVEL2_AUX_SYNC_UPD FOR TB_EST_PROD_NIVEL2 BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (OLD.ID_NIVEL2 IS DISTINCT FROM new.ID_NIVEL2 OR old.DESCRICAO IS DISTINCT FROM new.DESCRICAO OR old.STATUS IS DISTINCT FROM new.STATUS) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF (( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID_NIVEL2 AND TABELA = ''TB_EST_PROD_NIVEL2'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_NIVEL2 , ''TB_EST_PROD_NIVEL2'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END END END;';

erro = 'drop tb_nivel2_aux_sync_del';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_NIVEL2_AUX_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_NIVEL2_AUX_SYNC_DEL';
						erro = 'create tb_nivel2_aux_sync_del';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_NIVEL2_AUX_SYNC_DEL FOR TB_EST_PROD_NIVEL2 BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID_NIVEL2 , ''TB_EST_PROD_NIVEL2'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END;';

erro = 'drop tb_promoscanntech_aux_sync_ins';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_PROMOSCANNTECH_AUX_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_PROMOSCANNTECH_AUX_SYNC_INS';
						erro = 'create tb_promoscanntech_aux_sync_ins';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_PROMOSCANNTECH_AUX_SYNC_INS FOR TB_PROMOCOES BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , NEW.ID , ''TB_PROMOCOES'' , ''I'', :VNUMCAIXA , CURRENT_TIMESTAMP); END END;';

 erro = 'drop  tb_promoscanntech_aux_sync_upd';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_PROMOSCANNTECH_AUX_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_PROMOSCANNTECH_AUX_SYNC_UPD';
						erro = 'create tb_promoscanntech_aux_sync_upd';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_PROMOSCANNTECH_AUX_SYNC_UPD FOR TB_PROMOCOES BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN IF (OLD.ID IS DISTINCT FROM new.ID OR old.QTD IS DISTINCT FROM new.QTD OR old.TIPO IS DISTINCT FROM new.TIPO OR old.DET IS DISTINCT FROM new.DET OR old.LIMITE IS DISTINCT FROM NEW.LIMITE OR OLD.INICIO IS DISTINCT FROM NEW.INICIO OR OLD.FIM IS DISTINCT FROM NEW.FIM OR OLD.REJEITADA IS DISTINCT FROM NEW.REJEITADA OR OLD.SCANNTECH IS DISTINCT FROM NEW.SCANNTECH) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF(( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID AND TABELA = ''TB_PROMOCOES'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID , ''TB_PROMOCOES'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END END END;';

erro = 'drop tb_promoscanntech_aux_sync_del';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_PROMOSCANNTECH_AUX_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_PROMOSCANNTECH_AUX_SYNC_DEL';
						erro = 'create tb_promoscanntech_aux_sync_del';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_PROMOSCANNTECH_AUX_SYNC_DEL FOR TB_PROMOCOES BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID , ''TB_PROMOCOES'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END;';

erro = 'drop tb_itenscanntech_aux_sync_ins';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ITENSCANNTECH_AUX_SYNC_INS'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ITENSCANNTECH_AUX_SYNC_INS';
						erro = 'create tb_itenscanntech_aux_sync_ins';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ITENSCANNTECH_AUX_SYNC_INS FOR TB_PROMOCOES_ITENS BEFORE INSERT AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , NEW.ID , ''TB_PROMOCOES_ITENS'' , ''I'' ,:VNUMCAIXA , CURRENT_TIMESTAMP); END END;';

 erro = 'drop  tb_itenscanntech_aux_sync_upd';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ITENSCANNTECH_AUX_SYNC_UPD'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ITENSCANNTECH_AUX_SYNC_UPD';
						erro = 'create tb_itenscanntech_aux_sync_upd';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ITENSCANNTECH_AUX_SYNC_UPD FOR TB_PROMOCOES_ITENS BEFORE UPDATE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN IF (OLD.ID IS DISTINCT FROM new.ID OR old.IDPROMOCAO IS DISTINCT FROM new.IDPROMOCAO OR old.PRODUTONOME IS DISTINCT FROM new.PRODUTONOME OR old.CODIGOBARRAS IS DISTINCT FROM new.CODIGOBARRAS) THEN BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN IF (( SELECT COUNT(1) FROM TRI_PDV_AUX_SYNC WHERE ID_REG = old.ID AND TABELA = ''TB_PROMOCOES_ITENS'' AND (OPERACAO = ''I'' OR OPERACAO = ''U'') AND NO_CAIXA = :VNUMCAIXA) = 0) THEN BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID , ''TB_PROMOCOES_ITENS'' , ''U'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END END END;';

erro = 'drop  tb_itenscanntech_aux_sync_del';           
                                                                                                                if (exists(select 1 from RDB$TRIGGERS where RDB$TRIGGER_NAME = 'TB_ITENSCANNTECH_AUX_SYNC_DEL'))
						then
						EXECUTE STATEMENT 'DROP TRIGGER TB_ITENSCANNTECH_AUX_SYNC_DEL';
						erro = 'create  tb_itenscanntech_aux_sync_del';
						EXECUTE STATEMENT 'CREATE TRIGGER TB_ITENSCANNTECH_AUX_SYNC_DEL FOR TB_PROMOCOES_ITENS BEFORE DELETE AS DECLARE VNUMCAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA ; BEGIN FOR SELECT NO_CAIXA FROM TRI_PDV_CONFIG ORDER BY NO_CAIXA INTO :VNUMCAIXA DO BEGIN INSERT INTO TRI_PDV_AUX_SYNC (SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER) VALUES (GEN_ID(GEN_PDV_AUX_SYNC_SEQ, 1) , old.ID , ''TB_PROMOCOES_ITENS'' , ''D'' , :VNUMCAIXA , CURRENT_TIMESTAMP) ; END END;';

erro = 'deu certo';
SUSPEND;
WHEN ANY DO
BEGIN

END
END;</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="C_DADOSINICIAIS" Modifier="Public" Name="C_DADOSINICIAIS" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy10" UserSourceName="C_DADOSINICIAIS">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>CREATE OR ALTER PROCEDURE SP_TRI_DADOSINICIAIS
RETURNS (
	erro VARCHAR(64)
)
AS
BEGIN
	erro = 'a vista';
	EXECUTE STATEMENT 'UPDATE OR INSERT INTO TRI_PDV_METODOS (ID_PAGAMENTO, DESCRICAO, DIAS, METODO, PGTOCFE, ATIVO) VALUES (1, ''DINHEIRO'', 0, ''C'', ''01'', ''S'');';
	
	erro = 'a prazo 30';
	EXECUTE STATEMENT 'UPDATE OR INSERT INTO TRI_PDV_METODOS (ID_PAGAMENTO, DESCRICAO, DIAS, METODO, PGTOCFE, ATIVO) VALUES (2, ''CHEQUE'', 0, ''C'', ''02'', ''S'');';
	
	erro = 'a prazo 14';
	EXECUTE STATEMENT 'UPDATE OR INSERT INTO TRI_PDV_METODOS (ID_PAGAMENTO, DESCRICAO, DIAS, METODO, PGTOCFE, ATIVO) VALUES (3, ''CRÉDITO'', 0, ''C'', ''03'', ''S'');';
	
	erro = 'credito';
	EXECUTE STATEMENT 'UPDATE OR INSERT INTO TRI_PDV_METODOS (ID_PAGAMENTO, DESCRICAO, DIAS, METODO, PGTOCFE, ATIVO) VALUES (4, ''DÉBITO'', 0, ''c'', ''04'', ''S'');';
	
	erro = 'debito';
	EXECUTE STATEMENT 'UPDATE OR INSERT INTO TRI_PDV_METODOS (ID_PAGAMENTO, DESCRICAO, DIAS, METODO, PGTOCFE, ATIVO) VALUES (5, ''CRÉDITO LOJA'', 0, ''C'', ''05'', ''S'');';
	
	erro = 'aliment';
	EXECUTE STATEMENT 'UPDATE OR INSERT INTO TRI_PDV_METODOS (ID_PAGAMENTO, DESCRICAO, DIAS, METODO, PGTOCFE, ATIVO) VALUES (6, ''V. ALIMENTAÇÃO'', 0, ''C'', ''10'', ''S'');';
	
	erro = 'refeicao';
	EXECUTE STATEMENT 'UPDATE OR INSERT INTO TRI_PDV_METODOS (ID_PAGAMENTO, DESCRICAO, DIAS, METODO, PGTOCFE, ATIVO) VALUES (7, ''V. REFEIÇÃO'', 0, ''C'', ''11'', ''S'');';

	erro = 'presente';
	EXECUTE STATEMENT 'UPDATE OR INSERT INTO TRI_PDV_METODOS (ID_PAGAMENTO, DESCRICAO, DIAS, METODO, PGTOCFE, ATIVO) VALUES (8, ''V. PRESENTE'', 0, ''C'', ''12'', ''S'');';
	
	erro = 'combust';
	EXECUTE STATEMENT 'UPDATE OR INSERT INTO TRI_PDV_METODOS (ID_PAGAMENTO, DESCRICAO, DIAS, METODO, PGTOCFE, ATIVO) VALUES (9, ''V. COMBUSTÍVEL'', 0, ''C'', ''13'', ''S'');';
	
	erro = 'outros';
	EXECUTE STATEMENT 'UPDATE OR INSERT INTO TRI_PDV_METODOS (ID_PAGAMENTO, DESCRICAO, DIAS, METODO, PGTOCFE, ATIVO) VALUES (10, ''OUTROS'', 0, ''C'', ''99'', ''S'');';
	
	erro = 'deu certo';
	SUSPEND;
	WHEN ANY DO
	BEGIN
		
	END 
	END;</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_CAIXAEXISTENTE&quot;" DbObjectType="StoredProcedure" FillMethodModifier="Public" FillMethodName="CaixaExistente" GenerateMethods="Fill" GenerateShortCommands="true" GeneratorSourceName="CaixaExistente" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy11" UserSourceName="CaixaExistente">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_CAIXAEXISTENTE"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_CHECAPOR_NOCAIXA&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="ChecaPorNoCaixa" Modifier="Public" Name="ChecaPorNoCaixa" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy12" UserSourceName="ChecaPorNoCaixa">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_CHECAPOR_NOCAIXA"</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="PNO_CAIXA" Precision="0" Scale="0" Size="2" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PID_MAC" Precision="0" Scale="0" Size="12" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="D_PROCEDURES" Modifier="Public" Name="D_PROCEDURES" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy13" UserSourceName="D_PROCEDURES">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>CREATE OR ALTER PROCEDURE SP_TRI_PROCEDURES
RETURNS (
erro VARCHAR(64)
)
AS
BEGIN
erro='sproc CHECAIXABER_ID';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CHECAIXAABER_ID(USERID INTEGER, NUMCAIXA INTEGER) RETURNS(ABRIU SMALLINT) AS BEGIN IF((SELECT COUNT(ID_USER) AS Expr1 FROM TRI_PDV_OPER WHERE(ABERTO = ''S'') AND((ID_USER =:USERID) OR(ID_CAIXA =:NUMCAIXA)))&gt;= 1) THEN BEGIN Abriu = 1; SUSPEND; END ELSE BEGIN Abriu = 0; SUSPEND; END END;';
erro = 'sproc lancamovimento';
EXECUTE STATEMENT 'CREATE OR ALTER PROCEDURE SP_TRI_LANCAMOVIMENTO (ID_CAIXA INTEGER, DINH TYPE OF COLUMN TRI_PDV_OPER.DIN, CHEQ TYPE OF COLUMN TRI_PDV_OPER.DIN, CRED TYPE OF COLUMN TRI_PDV_OPER.DIN, DEBI TYPE OF COLUMN TRI_PDV_OPER.DIN, LOJA TYPE OF COLUMN TRI_PDV_OPER.DIN, ALIM TYPE OF COLUMN TRI_PDV_OPER.DIN, REFE TYPE OF COLUMN TRI_PDV_OPER.DIN, PRES TYPE OF COLUMN TRI_PDV_OPER.DIN, COMB TYPE OF COLUMN TRI_PDV_OPER.DIN, OUTR TYPE OF COLUMN TRI_PDV_OPER.DIN, EXT1 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXT2 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXT3 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXT4 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXT5 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXT6 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXT7 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXT8 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXT9 TYPE OF COLUMN TRI_PDV_OPER.DIN, EX10 TYPE OF COLUMN TRI_PDV_OPER.DIN) AS BEGIN UPDATE TRI_PDV_OPER SET DIN = DIN +:DINH, CHEQUE = CHEQUE +:CHEQ, CREDITO = CREDITO +:CRED, DEBITO = DEBITO +:DEBI, LOJA = LOJA +:LOJA, ALIMENTACAO = ALIMENTACAO +:ALIM, REFEICAO = REFEICAO +:REFE, PRESENTE = PRESENTE +:PRES, COMBUSTIVEL = COMBUSTIVEL +:COMB, OUTROS = OUTROS +:OUTR, EXTRA_1 = EXTRA_1 +:EXT1, EXTRA_2 = EXTRA_2 +:EXT2, EXTRA_3 = EXTRA_3 +:EXT3, EXTRA_4 = EXTRA_4 +:EXT4, EXTRA_5 = EXTRA_5 +:EXT5, EXTRA_6 = EXTRA_6 +:EXT6, EXTRA_7 = EXTRA_7 +:EXT7, EXTRA_8 = EXTRA_8 +:EXT8, EXTRA_9 = EXTRA_9 +:EXT9, EXTRA_10 = EXTRA_10 +:EX10 WHERE(ID_CAIXA =:ID_CAIXA) AND(ABERTO = ''S''); SUSPEND; END';
erro = 'sproc novopagto';
EXECUTE STATEMENT 'CREATE OR ALTER PROCEDURE SP_TRI_NOVOPAGTO (IDCUPOM INTEGER, RECEBIDO TYPE OF COLUMN TRI_PDV_OPER.DIN, FMAPGTO SMALLINT)AS DECLARE VARIABLE paginterno SMALLINT;BEGIN SELECT (ID_FMAPGTO) FROM TRI_PDV_REL_METODO_PAGTO WHERE ID_PAGAMENTO = :FMAPGTO INTO :paginterno; INSERT INTO TB_CUPOM_FMAPAGTO (ID_NUMPAG, VLR_PAGTO, ID_CUPOM, ID_FMAPAGTO) VALUES (0, :recebido, :idcupom, :paginterno);END;';
erro = 'sproc pesquisaitem';
EXECUTE STATEMENT 'CREATE OR ALTER PROCEDURE SP_TRI_PESQUISAITEM (PESQUISA VARCHAR(128)) RETURNS (CODIGOITEM INTEGER) AS DECLARE DESCRICOES INTEGER; DECLARE CODSBARRA INTEGER; BEGIN SELECT COUNT(1) AS Expr1 FROM TB_ESTOQUE WHERE (DESCRICAO =:Pesquisa AND STATUS = ''A'') INTO DESCRICOES; SELECT COUNT(1) AS Expr1 FROM TB_EST_PRODUTO WHERE (COD_BARRA =:Pesquisa) INTO CODSBARRA; IF(:DESCRICOES = 1) THEN BEGIN SELECT b.ID_IDENTIFICADOR FROM TB_ESTOQUE a INNER JOIN TB_EST_IDENTIFICADOR b ON b.ID_ESTOQUE = a.ID_ESTOQUE WHERE (a.DESCRICAO =:Pesquisa AND STATUS = ''A'') INTO :CodigoItem; END ELSE IF (:DESCRICOES &gt; 1) THEN CodigoItem = -100; IF(:CODSBARRA = 1) THEN BEGIN SELECT A.ID_IDENTIFICADOR FROM TB_EST_IDENTIFICADOR A INNER JOIN TB_EST_PRODUTO B ON (A.ID_IDENTIFICADOR = B.ID_IDENTIFICADOR) INNER JOIN TB_ESTOQUE C ON (A.ID_ESTOQUE = C.ID_ESTOQUE) WHERE (B.COD_BARRA =:Pesquisa AND C.STATUS = ''A'') INTO :CodigoItem; END ELSE IF (:CODSBARRA &gt; 1) THEN CodigoItem = -100; SUSPEND; END';
erro = 'sproc pesquisacod';
EXECUTE STATEMENT 'CREATE OR ALTER PROCEDURE SP_TRI_PESQUISACOD (PESQUISA INTEGER) RETURNS (CODIGOITEM INTEGER) AS BEGIN IF ((SELECT COUNT(1) AS Expr1 FROM TB_ESTOQUE a INNER JOIN TB_EST_IDENTIFICADOR b ON b.ID_ESTOQUE = a.ID_ESTOQUE WHERE (b.ID_IDENTIFICADOR = :Pesquisa)) = 1)THEN BEGIN SELECT b.ID_IDENTIFICADOR FROM TB_ESTOQUE a INNER JOIN TB_EST_IDENTIFICADOR b ON b.ID_ESTOQUE = a.ID_ESTOQUE WHERE (b.ID_IDENTIFICADOR = :Pesquisa AND a.STATUS = ''A'') INTO :CodigoItem ; SUSPEND; END END';
erro = 'sproc togglemetodo';
EXECUTE STATEMENT 'CREATE OR ALTER PROCEDURE SP_TRI_TOGGLEMETODO (PESQUISA INTEGER) AS BEGIN IF ((SELECT ATIVO FROM TRI_PDV_METODOS WHERE (ID_PAGAMENTO = :Pesquisa)) = ''S'') THEN BEGIN UPDATE TRI_PDV_METODOS SET ATIVO=''N'' WHERE ID_PAGAMENTO=:Pesquisa; SUSPEND; END IF ((SELECT ATIVO FROM TRI_PDV_METODOS WHERE (ID_PAGAMENTO = :Pesquisa)) = ''N'') THEN BEGIN UPDATE TRI_PDV_METODOS SET ATIVO=''S'' WHERE ID_PAGAMENTO=:Pesquisa; SUSPEND; END END;';
erro = 'sproc tributo estadual';
EXECUTE STATEMENT 'CREATE OR ALTER PROCEDURE SP_TRI_TRIBUTOESTADUAL (PRODUTO INTEGER) RETURNS (PORCENTAGEM TYPE OF COLUMN TRI_PDV_OPER.DIN) AS DECLARE VARIABLE IDCTI VARCHAR(3); BEGIN SELECT ID_CTI FROM TB_ESTOQUE WHERE ID_ESTOQUE = :Produto INTO :IDCTI; SELECT UF_SP FROM TB_TAXA_UF WHERE ID_CTI = :IDCTI INTO :Porcentagem; SUSPEND; END;';
erro = 'sproc ultimocupom';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ULTIMOCUPOM (CAIXA INTEGER) RETURNS (ULTIMOCUPOM INTEGER) AS BEGIN SELECT MAX(ID_CUPOM) FROM TB_CUPOM WHERE NUM_CAIXA = :CAIXA INTO :ultimocupom; IF (:ultimocupom IS NULL) THEN ultimocupom = 0; SUSPEND; END;';
erro = 'sproc checafiscal';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_FISCALOUNAO (CAIXA INTEGER, ULTIMOCUPOM INTEGER) RETURNS (MODO VARCHAR(32)) AS BEGIN SELECT CHAVE FROM TB_CUPOM WHERE NUM_CAIXA = :CAIXA AND ID_CUPOM = :ULTIMOCUPOM INTO :modo; SUSPEND; END;';
erro = 'procura_preco';
EXECUTE STATEMENT 'CREATE OR ALTER PROCEDURE SP_TRI_PEGAPRECO (ITEM INTEGER, QUANT NUMERIC(18, 4)) RETURNS (PRECO NUMERIC(18, 4)) AS DECLARE VARIABLE VEXISTE_PROMO INTEGER; BEGIN SELECT COUNT(1) FROM TB_ESTOQUE_PRECOS WHERE CURRENT_DATE BETWEEN DT_INICIO AND DT_FIM AND ID_IDENTIFICADOR = :ITEM INTO VEXISTE_PROMO; IF(VEXISTE_PROMO &gt; 0) THEN BEGIN SELECT tep.PRC_VENDA FROM TB_ESTOQUE_PRECOS tep WHERE (tep.ID_IDENTIFICADOR =:ITEM) INTO PRECO ; END ELSE BEGIN SELECT PRC_VENDA FROM TB_ESTOQUE A INNER JOIN TB_EST_IDENTIFICADOR B ON A.ID_ESTOQUE = B.ID_ESTOQUE WHERE (B.ID_IDENTIFICADOR =:ITEM) INTO PRECO ; END END;';
erro = 'sproc copia tabela metodos';
EXECUTE STATEMENT 'CREATE OR ALTER PROCEDURE COPIAMETODOS AS DECLARE relation INTEGER; DECLARE maximum INTEGER; DECLARE description VARCHAR(40); BEGIN SELECT MAX(ID_FMAPGTO) FROM TB_FORMA_PAGTO_SIS INTO :maximum; FOR SELECT ID_PAGAMENTO, DESCRICAO FROM TRI_PDV_METODOS WHERE ID_PAGAMENTO &gt; 1 INTO :relation, :description DO BEGIN INSERT INTO TB_FORMA_PAGTO_SIS (ID_FMAPGTO, DESCRICAO, STATUS, UTILIZACAO) VALUES (:relation+:maximum-1, :description, ''A'', ''C''); END END; ';
erro = 'break_clipp_rules';
EXECUTE STATEMENT 'CREATE OR ALTER PROCEDURE SP_TRI_BREAK_CLIPP_RULES AS BEGIN IF ((select count(0) from rdb$relation_constraints where rdb$constraint_name = ''CHK_TB_EST_PRODUTOQTD_ATUAL'') &gt; 0) THEN BEGIN EXECUTE STATEMENT ''ALTER TABLE TB_EST_PRODUTO DROP CONSTRAINT CHK_TB_EST_PRODUTOQTD_ATUAL;''; END END;';
erro = 'fix_clipp_rules';
EXECUTE STATEMENT 'CREATE OR ALTER PROCEDURE SP_TRI_FIX_CLIPP_RULES AS BEGIN IF ((select count(0) from rdb$relation_constraints where rdb$constraint_name = ''CHK_TB_EST_PRODUTOQTD_ATUAL'') = 0) THEN BEGIN EXECUTE STATEMENT ''ALTER TABLE TB_EST_PRODUTO ADD CONSTRAINT CHK_TB_EST_PRODUTOQTD_ATUAL check (QTD_ATUAL &gt;= 0);''; END END;';
erro = 'retorna pagamentos';
EXECUTE STATEMENT 'CREATE OR ALTER PROCEDURE SP_TRI_RETORNAPAGTOS(NUM_CUPOM INTEGER) RETURNS(FMAPAGTO TYPE OF COLUMN TB_CUPOM_FMAPAGTO.ID_FMAPAGTO, VLRPAGTO TYPE OF COLUMN TB_CUPOM_FMAPAGTO.VLR_PAGTO, NUMPAG TYPE OF COLUMN TB_CUPOM_FMAPAGTO.ID_NUMPAG) AS BEGIN FOR SELECT ID_NUMPAG, ID_FMAPAGTO, VLR_PAGTO FROM TB_CUPOM_FMAPAGTO WHERE ID_CUPOM =:NUM_CUPOM INTO:NUMPAG,:FMAPAGTO,:VLRPAGTO DO BEGIN SUSPEND; END END;';
erro = 'salvexmlret';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_SALVAXMLRET (ID_TRANS INTEGER, NUMCAIXA INTEGER, XML_RECEBIDO BLOB SUB_TYPE 1, RETORNO VARCHAR(10)) AS BEGIN IF (XML_RECEBIDO IS NULL) THEN BEGIN INSERT INTO TRI_PDV_SAT_REC (ID_TRANSACAO, NUM_CAIXA, XML_RECEB, RETORNO_SAT, PROCESSADO, HORAATUAL) VALUES (:ID_TRANS, :NUMCAIXA, ''ERRO'', :RETORNO, ''1'', CURRENT_TIMESTAMP); UPDATE TRI_PDV_SAT_ENV SET PROCESSADO=''1'' WHERE ID_TRANSACAO=:ID_TRANS; END ELSE BEGIN INSERT INTO TRI_PDV_SAT_REC (ID_TRANSACAO, NUM_CAIXA, XML_RECEB, RETORNO_SAT, PROCESSADO, HORAATUAL) VALUES (:ID_TRANS, :NUMCAIXA, :XML_RECEBIDO, :RETORNO, ''1'', CURRENT_TIMESTAMP); UPDATE TRI_PDV_SAT_ENV SET PROCESSADO=''1'' WHERE ID_TRANSACAO=:ID_TRANS; END /*WHEN ANY DO BEGIN END*/ END;';
erro = 'processaxml';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_PROCESSAXML RETURNS (COL_ID INTEGER, COL_CAIXA INTEGER, COL_XML BLOB SUB_TYPE 1, COL_PROCE CHAR(1), COL_HORA TIMESTAMP) AS BEGIN IF ((SELECT COUNT(ID_TRANSACAO) FROM TRI_PDV_SAT_ENV WHERE PROCESSADO = ''0'') &gt; 0) THEN BEGIN SELECT FIRST 1 ID_TRANSACAO, NUM_CAIXA, XML_A_ENV, PROCESSADO, HORAATUAL	FROM TRI_PDV_SAT_ENV WHERE PROCESSADO = ''0'' 	INTO :COL_ID, :COL_CAIXA, :COL_XML, :COL_PROCE, :COL_HORA;	END END;';
erro = 'enviaparasat';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ENVIAPARASAT ( ID_CAIXA INTEGER , XMLENVIADO BLOB SUB_TYPE 0 )RETURNS ( RECEBIDO CHAR(1) , TRANS INTEGER ) AS DECLARE VARIABLE TRANSACAO INTEGER; BEGIN SELECT MAX(ID_TRANSACAO) FROM TRI_PDV_SAT_ENV INTO :TRANSACAO ; IF (:TRANSACAO IS NULL) THEN TRANSACAO = 0; INSERT INTO TRI_PDV_SAT_ENV (ID_TRANSACAO , NUM_CAIXA , XML_A_ENV , PROCESSADO , HORAATUAL ) VALUES (:TRANSACAO +1 , :ID_CAIXA , :XMLENVIADO , ''0'' , CURRENT_TIMESTAMP ) ; RECEBIDO = ''1''; TRANS = :TRANSACAO + 1; SUSPEND; WHEN ANY DO BEGIN RECEBIDO = ''0''; TRANS = :TRANSACAO + 1; SUSPEND; END END;';
erro = 'movimentoclipp';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_LANCACAIXA_CLIPP (NUMCAIXA VARCHAR(60), TIPO CHAR(1), VALOR TYPE OF COLUMN TRI_PDV_OPER.DIN, PNCNTA SMALLINT) AS DECLARE VARIABLE ultimo_mov INTEGER; BEGIN INSERT INTO TB_MOVDIARIO(ID_MOVTO, DT_MOVTO, HR_MOVTO, HISTORICO, TIP_MOVTO, VLR_MOVTO, ID_CTAPLA) VALUES((SELECT NEXT VALUE FOR GEN_TB_MOVDIARIO_ID FROM RDB$DATABASE), CURRENT_DATE, CURRENT_TIME, ''Fechamento do caixa '' ||:NUMCAIXA || ''-'' || CURRENT_TIME, ''D'',:VALOR, 5); INSERT INTO TB_MOVDIARIO(ID_MOVTO, DT_MOVTO, HR_MOVTO, HISTORICO, TIP_MOVTO, VLR_MOVTO, ID_CTAPLA) VALUES((SELECT NEXT VALUE FOR GEN_TB_MOVDIARIO_ID FROM RDB$DATABASE), CURRENT_DATE, CURRENT_TIME, ''Fechamento do caixa '' ||:NUMCAIXA || ''- '' || CURRENT_TIME, ''C'',:VALOR, 147); END;';
erro = 'sproc lancamovctarec';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CTAREC_MOVTO (CAIXA SMALLINT, COO INTEGER) AS DECLARE IDCUPOM INTEGER; DECLARE IDCTAREC INTEGER; DECLARE IDMOVDIARIO INTEGER; BEGIN SELECT ID_CUPOM FROM TB_CUPOM WHERE NUM_CAIXA = :CAIXA AND COO = :COO INTO :IDCUPOM; SELECT MAX(ID_CTAREC) FROM TB_CONTA_RECEBER WHERE DOCUMENTO = (CAST(:CAIXA AS VARCHAR(12))||''-''||CAST(:COO AS VARCHAR(12))) INTO :IDCTAREC; SELECT MAX(ID_MOVTO) FROM TB_MOVDIARIO WHERE TIP_MOVTO = ''D'' AND HISTORICO CONTAINING (CAST(:CAIXA AS VARCHAR(12))||''-''||CAST(:COO AS VARCHAR(12))) INTO :IDMOVDIARIO; INSERT INTO TB_CTAREC_MOVTO (ID_MOVTO, ID_CTAREC) VALUES(:IDMOVDIARIO, :IDCTAREC); END; ';
erro = 'sproc checadinemcaixa';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_VALOREMCAIXA (CAIXA INTEGER) RETURNS (DINHEIROEMCAIXA TYPE OF COLUMN TRI_PDV_OPER.DIN) AS DECLARE VARIABLE DINH TYPE OF COLUMN TRI_PDV_OPER.DIN; DECLARE VARIABLE SUPR TYPE OF COLUMN TRI_PDV_OPER.DIN; DECLARE VARIABLE SANG TYPE OF COLUMN TRI_PDV_OPER.DIN; BEGIN SELECT FIRST 1 DIN FROM TRI_PDV_OPER WHERE ID_CAIXA = :CAIXA AND ABERTO = ''S'' INTO :DINH; SELECT FIRST 1 SUPRIMENTOS FROM TRI_PDV_OPER WHERE ID_CAIXA = :CAIXA AND ABERTO = ''S'' INTO :SUPR; SELECT FIRST 1 SANGRIAS FROM TRI_PDV_OPER WHERE ID_CAIXA = :CAIXA AND ABERTO = ''S'' INTO :SANG; DINHEIROEMCAIXA = :DINH + :SUPR - :SANG; SUSPEND; END;';
erro = 'sproc conta cupons';
execute statement 'CREATE OR ALTER PROCEDURE sp_tri_contacupons (NUMCAIXA INTEGER, STATUS CHAR(1)) RETURNS (QUANT_CUPONS INTEGER) AS DECLARE VARIABLE IDOPER INTEGER; DECLARE VARIABLE DT_ABERT DATE; DECLARE VARIABLE HR_ABERT TIME; BEGIN SELECT ID_OPER FROM TRI_PDV_OPER WHERE ID_CAIXA = :NUMCAIXA AND ABERTO = ''S'' INTO IDOPER; HR_ABERT = (SELECT CAST (CURRENTTIME AS TIME) FROM TRI_PDV_OPER WHERE ID_OPER = :IDOPER); DT_ABERT = (SELECT CAST (CURRENTTIME AS DATE) FROM TRI_PDV_OPER WHERE ID_OPER = :IDOPER); SELECT COUNT (ID_CUPOM) FROM TB_CUPOM WHERE STATUS = :STATUS AND DT_CUPOM &gt;= :DT_ABERT AND HR_CUPOM &gt;= :HR_ABERT INTO QUANT_CUPONS; SUSPEND; END ;';
erro = 'sproc conta pagamentos';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CONTAFMPGTO (NUMCAIXA INTEGER, STATUS CHAR(1)) RETURNS (IDPAGTO_OUT INTEGER, QUANT_CUPONS INTEGER) AS DECLARE VARIABLE IDOPER INTEGER; DECLARE VARIABLE IDPAGAMENTO INTEGER; DECLARE VARIABLE FMAPGTO SMALLINT; DECLARE VARIABLE TS_ABERT TIMESTAMP; BEGIN SELECT ID_OPER FROM TRI_PDV_OPER WHERE ID_CAIXA =:NUMCAIXA AND ABERTO = ''S'' INTO IDOPER; TS_ABERT = ( SELECT CURRENTTIME FROM TRI_PDV_OPER WHERE ID_OPER =:IDOPER); FOR SELECT ID_FMAPGTO FROM TRI_PDV_REL_METODO_PAGTO INTO :FMAPGTO DO BEGIN SELECT COUNT(TB_CUPOM_FMAPAGTO.ID_FMAPAGTO) FROM TB_CUPOM INNER JOIN TB_CUPOM_FMAPAGTO ON (TB_CUPOM_FMAPAGTO.ID_CUPOM = TB_CUPOM.ID_CUPOM) WHERE TB_CUPOM.STATUS = ''F'' AND TB_CUPOM_FMAPAGTO.ID_FMAPAGTO = :FMAPGTO AND CAST (DT_CUPOM ||'' ''||HR_CUPOM AS TIMESTAMP) &gt;= :TS_ABERT INTO QUANT_CUPONS; IDPAGTO_OUT = ( SELECT TRI_PDV_REL_METODO_PAGTO.ID_PAGAMENTO FROM TRI_PDV_REL_METODO_PAGTO WHERE TRI_PDV_REL_METODO_PAGTO.ID_FMAPGTO = :FMAPGTO); SUSPEND; END END';
						erro = 'sproc novo nsu';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_SALVA_NSU (CUPOM INTEGER, NSU VARCHAR(40), REDE VARCHAR(3), AUTORIZ VARCHAR(6), pVLR_OPER NUMERIC(18,4)) AS DECLARE ultimocupom INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_TRI_NSU FROM RDB$DATABASE INTO :ultimocupom; IF (:ultimocupom IS NULL) THEN ultimocupom = 0; INSERT INTO TRI_PDV_NSU (ID_TEF, ID_CUPOM, NSU, REDE_ADQ, VLR_OPER) VALUES (:ultimocupom, :CUPOM, :NSU, :REDE, :pVLR_OPER); END; ';
						erro = 'sproc preenche consulta';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_PREENCHECONSULTA ( STRING VARCHAR(128) , COD_INT INTEGER ) RETURNS ( ESTOQUE INTEGER , CODBARRA VARCHAR(18) , DESCRICAO VARCHAR(50) , QTDATUAL TYPE OF COLUMN TRI_PDV_OPER.DIN , PRCVENDA TYPE OF COLUMN TRI_PDV_OPER.DIN , QTDATAC TYPE OF COLUMN TRI_PDV_OPER.DIN , PRCATACADO TYPE OF COLUMN TRI_PDV_OPER.DIN) AS BEGIN FOR SELECT FIRST 30 B.ID_IDENTIFICADOR , B.COD_BARRA , A.DESCRICAO , B.QTD_ATUAL , A.PRC_VENDA , A.QTD_ATACADO , A.PRC_ATACADO FROM TB_ESTOQUE A INNER JOIN TB_EST_IDENTIFICADOR C ON C.ID_ESTOQUE = A.ID_ESTOQUE INNER JOIN TB_EST_PRODUTO B ON B.ID_IDENTIFICADOR = C.ID_IDENTIFICADOR WHERE ( A.STATUS = ''A'' ) AND ( ( A.DESCRICAO CONTAINING:STRING ) OR ( B.COD_BARRA =:STRING ) OR ( B.ID_IDENTIFICADOR =:COD_INT ) ) INTO :ESTOQUE , :CODBARRA , :DESCRICAO , :QTDATUAL , :PRCVENDA , :QTDATAC , :PRCATACADO DO SUSPEND ; END';
						erro = 'sproc lancamovimento';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_LANCAMOVDIARIO(NUMCAIXA VARCHAR(60), VALOR TYPE OF COLUMN TRI_PDV_OPER.DIN, DESCRICAO_MOV VARCHAR(60), CONTA_ORIGEM SMALLINT, CONTA_DESTINO SMALLINT) RETURNS (erro smallint) AS DECLARE VARIABLE ultimo_mov INTEGER; BEGIN INSERT INTO TB_MOVDIARIO(ID_MOVTO, DT_MOVTO, HR_MOVTO, HISTORICO, TIP_MOVTO, VLR_MOVTO, ID_CTAPLA) VALUES((SELECT NEXT VALUE FOR GEN_TB_MOVDIARIO_ID FROM RDB$DATABASE), CURRENT_DATE, CURRENT_TIME, :DESCRICAO_MOV, ''D'',:VALOR, :CONTA_DESTINO); INSERT INTO TB_MOVDIARIO(ID_MOVTO, DT_MOVTO, HR_MOVTO, HISTORICO, TIP_MOVTO, VLR_MOVTO, ID_CTAPLA) VALUES((SELECT NEXT VALUE FOR GEN_TB_MOVDIARIO_ID FROM RDB$DATABASE), CURRENT_DATE, CURRENT_TIME, :DESCRICAO_MOV, ''C'',:VALOR, :CONTA_ORIGEM); erro = 1; SUSPEND; WHEN ANY DO BEGIN erro = 0; END END;';
						erro = 'sproc lancacontarec';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_LANCACONTAREC ( IDCUPOM INTEGER , CUPOM VARCHAR(12) , VENCIMENTO DATE , VALOR TYPE OF COLUMN TRI_PDV_OPER.DIN , CLIENTE INTEGER , DESCRICAO VARCHAR(30) ) RETURNS(RESULTADO INTEGER) AS DECLARE VAR1 INTEGER; DECLARE NUMCAIXA SMALLINT; DECLARE COO INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_TB_CTAREC_ID FROM RDB$DATABASE INTO:VAR1 ; IF(:VAR1 IS NULL) THEN VAR1 = 0; SELECT NUM_CAIXA, COO FROM TB_CUPOM WHERE ID_CUPOM = :IDCUPOM INTO :NUMCAIXA, :COO ; INSERT INTO TB_CONTA_RECEBER (ID_CTAREC , DOCUMENTO , HISTORICO , DT_EMISSAO , DT_VENCTO , VLR_CTAREC , TIP_CTAREC , ID_PORTADOR , ID_CLIENTE , INV_REFERENCIA ) VALUES (:VAR1 ,(CAST(:NUMCAIXA AS VARCHAR(12)) ||''-'' ||CAST(:COO AS VARCHAR(12))) , :DESCRICAO , CURRENT_DATE , :VENCIMENTO , :VALOR , ''C'' , 1 , :CLIENTE , ''D'' || LPAD(:VAR1, 7, ''0'') || LPAD(:NUMCAIXA, 2, ''0'') || ''X'' || LPAD(:IDCUPOM, 7, ''0'') ) ; INSERT INTO TB_CUPOM_CTAREC (ID_CUPOM , ID_CTAREC ) VALUES (:IDCUPOM , :VAR1 ) ; RESULTADO = 1; SUSPEND; WHEN ANY DO BEGIN RESULTADO = 0; SUSPEND; END END';
						erro = 'sproc lancaitemcupom';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_LANCAITEMCUPOM ( CUPOM INTEGER , NUM_PROD INTEGER , ID_PROD INTEGER , QTD_PROD TYPE OF COLUMN TRI_PDV_OPER.DIN , VLR_PROD TYPE OF COLUMN TRI_PDV_OPER.DIN ) RETURNS (retIDITEMCUP TYPE OF COLUMN TB_CUPOM_ITEM.ID_ITEMCUP) AS DECLARE VARIABLE IDITEMCUP INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_TB_CUPOM_ITEM_ID FROM RDB$DATABASE INTO :IDITEMCUP ; IF(IDITEMCUP IS NULL) THEN IDITEMCUP = 0; INSERT INTO TB_CUPOM_ITEM (ID_ITEMCUP , ID_CUPOM , ID_IDENTIF , NUM_ITEM , QTD_ITEM , VLR_UNIT , ITEM_CANCEL , PRC_CUSTO ) VALUES (:IDITEMCUP , :cupom , :id_prod , :num_prod , :qtd_prod , :vlr_prod , ''N'' , ( SELECT FIRST 1 PRC_CUSTO FROM TB_ESTOQUE INNER JOIN TB_EST_IDENTIFICADOR ON TB_ESTOQUE.ID_ESTOQUE = TB_EST_IDENTIFICADOR.ID_ESTOQUE WHERE TB_EST_IDENTIFICADOR.ID_IDENTIFICADOR = :id_prod ) ) ; retIDITEMCUP = :IDITEMCUP; SUSPEND; END;';
						erro = 'deu certo';
						SUSPEND;
						WHEN ANY DO
						BEGIN

						END
						END;</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="D_PROCEDURES2" Modifier="Public" Name="D_PROCEDURES2" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy14" UserSourceName="D_PROCEDURES2">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>CREATE OR ALTER PROCEDURE SP_TRI_PROCEDURES2
RETURNS (
	erro VARCHAR(64)
)
AS
BEGIN
	erro = 'sproc cupom get all unsynced';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CUPOM_GETALL_UNSYNCED RETURNS( ID_CUPOM INTEGER, COO INTEGER, DT_CUPOM DATE, HR_CUPOM TIME, NUM_CAIXA SMALLINT, ID_CLIENTE INTEGER, ID_VENDEDOR SMALLINT, STATUS CHAR( 1 ), ID_PARCELA SMALLINT, IND_CANCEL CHAR( 1 ), ID_IFS SMALLINT, ID_NATOPE INTEGER, VLR_TROCO TYPE OF COLUMN TRI_PDV_OPER.DIN, VLR_TOTAL TYPE OF COLUMN TRI_PDV_OPER.DIN, VLR_DESC TYPE OF COLUMN TRI_PDV_OPER.DIN, TIP_DESC CHAR( 1 ), VLR_ACRES TYPE OF COLUMN TRI_PDV_OPER.DIN, GNF INTEGER, CHAVE VARCHAR( 32 ), TOTAL_TRIBUTOS_IBPT TYPE OF COLUMN TRI_PDV_OPER.DIN, TOTAL_TRIB_FED TYPE OF COLUMN TRI_PDV_OPER.DIN, TOTAL_TRIB_EST TYPE OF COLUMN TRI_PDV_OPER.DIN, TOTAL_TRIB_MUN TYPE OF COLUMN TRI_PDV_OPER.DIN, SYNCED SMALLINT, QTD_CTAREC INTEGER) AS BEGIN FOR SELECT FIRST 200 COALESCE(a.ID_CUPOM, 0) , a.COO , a.DT_CUPOM , a.HR_CUPOM , a.NUM_CAIXA , a.ID_CLIENTE , a.ID_VENDEDOR , a.STATUS , a.ID_PARCELA , a.IND_CANCEL , a.ID_IFS , a.ID_NATOPE , a.VLR_TROCO , a.VLR_TOTAL , a.VLR_DESC , a.TIP_DESC , a.VLR_ACRES , a.GNF , a.CHAVE , a.TOTAL_TRIBUTOS_IBPT, a.TOTAL_TRIB_FED , a.TOTAL_TRIB_EST , a.TOTAL_TRIB_MUN , a.SYNCED , COUNT(b.ID_CTAREC) QTD_CTAREC FROM TB_CUPOM a LEFT JOIN TB_CUPOM_CTAREC b ON a.ID_CUPOM = b.ID_CUPOM WHERE ( SYNCED IS NULL OR SYNCED = 0 ) AND STATUS = ''F'' GROUP BY a.ID_CUPOM , a.COO , a.DT_CUPOM , a.HR_CUPOM , a.NUM_CAIXA , a.ID_CLIENTE , a.ID_VENDEDOR , a.STATUS , a.ID_PARCELA , a.IND_CANCEL , a.ID_IFS , a.ID_NATOPE , a.VLR_TROCO , a.VLR_TOTAL , a.VLR_DESC , a.TIP_DESC , a.VLR_ACRES , a.GNF , a.CHAVE , a.TOTAL_TRIBUTOS_IBPT, a.TOTAL_TRIB_FED , a.TOTAL_TRIB_EST , a.TOTAL_TRIB_MUN , a.SYNCED ORDER BY DT_CUPOM, HR_CUPOM INTO :ID_CUPOM , :COO , :DT_CUPOM , :HR_CUPOM , :NUM_CAIXA , :ID_CLIENTE , :ID_VENDEDOR , :STATUS , :ID_PARCELA , :IND_CANCEL , :ID_IFS , :ID_NATOPE , :VLR_TROCO , :VLR_TOTAL , :VLR_DESC , :TIP_DESC , :VLR_ACRES , :GNF , :CHAVE , :TOTAL_TRIBUTOS_IBPT, :TOTAL_TRIB_FED , :TOTAL_TRIB_EST , :TOTAL_TRIB_MUN , :SYNCED , :QTD_CTAREC DO BEGIN SUSPEND; END END;';	
	erro = 'sproc cupom set synced';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CUPOMSETSYNCED (pIdCupom INTEGER, pSynced SMALLINT) AS BEGIN UPDATE TB_CUPOM SET SYNCED = :pSynced WHERE ID_CUPOM = :pIdCupom; END; ';
	
	erro = 'sproc cupom sync insert';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CUPOMSYNCINSERT ( pCOO INTEGER , pCCF INTEGER , pDT_CUPOM DATE , pHR_CUPOM TIME , pNUM_CAIXA SMALLINT , pID_CLIENTE INTEGER , pID_VENDEDOR SMALLINT , pSTATUS CHAR(1) , pID_PARCELA SMALLINT , pIND_CANCEL CHAR(1) , pID_IFS SMALLINT , pID_NATOPE INTEGER , pVLR_TROCO TYPE OF COLUMN TRI_PDV_OPER.DIN , pVLR_TOTAL TYPE OF COLUMN TRI_PDV_OPER.DIN , pVLR_DESC TYPE OF COLUMN TRI_PDV_OPER.DIN , pTIP_DESC CHAR(1) , pVLR_ACRES TYPE OF COLUMN TRI_PDV_OPER.DIN , pGNF INTEGER , pCHAVE VARCHAR(32) , pTOTAL_TRIBUTOS_IBPT TYPE OF COLUMN TRI_PDV_OPER.DIN , pTOTAL_TRIB_FED TYPE OF COLUMN TRI_PDV_OPER.DIN , pTOTAL_TRIB_EST TYPE OF COLUMN TRI_PDV_OPER.DIN , pTOTAL_TRIB_MUN TYPE OF COLUMN TRI_PDV_OPER.DIN , pSYNCED SMALLINT ) RETURNS ( CUPOMUSAVEL INTEGER ) AS DECLARE VARIABLE ULTIMOCUPOM INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_TB_CUPOM_ID FROM RDB$DATABASE INTO :ultimocupom ; IF( :ultimocupom IS NULL ) THEN ultimocupom = 0; BEGIN INSERT INTO TB_CUPOM ( ID_CUPOM , COO , CCF , DT_CUPOM , HR_CUPOM , NUM_CAIXA , ID_CLIENTE , ID_VENDEDOR , STATUS , ID_PARCELA , IND_CANCEL , ID_IFS , ID_NATOPE , VLR_TROCO , VLR_TOTAL , VLR_DESC , TIP_DESC , VLR_ACRES , GNF , CHAVE , TOTAL_TRIBUTOS_IBPT , TOTAL_TRIB_FED , TOTAL_TRIB_EST , TOTAL_TRIB_MUN , SYNCED ) VALUES (:ultimocupom , :pCOO , :pCCF , :pDT_CUPOM , :pHR_CUPOM , :pNUM_CAIXA , :pID_CLIENTE , :pID_VENDEDOR , :pSTATUS , :pID_PARCELA , :pIND_CANCEL , :pID_IFS , :pID_NATOPE , :pVLR_TROCO , :pVLR_TOTAL , :pVLR_DESC , :pTIP_DESC , :pVLR_ACRES , :pGNF , :pCHAVE , :pTOTAL_TRIBUTOS_IBPT , :pTOTAL_TRIB_FED , :pTOTAL_TRIB_EST , :pTOTAL_TRIB_MUN , :pSYNCED ) ; cupomusavel = ultimocupom; END END;';
	
	erro = 'sproc cupom item sync insert';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CUPOMITEMSYNCINSERT (pID_CUPOM INTEGER , pID_IDENTIF INTEGER , pNUM_ITEM INTEGER , pQTD_ITEM TYPE OF COLUMN TRI_PDV_OPER.DIN , pVLR_UNIT TYPE OF COLUMN TRI_PDV_OPER.DIN , pPRC_CUSTO TYPE OF COLUMN TRI_PDV_OPER.DIN , pALI_ICM TYPE OF COLUMN TRI_PDV_OPER.DIN , pVLR_ICM TYPE OF COLUMN TRI_PDV_OPER.DIN , pCOD_TOTALP CHAR(7) , pORD_APLICA CHAR(1) , pITEM_CANCEL CHAR(1) , pCST VARCHAR(3) , pUNI_MEDIDA VARCHAR(3) , pCASAS_QTD CHAR(1) , pCASAS_VLR CHAR(1) , pTIPO_DESC CHAR(1) , pIAT CHAR(1) , pIPPT CHAR(1) , pCOD_BARRA VARCHAR(14) , pVLR_ACRE TYPE OF COLUMN TRI_PDV_OPER.DIN , pVLR_PIS TYPE OF COLUMN TRI_PDV_OPER.DIN , pVLR_COFINS TYPE OF COLUMN TRI_PDV_OPER.DIN , pCHAVE VARCHAR(35) , pCST_PIS VARCHAR(3) , pCST_COFINS VARCHAR(3) , pCFOP VARCHAR(4) , pVLR_TRIBUTOS_IBPT TYPE OF COLUMN TRI_PDV_OPER.DIN, pALIQ_ENCONT_IBPT CHAR(1), pDT_ITEM DATE , pHR_ITEM TIME , pVLR_TRIB_FED TYPE OF COLUMN TRI_PDV_OPER.DIN , pVLR_TRIB_EST TYPE OF COLUMN TRI_PDV_OPER.DIN , pVLR_TRIB_MUN TYPE OF COLUMN TRI_PDV_OPER.DIN , pDESCRICAO VARCHAR(100) ) RETURNS ( rNewIdItemCup INTEGER ) AS DECLARE VARIABLE newIdItemCup INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_TB_CUPOM_ITEM_ID FROM RDB$DATABASE INTO :newIdItemCup; IF( :newIdItemCup IS NULL ) THEN newIdItemCup = 0; BEGIN INSERT INTO TB_CUPOM_ITEM ( ID_ITEMCUP , ID_CUPOM , ID_IDENTIF , NUM_ITEM , QTD_ITEM , VLR_UNIT , PRC_CUSTO , ALI_ICM , VLR_ICM , COD_TOTALP , ORD_APLICA , ITEM_CANCEL , CST , UNI_MEDIDA , CASAS_QTD , CASAS_VLR , TIPO_DESC , IAT , IPPT , COD_BARRA , VLR_ACRE , VLR_PIS , VLR_COFINS , CHAVE , CST_PIS , CST_COFINS , CFOP , VLR_TRIBUTOS_IBPT, ALIQ_ENCONT_IBPT , DT_ITEM , HR_ITEM , VLR_TRIB_FED , VLR_TRIB_EST , VLR_TRIB_MUN , DESCRICAO ) VALUES ( :newIdItemCup , :pID_CUPOM , :pID_IDENTIF , :pNUM_ITEM , :pQTD_ITEM , :pVLR_UNIT , :pPRC_CUSTO , :pALI_ICM , :pVLR_ICM , :pCOD_TOTALP , :pORD_APLICA , :pITEM_CANCEL , :pCST , :pUNI_MEDIDA , :pCASAS_QTD , :pCASAS_VLR , :pTIPO_DESC , :pIAT , :pIPPT , :pCOD_BARRA , :pVLR_ACRE , :pVLR_PIS , :pVLR_COFINS , :pCHAVE , :pCST_PIS , :pCST_COFINS , :pCFOP , :pVLR_TRIBUTOS_IBPT, :pALIQ_ENCONT_IBPT , :pDT_ITEM , :pHR_ITEM , :pVLR_TRIB_FED , :pVLR_TRIB_EST , :pVLR_TRIB_MUN , :pDESCRICAO ); rNewIdItemCup = newIdItemCup; END END;';
	erro = 'sproc ctarec get by id_cupom';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CTAREC_GETBY_IDCUPOM( pIdCupom INTEGER ) RETURNS( ID_CTAREC INTEGER, DOCUMENTO VARCHAR(12), HISTORICO VARCHAR(50), DT_EMISSAO DATE, DT_VENCTO DATE, VLR_CTAREC TYPE OF COLUMN TRI_PDV_OPER.DIN, TIP_CTAREC CHAR(1), ID_PORTADOR INTEGER, ID_CLIENTE INTEGER, INV_REFERENCIA VARCHAR(18), DT_VENCTO_ORIG DATE, NSU_CARTAO VARCHAR(32)) AS BEGIN FOR SELECT COALESCE(a.ID_CTAREC, 0) , a.DOCUMENTO , a.HISTORICO , a.DT_EMISSAO , a.DT_VENCTO , a.VLR_CTAREC , a.TIP_CTAREC , a.ID_PORTADOR , a.ID_CLIENTE , a.INV_REFERENCIA , a.DT_VENCTO_ORIG , a.NSU_CARTAO FROM TB_CONTA_RECEBER a JOIN TB_CUPOM_CTAREC b ON a.ID_CTAREC = b.ID_CTAREC WHERE b.ID_CUPOM =:pIdCupom INTO :ID_CTAREC , :DOCUMENTO , :HISTORICO , :DT_EMISSAO , :DT_VENCTO , :VLR_CTAREC , :TIP_CTAREC , :ID_PORTADOR , :ID_CLIENTE , :INV_REFERENCIA , :DT_VENCTO_ORIG , :NSU_CARTAO DO SUSPEND; END;';
	erro = 'sproc ctarec sync insert';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CTAREC_SYNC_INSERT (pDOCUMENTO VARCHAR(12), pHISTORICO VARCHAR(50), pDT_EMISSAO DATE, pDT_VENCTO DATE, pVLR_CTAREC TYPE OF COLUMN TRI_PDV_OPER.DIN, pTIP_CTAREC CHAR(1), pID_PORTADOR INTEGER, pID_CLIENTE INTEGER, pINV_REFERENCIA VARCHAR(18), pDT_VENCTO_ORIG DATE, pNSU_CARTAO VARCHAR(32) ) RETURNS ( rNewIdCtarec INTEGER ) AS DECLARE VARIABLE newIdCtarec INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_TB_CTAREC_ID FROM RDB$DATABASE INTO :newIdCtarec; IF( :newIdCtarec IS NULL ) THEN newIdCtarec = 0; BEGIN INSERT INTO TB_CONTA_RECEBER ( ID_CTAREC , DOCUMENTO , HISTORICO , DT_EMISSAO , DT_VENCTO , VLR_CTAREC , TIP_CTAREC , ID_PORTADOR , ID_CLIENTE , INV_REFERENCIA, DT_VENCTO_ORIG, NSU_CARTAO ) VALUES ( :newIdCtarec , :pDOCUMENTO , :pHISTORICO , :pDT_EMISSAO , :pDT_VENCTO , :pVLR_CTAREC , :pTIP_CTAREC , :pID_PORTADOR , :pID_CLIENTE , :pINV_REFERENCIA , :pDT_VENCTO_ORIG , :pNSU_CARTAO ); rNewIdCtarec = newIdCtarec; END END;';
	erro = 'sproc movto get by id_ctarec';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MOVTO_GETBY_IDCTAREC (PIDCTAREC INTEGER) RETURNS ( ID_MOVTO INTEGER, DT_MOVTO DATE, HR_MOVTO TIME, HISTORICO VARCHAR(60), TIP_MOVTO CHAR(1), VLR_MOVTO TYPE OF COLUMN TRI_PDV_OPER.DIN, ID_CTAPLA SMALLINT, SYNCED SMALLINT ) AS BEGIN FOR SELECT COALESCE(a.ID_MOVTO, 0) , a.DT_MOVTO , a.HR_MOVTO , a.HISTORICO , a.TIP_MOVTO , a.VLR_MOVTO , a.ID_CTAPLA , a.SYNCED FROM TB_MOVDIARIO a JOIN TB_CTAREC_MOVTO b ON a.ID_MOVTO = b.ID_MOVTO WHERE b.ID_CTAREC =:pIdCtarec INTO :ID_MOVTO , :DT_MOVTO , :HR_MOVTO , :HISTORICO, :TIP_MOVTO, :VLR_MOVTO, :ID_CTAPLA, :SYNCED DO SUSPEND; END';
	erro = 'sproc movto sync insert';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MOVTO_SYNC_INSERT ( pDT_MOVTO DATE , pHR_MOVTO TIME , pHISTORICO VARCHAR( 60 ) , pTIP_MOVTO CHAR( 1 ) , pVLR_MOVTO TYPE OF COLUMN TRI_PDV_OPER.DIN , pID_CTAPLA SMALLINT , pSYNCED SMALLINT ) RETURNS( rNewIdMovto INTEGER ) AS DECLARE VARIABLE newIdMovto INTEGER; BEGIN BEGIN SELECT NEXT VALUE FOR GEN_TB_MOVDIARIO_ID FROM RDB$DATABASE INTO :newIdMovto ; END IF(:newIdMovto IS NULL ) THEN newIdMovto = 0; BEGIN INSERT INTO TB_MOVDIARIO ( ID_MOVTO , DT_MOVTO , HR_MOVTO , HISTORICO , TIP_MOVTO , VLR_MOVTO , ID_CTAPLA , SYNCED ) VALUES (:newIdMovto , :pDT_MOVTO , :pHR_MOVTO , :pHISTORICO , :pTIP_MOVTO , :pVLR_MOVTO , :pID_CTAPLA , :pSYNCED ) ; rNewIdMovto = newIdMovto; END END;';
	erro = 'sproc movto get all unsynced';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MOVTO_GETALL_UNSYNCED RETURNS ( ID_MOVTO INTEGER , DT_MOVTO DATE , HR_MOVTO TIME , HISTORICO VARCHAR(60) , TIP_MOVTO CHAR(1) , VLR_MOVTO TYPE OF COLUMN TRI_PDV_OPER.DIN , ID_CTAPLA SMALLINT , SYNCED SMALLINT ) AS BEGIN FOR SELECT FIRST 200 COALESCE(a.ID_MOVTO, 0) , a.DT_MOVTO , a.HR_MOVTO , a.HISTORICO , a.TIP_MOVTO , a.VLR_MOVTO , a.ID_CTAPLA , a.SYNCED FROM TB_MOVDIARIO a WHERE ( a.SYNCED IS NULL OR a.SYNCED = 0 ) ORDER BY a.DT_MOVTO , a.HR_MOVTO INTO :ID_MOVTO , :DT_MOVTO , :HR_MOVTO , :HISTORICO , :TIP_MOVTO , :VLR_MOVTO , :ID_CTAPLA , :SYNCED DO BEGIN SUSPEND; END END;';
	erro = 'sproc movto set synced';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MOVTOSETSYNCED (pIdMovto INTEGER, pSynced SMALLINT) AS BEGIN UPDATE TB_MOVDIARIO SET SYNCED = :pSynced WHERE ID_MOVTO = :pIdMovto; END;';
	erro = 'sproc cupom get dynamic sync';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CUPOM_GETALL_SYNC ( TIP_QUERY SMALLINT ) RETURNS ( ID_CUPOM INTEGER , COO INTEGER , DT_CUPOM DATE , HR_CUPOM TIME , NUM_CAIXA SMALLINT , ID_CLIENTE INTEGER , ID_VENDEDOR SMALLINT , STATUS CHAR( 1 ) , ID_PARCELA SMALLINT , IND_CANCEL CHAR( 1 ) , ID_IFS SMALLINT , ID_NATOPE INTEGER , VLR_TROCO TYPE OF COLUMN TRI_PDV_OPER.DIN , VLR_TOTAL TYPE OF COLUMN TRI_PDV_OPER.DIN , VLR_DESC TYPE OF COLUMN TRI_PDV_OPER.DIN , TIP_DESC CHAR( 1 ) , VLR_ACRES TYPE OF COLUMN TRI_PDV_OPER.DIN , GNF INTEGER , CHAVE VARCHAR( 32 ) , TOTAL_TRIBUTOS_IBPT TYPE OF COLUMN TRI_PDV_OPER.DIN , TOTAL_TRIB_FED TYPE OF COLUMN TRI_PDV_OPER.DIN , TOTAL_TRIB_EST TYPE OF COLUMN TRI_PDV_OPER.DIN , TOTAL_TRIB_MUN TYPE OF COLUMN TRI_PDV_OPER.DIN , SYNCED SMALLINT , QTD_CTAREC INTEGER , ID_MAIT_PEDIDO INTEGER ) AS BEGIN FOR SELECT FIRST 200 COALESCE(a.ID_CUPOM, 0) , a.COO , a.DT_CUPOM , a.HR_CUPOM , a.NUM_CAIXA , a.ID_CLIENTE , a.ID_VENDEDOR , a.STATUS , a.ID_PARCELA , a.IND_CANCEL , a.ID_IFS , a.ID_NATOPE , a.VLR_TROCO , a.VLR_TOTAL , a.VLR_DESC , a.TIP_DESC , a.VLR_ACRES , a.GNF , a.CHAVE , a.TOTAL_TRIBUTOS_IBPT , a.TOTAL_TRIB_FED , a.TOTAL_TRIB_EST , a.TOTAL_TRIB_MUN , a.SYNCED , COUNT(b.ID_CTAREC) QTD_CTAREC , c.ID_MAIT_PEDIDO FROM TB_CUPOM a LEFT JOIN TB_CUPOM_CTAREC b ON a.ID_CUPOM = b.ID_CUPOM LEFT JOIN TRI_MAIT_PEDIDO_CUPOM c ON a.ID_CUPOM = c.ID_CUPOM WHERE ( :TIP_QUERY = 0 AND ( ( a.SYNCED IS NULL OR a.SYNCED = 0 ) AND a.STATUS = ''F'' ) ) OR ( :TIP_QUERY = 1 AND ( a.SYNCED = 1 AND a.STATUS = ''C'' ) ) GROUP BY a.ID_CUPOM , a.COO , a.DT_CUPOM , a.HR_CUPOM , a.NUM_CAIXA , a.ID_CLIENTE , a.ID_VENDEDOR , a.STATUS , a.ID_PARCELA , a.IND_CANCEL , a.ID_IFS , a.ID_NATOPE , a.VLR_TROCO , a.VLR_TOTAL , a.VLR_DESC , a.TIP_DESC , a.VLR_ACRES , a.GNF , a.CHAVE , a.TOTAL_TRIBUTOS_IBPT , a.TOTAL_TRIB_FED , a.TOTAL_TRIB_EST , a.TOTAL_TRIB_MUN , a.SYNCED , c.ID_MAIT_PEDIDO ORDER BY a.DT_CUPOM , a.HR_CUPOM INTO :ID_CUPOM , :COO , :DT_CUPOM , :HR_CUPOM , :NUM_CAIXA , :ID_CLIENTE , :ID_VENDEDOR , :STATUS , :ID_PARCELA , :IND_CANCEL , :ID_IFS , :ID_NATOPE , :VLR_TROCO , :VLR_TOTAL , :VLR_DESC , :TIP_DESC , :VLR_ACRES , :GNF , :CHAVE , :TOTAL_TRIBUTOS_IBPT , :TOTAL_TRIB_FED , :TOTAL_TRIB_EST , :TOTAL_TRIB_MUN , :SYNCED , :QTD_CTAREC , :ID_MAIT_PEDIDO DO BEGIN SUSPEND ; END END;';	
	erro = 'sproc ctarec get by coo and num_caixa';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CTAREC_GETBY_COO_NMCAIX ( pCoo INTEGER , pNumcaixa SMALLINT ) RETURNS ( ID_CTAREC INTEGER , DOCUMENTO VARCHAR(12) , HISTORICO VARCHAR(50) , DT_EMISSAO DATE , DT_VENCTO DATE , VLR_CTAREC TYPE OF COLUMN TRI_PDV_OPER.DIN , TIP_CTAREC CHAR(1) , ID_PORTADOR INTEGER , ID_CLIENTE INTEGER , INV_REFERENCIA VARCHAR(18) , DT_VENCTO_ORIG DATE , NSU_CARTAO VARCHAR(32) ) AS BEGIN FOR SELECT a.ID_CTAREC , a.DOCUMENTO , a.HISTORICO , a.DT_EMISSAO , a.DT_VENCTO , a.VLR_CTAREC , a.TIP_CTAREC , a.ID_PORTADOR , a.ID_CLIENTE , a.INV_REFERENCIA , a.DT_VENCTO_ORIG , a.NSU_CARTAO FROM TB_CONTA_RECEBER a JOIN TB_CUPOM_CTAREC b ON a.ID_CTAREC = b.ID_CTAREC JOIN TB_CUPOM c ON c.ID_CUPOM = b.ID_CUPOM WHERE c.COO = :pCoo AND c.NUM_CAIXA = :pNumcaixa INTO :ID_CTAREC , :DOCUMENTO , :HISTORICO , :DT_EMISSAO , :DT_VENCTO , :VLR_CTAREC , :TIP_CTAREC , :ID_PORTADOR , :ID_CLIENTE , :INV_REFERENCIA , :DT_VENCTO_ORIG , :NSU_CARTAO DO SUSPEND ; END;';
	erro = 'sproc ctarec movto sync delete';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CTARECMOVTO_SYNC_DEL( pIdMovto INTEGER, pIdCtarec INTEGER) AS BEGIN DELETE FROM TB_CTAREC_MOVTO WHERE ID_MOVTO = :pIdMovto AND ID_CTAREC= :pIdCtarec; END;';
	erro = 'sproc cupom ctarec sync delete';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CUPOMCTAREC_SYNC_DEL( pCoo INTEGER, pNumcaixa SMALLINT, pIdCtarec INTEGER) AS DECLARE VARIABLE idCupom INTEGER; BEGIN SELECT ID_CUPOM FROM TB_CUPOM WHERE COO = :pCoo AND NUM_CAIXA = :pNumcaixa INTO :idCupom; DELETE FROM TB_CUPOM_CTAREC WHERE ID_CUPOM = :idCupom AND ID_CTAREC= :pIdCtarec; END;';
	erro = 'sproc movto sync delete';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MOVTO_SYNC_DEL( pIdMovto INTEGER) AS BEGIN DELETE FROM TB_MOVDIARIO WHERE ID_MOVTO = :pIdMovto; END;';
	erro = 'sproc cupom fmapagto get by id_cupom';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CUPOMFMAPAGTO_BY_IDCUP( pIdCupom INTEGER ) RETURNS( ID_NUMPAG INTEGER, VLR_PAGTO TYPE OF COLUMN TRI_PDV_OPER.DIN, VLR_ESTORNO TYPE OF COLUMN TRI_PDV_OPER.DIN, IND_ESTORNO CHAR(1), ID_CUPOM INTEGER, ID_FMAPAGTO SMALLINT, CHAVE VARCHAR(32)) AS BEGIN FOR SELECT a.ID_NUMPAG , a.VLR_PAGTO , a.VLR_ESTORNO, a.IND_ESTORNO, a.ID_CUPOM , a.ID_FMAPAGTO, a.CHAVE FROM TB_CUPOM_FMAPAGTO a WHERE a.ID_CUPOM =:pIdCupom INTO :ID_NUMPAG , :VLR_PAGTO , :VLR_ESTORNO, :IND_ESTORNO, :ID_CUPOM , :ID_FMAPAGTO, :CHAVE DO SUSPEND; END;';
	erro = 'sproc cupom fmapagto sync insert';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CUPOMFMAPAGTSYNCINSERT (pVLR_PAGTO TYPE OF COLUMN TRI_PDV_OPER.DIN, pVLR_ESTORNO TYPE OF COLUMN TRI_PDV_OPER.DIN, pIND_ESTORNO CHAR(1), pID_CUPOM INTEGER, pID_FMAPAGTO SMALLINT, pCHAVE VARCHAR(32) ) RETURNS ( rNewIdNumpag INTEGER ) AS DECLARE VARIABLE newIdNumpag INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_TB_CUPOM_FMAPAGTO_ID FROM RDB$DATABASE INTO :newIdNumpag; IF( :newIdNumpag IS NULL ) THEN newIdNumpag = 0; BEGIN INSERT INTO TB_CUPOM_FMAPAGTO ( ID_NUMPAG , VLR_PAGTO , VLR_ESTORNO, IND_ESTORNO, ID_CUPOM , ID_FMAPAGTO, CHAVE ) VALUES ( :newIdNumpag , :pVLR_PAGTO , :pVLR_ESTORNO , :pIND_ESTORNO , :pID_CUPOM , :pID_FMAPAGTO , :pCHAVE ); rNewIdNumpag = newIdNumpag; END END;';
	erro = 'sproc cupom update by coo and numcaixa';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CUPOM_UPDT_BYCOONUMCAIX (pCOO INTEGER, pCCF INTEGER, pDT_CUPOM DATE, pHR_CUPOM TIME, pNUM_CAIXA SMALLINT, pID_CLIENTE INTEGER, pID_VENDEDOR SMALLINT, pSTATUS CHAR(1), pID_PARCELA SMALLINT, pIND_CANCEL CHAR(1), pID_IFS SMALLINT, pID_NATOPE INTEGER, pVLR_TROCO TYPE OF COLUMN TRI_PDV_OPER.DIN, pVLR_TOTAL TYPE OF COLUMN TRI_PDV_OPER.DIN, pVLR_DESC TYPE OF COLUMN TRI_PDV_OPER.DIN, pTIP_DESC CHAR(1), pVLR_ACRES TYPE OF COLUMN TRI_PDV_OPER.DIN, pGNF INTEGER, pCHAVE VARCHAR(32), pTOTAL_TRIBUTOS_IBPT TYPE OF COLUMN TRI_PDV_OPER.DIN, pTOTAL_TRIB_FED TYPE OF COLUMN TRI_PDV_OPER.DIN, pTOTAL_TRIB_EST TYPE OF COLUMN TRI_PDV_OPER.DIN, pTOTAL_TRIB_MUN TYPE OF COLUMN TRI_PDV_OPER.DIN, pSYNCED SMALLINT) AS BEGIN UPDATE TB_CUPOM SET CCF =:pCCF , DT_CUPOM =:pDT_CUPOM , HR_CUPOM =:pHR_CUPOM , ID_CLIENTE =:pID_CLIENTE , ID_VENDEDOR =:pID_VENDEDOR , STATUS =:pSTATUS , ID_PARCELA =:pID_PARCELA , IND_CANCEL =:pIND_CANCEL , ID_IFS =:pID_IFS , ID_NATOPE =:pID_NATOPE , VLR_TROCO =:pVLR_TROCO , VLR_TOTAL =:pVLR_TOTAL , VLR_DESC =:pVLR_DESC , TIP_DESC =:pTIP_DESC , VLR_ACRES =:pVLR_ACRES , GNF =:pGNF , CHAVE =:pCHAVE , TOTAL_TRIBUTOS_IBPT=:pTOTAL_TRIBUTOS_IBPT , TOTAL_TRIB_FED =:pTOTAL_TRIB_FED , TOTAL_TRIB_EST =:pTOTAL_TRIB_EST , TOTAL_TRIB_MUN =:pTOTAL_TRIB_MUN , SYNCED =:pSYNCED WHERE COO =:pCOO AND NUM_CAIXA=:pNUM_CAIXA; END;';
	erro = 'sproc cupom get distinct id_ifs num_caixa';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CUPOM_GET_DISTINCT_IFS RETURNS( ID_IFS INTEGER, CAIXA VARCHAR(6) CHARACTER SET WIN_1252) AS BEGIN FOR SELECT DISTINCT COALESCE(ID_IFS, -1) AS ID_IFS, CAST(COALESCE(NUM_CAIXA, -1) AS VARCHAR(6) CHARACTER SET WIN_1252) AS CAIXA FROM TB_CUPOM ORDER BY ID_IFS INTO :ID_IFS , :CAIXA DO BEGIN SUSPEND; END END;';
	erro = 'sproc ifs sync insert update';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_IFS_SYNC_INSERT_UPDT (pID_IFS SMALLINT, pCAIXA VARCHAR(6), pLOJA VARCHAR(3), pFABRICACAO VARCHAR(20), pUSUARIO CHAR(3), pMARCA VARCHAR(20), pMF CHAR(1), pMODELO VARCHAR(20), pTIPO VARCHAR(7), pDATA_ON DATE, pDATA_OFF DATE, pATIVO CHAR(1), pISS_RATEIO CHAR(1), pSB_DATAIN DATE, pSB_HORAIN TIME, pSB_VERSAO VARCHAR(8), pCHAVE VARCHAR(32), pCOD_NAC VARCHAR(10), pDATA_TEMP DATE, pNUM_CREDENCIAMENTO VARCHAR(30) ) AS DECLARE VARIABLE vCountIfs INTEGER; BEGIN SELECT COUNT(1) FROM TB_IFS WHERE ID_IFS = :pID_IFS INTO :vCountIfs; IF( :vCountIfs = 0 ) THEN BEGIN INSERT INTO TB_IFS ( ID_IFS , CAIXA , LOJA , FABRICACAO, USUARIO , MARCA , MF , MODELO , TIPO , DATA_ON , DATA_OFF , ATIVO , ISS_RATEIO, SB_DATAIN , SB_HORAIN , SB_VERSAO , CHAVE , COD_NAC , DATA_TEMP , NUM_CREDENCIAMENTO ) VALUES ( :pID_IFS , :pCAIXA , :pLOJA , :pFABRICACAO, :pUSUARIO , :pMARCA , :pMF , :pMODELO , :pTIPO , :pDATA_ON , :pDATA_OFF , :pATIVO , :pISS_RATEIO, :pSB_DATAIN , :pSB_HORAIN , :pSB_VERSAO , :pCHAVE , :pCOD_NAC , :pDATA_TEMP , :pNUM_CREDENCIAMENTO ); END ELSE BEGIN UPDATE TB_IFS SET CAIXA =:pCAIXA , LOJA =:pLOJA , FABRICACAO =:pFABRICACAO, USUARIO =:pUSUARIO , MARCA =:pMARCA , MF =:pMF , MODELO =:pMODELO , TIPO =:pTIPO , DATA_ON =:pDATA_ON , DATA_OFF =:pDATA_OFF , ATIVO =:pATIVO , ISS_RATEIO =:pISS_RATEIO, SB_DATAIN =:pSB_DATAIN , SB_HORAIN =:pSB_HORAIN , SB_VERSAO =:pSB_VERSAO , CHAVE =:pCHAVE , COD_NAC =:pCOD_NAC , DATA_TEMP =:pDATA_TEMP , NUM_CREDENCIAMENTO=:pNUM_CREDENCIAMENTO WHERE ID_IFS=:pID_IFS; END END;';

	erro = 'sproc SP_TRI_REL_METD_PAGTO_UPDINST';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_REL_METD_PAGTO_UPDINST (pID_PAGAMENTO INTEGER, pID_FMAPGTO SMALLINT) AS BEGIN UPDATE OR INSERT INTO TRI_PDV_REL_METODO_PAGTO ( ID_PAGAMENTO, ID_FMAPGTO ) VALUES ( :pID_PAGAMENTO, :pID_FMAPGTO ) MATCHING ( ID_PAGAMENTO, ID_FMAPGTO ); END;';
	erro = 'sproc SP_TRI_CUPOM_BYPASS_IFS';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CUPOM_BYPASS_IFS RETURNS( ID_IFS INTEGER, CAIXA VARCHAR(6) CHARACTER SET WIN_1252) AS BEGIN FOR SELECT DISTINCT TB_CUPOM_DISTINCT.ID_IFS, CAST(COUNT(TB_CUPOM_DISTINCT.CAIXA) AS VARCHAR(6) CHARACTER SET WIN_1252) AS QTD_CAIXAS FROM ( SELECT DISTINCT COALESCE(ID_IFS, -1) AS ID_IFS, CAST(COALESCE(NUM_CAIXA, -1) AS VARCHAR(6) CHARACTER SET WIN_1252) AS CAIXA FROM TB_CUPOM ORDER BY ID_IFS) AS TB_CUPOM_DISTINCT GROUP BY TB_CUPOM_DISTINCT.ID_IFS ORDER BY TB_CUPOM_DISTINCT.ID_IFS INTO :ID_IFS , :CAIXA DO BEGIN SUSPEND; END END;';

	erro = 'sproc SP_TRI_CUPOMITEMGET';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CUPOMITEMGET ( pIdCupom INTEGER ) RETURNS ( ID_ITEMCUP TYPE OF COLUMN TB_CUPOM_ITEM.ID_ITEMCUP , ID_CUPOM TYPE OF COLUMN TB_CUPOM_ITEM.ID_CUPOM , ID_IDENTIF TYPE OF COLUMN TB_CUPOM_ITEM.ID_IDENTIF , NUM_ITEM TYPE OF COLUMN TB_CUPOM_ITEM.NUM_ITEM , QTD_ITEM TYPE OF COLUMN TB_CUPOM_ITEM.QTD_ITEM , VLR_UNIT TYPE OF COLUMN TB_CUPOM_ITEM.VLR_UNIT , PRC_CUSTO TYPE OF COLUMN TB_CUPOM_ITEM.PRC_CUSTO , ALI_ICM TYPE OF COLUMN TB_CUPOM_ITEM.ALI_ICM , VLR_ICM TYPE OF COLUMN TB_CUPOM_ITEM.VLR_ICM , COD_TOTALP TYPE OF COLUMN TB_CUPOM_ITEM.COD_TOTALP , ORD_APLICA TYPE OF COLUMN TB_CUPOM_ITEM.ORD_APLICA , ITEM_CANCEL TYPE OF COLUMN TB_CUPOM_ITEM.ITEM_CANCEL , CST TYPE OF COLUMN TB_CUPOM_ITEM.CST , UNI_MEDIDA TYPE OF COLUMN TB_CUPOM_ITEM.UNI_MEDIDA , CASAS_QTD TYPE OF COLUMN TB_CUPOM_ITEM.CASAS_QTD , CASAS_VLR TYPE OF COLUMN TB_CUPOM_ITEM.CASAS_VLR , TIPO_DESC TYPE OF COLUMN TB_CUPOM_ITEM.TIPO_DESC , IAT TYPE OF COLUMN TB_CUPOM_ITEM.IAT , IPPT TYPE OF COLUMN TB_CUPOM_ITEM.IPPT , COD_BARRA TYPE OF COLUMN TB_CUPOM_ITEM.COD_BARRA , VLR_ACRE TYPE OF COLUMN TB_CUPOM_ITEM.VLR_ACRE , VLR_PIS TYPE OF COLUMN TB_CUPOM_ITEM.VLR_PIS , VLR_COFINS TYPE OF COLUMN TB_CUPOM_ITEM.VLR_COFINS , CHAVE TYPE OF COLUMN TB_CUPOM_ITEM.CHAVE , CST_PIS TYPE OF COLUMN TB_CUPOM_ITEM.CST_PIS , CST_COFINS TYPE OF COLUMN TB_CUPOM_ITEM.CST_COFINS , CFOP TYPE OF COLUMN TB_CUPOM_ITEM.CFOP , VLR_TRIBUTOS_IBPT TYPE OF COLUMN TB_CUPOM_ITEM.VLR_TRIBUTOS_IBPT , ALIQ_ENCONT_IBPT TYPE OF COLUMN TB_CUPOM_ITEM.ALIQ_ENCONT_IBPT , DT_ITEM TYPE OF COLUMN TB_CUPOM_ITEM.DT_ITEM , HR_ITEM TYPE OF COLUMN TB_CUPOM_ITEM.HR_ITEM , VLR_TRIB_FED TYPE OF COLUMN TB_CUPOM_ITEM.VLR_TRIB_FED , VLR_TRIB_EST TYPE OF COLUMN TB_CUPOM_ITEM.VLR_TRIB_EST , VLR_TRIB_MUN TYPE OF COLUMN TB_CUPOM_ITEM.VLR_TRIB_MUN , DESCRICAO TYPE OF COLUMN TB_CUPOM_ITEM.DESCRICAO , ID_MAIT_PEDIDO_ITEM TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.ID_MAIT_PEDIDO_ITEM , ID_COMPPRO TYPE OF COLUMN TRI_MAIT_PED_ITEM_COMPPROD.ID_COMPPRO , ID_COMPOSICAO TYPE OF COLUMN TB_EST_COMPOSICAO.ID_COMPOSICAO ) AS BEGIN FOR SELECT COALESCE(a.ID_ITEMCUP, 0) ID_ITEMCUP, a.ID_CUPOM , a.ID_IDENTIF , a.NUM_ITEM , a.QTD_ITEM , a.VLR_UNIT , a.PRC_CUSTO , a.ALI_ICM , a.VLR_ICM , a.COD_TOTALP , a.ORD_APLICA , a.ITEM_CANCEL , a.CST , a.UNI_MEDIDA , a.CASAS_QTD , a.CASAS_VLR , a.TIPO_DESC , a.IAT , a.IPPT , a.COD_BARRA , a.VLR_ACRE , a.VLR_PIS , a.VLR_COFINS , a.CHAVE , a.CST_PIS , a.CST_COFINS , a.CFOP , a.VLR_TRIBUTOS_IBPT , a.ALIQ_ENCONT_IBPT , a.DT_ITEM , a.HR_ITEM , a.VLR_TRIB_FED , a.VLR_TRIB_EST , a.VLR_TRIB_MUN , a.DESCRICAO , c.ID_MAIT_PEDIDO_ITEM , d.ID_COMPPRO, e.ID_COMPOSICAO FROM TB_CUPOM_ITEM a LEFT JOIN TRI_MAIT_PED_ITEM_CUPOM_ITEM b ON a.ID_ITEMCUP = b.ID_ITEMCUP LEFT JOIN TRI_MAIT_PEDIDO_ITEM c ON b.ID_MAIT_PEDIDO_ITEM = c.ID_MAIT_PEDIDO_ITEM LEFT JOIN TRI_MAIT_PED_ITEM_COMPPROD d ON c.ID_MAIT_PEDIDO_ITEM = d.ID_MAIT_PEDIDO_ITEM LEFT JOIN TB_EST_COMPOSICAO e ON e.ID_IDENTIFICADOR = a.ID_IDENTIF WHERE a.ID_CUPOM =:pIdCupom INTO :ID_ITEMCUP , :ID_CUPOM , :ID_IDENTIF , :NUM_ITEM , :QTD_ITEM , :VLR_UNIT , :PRC_CUSTO , :ALI_ICM , :VLR_ICM , :COD_TOTALP , :ORD_APLICA , :ITEM_CANCEL , :CST , :UNI_MEDIDA , :CASAS_QTD , :CASAS_VLR , :TIPO_DESC , :IAT , :IPPT , :COD_BARRA , :VLR_ACRE , :VLR_PIS , :VLR_COFINS , :CHAVE , :CST_PIS , :CST_COFINS , :CFOP , :VLR_TRIBUTOS_IBPT , :ALIQ_ENCONT_IBPT , :DT_ITEM , :HR_ITEM , :VLR_TRIB_FED , :VLR_TRIB_EST , :VLR_TRIB_MUN , :DESCRICAO , :ID_MAIT_PEDIDO_ITEM , :ID_COMPPRO , :ID_COMPOSICAO DO SUSPEND ; END;';

	erro = 'sproc SP_TRI_PRODUTO_RETIRAESTOQUE';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_PRODUTO_RETIRAESTOQUE ( pQTD_ITEM TYPE OF COLUMN TRI_PDV_OPER.DIN , pID_IDENTIF INTEGER , pID_COMPPRO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.ID_COMPPRO , pID_COMPOSICAO TYPE OF COLUMN TB_EST_COMPOSICAO.ID_COMPOSICAO ) AS DECLARE VARIABLE vIdIdentifComponente TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.ID_IDENTIFICADOR; DECLARE VARIABLE vQtdItemComponente TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.QTD_ITEM; DECLARE VARIABLE vQtdDif TYPE OF COLUMN TB_EST_PRODUTO.QTD_ATUAL; DECLARE VARIABLE vIdTipoItemEstoque TYPE OF COLUMN TB_ESTOQUE.ID_TIPOITEM; DECLARE VARIABLE vQtdRetirarComponentes TYPE OF COLUMN TB_EST_PRODUTO.QTD_ATUAL; DECLARE VARIABLE vQtdRetirarComposto TYPE OF COLUMN TB_EST_PRODUTO.QTD_ATUAL; BEGIN SELECT te.ID_TIPOITEM FROM TB_EST_IDENTIFICADOR tei JOIN TB_ESTOQUE te ON te.ID_ESTOQUE = tei.ID_ESTOQUE WHERE tei.ID_IDENTIFICADOR = :pID_IDENTIF INTO :vIdTipoItemEstoque ; IF (:vIdTipoItemEstoque = ''9'') THEN EXIT; vQtdItemComponente = 0; vQtdDif = 0; vQtdRetirarComponentes = 0; vQtdRetirarComposto = 0; IF (:pID_COMPPRO &gt; 0 OR :pID_COMPOSICAO &gt; 0) THEN BEGIN IF (:pQTD_ITEM &gt;= 0) THEN BEGIN SELECT (tep.QTD_ATUAL - :pQTD_ITEM) AS qtd_dif FROM TB_EST_PRODUTO tep WHERE tep.ID_IDENTIFICADOR = :pID_IDENTIF INTO :vQtdDif ; IF (:vQtdDif &lt; 0) THEN BEGIN vQtdRetirarComponentes = :vQtdDif * -1; vQtdRetirarComposto = :pQTD_ITEM - :vQtdRetirarComponentes; END END END IF (:vQtdDif &gt;= 0) THEN BEGIN UPDATE TB_EST_PRODUTO SET QTD_ATUAL = QTD_ATUAL - :pQTD_ITEM WHERE ID_IDENTIFICADOR = :pID_IDENTIF ; END ELSE BEGIN IF (:vQtdRetirarComposto &gt; 0) THEN BEGIN UPDATE TB_EST_PRODUTO SET QTD_ATUAL = QTD_ATUAL - :vQtdRetirarComposto WHERE ID_IDENTIFICADOR = :pID_IDENTIF ; END IF (:vQtdRetirarComponentes &gt; 0) THEN BEGIN IF (:pID_COMPPRO &gt; 0) THEN BEGIN FOR SELECT teciu.ID_IDENTIFICADOR , teciu.QTD_ITEM FROM TB_EST_COMP_ITEM_USADO teciu WHERE teciu.ID_COMPPROD = :pID_COMPPRO INTO :vIdIdentifComponente , :vQtdItemComponente DO BEGIN EXECUTE PROCEDURE SP_TRI_PRODUTO_RETIRAESTOQUE((:vQtdItemComponente * :vQtdRetirarComponentes), :vIdIdentifComponente, 0, 0); END END ELSE BEGIN FOR SELECT teci.ID_IDENTIFICADOR, teci.QTD_ITEM FROM TB_EST_COMP_ITEM teci WHERE teci.ID_COMPOSICAO = :pID_COMPOSICAO INTO :vIdIdentifComponente , :vQtdItemComponente DO BEGIN EXECUTE PROCEDURE SP_TRI_PRODUTO_RETIRAESTOQUE((:vQtdItemComponente * :vQtdRetirarComponentes), :vIdIdentifComponente, 0, 0); END END END END UPDATE TB_ESTOQUE SET ULT_VENDA = CURRENT_DATE WHERE ID_ESTOQUE = ( SELECT ID_ESTOQUE FROM TB_EST_IDENTIFICADOR WHERE ID_IDENTIFICADOR = :pID_IDENTIF ) ; END;';
	
	erro = 'deu certo';
	
	SUSPEND;
	WHEN ANY DO
	BEGIN		
	END 
END;</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="D_PROCEDURES3" Modifier="Public" Name="D_PROCEDURES3" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy15" UserSourceName="D_PROCEDURES3">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>CREATE OR ALTER PROCEDURE SP_TRI_PROCEDURES3
RETURNS (
	erro VARCHAR(64)
)
AS
BEGIN
	erro = 'sproc estproduto get by dt upd';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ESTPROD_GETBY_DTUPD (pUltimaSync TIMESTAMP) RETURNS (ID_IDENTIFICADOR INTEGER, DESC_CMPL VARCHAR(30), COD_BARRA VARCHAR(18), REFERENCIA VARCHAR(18), PRC_MEDIO TYPE OF COLUMN TRI_PDV_OPER.DIN, QTD_COMPRA TYPE OF COLUMN TRI_PDV_OPER.DIN, QTD_ATUAL TYPE OF COLUMN TRI_PDV_OPER.DIN, QTD_MINIM TYPE OF COLUMN TRI_PDV_OPER.DIN, QTD_INICIO TYPE OF COLUMN TRI_PDV_OPER.DIN, QTD_RESERV TYPE OF COLUMN TRI_PDV_OPER.DIN, QTD_POSVEN TYPE OF COLUMN TRI_PDV_OPER.DIN, ULT_COMPRA DATE, PESO TYPE OF COLUMN TRI_PDV_OPER.DIN, IPI TYPE OF COLUMN TRI_PDV_OPER.DIN, CF VARCHAR(13), IAT CHAR(1), IPPT CHAR(1), COD_NCM VARCHAR(8), ID_NIVEL1 SMALLINT, ID_NIVEL2 SMALLINT, MVA TYPE OF COLUMN TRI_PDV_OPER.DIN, CST_IPI VARCHAR(3), FOTO BLOB SUB_TYPE 0, CSOSN VARCHAR(3), ANP INTEGER, EXTIPI SMALLINT, CST VARCHAR(3), FCI VARCHAR(36), COD_CEST VARCHAR(7), CENQ VARCHAR(3), VLR_IPI TYPE OF COLUMN TRI_PDV_OPER.DIN, CST_CFE VARCHAR(3), CSOSN_CFE VARCHAR(3), CONTROLA_LOTE_VENDA CHAR(1), BAIXA_LOTE_NFV CHAR(1), BAIXA_LOTE_PDV CHAR(1), TRI_PDV_DT_UPD TIMESTAMP) AS BEGIN FOR SELECT A.ID_IDENTIFICADOR, A.DESC_CMPL, A.COD_BARRA, A.REFERENCIA, A.PRC_MEDIO, A.QTD_COMPRA, A.QTD_ATUAL, A.QTD_MINIM, A.QTD_INICIO, A.QTD_RESERV, A.QTD_POSVEN, A.ULT_COMPRA, A.PESO, A.IPI, A.CF, A.IAT, A.IPPT, A.COD_NCM, A.ID_NIVEL1, A.ID_NIVEL2, A.MVA, A.CST_IPI, A.FOTO, A.CSOSN, A.ANP, A.EXTIPI, A.CST, A.FCI, A.COD_CEST, A.CENQ, A.VLR_IPI, A.CST_CFE, A.CSOSN_CFE, A.CONTROLA_LOTE_VENDA, A.BAIXA_LOTE_NFV, A.BAIXA_LOTE_PDV, A.TRI_PDV_DT_UPD FROM TB_EST_PRODUTO A JOIN TB_EST_IDENTIFICADOR B ON B.ID_IDENTIFICADOR = A.ID_IDENTIFICADOR JOIN TB_ESTOQUE C ON C.ID_ESTOQUE = B.ID_ESTOQUE WHERE (A.TRI_PDV_DT_UPD &gt; :pUltimaSync OR B.TRI_PDV_DT_UPD &gt; :pUltimaSync OR C.TRI_PDV_DT_UPD &gt; :pUltimaSync) INTO :ID_IDENTIFICADOR, :DESC_CMPL, :COD_BARRA, :REFERENCIA, :PRC_MEDIO, :QTD_COMPRA, :QTD_ATUAL, :QTD_MINIM, :QTD_INICIO, :QTD_RESERV, :QTD_POSVEN, :ULT_COMPRA, :PESO, :IPI, :CF, :IAT, :IPPT, :COD_NCM, :ID_NIVEL1, :ID_NIVEL2, :MVA, :CST_IPI, :FOTO, :CSOSN, :ANP, :EXTIPI, :CST, :FCI, :COD_CEST, :CENQ, :VLR_IPI, :CST_CFE, :CSOSN_CFE, :CONTROLA_LOTE_VENDA, :BAIXA_LOTE_NFV, :BAIXA_LOTE_PDV, :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';
	erro = 'sproc estproduto sync upsert';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ESTPROD_UPSERT (pID_IDENTIFICADOR INTEGER, pDESC_CMPL VARCHAR(30), pCOD_BARRA VARCHAR(18), pREFERENCIA VARCHAR(18), pPRC_MEDIO TYPE OF COLUMN TRI_PDV_OPER.DIN, pQTD_COMPRA TYPE OF COLUMN TRI_PDV_OPER.DIN, pQTD_ATUAL TYPE OF COLUMN TRI_PDV_OPER.DIN, pQTD_MINIM TYPE OF COLUMN TRI_PDV_OPER.DIN, pQTD_INICIO TYPE OF COLUMN TRI_PDV_OPER.DIN, pQTD_RESERV TYPE OF COLUMN TRI_PDV_OPER.DIN, pQTD_POSVEN TYPE OF COLUMN TRI_PDV_OPER.DIN, pULT_COMPRA DATE, pPESO TYPE OF COLUMN TRI_PDV_OPER.DIN, pIPI TYPE OF COLUMN TRI_PDV_OPER.DIN, pCF VARCHAR(13), pIAT CHAR(1), pIPPT CHAR(1), pCOD_NCM VARCHAR(8), pID_NIVEL1 SMALLINT, pID_NIVEL2 SMALLINT, pMVA TYPE OF COLUMN TRI_PDV_OPER.DIN, pCST_IPI VARCHAR(3), pFOTO BLOB SUB_TYPE 0, pCSOSN VARCHAR(3), pANP INTEGER, pEXTIPI SMALLINT, pCST VARCHAR(3), pFCI VARCHAR(36), pCOD_CEST VARCHAR(7), pCENQ VARCHAR(3), pVLR_IPI TYPE OF COLUMN TRI_PDV_OPER.DIN, pCST_CFE VARCHAR(3), pCSOSN_CFE VARCHAR(3), pCONTROLA_LOTE_VENDA CHAR(1), pBAIXA_LOTE_NFV CHAR(1), pBAIXA_LOTE_PDV CHAR(1), pTRI_PDV_DT_UPD TIMESTAMP) RETURNS (rRowsAffected INTEGER) AS DECLARE vCount INTEGER; BEGIN SELECT COUNT(1) FROM TB_EST_IDENTIFICADOR WHERE ID_IDENTIFICADOR = :pID_IDENTIFICADOR INTO :vCount ; IF (:vCount = 0) THEN BEGIN rRowsAffected = 0; SUSPEND; END UPDATE OR INSERT INTO TB_EST_PRODUTO (ID_IDENTIFICADOR, DESC_CMPL, COD_BARRA, REFERENCIA, PRC_MEDIO, QTD_COMPRA, QTD_ATUAL, QTD_MINIM, QTD_INICIO, QTD_RESERV, QTD_POSVEN, ULT_COMPRA, PESO, IPI, CF, IAT, IPPT, COD_NCM, ID_NIVEL1, ID_NIVEL2, MVA, CST_IPI, FOTO, CSOSN, ANP, EXTIPI, CST, FCI, COD_CEST, CENQ, VLR_IPI, CST_CFE, CSOSN_CFE, CONTROLA_LOTE_VENDA, BAIXA_LOTE_NFV, BAIXA_LOTE_PDV, TRI_PDV_DT_UPD) VALUES (:pID_IDENTIFICADOR, :pDESC_CMPL, :pCOD_BARRA, :pREFERENCIA, :pPRC_MEDIO, :pQTD_COMPRA, :pQTD_ATUAL, :pQTD_MINIM, :pQTD_INICIO, :pQTD_RESERV, :pQTD_POSVEN, :pULT_COMPRA, :pPESO, :pIPI, :pCF, :pIAT, :pIPPT, :pCOD_NCM, :pID_NIVEL1, :pID_NIVEL2, :pMVA, :pCST_IPI, :pFOTO, :pCSOSN, :pANP, :pEXTIPI, :pCST, :pFCI, :pCOD_CEST, :pCENQ, :pVLR_IPI, :pCST_CFE, :pCSOSN_CFE, :pCONTROLA_LOTE_VENDA, :pBAIXA_LOTE_NFV, :pBAIXA_LOTE_PDV, :pTRI_PDV_DT_UPD) MATCHING (ID_IDENTIFICADOR) ; rRowsAffected = ROW_COUNT; END;';
	
	erro = 'sproc estidentif get by dt upd';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ESTIDENTIF_GETBY_DTUPD (pUltimaSync TIMESTAMP) RETURNS (ID_IDENTIFICADOR INTEGER, ID_ESTOQUE INTEGER, CHAVE VARCHAR(32), TRI_PDV_DT_UPD TIMESTAMP) AS BEGIN FOR SELECT A.ID_IDENTIFICADOR, A.ID_ESTOQUE, A.CHAVE, A.TRI_PDV_DT_UPD FROM TB_EST_IDENTIFICADOR A JOIN TB_ESTOQUE B ON B.ID_ESTOQUE = A.ID_ESTOQUE WHERE A.TRI_PDV_DT_UPD &gt; :pUltimaSync OR B.TRI_PDV_DT_UPD &gt; :pUltimaSync INTO :ID_IDENTIFICADOR, :ID_ESTOQUE, :CHAVE, :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';
	erro = 'sproc estidentif sync upsert';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ESTIDENTIF_UPSERT (pID_IDENTIFICADOR INTEGER, pID_ESTOQUE INTEGER, pCHAVE VARCHAR(32), pTRI_PDV_DT_UPD TIMESTAMP) RETURNS (rRowsAffected INTEGER) AS DECLARE vCount INTEGER; BEGIN SELECT COUNT(1) FROM TB_ESTOQUE WHERE ID_ESTOQUE = :pID_ESTOQUE INTO :vCount ; IF (:vCount = 0) THEN BEGIN rRowsAffected = 0; SUSPEND; END UPDATE OR INSERT INTO TB_EST_IDENTIFICADOR (ID_IDENTIFICADOR, ID_ESTOQUE, CHAVE, TRI_PDV_DT_UPD) VALUES (:pID_IDENTIFICADOR, :pID_ESTOQUE, :pCHAVE, :pTRI_PDV_DT_UPD) MATCHING (ID_IDENTIFICADOR, ID_ESTOQUE) ; rRowsAffected = ROW_COUNT; END;';
	
	erro = 'sproc cliente sync upsert';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CLIENTE_UPSERT (pID_CLIENTE INTEGER, pID_CONVENIO SMALLINT, pDT_CADASTRO DATE, pNOME VARCHAR(60), pEND_CEP CHAR(9), pEND_TIPO VARCHAR(15), pEND_NUMERO VARCHAR(5), pEND_LOGRAD VARCHAR(40), pEND_BAIRRO VARCHAR(35), pEND_COMPLE VARCHAR(15), pDT_PRICOMP DATE, pDT_ULTCOMP DATE, pCONTATO VARCHAR(35), pSTATUS CHAR(1), pLIMITE TYPE OF COLUMN TB_CLIENTE.LIMITE, pDDD_RESID CHAR(2), pFONE_RESID VARCHAR(13), pDDD_COMER CHAR(2), pFONE_COMER VARCHAR(13), pDDD_CELUL CHAR(2), pFONE_CELUL VARCHAR(13), pDDD_FAX CHAR(2), pFONE_FAX VARCHAR(13), pEMAIL_CONT VARCHAR(50), pEMAIL_NFE VARCHAR(50), pID_CIDADE CHAR(7), pID_TIPO SMALLINT, pID_FUNCIONARIO SMALLINT, pID_PAIS CHAR(4), pMENSAGEM VARCHAR(100), pID_RAMO SMALLINT, pEMAIL_ADIC VARCHAR(50), pOBSERVACAO BLOB SUB_TYPE 1, pDT_MELHOR_VENCTO SMALLINT, pTRI_PDV_DT_UPD TIMESTAMP) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO TB_CLIENTE (ID_CLIENTE, ID_CONVENIO, DT_CADASTRO, NOME, END_CEP, END_TIPO, END_NUMERO, END_LOGRAD, END_BAIRRO, END_COMPLE, DT_PRICOMP, DT_ULTCOMP, CONTATO, STATUS, LIMITE, DDD_RESID, FONE_RESID, DDD_COMER, FONE_COMER, DDD_CELUL, FONE_CELUL, DDD_FAX, FONE_FAX, EMAIL_CONT, EMAIL_NFE, ID_CIDADE, ID_TIPO, ID_FUNCIONARIO, ID_PAIS, MENSAGEM, ID_RAMO, EMAIL_ADIC, OBSERVACAO, DT_MELHOR_VENCTO, TRI_PDV_DT_UPD) VALUES (:pID_CLIENTE, :pID_CONVENIO, :pDT_CADASTRO, :pNOME, :pEND_CEP, :pEND_TIPO, :pEND_NUMERO, :pEND_LOGRAD, :pEND_BAIRRO, :pEND_COMPLE, :pDT_PRICOMP, :pDT_ULTCOMP, :pCONTATO, :pSTATUS, :pLIMITE, :pDDD_RESID, :pFONE_RESID, :pDDD_COMER, :pFONE_COMER, :pDDD_CELUL, :pFONE_CELUL, :pDDD_FAX, :pFONE_FAX, :pEMAIL_CONT, :pEMAIL_NFE, :pID_CIDADE, :pID_TIPO, :pID_FUNCIONARIO, :pID_PAIS, :pMENSAGEM, :pID_RAMO, :pEMAIL_ADIC, :pOBSERVACAO, :pDT_MELHOR_VENCTO, :pTRI_PDV_DT_UPD) MATCHING (ID_CLIENTE); rRowsAffected = ROW_COUNT; END;';
	
	erro = 'sproc taxauf get by dt upd';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_TAXAUF_GETBY_DTUPD (pUltimaSync TIMESTAMP) RETURNS (ID_CTI CHAR(3), DESCRICAO VARCHAR(40), BASE_ICMS TYPE OF COLUMN TRI_PDV_OPER.DIN, BASE_ICMSFE TYPE OF COLUMN TRI_PDV_OPER.DIN, BASE_ICMS_ST TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_AC TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_AL TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_AM TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_AP TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_BA TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_CE TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_DF TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_ES TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_GO TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_MA TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_MG TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_MS TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_MT TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_PA TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_PB TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_PE TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_PI TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_PR TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_RJ TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_RN TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_RO TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_RR TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_RS TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_SC TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_SE TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_SP TYPE OF COLUMN TRI_PDV_OPER.DIN, UF_TO TYPE OF COLUMN TRI_PDV_OPER.DIN, BASE_ISS TYPE OF COLUMN TRI_PDV_OPER.DIN, ISS TYPE OF COLUMN TRI_PDV_OPER.DIN, POR_DIF TYPE OF COLUMN TRI_PDV_OPER.DIN, TRI_PDV_DT_UPD TIMESTAMP) AS BEGIN FOR SELECT ID_CTI, DESCRICAO, BASE_ICMS, BASE_ICMSFE, BASE_ICMS_ST, UF_AC, UF_AL, UF_AM, UF_AP, UF_BA, UF_CE, UF_DF, UF_ES, UF_GO, UF_MA, UF_MG, UF_MS, UF_MT, UF_PA, UF_PB, UF_PE, UF_PI, UF_PR, UF_RJ, UF_RN, UF_RO, UF_RR, UF_RS, UF_SC, UF_SE, UF_SP, UF_TO, BASE_ISS, ISS, POR_DIF, TRI_PDV_DT_UPD FROM TB_TAXA_UF WHERE TRI_PDV_DT_UPD &gt; :pUltimaSync INTO :ID_CTI, :DESCRICAO, :BASE_ICMS, :BASE_ICMSFE, :BASE_ICMS_ST, :UF_AC, :UF_AL, :UF_AM, :UF_AP, :UF_BA, :UF_CE, :UF_DF, :UF_ES, :UF_GO, :UF_MA, :UF_MG, :UF_MS, :UF_MT, :UF_PA, :UF_PB, :UF_PE, :UF_PI, :UF_PR, :UF_RJ, :UF_RN, :UF_RO, :UF_RR, :UF_RS, :UF_SC, :UF_SE, :UF_SP, :UF_TO, :BASE_ISS, :ISS, :POR_DIF, :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';
	erro = 'sproc taxauf sync upsert';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_TAXAUF_UPSERT (pID_CTI CHAR(3), pDESCRICAO VARCHAR(40), pBASE_ICMS TYPE OF COLUMN TRI_PDV_OPER.DIN, pBASE_ICMSFE TYPE OF COLUMN TRI_PDV_OPER.DIN, pBASE_ICMS_ST TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_AC TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_AL TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_AM TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_AP TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_BA TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_CE TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_DF TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_ES TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_GO TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_MA TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_MG TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_MS TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_MT TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_PA TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_PB TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_PE TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_PI TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_PR TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_RJ TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_RN TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_RO TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_RR TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_RS TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_SC TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_SE TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_SP TYPE OF COLUMN TRI_PDV_OPER.DIN, pUF_TO TYPE OF COLUMN TRI_PDV_OPER.DIN, pBASE_ISS TYPE OF COLUMN TRI_PDV_OPER.DIN, pISS TYPE OF COLUMN TRI_PDV_OPER.DIN, pPOR_DIF TYPE OF COLUMN TRI_PDV_OPER.DIN, pTRI_PDV_DT_UPD TIMESTAMP) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO TB_TAXA_UF (ID_CTI, DESCRICAO, BASE_ICMS, BASE_ICMSFE, BASE_ICMS_ST, UF_AC, UF_AL, UF_AM, UF_AP, UF_BA, UF_CE, UF_DF, UF_ES, UF_GO, UF_MA, UF_MG, UF_MS, UF_MT, UF_PA, UF_PB, UF_PE, UF_PI, UF_PR, UF_RJ, UF_RN, UF_RO, UF_RR, UF_RS, UF_SC, UF_SE, UF_SP, UF_TO, BASE_ISS, ISS, POR_DIF, TRI_PDV_DT_UPD) VALUES (:pID_CTI, :pDESCRICAO, :pBASE_ICMS, :pBASE_ICMSFE, :pBASE_ICMS_ST, :pUF_AC, :pUF_AL, :pUF_AM, :pUF_AP, :pUF_BA, :pUF_CE, :pUF_DF, :pUF_ES, :pUF_GO, :pUF_MA, :pUF_MG, :pUF_MS, :pUF_MT, :pUF_PA, :pUF_PB, :pUF_PE, :pUF_PI, :pUF_PR, :pUF_RJ, :pUF_RN, :pUF_RO, :pUF_RR, :pUF_RS, :pUF_SC, :pUF_SE, :pUF_SP, :pUF_TO, :pBASE_ISS, :pISS, :pPOR_DIF, :pTRI_PDV_DT_UPD) MATCHING (ID_CTI) ; rRowsAffected = ROW_COUNT; END;';
	
	erro = 'sproc oper get by dt upd';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_OPER_GETBY_DTUPD_NCAIX (pUltimaSync TIMESTAMP, pNoCaixa INTEGER) RETURNS (ID_CAIXA INTEGER, CURRENTTIME TIMESTAMP, ABERTO VARCHAR(1), HASH VARCHAR(32), FECHADO TIMESTAMP, ID_OPER INTEGER, ID_USER INTEGER, TRI_PDV_DT_UPD TIMESTAMP, DIN TYPE OF COLUMN TRI_PDV_OPER.DIN, CHEQUE TYPE OF COLUMN TRI_PDV_OPER.DIN, CREDITO TYPE OF COLUMN TRI_PDV_OPER.DIN, DEBITO TYPE OF COLUMN TRI_PDV_OPER.DIN, LOJA TYPE OF COLUMN TRI_PDV_OPER.DIN, ALIMENTACAO TYPE OF COLUMN TRI_PDV_OPER.DIN, REFEICAO TYPE OF COLUMN TRI_PDV_OPER.DIN, PRESENTE TYPE OF COLUMN TRI_PDV_OPER.DIN, COMBUSTIVEL TYPE OF COLUMN TRI_PDV_OPER.DIN, OUTROS TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_1 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_3 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_5 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_7 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_9 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.DIN, SANGRIAS TYPE OF COLUMN TRI_PDV_OPER.DIN, SUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.DIN, TROCAS TYPE OF COLUMN TRI_PDV_OPER.DIN) AS BEGIN FOR SELECT ID_CAIXA, CURRENTTIME, ABERTO, HASH, FECHADO, ID_OPER, ID_USER, TRI_PDV_DT_UPD, DIN, CHEQUE, CREDITO, DEBITO, LOJA, ALIMENTACAO, REFEICAO, PRESENTE, COMBUSTIVEL, OUTROS, EXTRA_1, EXTRA_2, EXTRA_3, EXTRA_4, EXTRA_5, EXTRA_6, EXTRA_7, EXTRA_8, EXTRA_9, EXTRA_10, SANGRIAS, SUPRIMENTOS, TROCAS FROM TRI_PDV_OPER WHERE TRI_PDV_DT_UPD &gt; :pUltimaSync AND ID_CAIXA = :pNoCaixa INTO :ID_CAIXA, :CURRENTTIME, :ABERTO, :HASH, :FECHADO, :ID_OPER, :ID_USER, :TRI_PDV_DT_UPD, :DIN, :CHEQUE, :CREDITO, :DEBITO, :LOJA, :ALIMENTACAO, :REFEICAO, :PRESENTE, :COMBUSTIVEL, :OUTROS, :EXTRA_1, :EXTRA_2, :EXTRA_3, :EXTRA_4, :EXTRA_5, :EXTRA_6, :EXTRA_7, :EXTRA_8, :EXTRA_9, :EXTRA_10, :SANGRIAS, :SUPRIMENTOS, :TROCAS DO BEGIN SUSPEND ; END END;';
	erro = 'sproc oper sync upsert';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_OPER_UPSERT (pID_CAIXA INTEGER, pDIN TYPE OF COLUMN TRI_PDV_OPER.DIN, pCHEQUE TYPE OF COLUMN TRI_PDV_OPER.DIN, pCREDITO TYPE OF COLUMN TRI_PDV_OPER.DIN, pDEBITO TYPE OF COLUMN TRI_PDV_OPER.DIN, pLOJA TYPE OF COLUMN TRI_PDV_OPER.DIN, pALIMENTACAO TYPE OF COLUMN TRI_PDV_OPER.DIN, pREFEICAO TYPE OF COLUMN TRI_PDV_OPER.DIN, pPRESENTE TYPE OF COLUMN TRI_PDV_OPER.DIN, pCOMBUSTIVEL TYPE OF COLUMN TRI_PDV_OPER.DIN, pOUTROS TYPE OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_1 TYPE OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_3 TYPE OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_5 TYPE OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_7 TYPE OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_9 TYPE OF COLUMN TRI_PDV_OPER.DIN, pEXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.DIN, pCURRENTTIME TIMESTAMP, pABERTO VARCHAR(1), pHASH VARCHAR(32), pSANGRIAS TYPE OF COLUMN TRI_PDV_OPER.DIN, pSUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.DIN, pTROCAS TYPE OF COLUMN TRI_PDV_OPER.DIN, pFECHADO TIMESTAMP, pID_OPER INTEGER, pID_USER INTEGER, pTRI_PDV_DT_UPD TIMESTAMP) AS BEGIN UPDATE OR INSERT INTO TRI_PDV_OPER (ID_CAIXA, DIN, CHEQUE, CREDITO, DEBITO, LOJA, ALIMENTACAO, REFEICAO, PRESENTE, COMBUSTIVEL, OUTROS, EXTRA_1, EXTRA_2, EXTRA_3, EXTRA_4, EXTRA_5, EXTRA_6, EXTRA_7, EXTRA_8, EXTRA_9, EXTRA_10, CURRENTTIME, ABERTO, HASH, SANGRIAS, SUPRIMENTOS, TROCAS, FECHADO, ID_OPER, ID_USER, TRI_PDV_DT_UPD) VALUES (:pID_CAIXA, :pDIN, :pCHEQUE, :pCREDITO, :pDEBITO, :pLOJA, :pALIMENTACAO, :pREFEICAO, :pPRESENTE, :pCOMBUSTIVEL, :pOUTROS, :pEXTRA_1, :pEXTRA_2, :pEXTRA_3, :pEXTRA_4, :pEXTRA_5, :pEXTRA_6, :pEXTRA_7, :pEXTRA_8, :pEXTRA_9, :pEXTRA_10, :pCURRENTTIME, :pABERTO, :pHASH, :pSANGRIAS, :pSUPRIMENTOS, :pTROCAS, :pFECHADO, :pID_OPER, :pID_USER, :pTRI_PDV_DT_UPD) MATCHING (ID_OPER) ; END;';
	
	erro = 'sproc config get by dt upd';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CONFIG_GETBY_DTUPD_NCAI (pUltimaSync TIMESTAMP, pNoCaixa INTEGER) RETURNS (ID_MAC VARCHAR(12), NO_CAIXA SMALLINT, EXIGE_SANGRIA CHAR(1), VALOR_MAX_CAIXA TYPE OF COLUMN TRI_PDV_OPER.DIN, BLOQUEIA_NO_LIMITE CHAR(1), VALOR_DE_FOLGA TYPE OF COLUMN TRI_PDV_OPER.DIN, PERMITE_FOLGA_SANGRIA CHAR(1), INTERROMPE_NAO_ENCONTRADO CHAR(1), MENSAGEM_CORTESIA VARCHAR(100), ICMS_CONT FLOAT, CSOSN_CONT FLOAT, PEDE_CPF INTEGER, PERMITE_ESTOQUE_NEGATIVO INTEGER, MODELO_CUPOM SMALLINT, MENSAGEM_RODAPE VARCHAR(100), TRI_PDV_DT_UPD TIMESTAMP) AS BEGIN FOR SELECT ID_MAC, NO_CAIXA, EXIGE_SANGRIA, VALOR_MAX_CAIXA, BLOQUEIA_NO_LIMITE, VALOR_DE_FOLGA, PERMITE_FOLGA_SANGRIA, INTERROMPE_NAO_ENCONTRADO, MENSAGEM_CORTESIA, ICMS_CONT, CSOSN_CONT, PEDE_CPF, PERMITE_ESTOQUE_NEGATIVO, MODELO_CUPOM, MENSAGEM_RODAPE, TRI_PDV_DT_UPD FROM TRI_PDV_CONFIG WHERE TRI_PDV_DT_UPD &gt; :pUltimaSync AND NO_CAIXA = CAST(:pNoCaixa AS SMALLINT) INTO :ID_MAC, :NO_CAIXA, :EXIGE_SANGRIA, :VALOR_MAX_CAIXA, :BLOQUEIA_NO_LIMITE, :VALOR_DE_FOLGA, :PERMITE_FOLGA_SANGRIA, :INTERROMPE_NAO_ENCONTRADO, :MENSAGEM_CORTESIA, :ICMS_CONT, :CSOSN_CONT, :PEDE_CPF, :PERMITE_ESTOQUE_NEGATIVO, :MODELO_CUPOM, :MENSAGEM_RODAPE, :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';

						erro = 'sproc SP_TRI_CONFIG_UPSERT';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CONFIG_UPSERT (PID_MAC VARCHAR(12), PNO_CAIXA SMALLINT, PEXIGE_SANGRIA CHAR(1), PVALOR_MAX_CAIXA DOUBLE PRECISION, PBLOQUEIA_NO_LIMITE CHAR(1), PVALOR_DE_FOLGA DOUBLE PRECISION, PPERMITE_FOLGA_SANGRIA CHAR(1), PINTERROMPE_NAO_ENCONTRADO CHAR(1), PMENSAGEM_CORTESIA VARCHAR(100), PICMS_CONT FLOAT, PCSOSN_CONT FLOAT, PPEDE_CPF INTEGER, PPERMITE_ESTOQUE_NEGATIVO INTEGER, PMODELO_CUPOM SMALLINT, PMENSAGEM_RODAPE VARCHAR(100), PTRI_PDV_DT_UPD TIMESTAMP, PMODELO_SAT INTEGER, PSATSERVIDOR CHAR(1), PSAT_CODATIV VARCHAR(64), PSIGN_AC BLOB SUB_TYPE 1, PSAT_USADO CHAR(1), PECF_ATIVA CHAR(1), PECF_PORTA VARCHAR(5), PIMPRESSORA_USB VARCHAR(64), PIMPRESSORA_USB_PED VARCHAR(64), PPERGUNTA_WHATS INTEGER, PUSATEF CHAR(1), PTEFIP VARCHAR(15), PTEFNUMLOJA VARCHAR(8), PTEFNUMTERMINAL VARCHAR(8), PTEFPEDECPFPELOPINPAD CHAR(1), PBALPORTA SMALLINT, PBALBITS SMALLINT, PBALBAUD INTEGER, PBALPARITY SMALLINT, PBALMODELO SMALLINT, PACFILLPREFIX SMALLINT, PACFILLMODE SMALLINT, PACREFERENCIA SMALLINT, PSYSCOMISSAO SMALLINT, PSATSERVTIMEOUT INTEGER, PSATLIFESIGNINTERVAL INTEGER, PACFILLDELAY INTEGER, PSYSPERGUNTAWHATS SMALLINT, PSYSPARCELA SMALLINT, PSYSEMITECOMPROVANTE SMALLINT, PINFORMA_MAQUININHA CHAR(1)) RETURNS (RROWSAFFECTED INTEGER) AS BEGIN UPDATE OR INSERT INTO TRI_PDV_CONFIG (ID_MAC, NO_CAIXA, EXIGE_SANGRIA, VALOR_MAX_CAIXA, BLOQUEIA_NO_LIMITE, VALOR_DE_FOLGA, PERMITE_FOLGA_SANGRIA, INTERROMPE_NAO_ENCONTRADO, MENSAGEM_CORTESIA, ICMS_CONT, CSOSN_CONT, PEDE_CPF, PERMITE_ESTOQUE_NEGATIVO, MODELO_CUPOM, MENSAGEM_RODAPE, TRI_PDV_DT_UPD, MODELO_SAT, SATSERVIDOR, SAT_CODATIV, SIGN_AC, SAT_USADO, ECF_ATIVA, ECF_PORTA, IMPRESSORA_USB, IMPRESSORA_USB_PED, PERGUNTA_WHATS, USATEF, TEFIP, TEFNUMLOJA, TEFNUMTERMINAL, TEFPEDECPFPELOPINPAD, BALPORTA, BALBITS, BALBAUD, BALPARITY, BALMODELO, ACFILLPREFIX, ACFILLMODE, ACREFERENCIA, SYSCOMISSAO, SATSERVTIMEOUT, SATLIFESIGNINTERVAL, ACFILLDELAY, SYSPERGUNTAWHATS, SYSPARCELA, SYSEMITECOMPROVANTE, INFORMA_MAQUININHA) VALUES (:pID_MAC, :pNO_CAIXA, :pEXIGE_SANGRIA, :pVALOR_MAX_CAIXA, :pBLOQUEIA_NO_LIMITE, :pVALOR_DE_FOLGA, :pPERMITE_FOLGA_SANGRIA, :pINTERROMPE_NAO_ENCONTRADO, :pMENSAGEM_CORTESIA, :pICMS_CONT, :pCSOSN_CONT, :pPEDE_CPF, :pPERMITE_ESTOQUE_NEGATIVO, :pMODELO_CUPOM, :pMENSAGEM_RODAPE, :pTRI_PDV_DT_UPD, :pMODELO_SAT, :pSATSERVIDOR, :pSAT_CODATIV, :pSIGN_AC, :pSAT_USADO, :pECF_ATIVA, :pECF_PORTA, :pIMPRESSORA_USB, :pIMPRESSORA_USB_PED, :pPERGUNTA_WHATS, :pUSATEF, :pTEFIP, :pTEFNUMLOJA, :pTEFNUMTERMINAL, :pTEFPEDECPFPELOPINPAD, :pBALPORTA, :pBALBITS, :pBALBAUD, :pBALPARITY, :pBALMODELO, :pACFILLPREFIX, :pACFILLMODE, :pACREFERENCIA, :pSYSCOMISSAO, :pSATSERVTIMEOUT, :pSATLIFESIGNINTERVAL, :pACFILLDELAY, :pSYSPERGUNTAWHATS, :pSYSPARCELA, :pSYSEMITECOMPROVANTE, :pINFORMA_MAQUININHA) MATCHING (ID_MAC); rRowsAffected = ROW_COUNT; END';

						erro = 'sproc cfopsis get by dt upd';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CFOPSIS_GETBY_DTUPD (pUltimaSync TIMESTAMP) RETURNS (CFOP VARCHAR(4), DESCRICAO VARCHAR(330), RESUMO VARCHAR(60), OBSERVACAO VARCHAR(50), EST_BX CHAR(1), EST_BX_AMBOS CHAR(1), DEV_RET CHAR(1), TRI_PDV_DT_UPD TIMESTAMP) AS BEGIN FOR SELECT CFOP, DESCRICAO, RESUMO, OBSERVACAO, EST_BX, EST_BX_AMBOS, DEV_RET, TRI_PDV_DT_UPD FROM TB_CFOP_SIS WHERE TRI_PDV_DT_UPD &gt; :pUltimaSync INTO :CFOP, :DESCRICAO, :RESUMO, :OBSERVACAO, :EST_BX, :EST_BX_AMBOS, :DEV_RET, :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';
	erro = 'sproc cfopsis sync upsert';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CFOPSIS_UPSERT (pCFOP VARCHAR(4), pDESCRICAO VARCHAR(330), pRESUMO VARCHAR(60), pOBSERVACAO VARCHAR(50), pEST_BX CHAR(1), pEST_BX_AMBOS CHAR(1), pDEV_RET CHAR(1), pTRI_PDV_DT_UPD TIMESTAMP) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO TB_CFOP_SIS (CFOP, DESCRICAO, RESUMO, OBSERVACAO, EST_BX, EST_BX_AMBOS, DEV_RET, TRI_PDV_DT_UPD) VALUES (:pCFOP, :pDESCRICAO, :pRESUMO, :pOBSERVACAO, :pEST_BX, :pEST_BX_AMBOS, :pDEV_RET, :pTRI_PDV_DT_UPD) MATCHING (CFOP) ; rRowsAffected = ROW_COUNT; END;';
	
	erro = 'sproc fornecedor get by dt upd';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_FORNEC_GETBY_DTUPD (pUltimaSync TIMESTAMP) RETURNS (ID_FORNEC INTEGER, NOME VARCHAR(60), NOME_FANTA VARCHAR(40), CNPJ VARCHAR(18), INSC_ESTAD VARCHAR(16), INSC_MUNIC VARCHAR(16), END_CEP VARCHAR(9), END_TIPO VARCHAR(15), END_LOGRAD VARCHAR(40), END_BAIRRO VARCHAR(35), END_NUMERO VARCHAR(5), END_COMPLE VARCHAR(15), DDD_COMER CHAR(2), FONE_COMER VARCHAR(13), FONE_0800 VARCHAR(13), DDD_CELUL CHAR(2), FONE_CELUL VARCHAR(13), DDD_FAX CHAR(2), FONE_FAX VARCHAR(13), EMAIL_CONT VARCHAR(50), EMAIL_NFE VARCHAR(50), SITE VARCHAR(50), STATUS VARCHAR(1), DT_PRICOMP DATE, DT_ULTCOMP DATE, ID_CIDADE CHAR(7), LIMITE TYPE OF COLUMN TRI_PDV_OPER.DIN, ID_RAMO SMALLINT, ID_PAIS CHAR(4), OBSERVACAO BLOB SUB_TYPE 1, CONTATO VARCHAR(35), TRI_PDV_DT_UPD TIMESTAMP) AS BEGIN FOR SELECT ID_FORNEC, NOME, NOME_FANTA, CNPJ, INSC_ESTAD, INSC_MUNIC, END_CEP, END_TIPO, END_LOGRAD, END_BAIRRO, END_NUMERO, END_COMPLE, DDD_COMER, FONE_COMER, FONE_0800, DDD_CELUL, FONE_CELUL, DDD_FAX, FONE_FAX, EMAIL_CONT, EMAIL_NFE, SITE, STATUS, DT_PRICOMP, DT_ULTCOMP, ID_CIDADE, LIMITE, ID_RAMO, ID_PAIS, OBSERVACAO, CONTATO, TRI_PDV_DT_UPD FROM TB_FORNECEDOR WHERE TRI_PDV_DT_UPD &gt; :pUltimaSync INTO :ID_FORNEC, :NOME, :NOME_FANTA, :CNPJ, :INSC_ESTAD, :INSC_MUNIC, :END_CEP, :END_TIPO, :END_LOGRAD, :END_BAIRRO, :END_NUMERO, :END_COMPLE, :DDD_COMER, :FONE_COMER, :FONE_0800, :DDD_CELUL, :FONE_CELUL, :DDD_FAX, :FONE_FAX, :EMAIL_CONT, :EMAIL_NFE, :SITE, :STATUS, :DT_PRICOMP, :DT_ULTCOMP, :ID_CIDADE, :LIMITE, :ID_RAMO, :ID_PAIS, :OBSERVACAO, :CONTATO, :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';
	erro = 'sproc fornecedor sync upsert';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_FORNEC_UPSERT (pID_FORNEC INTEGER, pNOME VARCHAR(60), pNOME_FANTA VARCHAR(40), pCNPJ VARCHAR(18), pINSC_ESTAD VARCHAR(16), pINSC_MUNIC VARCHAR(16), pEND_CEP VARCHAR(9), pEND_TIPO VARCHAR(15), pEND_LOGRAD VARCHAR(40), pEND_BAIRRO VARCHAR(35), pEND_NUMERO VARCHAR(5), pEND_COMPLE VARCHAR(15), pDDD_COMER CHAR(2), pFONE_COMER VARCHAR(13), pFONE_0800 VARCHAR(13), pDDD_CELUL CHAR(2), pFONE_CELUL VARCHAR(13), pDDD_FAX CHAR(2), pFONE_FAX VARCHAR(13), pEMAIL_CONT VARCHAR(50), pEMAIL_NFE VARCHAR(50), pSITE VARCHAR(50), pSTATUS VARCHAR(1), pDT_PRICOMP DATE, pDT_ULTCOMP DATE, pID_CIDADE CHAR(7), pLIMITE TYPE OF COLUMN TRI_PDV_OPER.DIN, pID_RAMO SMALLINT, pID_PAIS CHAR(4), pOBSERVACAO BLOB SUB_TYPE 1, pCONTATO VARCHAR(35), pTRI_PDV_DT_UPD TIMESTAMP) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO TB_FORNECEDOR (ID_FORNEC, NOME, NOME_FANTA, CNPJ, INSC_ESTAD, INSC_MUNIC, END_CEP, END_TIPO, END_LOGRAD, END_BAIRRO, END_NUMERO, END_COMPLE, DDD_COMER, FONE_COMER, FONE_0800, DDD_CELUL, FONE_CELUL, DDD_FAX, FONE_FAX, EMAIL_CONT, EMAIL_NFE, SITE, STATUS, DT_PRICOMP, DT_ULTCOMP, ID_CIDADE, LIMITE, ID_RAMO, ID_PAIS, OBSERVACAO, CONTATO, TRI_PDV_DT_UPD) VALUES (:pID_FORNEC, :pNOME, :pNOME_FANTA, :pCNPJ, :pINSC_ESTAD, :pINSC_MUNIC, :pEND_CEP, :pEND_TIPO, :pEND_LOGRAD, :pEND_BAIRRO, :pEND_NUMERO, :pEND_COMPLE, :pDDD_COMER, :pFONE_COMER, :pFONE_0800, :pDDD_CELUL, :pFONE_CELUL, :pDDD_FAX, :pFONE_FAX, :pEMAIL_CONT, :pEMAIL_NFE, :pSITE, :pSTATUS, :pDT_PRICOMP, :pDT_ULTCOMP, :pID_CIDADE, :pLIMITE, :pID_RAMO, :pID_PAIS, :pOBSERVACAO, :pCONTATO, :pTRI_PDV_DT_UPD) MATCHING (ID_FORNEC); rRowsAffected = ROW_COUNT; END;';
	
	erro = 'sproc ctarec set inv_referencia filthy rows';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CTAREC_SET_INVREF_N AS BEGIN UPDATE TB_CONTA_RECEBER a SET a.INV_REFERENCIA = (''D'' || LPAD(CAST(a.ID_CTAREC AS VARCHAR(10)), 5, ''0'') || LPAD(a.DOCUMENTO, 12, ''0'')) WHERE a.INV_REFERENCIA IS null ; END;';
	
	erro = 'sproc triusers get by dt upd';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_TRIUSERS_GETBY_DTUPD (pUltimaSync TIMESTAMP) RETURNS (ID_USER SMALLINT, USERNAME VARCHAR(64), "PASSWORD" VARCHAR(32), GERENCIA VARCHAR(8), ATIVO VARCHAR(8), TRI_PDV_DT_UPD TIMESTAMP) AS BEGIN FOR SELECT ID_USER, USERNAME, "PASSWORD", GERENCIA, ATIVO, TRI_PDV_DT_UPD FROM TRI_PDV_USERS WHERE TRI_PDV_DT_UPD &gt; :pUltimaSync INTO :ID_USER, :USERNAME, :"PASSWORD", :GERENCIA, :ATIVO, :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';
	erro = 'sproc triusers sync upsert';
	execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_TRIUSERS_UPSERT (pID_USER SMALLINT, pUSERNAME VARCHAR(64), pPASSWORD VARCHAR(32), pGERENCIA VARCHAR(8), pATIVO VARCHAR(8), pTRI_PDV_DT_UPD TIMESTAMP) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO TRI_PDV_USERS (ID_USER, USERNAME, "PASSWORD", GERENCIA, ATIVO, TRI_PDV_DT_UPD) VALUES (:pID_USER, :pUSERNAME, :pPASSWORD, :pGERENCIA, :pATIVO, :pTRI_PDV_DT_UPD) MATCHING (ID_USER) ; rRowsAffected = ROW_COUNT; END;';
	
	erro = 'sproc cliente get by dt upd';
	execute STATEMENT 'CREATE OR ALTER PROCEDURE SP_TRI_CLIENTE_GETBY_DTUPD (PULTIMASYNC TIMESTAMP) RETURNS (ID_CLIENTE TYPE OF COLUMN TB_CLIENTE.ID_CLIENTE, ID_CONVENIO TYPE OF COLUMN TB_CLIENTE.ID_CONVENIO, DT_CADASTRO TYPE OF COLUMN TB_CLIENTE.DT_CADASTRO, NOME TYPE OF COLUMN TB_CLIENTE.NOME, END_CEP TYPE OF COLUMN TB_CLIENTE.END_CEP, END_TIPO TYPE OF COLUMN TB_CLIENTE.END_TIPO, END_NUMERO TYPE OF COLUMN TB_CLIENTE.END_NUMERO, END_LOGRAD TYPE OF COLUMN TB_CLIENTE.END_LOGRAD, END_BAIRRO TYPE OF COLUMN TB_CLIENTE.END_BAIRRO, END_COMPLE TYPE OF COLUMN TB_CLIENTE.END_COMPLE, DT_PRICOMP TYPE OF COLUMN TB_CLIENTE.DT_PRICOMP, DT_ULTCOMP TYPE OF COLUMN TB_CLIENTE.DT_ULTCOMP, CONTATO TYPE OF COLUMN TB_CLIENTE.CONTATO, STATUS TYPE OF COLUMN TB_CLIENTE.STATUS, LIMITE TYPE OF COLUMN TB_CLIENTE.LIMITE, DDD_RESID TYPE OF COLUMN TB_CLIENTE.DDD_RESID, FONE_RESID TYPE OF COLUMN TB_CLIENTE.FONE_RESID, DDD_COMER TYPE OF COLUMN TB_CLIENTE.DDD_COMER, FONE_COMER TYPE OF COLUMN TB_CLIENTE.FONE_COMER, DDD_CELUL TYPE OF COLUMN TB_CLIENTE.DDD_CELUL, FONE_CELUL TYPE OF COLUMN TB_CLIENTE.FONE_CELUL, DDD_FAX TYPE OF COLUMN TB_CLIENTE.DDD_FAX, FONE_FAX TYPE OF COLUMN TB_CLIENTE.FONE_FAX, EMAIL_CONT TYPE OF COLUMN TB_CLIENTE.EMAIL_CONT, EMAIL_NFE TYPE OF COLUMN TB_CLIENTE.EMAIL_NFE, ID_CIDADE TYPE OF COLUMN TB_CLIENTE.ID_CIDADE, ID_TIPO TYPE OF COLUMN TB_CLIENTE.ID_TIPO, ID_FUNCIONARIO TYPE OF COLUMN TB_CLIENTE.ID_FUNCIONARIO, ID_PAIS TYPE OF COLUMN TB_CLIENTE.ID_PAIS, MENSAGEM TYPE OF COLUMN TB_CLIENTE.MENSAGEM, ID_RAMO TYPE OF COLUMN TB_CLIENTE.ID_RAMO, EMAIL_ADIC TYPE OF COLUMN TB_CLIENTE.EMAIL_ADIC, OBSERVACAO TYPE OF COLUMN TB_CLIENTE.OBSERVACAO, DT_MELHOR_VENCTO TYPE OF COLUMN TB_CLIENTE.DT_MELHOR_VENCTO, TRI_PDV_DT_UPD TYPE OF COLUMN TB_CLIENTE.TRI_PDV_DT_UPD) AS BEGIN FOR SELECT ID_CLIENTE, ID_CONVENIO, DT_CADASTRO, NOME, END_CEP, END_TIPO, END_NUMERO, END_LOGRAD, END_BAIRRO, END_COMPLE, DT_PRICOMP, DT_ULTCOMP, CONTATO, STATUS, LIMITE, DDD_RESID, FONE_RESID, DDD_COMER, FONE_COMER, DDD_CELUL, FONE_CELUL, DDD_FAX, FONE_FAX, EMAIL_CONT, EMAIL_NFE, ID_CIDADE, ID_TIPO, ID_FUNCIONARIO, ID_PAIS, MENSAGEM, ID_RAMO, EMAIL_ADIC, OBSERVACAO, DT_MELHOR_VENCTO, TRI_PDV_DT_UPD FROM TB_CLIENTE WHERE TRI_PDV_DT_UPD &gt; :pUltimaSync INTO :ID_CLIENTE, :ID_CONVENIO, :DT_CADASTRO, :NOME, :END_CEP, :END_TIPO, :END_NUMERO, :END_LOGRAD, :END_BAIRRO, :END_COMPLE, :DT_PRICOMP, :DT_ULTCOMP, :CONTATO, :STATUS, :LIMITE, :DDD_RESID, :FONE_RESID, :DDD_COMER, :FONE_COMER, :DDD_CELUL, :FONE_CELUL, :DDD_FAX, :FONE_FAX, :EMAIL_CONT, :EMAIL_NFE, :ID_CIDADE, :ID_TIPO, :ID_FUNCIONARIO, :ID_PAIS, :MENSAGEM, :ID_RAMO, :EMAIL_ADIC, :OBSERVACAO, :DT_MELHOR_VENCTO, :TRI_PDV_DT_UPD DO BEGIN SUSPEND; END END';
	erro = 'deu certo';
	
	SUSPEND;
	WHEN ANY DO
	BEGIN		
	END 
END;</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="D_PROCEDURES4" Modifier="Public" Name="D_PROCEDURES4" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy16" UserSourceName="D_PROCEDURES4">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>CREATE OR ALTER PROCEDURE SP_TRI_PROCEDURES4
RETURNS
(
erro VARCHAR(64)
)
AS
BEGIN
erro = 'sproc setup set origem';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_SETUP_SET_ORIGEM (pORIGEM VARCHAR(8)) AS BEGIN UPDATE TRI_PDV_SETUP a SET a.ORIGEM = :pORIGEM ; END;';

erro = 'sproc emitente get by dt upd';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_EMITENTE_GETBY_DTUPD ( pUltimaSync TIMESTAMP ) RETURNS ( NOME VARCHAR(60) , NOME_FANTA VARCHAR(40) , CONTATO VARCHAR(35) , END_CEP CHAR(9) , END_TIPO VARCHAR(15) , END_LOGRAD VARCHAR(40) , END_NUMERO VARCHAR(5) , END_COMPLE VARCHAR(15) , END_BAIRRO VARCHAR(35) , CNPJ VARCHAR(18) , INSC_ESTAD VARCHAR(16) , INSC_MUNIC VARCHAR(16) , DDD_COMER CHAR(2) , FONE_COMER VARCHAR(13) , DDD_FAX CHAR(2) , FONE_FAX VARCHAR(13) , DDD_CELUL CHAR(2) , FONE_CELUL VARCHAR(13) , EMAIL_CONT VARCHAR(50) , SITE VARCHAR(50) , CNAE VARCHAR(17) , SIMPLES CHAR(1) , ID_CIDADE CHAR(7) , ID_RAMO SMALLINT , DT_COMPRA DATE , LOGO BLOB SUB_TYPE 0 , IE_ST_AC VARCHAR(16) , IE_ST_AL VARCHAR(16) , IE_ST_AM VARCHAR(16) , IE_ST_AP VARCHAR(16) , IE_ST_BA VARCHAR(16) , IE_ST_CE VARCHAR(16) , IE_ST_DF VARCHAR(16) , IE_ST_ES VARCHAR(16) , IE_ST_GO VARCHAR(16) , IE_ST_MA VARCHAR(16) , IE_ST_MG VARCHAR(16) , IE_ST_MS VARCHAR(16) , IE_ST_MT VARCHAR(16) , IE_ST_PA VARCHAR(16) , IE_ST_PB VARCHAR(16) , IE_ST_PE VARCHAR(16) , IE_ST_PI VARCHAR(16) , IE_ST_PR VARCHAR(16) , IE_ST_RJ VARCHAR(16) , IE_ST_RN VARCHAR(16) , IE_ST_RO VARCHAR(16) , IE_ST_RR VARCHAR(16) , IE_ST_RS VARCHAR(16) , IE_ST_SC VARCHAR(16) , IE_ST_SE VARCHAR(16) , IE_ST_SP VARCHAR(16) , IE_ST_TO VARCHAR(16) , TEXTO_COBRANCA BLOB SUB_TYPE 1 , TEXTO_COBRANCA_RODAPE BLOB SUB_TYPE 1 , TEXTO_COBRANCA_ASSUNTO VARCHAR(150) , TRI_PDV_DT_UPD TIMESTAMP ) AS BEGIN FOR SELECT NOME , NOME_FANTA , CONTATO , END_CEP , END_TIPO , END_LOGRAD , END_NUMERO , END_COMPLE , END_BAIRRO , CNPJ , INSC_ESTAD , INSC_MUNIC , DDD_COMER , FONE_COMER , DDD_FAX , FONE_FAX , DDD_CELUL , FONE_CELUL , EMAIL_CONT , SITE , CNAE , SIMPLES , ID_CIDADE , ID_RAMO , DT_COMPRA , LOGO , IE_ST_AC , IE_ST_AL , IE_ST_AM , IE_ST_AP , IE_ST_BA , IE_ST_CE , IE_ST_DF , IE_ST_ES , IE_ST_GO , IE_ST_MA , IE_ST_MG , IE_ST_MS , IE_ST_MT , IE_ST_PA , IE_ST_PB , IE_ST_PE , IE_ST_PI , IE_ST_PR , IE_ST_RJ , IE_ST_RN , IE_ST_RO , IE_ST_RR , IE_ST_RS , IE_ST_SC , IE_ST_SE , IE_ST_SP , IE_ST_TO , TEXTO_COBRANCA , TEXTO_COBRANCA_RODAPE , TEXTO_COBRANCA_ASSUNTO , TRI_PDV_DT_UPD FROM TB_EMITENTE WHERE TRI_PDV_DT_UPD &gt; :pUltimaSync INTO :NOME , :NOME_FANTA , :CONTATO , :END_CEP , :END_TIPO , :END_LOGRAD , :END_NUMERO , :END_COMPLE , :END_BAIRRO , :CNPJ , :INSC_ESTAD , :INSC_MUNIC , :DDD_COMER , :FONE_COMER , :DDD_FAX , :FONE_FAX , :DDD_CELUL , :FONE_CELUL , :EMAIL_CONT , :SITE , :CNAE , :SIMPLES , :ID_CIDADE , :ID_RAMO , :DT_COMPRA , :LOGO , :IE_ST_AC , :IE_ST_AL , :IE_ST_AM , :IE_ST_AP , :IE_ST_BA , :IE_ST_CE , :IE_ST_DF , :IE_ST_ES , :IE_ST_GO , :IE_ST_MA , :IE_ST_MG , :IE_ST_MS , :IE_ST_MT , :IE_ST_PA , :IE_ST_PB , :IE_ST_PE , :IE_ST_PI , :IE_ST_PR , :IE_ST_RJ , :IE_ST_RN , :IE_ST_RO , :IE_ST_RR , :IE_ST_RS , :IE_ST_SC , :IE_ST_SE , :IE_ST_SP , :IE_ST_TO , :TEXTO_COBRANCA , :TEXTO_COBRANCA_RODAPE , :TEXTO_COBRANCA_ASSUNTO , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';
erro = 'sproc emitente sync upsert';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_EMITENTE_UPSERT ( pNOME VARCHAR(60) , pNOME_FANTA VARCHAR(40) , pCONTATO VARCHAR(35) , pEND_CEP CHAR(9) , pEND_TIPO VARCHAR(15) , pEND_LOGRAD VARCHAR(40) , pEND_NUMERO VARCHAR(5) , pEND_COMPLE VARCHAR(15) , pEND_BAIRRO VARCHAR(35) , pCNPJ VARCHAR(18) , pINSC_ESTAD VARCHAR(16) , pINSC_MUNIC VARCHAR(16) , pDDD_COMER CHAR(2) , pFONE_COMER VARCHAR(13) , pDDD_FAX CHAR(2) , pFONE_FAX VARCHAR(13) , pDDD_CELUL CHAR(2) , pFONE_CELUL VARCHAR(13) , pEMAIL_CONT VARCHAR(50) , pSITE VARCHAR(50) , pCNAE VARCHAR(17) , pSIMPLES CHAR(1) , pID_CIDADE CHAR(7) , pID_RAMO SMALLINT , pDT_COMPRA DATE , pLOGO BLOB SUB_TYPE 0 , pIE_ST_AC VARCHAR(16) , pIE_ST_AL VARCHAR(16) , pIE_ST_AM VARCHAR(16) , pIE_ST_AP VARCHAR(16) , pIE_ST_BA VARCHAR(16) , pIE_ST_CE VARCHAR(16) , pIE_ST_DF VARCHAR(16) , pIE_ST_ES VARCHAR(16) , pIE_ST_GO VARCHAR(16) , pIE_ST_MA VARCHAR(16) , pIE_ST_MG VARCHAR(16) , pIE_ST_MS VARCHAR(16) , pIE_ST_MT VARCHAR(16) , pIE_ST_PA VARCHAR(16) , pIE_ST_PB VARCHAR(16) , pIE_ST_PE VARCHAR(16) , pIE_ST_PI VARCHAR(16) , pIE_ST_PR VARCHAR(16) , pIE_ST_RJ VARCHAR(16) , pIE_ST_RN VARCHAR(16) , pIE_ST_RO VARCHAR(16) , pIE_ST_RR VARCHAR(16) , pIE_ST_RS VARCHAR(16) , pIE_ST_SC VARCHAR(16) , pIE_ST_SE VARCHAR(16) , pIE_ST_SP VARCHAR(16) , pIE_ST_TO VARCHAR(16) , pTEXTO_COBRANCA BLOB SUB_TYPE 1 , pTEXTO_COBRANCA_RODAPE BLOB SUB_TYPE 1 , pTEXTO_COBRANCA_ASSUNTO VARCHAR(150) , pTRI_PDV_DT_UPD TIMESTAMP ) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO TB_EMITENTE (NOME , NOME_FANTA , CONTATO , END_CEP , END_TIPO , END_LOGRAD , END_NUMERO , END_COMPLE , END_BAIRRO , CNPJ , INSC_ESTAD , INSC_MUNIC , DDD_COMER , FONE_COMER , DDD_FAX , FONE_FAX , DDD_CELUL , FONE_CELUL , EMAIL_CONT , SITE , CNAE , SIMPLES , ID_CIDADE , ID_RAMO , DT_COMPRA , LOGO , IE_ST_AC , IE_ST_AL , IE_ST_AM , IE_ST_AP , IE_ST_BA , IE_ST_CE , IE_ST_DF , IE_ST_ES , IE_ST_GO , IE_ST_MA , IE_ST_MG , IE_ST_MS , IE_ST_MT , IE_ST_PA , IE_ST_PB , IE_ST_PE , IE_ST_PI , IE_ST_PR , IE_ST_RJ , IE_ST_RN , IE_ST_RO , IE_ST_RR , IE_ST_RS , IE_ST_SC , IE_ST_SE , IE_ST_SP , IE_ST_TO , TEXTO_COBRANCA , TEXTO_COBRANCA_RODAPE , TEXTO_COBRANCA_ASSUNTO , TRI_PDV_DT_UPD ) VALUES (:pNOME , :pNOME_FANTA , :pCONTATO , :pEND_CEP , :pEND_TIPO , :pEND_LOGRAD , :pEND_NUMERO , :pEND_COMPLE , :pEND_BAIRRO , :pCNPJ , :pINSC_ESTAD , :pINSC_MUNIC , :pDDD_COMER , :pFONE_COMER , :pDDD_FAX , :pFONE_FAX , :pDDD_CELUL , :pFONE_CELUL , :pEMAIL_CONT , :pSITE , :pCNAE , :pSIMPLES , :pID_CIDADE , :pID_RAMO , :pDT_COMPRA , :pLOGO , :pIE_ST_AC , :pIE_ST_AL , :pIE_ST_AM , :pIE_ST_AP , :pIE_ST_BA , :pIE_ST_CE , :pIE_ST_DF , :pIE_ST_ES , :pIE_ST_GO , :pIE_ST_MA , :pIE_ST_MG , :pIE_ST_MS , :pIE_ST_MT , :pIE_ST_PA , :pIE_ST_PB , :pIE_ST_PE , :pIE_ST_PI , :pIE_ST_PR , :pIE_ST_RJ , :pIE_ST_RN , :pIE_ST_RO , :pIE_ST_RR , :pIE_ST_RS , :pIE_ST_SC , :pIE_ST_SE , :pIE_ST_SP , :pIE_ST_TO , :pTEXTO_COBRANCA , :pTEXTO_COBRANCA_RODAPE , :pTEXTO_COBRANCA_ASSUNTO , :pTRI_PDV_DT_UPD ) MATCHING (CNPJ ) ; rRowsAffected = ROW_COUNT; END;';

erro = 'sproc SP_TRI_IFS_UPSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_IFS_GETBY_DTUPD ( pUltimaSync TIMESTAMP ) RETURNS ( ID_IFS SMALLINT , CAIXA VARCHAR(6) , LOJA VARCHAR(3) , FABRICACAO VARCHAR(20) , USUARIO CHAR(3) , MARCA VARCHAR(20) , MF CHAR(1) , MODELO VARCHAR(20) , TIPO VARCHAR(7) , DATA_ON DATE , DATA_OFF DATE , ATIVO CHAR(1) , ISS_RATEIO CHAR(1) , SB_DATAIN DATE , SB_HORAIN TIME , SB_VERSAO VARCHAR(8) , CHAVE VARCHAR(32) , COD_NAC VARCHAR(10) , DATA_TEMP DATE , NUM_CREDENCIAMENTO VARCHAR(30) , TRI_PDV_DT_UPD TIMESTAMP ) AS BEGIN FOR SELECT ID_IFS , CAIXA , LOJA , FABRICACAO , USUARIO , MARCA , MF , MODELO , TIPO , DATA_ON , DATA_OFF , ATIVO , ISS_RATEIO , SB_DATAIN , SB_HORAIN , SB_VERSAO , CHAVE , COD_NAC , DATA_TEMP , NUM_CREDENCIAMENTO , TRI_PDV_DT_UPD FROM TB_IFS WHERE TRI_PDV_DT_UPD &gt; :pUltimaSync INTO :ID_IFS , :CAIXA , :LOJA , :FABRICACAO , :USUARIO , :MARCA , :MF , :MODELO , :TIPO , :DATA_ON , :DATA_OFF , :ATIVO , :ISS_RATEIO , :SB_DATAIN , :SB_HORAIN , :SB_VERSAO , :CHAVE , :COD_NAC , :DATA_TEMP , :NUM_CREDENCIAMENTO , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';
erro = 'sproc ifs sync upsert';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_IFS_UPSERT ( pID_IFS SMALLINT , pCAIXA VARCHAR(6) , pLOJA VARCHAR(3) , pFABRICACAO VARCHAR(20) , pUSUARIO CHAR(3) , pMARCA VARCHAR(20) , pMF CHAR(1) , pMODELO VARCHAR(20) , pTIPO VARCHAR(7) , pDATA_ON DATE , pDATA_OFF DATE , pATIVO CHAR(1) , pISS_RATEIO CHAR(1) , pSB_DATAIN DATE , pSB_HORAIN TIME , pSB_VERSAO VARCHAR(8) , pCHAVE VARCHAR(32) , pCOD_NAC VARCHAR(10) , pDATA_TEMP DATE , pNUM_CREDENCIAMENTO VARCHAR(30) , pTRI_PDV_DT_UPD TIMESTAMP ) RETURNS (rRowsAffected INTEGER) AS declare newIdIfs type OF column TB_IFS.ID_IFS; BEGIN IF (pID_IFS IS NULL) THEN SELECT COALESCE(MAX(ID_IFS), 0) + 1 FROM TB_IFS INTO :newIdIfs ; ELSE newIdIfs = :pID_IFS; UPDATE OR INSERT INTO TB_IFS (ID_IFS , CAIXA , LOJA , FABRICACAO , USUARIO , MARCA , MF , MODELO , TIPO , DATA_ON , DATA_OFF , ATIVO , ISS_RATEIO , SB_DATAIN , SB_HORAIN , SB_VERSAO , CHAVE , COD_NAC , DATA_TEMP , NUM_CREDENCIAMENTO , TRI_PDV_DT_UPD ) VALUES (:newIdIfs , :pCAIXA , :pLOJA , :pFABRICACAO , :pUSUARIO , :pMARCA , :pMF , :pMODELO , :pTIPO , :pDATA_ON , :pDATA_OFF , :pATIVO , :pISS_RATEIO , :pSB_DATAIN , :pSB_HORAIN , :pSB_VERSAO , :pCHAVE , :pCOD_NAC , :pDATA_TEMP , :pNUM_CREDENCIAMENTO , :pTRI_PDV_DT_UPD ) MATCHING (ID_IFS ) ; rRowsAffected = ROW_COUNT; END;';

erro = 'sproc ifs get by caixa';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_IFS_GETBY_CAIXA ( pNUM_CAIXA SMALLINT ) RETURNS ( EXISTE SMALLINT ) AS BEGIN SELECT COUNT(1) FROM TB_IFS WHERE CAST(CAIXA AS SMALLINT) = :pNUM_CAIXA INTO :EXISTE ; END;';

erro = 'sproc cupom item set cancel';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CUPOM_ITEM_SET_CANCEL ( pCOO type of column TB_CUPOM.COO , pNUM_CAIXA type of column TB_CUPOM.NUM_CAIXA ) AS BEGIN UPDATE TB_CUPOM_ITEM SET ITEM_CANCEL = ''S'' WHERE ID_CUPOM IN ( SELECT ID_CUPOM FROM TB_CUPOM WHERE TB_CUPOM.COO = :pCOO and tb_cupom.num_caixa = :pNUM_CAIXA ) ; END;';

erro = 'sproc existe caixa aberto';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_EXISTE_CAIXA_ABERTO ( NUMCAIXA INTEGER ) RETURNS ( RESULTADO INTEGER ) AS BEGIN SELECT COUNT(ID_CAIXA) FROM TRI_PDV_OPER WHERE ABERTO = ''S'' AND ID_CAIXA =:NUMCAIXA INTO :RESULTADO ; END;';

erro = 'sproc EST_GRUPO get by dt upd';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ESTGRUPO_GETBY_DTUPD ( pUltimaSync TIMESTAMP ) RETURNS ( ID_GRUPO type of column TB_EST_GRUPO.ID_GRUPO , DESCRICAO type of column TB_EST_GRUPO.DESCRICAO , TRI_PDV_DT_UPD type of column TB_EST_GRUPO.TRI_PDV_DT_UPD ) AS BEGIN FOR SELECT ID_GRUPO , DESCRICAO , TRI_PDV_DT_UPD FROM TB_EST_GRUPO WHERE TRI_PDV_DT_UPD &gt; :pUltimaSync INTO :ID_GRUPO , :DESCRICAO , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';
erro = 'sproc EST_GRUPO sync upsert';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_EST_GRUPO_UPSERT ( pID_GRUPO type OF column TB_EST_GRUPO.ID_GRUPO , pDESCRICAO type OF column TB_EST_GRUPO.DESCRICAO , pTRI_PDV_DT_UPD type OF column TB_EST_GRUPO.TRI_PDV_DT_UPD ) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO TB_EST_GRUPO ( ID_GRUPO , DESCRICAO , TRI_PDV_DT_UPD ) VALUES ( :pID_GRUPO , :pDESCRICAO , :pTRI_PDV_DT_UPD ) MATCHING ( ID_GRUPO ); rRowsAffected = ROW_COUNT; END;';

erro = 'sproc FMAPGTO get by dt upd';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_FMAPGTO_GETBY_DTUPD ( pUltimaSync TIMESTAMP ) RETURNS ( ID_FMAPGTO type of column TB_FORMA_PAGTO_SIS.ID_FMAPGTO , DESCRICAO type of column TB_FORMA_PAGTO_SIS.DESCRICAO , STATUS type of column TB_FORMA_PAGTO_SIS.STATUS , UTILIZACAO type of column TB_FORMA_PAGTO_SIS.UTILIZACAO , TRI_PDV_DT_UPD type of column TB_FORMA_PAGTO_SIS.TRI_PDV_DT_UPD ) AS BEGIN FOR SELECT ID_FMAPGTO , DESCRICAO , STATUS , UTILIZACAO , TRI_PDV_DT_UPD FROM TB_FORMA_PAGTO_SIS WHERE TRI_PDV_DT_UPD &gt; :pUltimaSync INTO :ID_FMAPGTO , :DESCRICAO , :STATUS , :UTILIZACAO , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';
erro = 'sproc FMAPGTO sync upsert';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_FMAPGTO_UPSERT ( pID_FMAPGTO type OF COLUMN TB_FORMA_PAGTO_SIS.ID_FMAPGTO ,pDESCRICAO type OF COLUMN TB_FORMA_PAGTO_SIS.DESCRICAO ,pSTATUS type OF COLUMN TB_FORMA_PAGTO_SIS.STATUS ,pUTILIZACAO type OF COLUMN TB_FORMA_PAGTO_SIS.UTILIZACAO ,pTRI_PDV_DT_UPD type OF COLUMN TB_FORMA_PAGTO_SIS.TRI_PDV_DT_UPD ) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO TB_FORMA_PAGTO_SIS ( ID_FMAPGTO ,DESCRICAO ,STATUS ,UTILIZACAO ,TRI_PDV_DT_UPD ) VALUES ( :pID_FMAPGTO ,:pDESCRICAO ,:pSTATUS ,:pUTILIZACAO ,:pTRI_PDV_DT_UPD ) MATCHING (ID_FMAPGTO); rRowsAffected = ROW_COUNT; END;';

erro = 'sproc est_produto get cod_cest by id_identif';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ESTPROD_GETCEST_IDENTIF ( pID_IDENTIFICADOR type of column TB_EST_PRODUTO.ID_IDENTIFICADOR ) RETURNS ( COD_CEST type of column TB_EST_PRODUTO.COD_CEST ) AS BEGIN SELECT COD_CEST FROM TB_EST_PRODUTO WHERE ID_IDENTIFICADOR = :pID_IDENTIFICADOR INTO :COD_CEST ; END;';

erro = 'sproc PARCELA get by dt upd';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_PARCELA_GETBY_DTUPD ( pUltimaSync TIMESTAMP ) RETURNS ( ID_PARCELA type of column TB_PARCELAMENTO.ID_PARCELA , DESCRICAO type of column TB_PARCELAMENTO.DESCRICAO , N_PARCELAS type of column TB_PARCELAMENTO.N_PARCELAS , INTERVALO type of column TB_PARCELAMENTO.INTERVALO , ENTRADA type of column TB_PARCELAMENTO.ENTRADA , STATUS type of column TB_PARCELAMENTO.STATUS , ID_FMAPGTO type of column TB_PARCELAMENTO.ID_FMAPGTO , INTERVALO_VAR type of column TB_PARCELAMENTO.INTERVALO_VAR , TRI_PDV_DT_UPD type of column TB_PARCELAMENTO.TRI_PDV_DT_UPD ) AS BEGIN FOR SELECT ID_PARCELA , DESCRICAO , N_PARCELAS , INTERVALO , ENTRADA , STATUS , ID_FMAPGTO , INTERVALO_VAR , TRI_PDV_DT_UPD FROM TB_PARCELAMENTO WHERE TRI_PDV_DT_UPD &gt; :pUltimaSync INTO :ID_PARCELA , :DESCRICAO , :N_PARCELAS , :INTERVALO , :ENTRADA , :STATUS , :ID_FMAPGTO , :INTERVALO_VAR , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';
erro = 'sproc PARCELA sync upsert';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_PARCELA_UPSERT ( pID_PARCELA type of column TB_PARCELAMENTO.ID_PARCELA , pDESCRICAO type of column TB_PARCELAMENTO.DESCRICAO , pN_PARCELAS type of column TB_PARCELAMENTO.N_PARCELAS , pINTERVALO type of column TB_PARCELAMENTO.INTERVALO , pENTRADA type of column TB_PARCELAMENTO.ENTRADA , pSTATUS type of column TB_PARCELAMENTO.STATUS , pID_FMAPGTO type of column TB_PARCELAMENTO.ID_FMAPGTO , pINTERVALO_VAR type of column TB_PARCELAMENTO.INTERVALO_VAR , pTRI_PDV_DT_UPD type of column TB_PARCELAMENTO.TRI_PDV_DT_UPD ) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO TB_PARCELAMENTO (ID_PARCELA , DESCRICAO , N_PARCELAS , INTERVALO , ENTRADA , STATUS , ID_FMAPGTO , INTERVALO_VAR , TRI_PDV_DT_UPD ) VALUES (:pID_PARCELA , :pDESCRICAO , :pN_PARCELAS , :pINTERVALO , :pENTRADA , :pSTATUS , :pID_FMAPGTO , :pINTERVALO_VAR , :pTRI_PDV_DT_UPD ) MATCHING (ID_PARCELA ) ; rRowsAffected = ROW_COUNT; END;';

erro = 'sproc estoque get by dt upd';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ESTOQUE_GETBY_DTUPD ( pUltimaSync TIMESTAMP ) RETURNS ( ID_ESTOQUE INTEGER , ID_GRUPO INTEGER , DESCRICAO VARCHAR(50) , STATUS VARCHAR(1) , DT_CADAST DATE , HR_CADAST TIME , FRACIONADO CHAR(1) , PRC_VENDA TYPE OF COLUMN TRI_PDV_OPER.DIN , PRC_CUSTO TYPE OF COLUMN TRI_PDV_OPER.DIN , ULT_VENDA DATE , MARGEM_LB TYPE OF COLUMN TRI_PDV_OPER.DIN , POR_COMISSAO TYPE OF COLUMN TRI_PDV_OPER.DIN , ULT_FORNEC INTEGER , GRADE_SERIE CHAR(1) , ID_TIPOITEM VARCHAR(2) , ID_CTI CHAR(3) , CST_PIS VARCHAR(3) , CST_COFINS VARCHAR(3) , PIS TYPE OF COLUMN TRI_PDV_OPER.DIN , COFINS TYPE OF COLUMN TRI_PDV_OPER.DIN , UNI_MEDIDA VARCHAR(3) , MARGEM_PV TYPE OF COLUMN TRI_PDV_OPER.DIN , CFOP VARCHAR(4) , OBSERVACAO BLOB SUB_TYPE 1 , NAT_RECEITA SMALLINT , CFOP_NF VARCHAR(4) , PRC_ATACADO TYPE OF COLUMN TRI_PDV_OPER.DIN , ID_CTI_PART CHAR(3) , ID_CTI_FCP CHAR(3) , QTD_ATACADO TYPE OF COLUMN TRI_PDV_OPER.DIN , TRI_PDV_DT_UPD TIMESTAMP ) AS BEGIN FOR SELECT A.ID_ESTOQUE , A.ID_GRUPO , A.DESCRICAO , A.STATUS , A.DT_CADAST , A.HR_CADAST , A.FRACIONADO , A.PRC_VENDA , A.PRC_CUSTO , A.ULT_VENDA , A.MARGEM_LB , A.POR_COMISSAO , A.ULT_FORNEC , A.GRADE_SERIE , A.ID_TIPOITEM , A.ID_CTI , A.CST_PIS , A.CST_COFINS , A.PIS , A.COFINS , A.UNI_MEDIDA , A.MARGEM_PV , A.CFOP , A.OBSERVACAO , A.NAT_RECEITA , A.CFOP_NF , A.PRC_ATACADO , A.ID_CTI_PART , A.ID_CTI_FCP , A.QTD_ATACADO , A.TRI_PDV_DT_UPD FROM TB_ESTOQUE A JOIN TB_EST_IDENTIFICADOR B ON B.ID_ESTOQUE = A.ID_ESTOQUE WHERE ( A.TRI_PDV_DT_UPD &gt; :pUltimaSync OR B.TRI_PDV_DT_UPD &gt; :pUltimaSync ) INTO :ID_ESTOQUE , :ID_GRUPO , :DESCRICAO , :STATUS , :DT_CADAST , :HR_CADAST , :FRACIONADO , :PRC_VENDA , :PRC_CUSTO , :ULT_VENDA , :MARGEM_LB , :POR_COMISSAO , :ULT_FORNEC , :GRADE_SERIE , :ID_TIPOITEM , :ID_CTI , :CST_PIS , :CST_COFINS , :PIS , :COFINS , :UNI_MEDIDA , :MARGEM_PV , :CFOP , :OBSERVACAO , :NAT_RECEITA , :CFOP_NF , :PRC_ATACADO , :ID_CTI_PART , :ID_CTI_FCP , :QTD_ATACADO , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';
						erro = 'sproc estoque sync upsert';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ESTOQUE_UPSERT ( pID_ESTOQUE INTEGER , pID_GRUPO INTEGER , pDESCRICAO VARCHAR(50) , pSTATUS VARCHAR(1) , pDT_CADAST DATE , pHR_CADAST TIME , pFRACIONADO CHAR(1) , pPRC_VENDA TYPE OF COLUMN TRI_PDV_OPER.DIN , pPRC_CUSTO TYPE OF COLUMN TRI_PDV_OPER.DIN , pULT_VENDA DATE , pMARGEM_LB TYPE OF COLUMN TRI_PDV_OPER.DIN , pPOR_COMISSAO TYPE OF COLUMN TRI_PDV_OPER.DIN , pULT_FORNEC INTEGER , pGRADE_SERIE CHAR(1) , pID_TIPOITEM VARCHAR(2) , pID_CTI CHAR(3) , pCST_PIS VARCHAR(3) , pCST_COFINS VARCHAR(3) , pPIS TYPE OF COLUMN TRI_PDV_OPER.DIN , pCOFINS TYPE OF COLUMN TRI_PDV_OPER.DIN , pUNI_MEDIDA VARCHAR(3) , pMARGEM_PV TYPE OF COLUMN TRI_PDV_OPER.DIN , pCFOP VARCHAR(4) , pOBSERVACAO BLOB SUB_TYPE 1 , pNAT_RECEITA SMALLINT , pCFOP_NF VARCHAR(4) , pPRC_ATACADO TYPE OF COLUMN TRI_PDV_OPER.DIN , pID_CTI_PART CHAR(3) , pID_CTI_FCP CHAR(3) , pQTD_ATACADO TYPE OF COLUMN TRI_PDV_OPER.DIN , pID_CTI_CFE CHAR(4) , pTRI_PDV_DT_UPD TIMESTAMP ) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO TB_ESTOQUE (ID_ESTOQUE , ID_GRUPO , DESCRICAO , STATUS , DT_CADAST , HR_CADAST , FRACIONADO , PRC_VENDA , PRC_CUSTO , ULT_VENDA , MARGEM_LB , POR_COMISSAO , ULT_FORNEC , GRADE_SERIE , ID_TIPOITEM , ID_CTI , CST_PIS , CST_COFINS , PIS , COFINS , UNI_MEDIDA , MARGEM_PV , CFOP , OBSERVACAO , NAT_RECEITA , CFOP_NF , PRC_ATACADO , ID_CTI_PART , ID_CTI_FCP , QTD_ATACADO , ID_CTI_CFE , TRI_PDV_DT_UPD ) VALUES (:pID_ESTOQUE , :pID_GRUPO , :pDESCRICAO , :pSTATUS , :pDT_CADAST , :pHR_CADAST , :pFRACIONADO , :pPRC_VENDA , :pPRC_CUSTO , :pULT_VENDA , :pMARGEM_LB , :pPOR_COMISSAO , :pULT_FORNEC , :pGRADE_SERIE , :pID_TIPOITEM , :pID_CTI , :pCST_PIS , :pCST_COFINS , :pPIS , :pCOFINS , :pUNI_MEDIDA , :pMARGEM_PV , :pCFOP , :pOBSERVACAO , :pNAT_RECEITA , :pCFOP_NF , :pPRC_ATACADO , :pID_CTI_PART , :pID_CTI_FCP , :pQTD_ATACADO , :pID_CTI_CFE , :pTRI_PDV_DT_UPD ) MATCHING (ID_ESTOQUE ) ; rRowsAffected = ROW_COUNT; END;';

						erro = 'sproc SP_TRI_MOV_CTAREC';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MOV_CTAREC ( NO_CUPOM VARCHAR(12) ) AS DECLARE CTAREC integer; DECLARE MOVDIA integer; BEGIN SELECT FIRST 1 ID_CTAREC FROM TB_CONTA_RECEBER WHERE DOCUMENTO CONTAINING :no_cupom ORDER BY ID_CTAREC DESC INTO CTAREC ; SELECT FIRST 1 ID_MOVTO FROM TB_MOVDIARIO WHERE HISTORICO CONTAINING :no_cupom ORDER BY ID_MOVTO DESC INTO MOVDIA ; INSERT INTO TB_CTAREC_MOVTO (ID_MOVTO , ID_CTAREC ) VALUES (:MOVDIA , :CTAREC ) ; SUSPEND; WHEN ANY DO BEGIN SUSPEND; END END';

						erro = 'sproc SP_TRI_LISTAFECHAMENTOS';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_LISTAFECHAMENTOS ( DATA_INICIAL TIMESTAMP , DATA_FINAL TIMESTAMP ) RETURNS ( FECHADO TIMESTAMP , ID_CAIXA INTEGER , OPERADOR INTEGER , TOTALVENDA TYPE OF COLUMN TRI_PDV_OPER.DIN ) AS BEGIN for SELECT FECHADO , ID_CAIXA , OPERADOR , (DIN + CHEQUE + CREDITO + DEBITO + LOJA + ALIMENTACAO + REFEICAO + PRESENTE + COMBUSTIVEL + OUTROS + EXTRA_1 + EXTRA_2 + EXTRA_3 + EXTRA_4 + EXTRA_5 + EXTRA_6 + EXTRA_7 + EXTRA_8 + EXTRA_9 + EXTRA_10) AS TotalVendaS FROM TRI_PDV_FECHAMENTOS WHERE FECHADO &gt;= :DATA_INICIAL AND FECHADO &lt;= :DATA_FINAL INTO :FECHADO , :ID_CAIXA , :OPERADOR , :TOTALVENDA do SUSPEND ; END;';
erro = 'sproc fechamento get all unsynced';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_FECH_GETALL_UNSYNCED RETURNS ( DIN TYPE OF COLUMN TRI_PDV_OPER.DIN , CHEQUE TYPE OF COLUMN TRI_PDV_OPER.DIN , CREDITO TYPE OF COLUMN TRI_PDV_OPER.DIN , DEBITO TYPE OF COLUMN TRI_PDV_OPER.DIN , LOJA TYPE OF COLUMN TRI_PDV_OPER.DIN , ALIMENTACAO TYPE OF COLUMN TRI_PDV_OPER.DIN , REFEICAO TYPE OF COLUMN TRI_PDV_OPER.DIN , PRESENTE TYPE OF COLUMN TRI_PDV_OPER.DIN , COMBUSTIVEL TYPE OF COLUMN TRI_PDV_OPER.DIN , OUTROS TYPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA_1 TYPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA_3 TYPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA_5 TYPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA_7 TYPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA_9 TYPE OF COLUMN TRI_PDV_OPER.DIN , EXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.DIN , OPERADOR INTEGER , ID_CAIXA INTEGER , FECHADO TIMESTAMP , SANGRIAS TYPE OF COLUMN TRI_PDV_OPER.DIN , SUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.DIN , TROCAS TYPE OF COLUMN TRI_PDV_OPER.DIN , SYNCED SMALLINT ) AS BEGIN FOR SELECT FIRST 200 DIN , CHEQUE , CREDITO , DEBITO , LOJA , ALIMENTACAO , REFEICAO , PRESENTE , COMBUSTIVEL , OUTROS , EXTRA_1 , EXTRA_2 , EXTRA_3 , EXTRA_4 , EXTRA_5 , EXTRA_6 , EXTRA_7 , EXTRA_8 , EXTRA_9 , EXTRA_10 , OPERADOR , ID_CAIXA , FECHADO , SANGRIAS , SUPRIMENTOS , TROCAS , SYNCED FROM TRI_PDV_FECHAMENTOS a WHERE ( a.SYNCED IS NULL OR a.SYNCED = 0 ) ORDER BY a.FECHADO INTO :DIN , :CHEQUE , :CREDITO , :DEBITO , :LOJA , :ALIMENTACAO , :REFEICAO , :PRESENTE , :COMBUSTIVEL , :OUTROS , :EXTRA_1 , :EXTRA_2 , :EXTRA_3 , :EXTRA_4 , :EXTRA_5 , :EXTRA_6 , :EXTRA_7 , :EXTRA_8 , :EXTRA_9 , :EXTRA_10 , :OPERADOR , :ID_CAIXA , :FECHADO , :SANGRIAS , :SUPRIMENTOS , :TROCAS , :SYNCED DO BEGIN SUSPEND ; END END;';
erro = 'sproc fechamento sync insert';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_FECH_SYNC_INSERT ( pDIN TYPE OF COLUMN TRI_PDV_OPER.DIN , pCHEQUE TYPE OF COLUMN TRI_PDV_OPER.DIN , pCREDITO TYPE OF COLUMN TRI_PDV_OPER.DIN , pDEBITO TYPE OF COLUMN TRI_PDV_OPER.DIN , pLOJA TYPE OF COLUMN TRI_PDV_OPER.DIN , pALIMENTACAO TYPE OF COLUMN TRI_PDV_OPER.DIN , pREFEICAO TYPE OF COLUMN TRI_PDV_OPER.DIN , pPRESENTE TYPE OF COLUMN TRI_PDV_OPER.DIN , pCOMBUSTIVEL TYPE OF COLUMN TRI_PDV_OPER.DIN , pOUTROS TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_1 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_3 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_5 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_7 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_9 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.DIN , pOPERADOR INTEGER , pID_CAIXA INTEGER , pFECHADO TIMESTAMP , pSANGRIAS TYPE OF COLUMN TRI_PDV_OPER.DIN , pSUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.DIN , pTROCAS TYPE OF COLUMN TRI_PDV_OPER.DIN , pSYNCED SMALLINT ) AS BEGIN INSERT INTO TRI_PDV_FECHAMENTOS (DIN , CHEQUE , CREDITO , DEBITO , LOJA , ALIMENTACAO , REFEICAO , PRESENTE , COMBUSTIVEL , OUTROS , EXTRA_1 , EXTRA_2 , EXTRA_3 , EXTRA_4 , EXTRA_5 , EXTRA_6 , EXTRA_7 , EXTRA_8 , EXTRA_9 , EXTRA_10 , OPERADOR , ID_CAIXA , FECHADO , SANGRIAS , SUPRIMENTOS , TROCAS , SYNCED ) VALUES (:pDIN , :pCHEQUE , :pCREDITO , :pDEBITO , :pLOJA , :pALIMENTACAO , :pREFEICAO , :pPRESENTE , :pCOMBUSTIVEL , :pOUTROS , :pEXTRA_1 , :pEXTRA_2 , :pEXTRA_3 , :pEXTRA_4 , :pEXTRA_5 , :pEXTRA_6 , :pEXTRA_7 , :pEXTRA_8 , :pEXTRA_9 , :pEXTRA_10 , :pOPERADOR , :pID_CAIXA , :pFECHADO , :pSANGRIAS , :pSUPRIMENTOS , :pTROCAS , :pSYNCED ) ; END;';
erro = 'sproc fechamento set synced';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_FECH_SETSYNCED ( pID_CAIXA INTEGER , pFECHADO TIMESTAMP , pSYNCED SMALLINT ) AS BEGIN UPDATE TRI_PDV_FECHAMENTOS SET SYNCED = :pSYNCED WHERE ID_CAIXA = :pID_CAIXA AND FECHADO = :pFECHADO ; END;';

erro = 'deu certo';

SUSPEND;
WHEN ANY DO
BEGIN
END
END;</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="D_PROCEDURES5" Modifier="Public" Name="D_PROCEDURES5" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy17" UserSourceName="D_PROCEDURES5">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>CREATE OR ALTER PROCEDURE SP_TRI_PROCEDURES5 
RETURNS
(
erro VARCHAR(64)
)
AS
BEGIN

erro = 'sproc fechamentos get by fechado e caixa';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_FECH_GETBY_CAIXA_FECH (pID_CAIXA INTEGER, pFECHADO TIMESTAMP) RETURNS (DIN TYPE OF COLUMN TRI_PDV_OPER.DIN, CHEQUE TYPE OF COLUMN TRI_PDV_OPER.DIN, CREDITO TYPE OF COLUMN TRI_PDV_OPER.DIN, DEBITO TYPE OF COLUMN TRI_PDV_OPER.DIN, LOJA TYPE OF COLUMN TRI_PDV_OPER.DIN, ALIMENTACAO TYPE OF COLUMN TRI_PDV_OPER.DIN, REFEICAO TYPE OF COLUMN TRI_PDV_OPER.DIN, PRESENTE TYPE OF COLUMN TRI_PDV_OPER.DIN, COMBUSTIVEL TYPE OF COLUMN TRI_PDV_OPER.DIN, OUTROS TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_1 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_3 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_5 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_7 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_9 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.DIN, SANGRIAS TYPE OF COLUMN TRI_PDV_OPER.DIN, SUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.DIN, TROCAS TYPE OF COLUMN TRI_PDV_OPER.DIN, OPERADOR INTEGER, ID_CAIXA INTEGER, FECHADO TIMESTAMP, SYNCED SMALLINT) AS BEGIN for SELECT DIN, CHEQUE, CREDITO, DEBITO, LOJA, ALIMENTACAO, REFEICAO, PRESENTE, COMBUSTIVEL, OUTROS, EXTRA_1, EXTRA_2, EXTRA_3, EXTRA_4, EXTRA_5, EXTRA_6, EXTRA_7, EXTRA_8, EXTRA_9, EXTRA_10, SANGRIAS, SUPRIMENTOS, TROCAS, OPERADOR, ID_CAIXA, FECHADO, SYNCED FROM TRI_PDV_FECHAMENTOS WHERE ID_CAIXA = :pID_CAIXA and FECHADO = :pFECHADO INTO :DIN, :CHEQUE, :CREDITO, :DEBITO, :LOJA, :ALIMENTACAO, :REFEICAO, :PRESENTE, :COMBUSTIVEL, :OUTROS, :EXTRA_1, :EXTRA_2, :EXTRA_3, :EXTRA_4, :EXTRA_5, :EXTRA_6, :EXTRA_7, :EXTRA_8, :EXTRA_9, :EXTRA_10, :SANGRIAS, :SUPRIMENTOS, :TROCAS, :OPERADOR, :ID_CAIXA, :FECHADO, :SYNCED DO BEGIN SUSPEND; END END;';

erro = 'sproc oper get by caixa e fechado';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_OPER_GETBY_CAIXA_FECH (pID_CAIXA INTEGER, pFECHADO TIMESTAMP) RETURNS (ID_CAIXA INTEGER, CURRENTTIME TIMESTAMP, ABERTO VARCHAR(1), HASH VARCHAR(32), FECHADO TIMESTAMP, ID_OPER INTEGER, ID_USER INTEGER, TRI_PDV_DT_UPD TIMESTAMP, DIN TYPE OF COLUMN TRI_PDV_OPER.DIN, CHEQUE TYPE OF COLUMN TRI_PDV_OPER.DIN, CREDITO TYPE OF COLUMN TRI_PDV_OPER.DIN, DEBITO TYPE OF COLUMN TRI_PDV_OPER.DIN, LOJA TYPE OF COLUMN TRI_PDV_OPER.DIN, ALIMENTACAO TYPE OF COLUMN TRI_PDV_OPER.DIN, REFEICAO TYPE OF COLUMN TRI_PDV_OPER.DIN, PRESENTE TYPE OF COLUMN TRI_PDV_OPER.DIN, COMBUSTIVEL TYPE OF COLUMN TRI_PDV_OPER.DIN, OUTROS TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_1 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_3 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_5 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_7 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_9 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.DIN, SANGRIAS TYPE OF COLUMN TRI_PDV_OPER.DIN, SUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.DIN, TROCAS TYPE OF COLUMN TRI_PDV_OPER.DIN) AS BEGIN for SELECT ID_CAIXA, CURRENTTIME, ABERTO, HASH, FECHADO, ID_OPER, ID_USER, TRI_PDV_DT_UPD, DIN, CHEQUE, CREDITO, DEBITO, LOJA, ALIMENTACAO, REFEICAO, PRESENTE, COMBUSTIVEL, OUTROS, EXTRA_1, EXTRA_2, EXTRA_3, EXTRA_4, EXTRA_5, EXTRA_6, EXTRA_7, EXTRA_8, EXTRA_9, EXTRA_10, SANGRIAS, SUPRIMENTOS, TROCAS FROM TRI_PDV_OPER WHERE ID_CAIXA = :pID_CAIXA and FECHADO = :pFECHADO INTO :ID_CAIXA, :CURRENTTIME, :ABERTO, :HASH, :FECHADO, :ID_OPER, :ID_USER, :TRI_PDV_DT_UPD, :DIN, :CHEQUE, :CREDITO, :DEBITO, :LOJA, :ALIMENTACAO, :REFEICAO, :PRESENTE, :COMBUSTIVEL, :OUTROS, :EXTRA_1, :EXTRA_2, :EXTRA_3, :EXTRA_4, :EXTRA_5, :EXTRA_6, :EXTRA_7, :EXTRA_8, :EXTRA_9, :EXTRA_10, :SANGRIAS, :SUPRIMENTOS, :TROCAS DO BEGIN SUSPEND; END END;';

erro = 'sproc conta cupons reimpressao';
execute statement 'CREATE OR ALTER PROCEDURE sp_tri_contacupons_reimpress (NUMCAIXA INTEGER, STATUS CHAR(1), pFECHADO TIMESTAMP) RETURNS (QUANT_CUPONS INTEGER) AS DECLARE VARIABLE IDOPER INTEGER; DECLARE VARIABLE DT_ABERT DATE; DECLARE VARIABLE HR_ABERT TIME; BEGIN SELECT ID_OPER FROM TRI_PDV_OPER WHERE ID_CAIXA = :NUMCAIXA AND FECHADO = :pFECHADO INTO IDOPER; HR_ABERT = (SELECT CAST (CURRENTTIME AS TIME) FROM TRI_PDV_OPER WHERE ID_OPER = :IDOPER); DT_ABERT = (SELECT CAST (CURRENTTIME AS DATE) FROM TRI_PDV_OPER WHERE ID_OPER = :IDOPER); SELECT COUNT (ID_CUPOM) FROM TB_CUPOM WHERE STATUS = :STATUS AND DT_CUPOM &gt;= :DT_ABERT AND HR_CUPOM &gt;= :HR_ABERT INTO QUANT_CUPONS; SUSPEND; END;';

erro = 'sproc conta FMAPGTOS reimpressao';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CONTAFMPGTO_REIMPRESS (NUMCAIXA INTEGER, STATUS CHAR(1), PFECHADO TIMESTAMP) RETURNS (IDPAGTO_OUT INTEGER, QUANT_CUPONS INTEGER) AS DECLARE VARIABLE IDOPER INTEGER; DECLARE VARIABLE IDPAGAMENTO INTEGER; DECLARE VARIABLE FMAPGTO SMALLINT; DECLARE VARIABLE TS_ABERT TIMESTAMP; BEGIN SELECT ID_OPER FROM TRI_PDV_OPER WHERE ID_CAIXA =:NUMCAIXA AND FECHADO = :pFECHADO INTO IDOPER; TS_ABERT = (SELECT CURRENTTIME FROM TRI_PDV_OPER WHERE ID_OPER =:IDOPER); FOR SELECT ID_FMAPGTO FROM TRI_PDV_REL_METODO_PAGTO INTO :FMAPGTO DO BEGIN SELECT COUNT(TB_CUPOM_FMAPAGTO.ID_FMAPAGTO) FROM TB_CUPOM INNER JOIN TB_CUPOM_FMAPAGTO ON (TB_CUPOM_FMAPAGTO.ID_CUPOM = TB_CUPOM.ID_CUPOM) WHERE TB_CUPOM.STATUS = ''F'' AND TB_CUPOM_FMAPAGTO.ID_FMAPAGTO = :FMAPGTO AND CAST (DT_CUPOM ||'' ''||HR_CUPOM AS TIMESTAMP) &gt;= :TS_ABERT INTO QUANT_CUPONS; IDPAGTO_OUT = (SELECT TRI_PDV_REL_METODO_PAGTO.ID_PAGAMENTO FROM TRI_PDV_REL_METODO_PAGTO WHERE TRI_PDV_REL_METODO_PAGTO.ID_FMAPGTO = :FMAPGTO); SUSPEND; END END';

erro = 'sproc total cupons cancelados desc ';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_VAL_TOTAL_CUPONS_DESC (pNUMCAIXA INTEGER, pFECHADO TIMESTAMP, pSTATUS CHAR(1), pCONSIDERA_DESC CHAR(1), pREIMPRESSAO CHAR(1)) RETURNS (VALTOTAL_CUPONS TYPE OF COLUMN TRI_PDV_OPER.DIN) AS DECLARE VARIABLE IDOPER INTEGER; DECLARE VARIABLE DT_ABERT DATE; DECLARE VARIABLE HR_ABERT TIME; BEGIN IF (:pREIMPRESSAO = ''S'') THEN BEGIN SELECT ID_OPER FROM TRI_PDV_OPER WHERE ID_CAIXA = :pNUMCAIXA AND FECHADO = :pFECHADO INTO IDOPER; END ELSE BEGIN SELECT ID_OPER FROM TRI_PDV_OPER WHERE ID_CAIXA = :pNUMCAIXA AND ABERTO = ''S'' INTO IDOPER; END HR_ABERT = (SELECT CAST (CURRENTTIME AS TIME) FROM TRI_PDV_OPER WHERE ID_OPER = :IDOPER); DT_ABERT = (SELECT CAST (CURRENTTIME AS DATE) FROM TRI_PDV_OPER WHERE ID_OPER = :IDOPER); IF (:pCONSIDERA_DESC = ''S'') THEN BEGIN SELECT COALESCE((SUM (VLR_TOTAL) - SUM (VLR_DESC)), 0.0000) AS VALTOTALGERAL FROM TB_CUPOM WHERE STATUS = :pSTATUS AND DT_CUPOM &gt;= :DT_ABERT AND HR_CUPOM &gt;= :HR_ABERT INTO VALTOTAL_CUPONS; END ELSE BEGIN SELECT COALESCE(SUM (VLR_TOTAL), 0.0000) AS VALTOTALGERAL FROM TB_CUPOM WHERE STATUS = :pSTATUS AND DT_CUPOM &gt;= :DT_ABERT AND HR_CUPOM &gt;= :HR_ABERT INTO VALTOTAL_CUPONS; END SUSPEND; END;';

erro = 'sproc SP_TRI_INSELECT_PDV_OPER ';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_INSELECT_PDV_OPER(NUMCAIXA INTEGER, USERID INTEGER) RETURNS(RIGHTNOW TIMESTAMP) AS DECLARE VAR1 INTEGER; BEGIN SELECT COUNT(ID_OPER) FROM TRI_PDV_OPER WHERE ID_CAIXA =:NUMCAIXA AND ABERTO = ''S'' INTO VAR1; IF(VAR1 = 0) THEN BEGIN INSERT INTO TRI_PDV_OPER (ID_CAIXA, CURRENTTIME, ABERTO, HASH, FECHADO, ID_USER, TRI_PDV_DT_UPD, DIN, CHEQUE, CREDITO, DEBITO, LOJA, ALIMENTACAO, REFEICAO, PRESENTE, COMBUSTIVEL, OUTROS, EXTRA_1, EXTRA_2, EXTRA_3, EXTRA_4, EXTRA_5, EXTRA_6, EXTRA_7, EXTRA_8, EXTRA_9, EXTRA_10, SANGRIAS, SUPRIMENTOS, TROCAS) VALUES(:NUMCAIXA, CURRENT_TIMESTAMP, ''S'', ''zz'', null, :USERID, null, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); RIGHTNOW = CURRENT_TIMESTAMP; END ELSE BEGIN SELECT FIRST 1 CURRENTTIME FROM TRI_PDV_OPER WHERE ID_CAIXA =:NUMCAIXA AND ABERTO = ''S'' INTO RIGHTNOW; END END';

erro = 'sproc SP_TRI_CHECASTATUSTERMINAL';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CHECASTATUSTERMINAL (NUMCAIXA INTEGER) RETURNS (USUARIO VARCHAR(64)) AS DECLARE USERID INTEGER; BEGIN SELECT FIRST 1 ID_USER FROM TRI_PDV_TERMINAL_USUARIO WHERE NUM_CAIXA = :NUMCAIXA AND STATUS = ''A'' INTO :USERID; IF (:USERID IS NULL) THEN USUARIO = ''''; ELSE SELECT USERNAME FROM TRI_PDV_USERS WHERE ID_USER = :USERID INTO :USUARIO; END';

erro = 'sproc SP_TRI_FECHACAIXA';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_FECHACAIXA(CAIXA INTEGER, DIN TYPE OF COLUMN TRI_PDV_OPER.DIN, CHEQUE TYPE OF COLUMN TRI_PDV_OPER.DIN, CREDITO TYPE OF COLUMN TRI_PDV_OPER.DIN, DEBITO TYPE OF COLUMN TRI_PDV_OPER.DIN, LOJA TYPE OF COLUMN TRI_PDV_OPER.DIN, ALIMENTACAO TYPE OF COLUMN TRI_PDV_OPER.DIN, REFEICAO TYPE OF COLUMN TRI_PDV_OPER.DIN, PRESENTE TYPE OF COLUMN TRI_PDV_OPER.DIN, COMBUSTIVEL TYPE OF COLUMN TRI_PDV_OPER.DIN, OUTROS TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_1 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_3 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_5 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_7 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_9 TYPE OF COLUMN TRI_PDV_OPER.DIN, EXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.DIN, TROCAS TYPE OF COLUMN TRI_PDV_OPER.DIN, SUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.DIN, SANGRIAS TYPE OF COLUMN TRI_PDV_OPER.DIN, OPERADOR INTEGER, ABERTURA TIMESTAMP) AS BEGIN UPDATE TRI_PDV_OPER SET ABERTO = ''N'', FECHADO = CURRENT_TIMESTAMP WHERE ID_CAIXA =:CAIXA AND ABERTO = ''S'' AND CURRENTTIME = :ABERTURA; INSERT INTO TRI_PDV_FECHAMENTOS(DIN, CHEQUE, CREDITO, DEBITO, LOJA, ALIMENTACAO, REFEICAO, PRESENTE, COMBUSTIVEL, OUTROS, EXTRA_1, EXTRA_2, EXTRA_3, EXTRA_4, EXTRA_5, EXTRA_6, EXTRA_7, EXTRA_8, EXTRA_9, EXTRA_10, OPERADOR, ID_CAIXA, FECHADO, TROCAS, SUPRIMENTOS, SANGRIAS) VALUES(:DIN,:CHEQUE,:CREDITO,:DEBITO,:LOJA,:ALIMENTACAO,:REFEICAO,:PRESENTE,:COMBUSTIVEL,:OUTROS,:EXTRA_1,:EXTRA_2,:EXTRA_3,:EXTRA_4,:EXTRA_5,:EXTRA_6,:EXTRA_7,:EXTRA_8,:EXTRA_9,:EXTRA_10,:OPERADOR,:CAIXA, CURRENT_TIMESTAMP,:TROCAS,:SUPRIMENTOS,:SANGRIAS); UPDATE TRI_PDV_TERMINAL_USUARIO SET STATUS = ''F'', TS_FECHAMENTO = CURRENT_TIMESTAMP WHERE NUM_CAIXA =:CAIXA AND STATUS = ''A''; END';

erro = 'sproc SP_TRI_ABRENOVOCAIXA';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ABRENOVOCAIXA (NUMCAIXA INTEGER, USERID INTEGER) AS BEGIN INSERT INTO TRI_PDV_TERMINAL_USUARIO (ID_OPER, NUM_CAIXA, STATUS, TS_ABERTURA, TS_FECHAMENTO, ID_USER) VALUES ((SELECT NEXT VALUE FOR GEN_TRI_PDV_TERM_USUARIO FROM RDB$DATABASE), :NUMCAIXA, ''A'', CURRENT_TIMESTAMP, NULL, :userid); END';

erro = 'sproc SP_TRI_OBTEMDADOSDOITEM';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_OBTEMDADOSDOITEM (codigoitem INTEGER) RETURNS (DESCRICAO TYPE OF COLUMN TB_ESTOQUE.DESCRICAO, CFOP TYPE OF COLUMN TB_ESTOQUE.CFOP, UNI_MEDIDA TYPE OF COLUMN TB_ESTOQUE.UNI_MEDIDA, COD_NCM TYPE OF COLUMN TB_EST_PRODUTO.COD_NCM, COD_BARRA TYPE OF COLUMN TB_EST_PRODUTO.COD_BARRA, rCSOSN_CFE TYPE OF COLUMN TB_EST_PRODUTO.CSOSN_CFE, rCST_CFE TYPE OF COLUMN TB_EST_PRODUTO.CST_CFE, rCST_PIS TYPE OF COLUMN TB_ESTOQUE.CST_PIS, rCST_COFINS TYPE OF COLUMN TB_ESTOQUE.CST_COFINS, rPIS TYPE OF COLUMN TB_ESTOQUE.PIS, rCOFINS TYPE OF COLUMN TB_ESTOQUE.COFINS, rUF_SP TYPE OF COLUMN TB_TAXA_UF.UF_SP, rBASE_ICMS TYPE OF COLUMN TB_TAXA_UF.BASE_ICMS, rALIQ_ISS TYPE OF COLUMN TB_EST_SERVICO.ISS_ALIQ, rID_TIPOITEM TYPE OF COLUMN TB_ESTOQUE.ID_TIPOITEM, rSTR_CEST TYPE OF COLUMN TB_EST_PRODUTO.COD_CEST) AS BEGIN FOR SELECT A.DESCRICAO, A.CFOP, A.UNI_MEDIDA, C.COD_NCM, C.COD_BARRA, C.CSOSN_CFE, C.CST_CFE, A.CST_PIS, A.CST_COFINS, A.PIS, A.COFINS, COALESCE(D.UF_SP, 0), COALESCE(D.BASE_ICMS, 0), COALESCE(E.ISS_ALIQ, 0), A.ID_TIPOITEM, C.COD_CEST FROM TB_ESTOQUE A INNER JOIN TB_EST_IDENTIFICADOR B ON (A.ID_ESTOQUE = B.ID_ESTOQUE) LEFT JOIN TB_TAXA_UF D ON A.ID_CTI_CFE = D.ID_CTI LEFT JOIN TB_EST_PRODUTO C ON B.ID_IDENTIFICADOR = C.ID_IDENTIFICADOR LEFT JOIN TB_EST_SERVICO E ON E.ID_IDENTIFICADOR = B.ID_IDENTIFICADOR WHERE B.ID_IDENTIFICADOR = :codigoitem INTO :DESCRICAO, :CFOP, :UNI_MEDIDA, :COD_NCM, :COD_BARRA, :rCSOSN_CFE, :rCST_CFE, :rCST_PIS, :rCST_COFINS, :rPIS, :rCOFINS, :rUF_SP, :rBASE_ICMS, :rALIQ_ISS, :rID_TIPOITEM, :rSTR_CEST DO SUSPEND; END';

erro = 'sproc lancacupom';
EXECUTE STATEMENT 'CREATE OR ALTER PROCEDURE SP_TRI_LANCACUPOM(ULTIMOCUPOM INTEGER, NUMCAIXA SMALLINT, VLRTOTAL TYPE OF COLUMN TRI_PDV_OPER.DIN, VLRTROCO TYPE OF COLUMN TRI_PDV_OPER.DIN, VLRDESC TYPE OF COLUMN TRI_PDV_OPER.DIN, TOTIBPT TYPE OF COLUMN TRI_PDV_OPER.DIN, TOTTRIBEST TYPE OF COLUMN TRI_PDV_OPER.DIN, IDCLIENTE INTEGER) RETURNS (COO INTEGER) AS BEGIN SELECT MAX(COO) FROM TB_CUPOM WHERE NUM_CAIXA = :numcaixa INTO :COO; IF (:COO IS NULL) THEN COO = 0; COO = COO + 1; UPDATE TB_CUPOM SET DT_CUPOM = CURRENT_DATE, COO = :COO, HR_CUPOM = CURRENT_TIMESTAMP, NUM_CAIXA =:numcaixa, STATUS = ''A'', VLR_TROCO =:vlrtroco, VLR_TOTAL =:vlrtotal, VLR_DESC =:vlrdesc, TOTAL_TRIBUTOS_IBPT =:totibpt, TOTAL_TRIB_EST =:tottribest, ID_CLIENTE = :idcliente WHERE ID_CUPOM =:ultimocupom AND STATUS = ''N''; SUSPEND; END;';

erro = 'sproc cancelaultimo';
EXECUTE STATEMENT 'CREATE OR ALTER PROCEDURE SP_TRI_CANCELAULTIMOCUPOM (NUM_CUPOM INTEGER) RETURNS (COO INTEGER) AS DECLARE VARIABLE chve VARCHAR(32); BEGIN SELECT CHAVE FROM TB_CUPOM WHERE ID_CUPOM = :NUM_CUPOM INTO :chve; UPDATE TB_CUPOM SET STATUS = ''C'' WHERE ID_CUPOM = :NUM_CUPOM; UPDATE TB_CUPOM SET CHAVE = :chve ||''_CANC'' WHERE ID_CUPOM = :NUM_CUPOM; UPDATE TB_CUPOM_ITEM SET ITEM_CANCEL = ''S'' WHERE ID_CUPOM = :NUM_CUPOM; UPDATE TB_CUPOM SET IND_CANCEL = ''S'' WHERE ID_CUPOM = :NUM_CUPOM; SELECT COO FROM TB_CUPOM WHERE ID_CUPOM = :NUM_CUPOM INTO COO; END';

erro = 'sproc sp_tri_atualizaconfig';
EXECUTE STATEMENT 'CREATE OR ALTER PROCEDURE SP_TRI_ATUALIZACONFIG (pMAC_ADRESS TYPE OF COLUMN TRI_PDV_CONFIG.ID_MAC, pNO_CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA, pEXIGE_SANG TYPE OF COLUMN TRI_PDV_CONFIG.EXIGE_SANGRIA, pVALOR_MAX_CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.VALOR_MAX_CAIXA, pBLOQUEIA_NO_LIMITE TYPE OF COLUMN TRI_PDV_CONFIG.BLOQUEIA_NO_LIMITE, pVALOR_DE_FOLGA TYPE OF COLUMN TRI_PDV_CONFIG.VALOR_DE_FOLGA, pPERMITE_FOLGA_SANGRIA TYPE OF COLUMN TRI_PDV_CONFIG.PERMITE_FOLGA_SANGRIA, pINTERROMPE_NAO_ENCONTRADO TYPE OF COLUMN TRI_PDV_CONFIG.INTERROMPE_NAO_ENCONTRADO, pMENSAGEM_CORTESIA TYPE OF COLUMN TRI_PDV_CONFIG.MENSAGEM_CORTESIA, pICMS_CONT TYPE OF COLUMN TRI_PDV_CONFIG.ICMS_CONT, pCSOSN_CONT TYPE OF COLUMN TRI_PDV_CONFIG.CSOSN_CONT, pPEDE_CPF TYPE OF COLUMN TRI_PDV_CONFIG.PEDE_CPF, pPERMITE_ESTOQUE_NEGATIVO TYPE OF COLUMN TRI_PDV_CONFIG.PERMITE_ESTOQUE_NEGATIVO, pMODELO_CUPOM TYPE OF COLUMN TRI_PDV_CONFIG.MODELO_CUPOM, pMENSAGEM_RODAPE TYPE OF COLUMN TRI_PDV_CONFIG.MENSAGEM_RODAPE) AS BEGIN UPDATE OR INSERT INTO TRI_PDV_CONFIG (ID_MAC, NO_CAIXA, EXIGE_SANGRIA, VALOR_MAX_CAIXA, BLOQUEIA_NO_LIMITE, VALOR_DE_FOLGA, PERMITE_FOLGA_SANGRIA, INTERROMPE_NAO_ENCONTRADO, MENSAGEM_CORTESIA, ICMS_CONT, CSOSN_CONT, PEDE_CPF, PERMITE_ESTOQUE_NEGATIVO, MODELO_CUPOM, MENSAGEM_RODAPE) VALUES (:pMAC_ADRESS, :pNO_CAIXA, :pEXIGE_SANG, :pVALOR_MAX_CAIXA, :pBLOQUEIA_NO_LIMITE, :pVALOR_DE_FOLGA, :pPERMITE_FOLGA_SANGRIA, :pINTERROMPE_NAO_ENCONTRADO, :pMENSAGEM_CORTESIA, :pICMS_CONT, :pCSOSN_CONT, :pPEDE_CPF, :pPERMITE_ESTOQUE_NEGATIVO, :pMODELO_CUPOM, :pMENSAGEM_RODAPE) MATCHING (ID_MAC); END';

erro = 'sproc sp_tri_caixaexistente';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CAIXAEXISTENTE RETURNS (ID_MAC TYPE OF COLUMN TRI_PDV_CONFIG.ID_MAC, NO_CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA, EXIGE_SANGRIA TYPE OF COLUMN TRI_PDV_CONFIG.EXIGE_SANGRIA, VALOR_MAX_CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.VALOR_MAX_CAIXA, VALOR_DE_FOLGA TYPE OF COLUMN TRI_PDV_CONFIG.VALOR_DE_FOLGA, PERMITE_FOLGA_SANGRIA TYPE OF COLUMN TRI_PDV_CONFIG.PERMITE_FOLGA_SANGRIA, INTERROMPE_NAO_ENCONTRADO TYPE OF COLUMN TRI_PDV_CONFIG.INTERROMPE_NAO_ENCONTRADO, MENSAGEM_CORTESIA TYPE OF COLUMN TRI_PDV_CONFIG.MENSAGEM_CORTESIA, ICMS_CONT TYPE OF COLUMN TRI_PDV_CONFIG.ICMS_CONT, CSOSN_CONT TYPE OF COLUMN TRI_PDV_CONFIG.CSOSN_CONT, BLOQUEIA_NO_LIMITE TYPE OF COLUMN TRI_PDV_CONFIG.BLOQUEIA_NO_LIMITE, PEDE_CPF TYPE OF COLUMN TRI_PDV_CONFIG.PEDE_CPF, PERMITE_ESTOQUE_NEGATIVO TYPE OF COLUMN TRI_PDV_CONFIG.PERMITE_ESTOQUE_NEGATIVO, MODELO_CUPOM TYPE OF COLUMN TRI_PDV_CONFIG.MODELO_CUPOM, MENSAGEM_RODAPE TYPE OF COLUMN TRI_PDV_CONFIG.MENSAGEM_RODAPE) AS BEGIN FOR SELECT ID_MAC, NO_CAIXA, EXIGE_SANGRIA, VALOR_MAX_CAIXA, VALOR_DE_FOLGA, PERMITE_FOLGA_SANGRIA, INTERROMPE_NAO_ENCONTRADO, MENSAGEM_CORTESIA, ICMS_CONT, CSOSN_CONT, BLOQUEIA_NO_LIMITE, PEDE_CPF, PERMITE_ESTOQUE_NEGATIVO, MODELO_CUPOM, MENSAGEM_RODAPE FROM TRI_PDV_CONFIG WHERE NO_CAIXA = (SELECT FIRST 1 NO_CAIXA FROM TRI_PDV_CONFIG) INTO :ID_MAC, :NO_CAIXA, :EXIGE_SANGRIA, :VALOR_MAX_CAIXA, :VALOR_DE_FOLGA, :PERMITE_FOLGA_SANGRIA, :INTERROMPE_NAO_ENCONTRADO, :MENSAGEM_CORTESIA, :ICMS_CONT, :CSOSN_CONT, :BLOQUEIA_NO_LIMITE, :PEDE_CPF, :PERMITE_ESTOQUE_NEGATIVO, :MODELO_CUPOM, :MENSAGEM_RODAPE DO SUSPEND; END';

erro = 'sproc sp_tri_checapor_nocaixa';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CHECAPOR_NOCAIXA (pNO_CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA, pID_MAC TYPE OF COLUMN TRI_PDV_CONFIG.ID_MAC) RETURNS (QTDE_CAIXAS INTEGER) AS BEGIN FOR SELECT COUNT(*) AS Expr1 FROM TRI_PDV_CONFIG WHERE (NO_CAIXA = :pNO_CAIXA) AND (ID_MAC &lt;&gt; :pID_MAC) INTO :QTDE_CAIXAS DO SUSPEND; END';

erro = 'sproc sp_tri_config_getby_caixa';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CONFIG_GETBY_CAIXA (pNO_CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA) RETURNS (ID_MAC TYPE OF COLUMN TRI_PDV_CONFIG.ID_MAC, NO_CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA, EXIGE_SANGRIA TYPE OF COLUMN TRI_PDV_CONFIG.EXIGE_SANGRIA, VALOR_MAX_CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.VALOR_MAX_CAIXA, BLOQUEIA_NO_LIMITE TYPE OF COLUMN TRI_PDV_CONFIG.BLOQUEIA_NO_LIMITE, VALOR_DE_FOLGA TYPE OF COLUMN TRI_PDV_CONFIG.VALOR_DE_FOLGA, PERMITE_FOLGA_SANGRIA TYPE OF COLUMN TRI_PDV_CONFIG.PERMITE_FOLGA_SANGRIA, INTERROMPE_NAO_ENCONTRADO TYPE OF COLUMN TRI_PDV_CONFIG.INTERROMPE_NAO_ENCONTRADO, MENSAGEM_CORTESIA TYPE OF COLUMN TRI_PDV_CONFIG.MENSAGEM_CORTESIA, ICMS_CONT TYPE OF COLUMN TRI_PDV_CONFIG.ICMS_CONT, CSOSN_CONT TYPE OF COLUMN TRI_PDV_CONFIG.CSOSN_CONT, PEDE_CPF TYPE OF COLUMN TRI_PDV_CONFIG.PEDE_CPF, PERMITE_ESTOQUE_NEGATIVO TYPE OF COLUMN TRI_PDV_CONFIG.PERMITE_ESTOQUE_NEGATIVO, MODELO_CUPOM TYPE OF COLUMN TRI_PDV_CONFIG.MODELO_CUPOM, MENSAGEM_RODAPE TYPE OF COLUMN TRI_PDV_CONFIG.MENSAGEM_RODAPE, TRI_PDV_DT_UPD TYPE OF COLUMN TRI_PDV_CONFIG.TRI_PDV_DT_UPD) AS BEGIN FOR SELECT ID_MAC, NO_CAIXA, EXIGE_SANGRIA, VALOR_MAX_CAIXA, BLOQUEIA_NO_LIMITE, VALOR_DE_FOLGA, PERMITE_FOLGA_SANGRIA, INTERROMPE_NAO_ENCONTRADO, MENSAGEM_CORTESIA, ICMS_CONT, CSOSN_CONT, PEDE_CPF, PERMITE_ESTOQUE_NEGATIVO, MODELO_CUPOM, MENSAGEM_RODAPE, TRI_PDV_DT_UPD FROM TRI_PDV_CONFIG where NO_CAIXA = :pNO_CAIXA INTO :ID_MAC, :NO_CAIXA, :EXIGE_SANGRIA, :VALOR_MAX_CAIXA, :BLOQUEIA_NO_LIMITE, :VALOR_DE_FOLGA, :PERMITE_FOLGA_SANGRIA, :INTERROMPE_NAO_ENCONTRADO, :MENSAGEM_CORTESIA, :ICMS_CONT, :CSOSN_CONT, :PEDE_CPF, :PERMITE_ESTOQUE_NEGATIVO, :MODELO_CUPOM, :MENSAGEM_RODAPE, :TRI_PDV_DT_UPD DO SUSPEND; END';

erro = 'sproc sp_tri_config_getby_mac';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CONFIG_GETBY_MAC (pID_MAC TYPE OF COLUMN TRI_PDV_CONFIG.ID_MAC) RETURNS (ID_MAC TYPE OF COLUMN TRI_PDV_CONFIG.ID_MAC, NO_CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.NO_CAIXA, EXIGE_SANGRIA TYPE OF COLUMN TRI_PDV_CONFIG.EXIGE_SANGRIA, VALOR_MAX_CAIXA TYPE OF COLUMN TRI_PDV_CONFIG.VALOR_MAX_CAIXA, BLOQUEIA_NO_LIMITE TYPE OF COLUMN TRI_PDV_CONFIG.BLOQUEIA_NO_LIMITE, VALOR_DE_FOLGA TYPE OF COLUMN TRI_PDV_CONFIG.VALOR_DE_FOLGA, PERMITE_FOLGA_SANGRIA TYPE OF COLUMN TRI_PDV_CONFIG.PERMITE_FOLGA_SANGRIA, INTERROMPE_NAO_ENCONTRADO TYPE OF COLUMN TRI_PDV_CONFIG.INTERROMPE_NAO_ENCONTRADO, MENSAGEM_CORTESIA TYPE OF COLUMN TRI_PDV_CONFIG.MENSAGEM_CORTESIA, ICMS_CONT TYPE OF COLUMN TRI_PDV_CONFIG.ICMS_CONT, CSOSN_CONT TYPE OF COLUMN TRI_PDV_CONFIG.CSOSN_CONT, PEDE_CPF TYPE OF COLUMN TRI_PDV_CONFIG.PEDE_CPF, PERMITE_ESTOQUE_NEGATIVO TYPE OF COLUMN TRI_PDV_CONFIG.PERMITE_ESTOQUE_NEGATIVO, MODELO_CUPOM TYPE OF COLUMN TRI_PDV_CONFIG.MODELO_CUPOM, MENSAGEM_RODAPE TYPE OF COLUMN TRI_PDV_CONFIG.MENSAGEM_RODAPE, TRI_PDV_DT_UPD TYPE OF COLUMN TRI_PDV_CONFIG.TRI_PDV_DT_UPD) AS BEGIN FOR SELECT ID_MAC, NO_CAIXA, EXIGE_SANGRIA, VALOR_MAX_CAIXA, BLOQUEIA_NO_LIMITE, VALOR_DE_FOLGA, PERMITE_FOLGA_SANGRIA, INTERROMPE_NAO_ENCONTRADO, MENSAGEM_CORTESIA, ICMS_CONT, CSOSN_CONT, PEDE_CPF, PERMITE_ESTOQUE_NEGATIVO, MODELO_CUPOM, MENSAGEM_RODAPE, TRI_PDV_DT_UPD FROM TRI_PDV_CONFIG where ID_MAC = :pID_MAC INTO :ID_MAC, :NO_CAIXA, :EXIGE_SANGRIA, :VALOR_MAX_CAIXA, :BLOQUEIA_NO_LIMITE, :VALOR_DE_FOLGA, :PERMITE_FOLGA_SANGRIA, :INTERROMPE_NAO_ENCONTRADO, :MENSAGEM_CORTESIA, :ICMS_CONT, :CSOSN_CONT, :PEDE_CPF, :PERMITE_ESTOQUE_NEGATIVO, :MODELO_CUPOM, :MENSAGEM_RODAPE, :TRI_PDV_DT_UPD DO SUSPEND; END';

erro = 'sproc SP_TRI_OBTEMDADOSDOSERV';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_OBTEMDADOSDOSERV (CODIGOITEM INTEGER) RETURNS (DESCRICAO VARCHAR(50), CFOP VARCHAR(4), UNI_MEDIDA VARCHAR(3), COD_NCM VARCHAR(8)) AS BEGIN FOR SELECT A.DESCRICAO, A.CFOP, A.UNI_MEDIDA, ''00000000'' FROM TB_ESTOQUE A INNER JOIN TB_EST_IDENTIFICADOR B ON (A.ID_ESTOQUE = B.ID_ESTOQUE) WHERE B.ID_IDENTIFICADOR = :codigoitem INTO :DESCRICAO, :CFOP, :UNI_MEDIDA, :COD_NCM DO SUSPEND; END';

erro = 'sproc SP_TRI_MT_ITM_USD_IDNTF_QTD_GET';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MT_ITM_USD_IDNTF_QTD_GET (pIdCompPro INTEGER) RETURNS (ID_IDENTIFICADOR integer, QTD_ITEM TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.QTD_ITEM) AS BEGIN FOR SELECT teciu.ID_IDENTIFICADOR, teciu.QTD_ITEM FROM TB_EST_COMP_PRODUCAO tecp JOIN TB_EST_COMP_ITEM_USADO teciu ON tecp.ID_COMPPRO = teciu.ID_COMPPROD WHERE tecp.ID_COMPPRO = :pIdCompPro INTO :ID_IDENTIFICADOR, :QTD_ITEM DO SUSPEND; END;';

erro = 'sproc SP_TRI_MAIT_PEDIDO_GETBY_ID';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MAIT_PEDIDO_GETBY_ID (pID_MAIT_PEDIDO INTEGER) RETURNS (ID_MAIT_PEDIDO TYPE OF COLUMN TRI_MAIT_PEDIDO.ID_MAIT_PEDIDO, TS_EMISSAO TYPE OF COLUMN TRI_MAIT_PEDIDO.TS_EMISSAO, ID_USER TYPE OF COLUMN TRI_MAIT_PEDIDO.ID_USER, NR_PEDIDO TYPE OF COLUMN TRI_MAIT_PEDIDO.NR_PEDIDO, ABERTO TYPE OF COLUMN TRI_MAIT_PEDIDO.ABERTO, OBSERVACAO TYPE OF COLUMN TRI_MAIT_PEDIDO.OBSERVACAO, ID_CAIXA TYPE OF COLUMN TRI_MAIT_PEDIDO.ID_CAIXA) AS BEGIN for SELECT ID_MAIT_PEDIDO, TS_EMISSAO, ID_USER, NR_PEDIDO, ABERTO, OBSERVACAO, ID_CAIXA FROM TRI_MAIT_PEDIDO WHERE ID_MAIT_PEDIDO = :pID_MAIT_PEDIDO INTO :ID_MAIT_PEDIDO, :TS_EMISSAO, :ID_USER, :NR_PEDIDO, :ABERTO, :OBSERVACAO, :ID_CAIXA DO BEGIN SUSPEND; END END;';

erro = 'sproc SP_TRI_MAITPEDIDO_SYNCINSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MAITPEDIDO_SYNCINSERT (pTS_EMISSAO TYPE OF COLUMN TRI_MAIT_PEDIDO.TS_EMISSAO, pID_USER TYPE OF COLUMN TRI_MAIT_PEDIDO.ID_USER, pNR_PEDIDO TYPE OF COLUMN TRI_MAIT_PEDIDO.NR_PEDIDO, pABERTO TYPE OF COLUMN TRI_MAIT_PEDIDO.ABERTO, pOBSERVACAO TYPE OF COLUMN TRI_MAIT_PEDIDO.OBSERVACAO, pID_CAIXA TYPE OF COLUMN TRI_MAIT_PEDIDO.ID_CAIXA) RETURNS (newIdMaitPedido INTEGER) AS DECLARE VARIABLE ULTIMOPEDIDO INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_MAIT_PEDIDO_ID FROM RDB$DATABASE INTO :ULTIMOPEDIDO; IF(:ULTIMOPEDIDO IS NULL) THEN ULTIMOPEDIDO = 0; BEGIN INSERT INTO TRI_MAIT_PEDIDO (ID_MAIT_PEDIDO, TS_EMISSAO, ID_USER, NR_PEDIDO, ABERTO, OBSERVACAO, ID_CAIXA) VALUES (:ULTIMOPEDIDO, :pTS_EMISSAO, :pID_USER, :pNR_PEDIDO, :pABERTO, :pOBSERVACAO, :pID_CAIXA); newIdMaitPedido = ULTIMOPEDIDO; END END;';

erro = 'sproc SP_TRI_MAIT_PEDCUPOM_SYNCINSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MAIT_PEDCUPOM_SYNCINSERT (pID_MAIT_PEDIDO TYPE OF COLUMN TRI_MAIT_PEDIDO_CUPOM.ID_MAIT_PEDIDO, pID_CUPOM TYPE OF COLUMN TRI_MAIT_PEDIDO_CUPOM.ID_CUPOM) AS BEGIN INSERT INTO TRI_MAIT_PEDIDO_CUPOM (ID_MAIT_PEDIDO, ID_CUPOM) VALUES (:pID_MAIT_PEDIDO, :pID_CUPOM); END;';

erro = 'sproc SP_TRI_MAITPEDITEM_SYNCINSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MAITPEDITEM_SYNCINSERT (pID_MAIT_PEDIDO TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.ID_MAIT_PEDIDO, pID_IDENTIFICADOR TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.ID_IDENTIFICADOR, pQTD_ITEM TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.QTD_ITEM) RETURNS (newIdMaitPedidoItem INTEGER) AS DECLARE VARIABLE ULTIMOPEDIDOITEM INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_TRI_MAIT_PED_ITEM_ID FROM RDB$DATABASE INTO :ULTIMOPEDIDOITEM; IF(:ULTIMOPEDIDOITEM IS NULL) THEN ULTIMOPEDIDOITEM = 0; BEGIN INSERT INTO TRI_MAIT_PEDIDO_ITEM (ID_MAIT_PEDIDO_ITEM, ID_MAIT_PEDIDO, ID_IDENTIFICADOR, QTD_ITEM) VALUES (:ULTIMOPEDIDOITEM, :pID_MAIT_PEDIDO, :pID_IDENTIFICADOR, :pQTD_ITEM); newIdMaitPedidoItem = ULTIMOPEDIDOITEM; END END;';

erro = 'sproc SP_TRI_MAIT_PEDITEM_GETBY_ID';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MAIT_PEDITEM_GETBY_ID (pID_MAIT_PEDIDO_ITEM INTEGER) RETURNS (ID_MAIT_PEDIDO_ITEM TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.ID_MAIT_PEDIDO_ITEM, ID_MAIT_PEDIDO TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.ID_MAIT_PEDIDO, ID_IDENTIFICADOR TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.ID_IDENTIFICADOR, QTD_ITEM TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.QTD_ITEM) AS BEGIN for SELECT ID_MAIT_PEDIDO_ITEM, ID_MAIT_PEDIDO, ID_IDENTIFICADOR, QTD_ITEM FROM TRI_MAIT_PEDIDO_ITEM WHERE ID_MAIT_PEDIDO_ITEM = :pID_MAIT_PEDIDO_ITEM INTO :ID_MAIT_PEDIDO_ITEM, :ID_MAIT_PEDIDO, :ID_IDENTIFICADOR, :QTD_ITEM DO BEGIN SUSPEND; END END;';

erro = 'sproc SP_TRI_MTPDITM_CPITM_SYNCINSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MTPDITM_CPITM_SYNCINSERT (pID_MAIT_PEDIDO_ITEM TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.ID_MAIT_PEDIDO, pID_ITEMCUP TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.ID_IDENTIFICADOR) AS BEGIN INSERT INTO TRI_MAIT_PED_ITEM_CUPOM_ITEM (ID_MAIT_PEDIDO_ITEM, ID_ITEMCUP) VALUES (:pID_MAIT_PEDIDO_ITEM, :pID_ITEMCUP); END;';

erro = 'sproc COMPOSICAO get by dt upd';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MAIT_ESTCOMP_GETBY_DTUPD (pUltimaSync TIMESTAMP) RETURNS (ID_COMPOSICAO TYPE OF COLUMN TB_EST_COMPOSICAO.ID_COMPOSICAO, DESCRICAO TYPE OF COLUMN TB_EST_COMPOSICAO.DESCRICAO, ID_IDENTIFICADOR TYPE OF COLUMN TB_EST_COMPOSICAO.ID_IDENTIFICADOR, TRI_PDV_DT_UPD TYPE OF COLUMN TB_EST_COMPOSICAO.TRI_PDV_DT_UPD) AS BEGIN FOR SELECT ID_COMPOSICAO, DESCRICAO, ID_IDENTIFICADOR, TRI_PDV_DT_UPD FROM TB_EST_COMPOSICAO WHERE TRI_PDV_DT_UPD &gt; :pUltimaSync INTO :ID_COMPOSICAO, :DESCRICAO, :ID_IDENTIFICADOR, :TRI_PDV_DT_UPD DO BEGIN SUSPEND; END END;';

erro = 'sproc COMPOSICAO sync upsert';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MAIT_ESTCOMP_UPSERT (pID_COMPOSICAO TYPE OF COLUMN TB_EST_COMPOSICAO.ID_COMPOSICAO, pDESCRICAO TYPE OF COLUMN TB_EST_COMPOSICAO.DESCRICAO, pID_IDENTIFICADOR TYPE OF COLUMN TB_EST_COMPOSICAO.ID_IDENTIFICADOR, pTRI_PDV_DT_UPD TYPE OF COLUMN TB_EST_COMPOSICAO.TRI_PDV_DT_UPD) AS BEGIN UPDATE OR INSERT INTO TB_EST_COMPOSICAO (ID_COMPOSICAO, DESCRICAO, ID_IDENTIFICADOR, TRI_PDV_DT_UPD) VALUES (:pID_COMPOSICAO, :pDESCRICAO, :pID_IDENTIFICADOR, :pTRI_PDV_DT_UPD) MATCHING (ID_COMPOSICAO); END;';

erro = 'deu certo';

SUSPEND;
WHEN ANY DO
BEGIN
END
END;</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="D_PROCEDURES6" Modifier="Public" Name="D_PROCEDURES6" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy18" UserSourceName="D_PROCEDURES6">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>CREATE OR ALTER PROCEDURE SP_TRI_PROCEDURES6 
RETURNS
(
erro VARCHAR(64)
)
AS
BEGIN

erro = 'sproc SP_TRI_MT_COMPITEM_GETBY_IDCOMP';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MT_COMPITEM_GETBY_IDCOMP ( pID_COMPOSICAO INTEGER ) RETURNS ( ID_ITEMCOMP TYPE OF COLUMN TB_EST_COMP_ITEM.ID_ITEMCOMP , QTD_ITEM TYPE OF COLUMN TB_EST_COMP_ITEM.QTD_ITEM , ID_COMPOSICAO TYPE OF COLUMN TB_EST_COMP_ITEM.ID_COMPOSICAO , ID_IDENTIFICADOR TYPE OF COLUMN TB_EST_COMP_ITEM.ID_IDENTIFICADOR ) AS BEGIN for SELECT ID_ITEMCOMP, QTD_ITEM, ID_COMPOSICAO , ID_IDENTIFICADOR FROM TB_EST_COMP_ITEM WHERE ID_COMPOSICAO = :pID_COMPOSICAO INTO :ID_ITEMCOMP , :QTD_ITEM , :ID_COMPOSICAO , :ID_IDENTIFICADOR DO BEGIN SUSPEND ; END END;';

erro = 'sproc SP_TRI_MAIT_ESTCOMP_SYNCINSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MAIT_ESTCOMP_SYNCINSERT ( pID_COMPOSICAO TYPE OF COLUMN TB_EST_COMPOSICAO.ID_COMPOSICAO , pDESCRICAO TYPE OF COLUMN TB_EST_COMPOSICAO.DESCRICAO , pID_IDENTIFICADOR TYPE OF COLUMN TB_EST_COMPOSICAO.ID_IDENTIFICADOR , pTRI_PDV_DT_UPD TYPE OF COLUMN TB_EST_COMPOSICAO.TRI_PDV_DT_UPD ) RETURNS (rRowsAffected INTEGER) AS BEGIN BEGIN UPDATE OR INSERT INTO TB_EST_COMPOSICAO (ID_COMPOSICAO , DESCRICAO , ID_IDENTIFICADOR , TRI_PDV_DT_UPD ) VALUES (:pID_COMPOSICAO , :pDESCRICAO , :pID_IDENTIFICADOR , :pTRI_PDV_DT_UPD ) MATCHING (ID_COMPOSICAO ) ; rRowsAffected = ROW_COUNT; END END;';

erro = 'sproc SP_TRI_MAITRE_LANCAPEDIDO';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MAITRE_LANCAPEDIDO ( PEDIDO INTEGER , USUARIO INTEGER , OBSERVACAO BLOB SUB_TYPE 1 , ID_CAIXA INTEGER , pID_CUPOM INTEGER ) RETURNS ( IDPEDIDO INTEGER ) AS BEGIN SELECT NEXT VALUE FOR GEN_MAIT_PEDIDO_ID FROM RDB$DATABASE INTO :idpedido ; INSERT INTO TRI_MAIT_PEDIDO VALUES (:idpedido , CURRENT_TIMESTAMP , :usuario , :pedido , ''N'' , :observacao , :ID_CAIXA ) ; INSERT INTO TRI_MAIT_PEDIDO_CUPOM (ID_MAIT_PEDIDO , ID_CUPOM ) VALUES (:idpedido , :pID_CUPOM ) ; END';

erro = 'sproc SP_TRI_MAITRE_PEDIDO_NR_GET';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MAITRE_PEDIDO_NR_GET ( PEDIDOMAX INTEGER ) RETURNS ( NRPEDIDOATUAL INTEGER ) AS BEGIN NRPEDIDOATUAL = ( SELECT NEXT VALUE FOR GEN_MAITRE_PEDIDO FROM RDB$DATABASE ) ; IF (NRPEDIDOATUAL &gt;= PEDIDOMAX) THEN BEGIN EXECUTE STATEMENT ''ALTER SEQUENCE GEN_MAITRE_PEDIDO RESTART WITH 0;''; END  SUSPEND;  END';

erro = 'sproc SP_TRI_MT_ESTCMP_ITEM_SYNCINSRT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MT_ESTCMP_ITEM_SYNCINSRT ( pID_ITEMCOMP TYPE OF COLUMN TB_EST_COMP_ITEM.ID_ITEMCOMP , pQTD_ITEM TYPE OF COLUMN TB_EST_COMP_ITEM.QTD_ITEM , pID_COMPOSICAO TYPE OF COLUMN TB_EST_COMP_ITEM.ID_COMPOSICAO , pID_IDENTIFICADOR TYPE OF COLUMN TB_EST_COMP_ITEM.ID_IDENTIFICADOR ) RETURNS (rRowsAffected INTEGER) AS BEGIN BEGIN UPDATE OR INSERT INTO TB_EST_COMP_ITEM (ID_ITEMCOMP , QTD_ITEM , ID_COMPOSICAO , ID_IDENTIFICADOR ) VALUES (:pID_ITEMCOMP , :pQTD_ITEM , :pID_COMPOSICAO , :pID_IDENTIFICADOR ) MATCHING (ID_ITEMCOMP ) ; rRowsAffected = ROW_COUNT; END END;';

erro = 'sproc SP_TRI_MAITRE_PROCESSA_COMP';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MAITRE_PROCESSA_COMP ( IDPEDIDOITEM INTEGER , IDIDENTIFICADOR INTEGER , QUANT TYPE OF COLUMN TB_EST_COMP_PRODUCAO.QT_COMPPRO ) RETURNS ( ERRO VARCHAR(50) ) AS DECLARE idcomppro INTEGER; DECLARE idcomposi INTEGER; DECLARE idIdentifComponente INTEGER; DECLARE quantItemComponente INTEGER; DECLARE iditemusado INTEGER; DECLARE vPRC_VENDA_Componente TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.PRC_VENDA; BEGIN ERRO = ''get id_composicao from id_identif''; SELECT FIRST 1 ID_COMPOSICAO FROM TB_EST_COMPOSICAO WHERE ID_IDENTIFICADOR = :ididentificador ORDER BY ID_COMPOSICAO DESC INTO :idcomposi ; ERRO = ''get value from GEN_TB_EST_COMP_PRODUCAO_ID''; SELECT NEXT VALUE FOR GEN_TB_EST_COMP_PRODUCAO_ID FROM RDB$DATABASE INTO :idcomppro ; ERRO = '' insert TB_EST_COMP_PRODUCAO'' ; INSERT INTO TB_EST_COMP_PRODUCAO (ID_COMPPRO , ID_COMPOSICAO , QT_COMPPRO , DT_COMPPRO , HR_COMPPRO , OBSERVACAO , GERADO , MONTADO , ID_IDENTIFICADOR ) VALUES (:idcomppro , :idcomposi , :quant , CURRENT_DATE , CURRENT_TIME , '''' , ''S'' , ''M'' , :ididentificador ) ; ERRO = '' select TB_EST_COMP_ITEM'' ; FOR SELECT ID_IDENTIFICADOR, QTD_ITEM FROM TB_EST_COMP_ITEM WHERE ID_COMPOSICAO = :idcomposi INTO :idIdentifComponente, :quantItemComponente DO BEGIN SELECT te.PRC_VENDA FROM TB_ESTOQUE te JOIN TB_EST_IDENTIFICADOR tei ON tei.ID_ESTOQUE = te.ID_ESTOQUE WHERE tei.ID_IDENTIFICADOR = :idIdentifComponente INTO :vPRC_VENDA_Componente ; ERRO = '' insert TB_EST_COMP_ITEM_USADO'' ; INSERT INTO TB_EST_COMP_ITEM_USADO (ID_ITEMCOMP , ID_COMPPROD , QTD_ITEM , DT_BAIXA , HR_BAIXA , PRC_MEDIO , PRC_VENDA , ID_IDENTIFICADOR ) VALUES (NULL , :idcomppro , :quantItemComponente , CURRENT_DATE , CURRENT_TIME , 0 , :vPRC_VENDA_Componente , :idIdentifComponente ) ; END ERRO = '' insert TRI_MAIT_PED_ITEM_COMPPROD'' ; INSERT INTO TRI_MAIT_PED_ITEM_COMPPROD (ID_MAIT_PEDIDO_ITEM , ID_COMPPRO ) VALUES (:IDPEDIDOITEM , :idcomppro ) ; ERRO = ''deu certo''; SUSPEND; END';

erro = 'sproc SP_TRI_MAIT_COMPPROD_SYNCINSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MAIT_COMPPROD_SYNCINSERT ( pID_COMPOSICAO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.ID_COMPOSICAO , pQT_COMPPRO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.QT_COMPPRO , pDT_COMPPRO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.DT_COMPPRO , pHR_COMPPRO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.HR_COMPPRO , pOBSERVACAO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.OBSERVACAO , pGERADO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.GERADO , pMONTADO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.MONTADO , pID_IDENTIFICADOR TYPE OF COLUMN TB_EST_COMP_PRODUCAO.ID_IDENTIFICADOR ) RETURNS ( newID_COMPPRO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.ID_COMPPRO ) AS BEGIN SELECT NEXT VALUE FOR GEN_TB_EST_COMP_PRODUCAO_ID FROM RDB$DATABASE INTO :newID_COMPPRO ; IF( :newID_COMPPRO IS NULL ) THEN newID_COMPPRO = 0; BEGIN INSERT INTO TB_EST_COMP_PRODUCAO (ID_COMPPRO , ID_COMPOSICAO , QT_COMPPRO , DT_COMPPRO , HR_COMPPRO , OBSERVACAO , GERADO , MONTADO , ID_IDENTIFICADOR ) VALUES (:newID_COMPPRO , :pID_COMPOSICAO , :pQT_COMPPRO , :pDT_COMPPRO , :pHR_COMPPRO , :pOBSERVACAO , :pGERADO , :pMONTADO , :pID_IDENTIFICADOR ) ; END END;';

erro = 'sproc SP_TRI_MAIT_COMPPROD_GETBYID';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MAIT_COMPPROD_GETBYID ( pID_COMPPRO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.ID_COMPPRO ) RETURNS ( ID_COMPPRO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.ID_COMPPRO , ID_COMPOSICAO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.ID_COMPOSICAO , QT_COMPPRO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.QT_COMPPRO , DT_COMPPRO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.DT_COMPPRO , HR_COMPPRO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.HR_COMPPRO , OBSERVACAO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.OBSERVACAO , GERADO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.GERADO , MONTADO TYPE OF COLUMN TB_EST_COMP_PRODUCAO.MONTADO , ID_IDENTIFICADOR TYPE OF COLUMN TB_EST_COMP_PRODUCAO.ID_IDENTIFICADOR ) AS BEGIN for SELECT ID_COMPPRO, ID_COMPOSICAO, QT_COMPPRO , DT_COMPPRO, HR_COMPPRO , OBSERVACAO , GERADO , MONTADO , ID_IDENTIFICADOR FROM TB_EST_COMP_PRODUCAO WHERE ID_COMPPRO = :pID_COMPPRO INTO :ID_COMPPRO , :ID_COMPOSICAO , :QT_COMPPRO , :DT_COMPPRO , :HR_COMPPRO , :OBSERVACAO , :GERADO , :MONTADO , :ID_IDENTIFICADOR DO BEGIN SUSPEND ; END END;';

erro = 'sproc SP_TRI_MAIT_COMPPRODUSD_GETBYCP';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MAIT_COMPPRODUSD_GETBYCP ( pID_COMPPROD TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.ID_COMPPROD ) RETURNS ( ID_ITEMCOMP TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.ID_ITEMCOMP , ID_COMPPROD TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.ID_COMPPROD , QTD_ITEM TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.QTD_ITEM , DT_BAIXA TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.DT_BAIXA , HR_BAIXA TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.HR_BAIXA , PRC_MEDIO TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.PRC_MEDIO , PRC_VENDA TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.PRC_VENDA , ID_IDENTIFICADOR TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.ID_IDENTIFICADOR ) AS BEGIN for SELECT ID_ITEMCOMP, ID_COMPPROD, QTD_ITEM , DT_BAIXA , HR_BAIXA , PRC_MEDIO , PRC_VENDA , ID_IDENTIFICADOR FROM TB_EST_COMP_ITEM_USADO WHERE ID_COMPPROD = :pID_COMPPROD INTO :ID_ITEMCOMP , :ID_COMPPROD , :QTD_ITEM , :DT_BAIXA , :HR_BAIXA , :PRC_MEDIO , :PRC_VENDA , :ID_IDENTIFICADOR DO BEGIN SUSPEND ; END END;';

erro = 'sproc SP_TRI_MAIT_COMPITMUSD_SYNCNSRT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MAIT_COMPITMUSD_SYNCNSRT ( pID_COMPPROD TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.ID_COMPPROD , pQTD_ITEM TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.QTD_ITEM , pDT_BAIXA TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.DT_BAIXA , pHR_BAIXA TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.HR_BAIXA , pPRC_MEDIO TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.PRC_MEDIO , pPRC_VENDA TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.PRC_VENDA , pID_IDENTIFICADOR TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.ID_IDENTIFICADOR ) RETURNS ( newID_ITEMCOMP TYPE OF COLUMN TB_EST_COMP_ITEM_USADO.ID_ITEMCOMP ) AS BEGIN SELECT NEXT VALUE FOR GEN_TB_EST_COMP_ITEM_USADO_ID FROM RDB$DATABASE INTO :newID_ITEMCOMP ;  IF( :newID_ITEMCOMP IS NULL ) THEN newID_ITEMCOMP = 0; BEGIN INSERT INTO TB_EST_COMP_ITEM_USADO (ID_ITEMCOMP , ID_COMPPROD , QTD_ITEM , DT_BAIXA , HR_BAIXA , PRC_MEDIO , PRC_VENDA , ID_IDENTIFICADOR ) VALUES (:newID_ITEMCOMP , :pID_COMPPROD , :pQTD_ITEM , :pDT_BAIXA , :pHR_BAIXA , :pPRC_MEDIO , :pPRC_VENDA , :pID_IDENTIFICADOR ) ;  END END;';

erro = 'sproc SP_TRI_MT_PDITM_COMPRD_SYNCNSRT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MT_PDITM_COMPRD_SYNCNSRT ( pID_MAIT_PEDIDO_ITEM TYPE OF COLUMN TRI_MAIT_PED_ITEM_COMPPROD.ID_MAIT_PEDIDO_ITEM , pID_COMPPRO TYPE OF COLUMN TRI_MAIT_PED_ITEM_COMPPROD.ID_COMPPRO ) AS BEGIN INSERT INTO TRI_MAIT_PED_ITEM_COMPPROD (ID_MAIT_PEDIDO_ITEM , ID_COMPPRO ) VALUES (:pID_MAIT_PEDIDO_ITEM , :pID_COMPPRO ) ; END;';

erro = 'sproc SP_TRI_MAITRE_LANCAITEMPEDIDO';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_MAITRE_LANCAITEMPEDIDO ( IDPEDIDO INTEGER , IDPRODUTO INTEGER , QUANT TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.QTD_ITEM , OBSERVACAO TYPE OF COLUMN TRI_MAIT_PEDIDO_ITEM.OBSERVACAO ) RETURNS (COMPOSICAO INTEGER, IDPEDIDOITEM INTEGER ) AS BEGIN SELECT NEXT VALUE FOR GEN_TRI_MAIT_PED_ITEM_ID FROM RDB$DATABASE INTO :IDPEDIDOITEM ; INSERT INTO TRI_MAIT_PEDIDO_ITEM VALUES (:idpedidoitem , :idpedido , :idproduto , :quant , :OBSERVACAO, null, null ) ; SELECT COUNT(1) FROM TB_EST_COMPOSICAO WHERE ID_IDENTIFICADOR = :IDPRODUTO INTO :COMPOSICAO ; SUSPEND; END';

erro = 'sproc SP_TRI_ENVIA_SAT_SERVIDOR';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ENVIA_SAT_SERVIDOR (PNUMCAIXA INTEGER, PXML_A_ENV BLOB SUB_TYPE 0) RETURNS (RID_TRANSACAO INTEGER) AS BEGIN SELECT NEXT VALUE FOR GEN_TRI_PDV_SAT_ENV FROM RDB$DATABASE INTO :rID_TRANSACAO; INSERT INTO TRI_PDV_SAT_ENV (ID_TRANSACAO, NUM_CAIXA, XML_A_ENV, PROCESSADO, HORAATUAL) VALUES(:rID_TRANSACAO, :pNUMCAIXA, :pXML_A_ENV, ''N'', current_timestamp); END';

erro = 'sproc ultimocupom_venda';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ULTIMOCUPOM_VENDA (CAIXA INTEGER) RETURNS ( ULTIMOCUPOM INTEGER, ULTIMOCOO INTEGER ) AS BEGIN SELECT MAX(ID_CUPOM) FROM TB_CUPOM WHERE NUM_CAIXA = :CAIXA AND CHAVE IS NOT NULL INTO :ultimocupom; IF (:ultimocupom IS NULL) THEN BEGIN ultimocupom = 0; ultimocoo = 0; END ELSE BEGIN SELECT COO FROM TB_CUPOM WHERE ID_CUPOM = :ultimocupom INTO :ultimocoo; END SUSPEND; END';

erro = 'gen GEN_TRI_PDV_SAT_ENV';
if (NOT exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= 'GEN_TRI_PDV_SAT_ENV'))
then
EXECUTE STATEMENT 'CREATE GENERATOR GEN_TRI_PDV_SAT_ENV;';

erro = 'trig NOVO_CFE_VENDA';
if (NOT exists(SELECT RDB$TRIGGER_NAME FROM RDB$TRIGGERS WHERE RDB$TRIGGER_NAME = 'NOVO_CFE_VENDA'))
then
execute statement 'CREATE TRIGGER NOVO_CFE_VENDA FOR TRI_PDV_SAT_ENV AFTER INSERT AS BEGIN POST_EVENT ''NOVO_CFE_RECEBIDO''; END;';

erro = 'trig NOVO_CFE_VENDA';
if (NOT exists(SELECT RDB$TRIGGER_NAME FROM RDB$TRIGGERS WHERE RDB$TRIGGER_NAME = 'NOVA_RESP_VENDA'))
then
execute statement 'CREATE TRIGGER NOVA_RESP_VENDA FOR TRI_PDV_SAT_REC AFTER INSERT AS BEGIN POST_EVENT ''NOVA_RESP_RECEBIDA''; END;';

erro = 'sproc SP_TRI_PDV_OPR_GETBY_ID_CX_LAST';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_PDV_OPR_GETBY_ID_CX_LAST ( pID_CAIXA TYPE OF COLUMN TRI_PDV_OPER.ID_CAIXA ) RETURNS ( ID_CAIXA TYPE OF COLUMN TRI_PDV_OPER.ID_CAIXA, DIN TYPE OF COLUMN TRI_PDV_OPER.DIN, CHEQUE TYPE OF COLUMN TRI_PDV_OPER.CHEQUE, CREDITO TYPE OF COLUMN TRI_PDV_OPER.CREDITO, DEBITO TYPE OF COLUMN TRI_PDV_OPER.DEBITO, LOJA TYPE OF COLUMN TRI_PDV_OPER.LOJA, ALIMENTACAO TYPE OF COLUMN TRI_PDV_OPER.ALIMENTACAO, REFEICAO TYPE OF COLUMN TRI_PDV_OPER.REFEICAO, PRESENTE TYPE OF COLUMN TRI_PDV_OPER.PRESENTE, COMBUSTIVEL TYPE OF COLUMN TRI_PDV_OPER.COMBUSTIVEL, OUTROS TYPE OF COLUMN TRI_PDV_OPER.OUTROS, EXTRA_1 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_1, EXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_2, EXTRA_3 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_3, EXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_4, EXTRA_5 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_5, EXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_6, EXTRA_7 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_7, EXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_8, EXTRA_9 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_9, EXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_10, CURRENTTIME TYPE OF COLUMN TRI_PDV_OPER.CURRENTTIME, ABERTO TYPE OF COLUMN TRI_PDV_OPER.ABERTO, HASH TYPE OF COLUMN TRI_PDV_OPER.HASH, SANGRIAS TYPE OF COLUMN TRI_PDV_OPER.SANGRIAS, SUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.SUPRIMENTOS, TROCAS TYPE OF COLUMN TRI_PDV_OPER.TROCAS, FECHADO TYPE OF COLUMN TRI_PDV_OPER.FECHADO, ID_OPER TYPE OF COLUMN TRI_PDV_OPER.ID_OPER, ID_USER TYPE OF COLUMN TRI_PDV_OPER.ID_USER, TRI_PDV_DT_UPD TYPE OF COLUMN TRI_PDV_OPER.TRI_PDV_DT_UPD ) AS BEGIN for SELECT FIRST 1 ID_CAIXA , DIN , CHEQUE , CREDITO , DEBITO , LOJA , ALIMENTACAO, REFEICAO , PRESENTE , COMBUSTIVEL, OUTROS , EXTRA_1 , EXTRA_2 , EXTRA_3 , EXTRA_4 , EXTRA_5 , EXTRA_6 , EXTRA_7 , EXTRA_8 , EXTRA_9 , EXTRA_10 , CURRENTTIME, ABERTO , HASH , SANGRIAS , SUPRIMENTOS, TROCAS , FECHADO , ID_OPER , ID_USER , TRI_PDV_DT_UPD FROM TRI_PDV_OPER WHERE ID_CAIXA = :pID_CAIXA ORDER BY CURRENTTIME DESC INTO :ID_CAIXA , :DIN , :CHEQUE , :CREDITO , :DEBITO , :LOJA , :ALIMENTACAO, :REFEICAO , :PRESENTE , :COMBUSTIVEL, :OUTROS , :EXTRA_1 , :EXTRA_2 , :EXTRA_3 , :EXTRA_4 , :EXTRA_5 , :EXTRA_6 , :EXTRA_7 , :EXTRA_8 , :EXTRA_9 , :EXTRA_10 , :CURRENTTIME, :ABERTO , :HASH , :SANGRIAS , :SUPRIMENTOS, :TROCAS , :FECHADO , :ID_OPER , :ID_USER , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';

erro = 'sproc SP_TRI_PDV_OPR_GETBY_IDCX_CURT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_PDV_OPR_GETBY_IDCX_CURT ( pID_CAIXA TYPE OF COLUMN TRI_PDV_OPER.ID_CAIXA, pCURRENTTIME TYPE OF COLUMN TRI_PDV_OPER.CURRENTTIME ) RETURNS ( ID_CAIXA TYPE OF COLUMN TRI_PDV_OPER.ID_CAIXA, DIN TYPE OF COLUMN TRI_PDV_OPER.DIN, CHEQUE TYPE OF COLUMN TRI_PDV_OPER.CHEQUE, CREDITO TYPE OF COLUMN TRI_PDV_OPER.CREDITO, DEBITO TYPE OF COLUMN TRI_PDV_OPER.DEBITO, LOJA TYPE OF COLUMN TRI_PDV_OPER.LOJA, ALIMENTACAO TYPE OF COLUMN TRI_PDV_OPER.ALIMENTACAO, REFEICAO TYPE OF COLUMN TRI_PDV_OPER.REFEICAO, PRESENTE TYPE OF COLUMN TRI_PDV_OPER.PRESENTE, COMBUSTIVEL TYPE OF COLUMN TRI_PDV_OPER.COMBUSTIVEL, OUTROS TYPE OF COLUMN TRI_PDV_OPER.OUTROS, EXTRA_1 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_1, EXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_2, EXTRA_3 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_3, EXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_4, EXTRA_5 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_5, EXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_6, EXTRA_7 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_7, EXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_8, EXTRA_9 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_9, EXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.EXTRA_10, CURRENTTIME TYPE OF COLUMN TRI_PDV_OPER.CURRENTTIME, ABERTO TYPE OF COLUMN TRI_PDV_OPER.ABERTO, HASH TYPE OF COLUMN TRI_PDV_OPER.HASH, SANGRIAS TYPE OF COLUMN TRI_PDV_OPER.SANGRIAS, SUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.SUPRIMENTOS, TROCAS TYPE OF COLUMN TRI_PDV_OPER.TROCAS, FECHADO TYPE OF COLUMN TRI_PDV_OPER.FECHADO, ID_OPER TYPE OF COLUMN TRI_PDV_OPER.ID_OPER, ID_USER TYPE OF COLUMN TRI_PDV_OPER.ID_USER, TRI_PDV_DT_UPD TYPE OF COLUMN TRI_PDV_OPER.TRI_PDV_DT_UPD ) AS BEGIN for SELECT ID_CAIXA , DIN , CHEQUE , CREDITO , DEBITO , LOJA , ALIMENTACAO , REFEICAO , PRESENTE , COMBUSTIVEL , OUTROS , EXTRA_1 , EXTRA_2 , EXTRA_3 , EXTRA_4 , EXTRA_5 , EXTRA_6 , EXTRA_7 , EXTRA_8 , EXTRA_9 , EXTRA_10 , CURRENTTIME , ABERTO , HASH , SANGRIAS , SUPRIMENTOS, TROCAS , FECHADO , ID_OPER , ID_USER , TRI_PDV_DT_UPD FROM TRI_PDV_OPER WHERE ID_CAIXA = :pID_CAIXA AND CURRENTTIME = :pCURRENTTIME INTO :ID_CAIXA , :DIN , :CHEQUE , :CREDITO , :DEBITO , :LOJA , :ALIMENTACAO, :REFEICAO , :PRESENTE , :COMBUSTIVEL, :OUTROS , :EXTRA_1 , :EXTRA_2 , :EXTRA_3 , :EXTRA_4 , :EXTRA_5 , :EXTRA_6 , :EXTRA_7 , :EXTRA_8 , :EXTRA_9 , :EXTRA_10 , :CURRENTTIME, :ABERTO , :HASH , :SANGRIAS , :SUPRIMENTOS, :TROCAS , :FECHADO , :ID_OPER , :ID_USER , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';

erro = 'sproc SP_TRI_OPER_UPSERT_IDCX_CURT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_OPER_UPSERT_IDCX_CURT ( pID_CAIXA INTEGER , pDIN TYPE OF COLUMN TRI_PDV_OPER.DIN , pCHEQUE TYPE OF COLUMN TRI_PDV_OPER.DIN , pCREDITO TYPE OF COLUMN TRI_PDV_OPER.DIN , pDEBITO TYPE OF COLUMN TRI_PDV_OPER.DIN , pLOJA TYPE OF COLUMN TRI_PDV_OPER.DIN , pALIMENTACAO TYPE OF COLUMN TRI_PDV_OPER.DIN , pREFEICAO TYPE OF COLUMN TRI_PDV_OPER.DIN , pPRESENTE TYPE OF COLUMN TRI_PDV_OPER.DIN , pCOMBUSTIVEL TYPE OF COLUMN TRI_PDV_OPER.DIN , pOUTROS TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_1 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_2 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_3 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_4 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_5 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_6 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_7 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_8 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_9 TYPE OF COLUMN TRI_PDV_OPER.DIN , pEXTRA_10 TYPE OF COLUMN TRI_PDV_OPER.DIN , pCURRENTTIME TIMESTAMP , pABERTO VARCHAR(1) , pHASH VARCHAR(32) , pSANGRIAS TYPE OF COLUMN TRI_PDV_OPER.DIN , pSUPRIMENTOS TYPE OF COLUMN TRI_PDV_OPER.DIN , pTROCAS TYPE OF COLUMN TRI_PDV_OPER.DIN , pFECHADO TIMESTAMP , pID_USER INTEGER , pTRI_PDV_DT_UPD TIMESTAMP ) AS BEGIN UPDATE OR INSERT INTO TRI_PDV_OPER (ID_CAIXA , DIN , CHEQUE , CREDITO , DEBITO , LOJA , ALIMENTACAO , REFEICAO , PRESENTE , COMBUSTIVEL , OUTROS , EXTRA_1 , EXTRA_2 , EXTRA_3 , EXTRA_4 , EXTRA_5 , EXTRA_6 , EXTRA_7 , EXTRA_8 , EXTRA_9 , EXTRA_10 , CURRENTTIME , ABERTO , HASH , SANGRIAS , SUPRIMENTOS , TROCAS , FECHADO , ID_USER , TRI_PDV_DT_UPD ) VALUES (:pID_CAIXA , :pDIN , :pCHEQUE , :pCREDITO , :pDEBITO , :pLOJA , :pALIMENTACAO , :pREFEICAO , :pPRESENTE , :pCOMBUSTIVEL , :pOUTROS , :pEXTRA_1 , :pEXTRA_2 , :pEXTRA_3 , :pEXTRA_4 , :pEXTRA_5 , :pEXTRA_6 , :pEXTRA_7 , :pEXTRA_8 , :pEXTRA_9 , :pEXTRA_10 , :pCURRENTTIME , :pABERTO , :pHASH , :pSANGRIAS , :pSUPRIMENTOS , :pTROCAS , :pFECHADO , :pID_USER , :pTRI_PDV_DT_UPD ) MATCHING (ID_CAIXA , CURRENTTIME ) ; END;';

erro = 'sproc SP_TRI_FUNCIONARIO_UPSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_FUNCIONARIO_UPSERT ( pID_FUNCIONARIO TYPE OF COLUMN TB_FUNCIONARIO.ID_FUNCIONARIO, pID_CIDADE TYPE OF COLUMN TB_FUNCIONARIO.ID_CIDADE, pN_REGISTRO TYPE OF COLUMN TB_FUNCIONARIO.N_REGISTRO, pCPF TYPE OF COLUMN TB_FUNCIONARIO.CPF, pNOME TYPE OF COLUMN TB_FUNCIONARIO.NOME, pRG TYPE OF COLUMN TB_FUNCIONARIO.RG, pEND_CEP TYPE OF COLUMN TB_FUNCIONARIO.END_CEP, pEND_TIPO TYPE OF COLUMN TB_FUNCIONARIO.END_TIPO, pEND_LOGRAD TYPE OF COLUMN TB_FUNCIONARIO.END_LOGRAD, pEND_NUMERO TYPE OF COLUMN TB_FUNCIONARIO.END_NUMERO, pEND_COMPLE TYPE OF COLUMN TB_FUNCIONARIO.END_COMPLE, pEND_BAIRRO TYPE OF COLUMN TB_FUNCIONARIO.END_BAIRRO, pDDD TYPE OF COLUMN TB_FUNCIONARIO.DDD, pFONE TYPE OF COLUMN TB_FUNCIONARIO.FONE, pCELULAR TYPE OF COLUMN TB_FUNCIONARIO.CELULAR, pEMAIL TYPE OF COLUMN TB_FUNCIONARIO.EMAIL, pSALARIO TYPE OF COLUMN TB_FUNCIONARIO.SALARIO, pEXTRA TYPE OF COLUMN TB_FUNCIONARIO.EXTRA, pDATA_NASCT TYPE OF COLUMN TB_FUNCIONARIO.DATA_NASCT, pDATA_ADMIS TYPE OF COLUMN TB_FUNCIONARIO.DATA_ADMIS, pDATA_DEMIS TYPE OF COLUMN TB_FUNCIONARIO.DATA_DEMIS, pRAMAL TYPE OF COLUMN TB_FUNCIONARIO.RAMAL, pSENHA TYPE OF COLUMN TB_FUNCIONARIO.SENHA, pIP TYPE OF COLUMN TB_FUNCIONARIO.IP, pSTATUS TYPE OF COLUMN TB_FUNCIONARIO.STATUS, pID_SETOR TYPE OF COLUMN TB_FUNCIONARIO.ID_SETOR, pID_CARGO TYPE OF COLUMN TB_FUNCIONARIO.ID_CARGO, pFOTO TYPE OF COLUMN TB_FUNCIONARIO.FOTO, pPIS TYPE OF COLUMN TB_FUNCIONARIO.PIS, pAPELIDO TYPE OF COLUMN TB_FUNCIONARIO.APELIDO, pOBSERVACAO TYPE OF COLUMN TB_FUNCIONARIO.OBSERVACAO ) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO TB_FUNCIONARIO ( ID_FUNCIONARIO, ID_CIDADE, N_REGISTRO, CPF, NOME, RG, END_CEP, END_TIPO, END_LOGRAD, END_NUMERO, END_COMPLE, END_BAIRRO, DDD, FONE, CELULAR, EMAIL, SALARIO, EXTRA, DATA_NASCT, DATA_ADMIS, DATA_DEMIS, RAMAL, SENHA, IP, STATUS, ID_SETOR, ID_CARGO, FOTO, PIS, APELIDO, OBSERVACAO ) VALUES ( :pID_FUNCIONARIO, :pID_CIDADE, :pN_REGISTRO, :pCPF, :pNOME, :pRG, :pEND_CEP, :pEND_TIPO, :pEND_LOGRAD, :pEND_NUMERO, :pEND_COMPLE, :pEND_BAIRRO, :pDDD, :pFONE, :pCELULAR, :pEMAIL, :pSALARIO, :pEXTRA, :pDATA_NASCT, :pDATA_ADMIS, :pDATA_DEMIS, :pRAMAL, :pSENHA, :pIP, :pSTATUS, :pID_SETOR, :pID_CARGO, :pFOTO, :pPIS, :pAPELIDO, :pOBSERVACAO ) MATCHING ( ID_FUNCIONARIO ); rRowsAffected = ROW_COUNT; END;';

erro = 'sproc SP_TRI_UNIMEDIDA_UPSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_UNIMEDIDA_UPSERT ( pUNIDADE TYPE OF COLUMN TB_UNI_MEDIDA.UNIDADE, pDESCRICAO TYPE OF COLUMN TB_UNI_MEDIDA.DESCRICAO, pCONVERSOR TYPE OF COLUMN TB_UNI_MEDIDA.CONVERSOR, pSTATUS TYPE OF COLUMN TB_UNI_MEDIDA.STATUS, pUNIDADE_EX TYPE OF COLUMN TB_UNI_MEDIDA.UNIDADE_EX ) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE OR INSERT INTO TB_UNI_MEDIDA ( UNIDADE, DESCRICAO, CONVERSOR, STATUS, UNIDADE_EX ) VALUES ( :pUNIDADE, :pDESCRICAO, :pCONVERSOR, :pSTATUS, :pUNIDADE_EX ) MATCHING ( UNIDADE ) ; rRowsAffected = ROW_COUNT; END;';

erro = 'sproc SP_TRI_FUNCPAPEL_INSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_FUNCPAPEL_INSERT ( pID_FUNCIONARIO TYPE OF COLUMN TB_FUNC_PAPEL.ID_FUNCIONARIO , pID_PAPEL TYPE OF COLUMN TB_FUNC_PAPEL.ID_PAPEL ) RETURNS (rRowsAffected INTEGER) AS BEGIN INSERT INTO TB_FUNC_PAPEL (ID_FUNCIONARIO , ID_PAPEL ) VALUES (:pID_FUNCIONARIO , :pID_PAPEL ) ; rRowsAffected = ROW_COUNT; END;';

erro = 'sproc SP_TRI_METODOS_UPSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_METODOS_UPSERT ( pID_PAGAMENTO TYPE OF COLUMN TRI_PDV_METODOS.ID_PAGAMENTO , pDESCRICAO TYPE OF COLUMN TRI_PDV_METODOS.DESCRICAO , pDIAS TYPE OF COLUMN TRI_PDV_METODOS.DIAS , pMETODO TYPE OF COLUMN TRI_PDV_METODOS.METODO , pPGTOCFE TYPE OF COLUMN TRI_PDV_METODOS.PGTOCFE , pATIVO TYPE OF COLUMN TRI_PDV_METODOS.ATIVO ) RETURNS (rRowsAffected INTEGER) AS BEGIN UPDATE TRI_PDV_METODOS SET DESCRICAO=:pDESCRICAO, DIAS=:pDIAS, METODO=:pMETODO, PGTOCFE=:pPGTOCFE, ATIVO=:pATIVO WHERE ID_PAGAMENTO=:pID_PAGAMENTO; rRowsAffected = ROW_COUNT; END;';

erro = 'sproc SP_TRI_PDV_AUXSYNC_GETBY_NCAIXA';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_PDV_AUXSYNC_GETBY_NCAIXA ( pNO_CAIXA TYPE OF COLUMN TRI_PDV_AUX_SYNC.NO_CAIXA ) RETURNS ( SEQ TYPE OF COLUMN TRI_PDV_AUX_SYNC.SEQ, ID_REG TYPE OF COLUMN TRI_PDV_AUX_SYNC.ID_REG, TABELA TYPE OF COLUMN TRI_PDV_AUX_SYNC.TABELA, OPERACAO TYPE OF COLUMN TRI_PDV_AUX_SYNC.OPERACAO, NO_CAIXA TYPE OF COLUMN TRI_PDV_AUX_SYNC.NO_CAIXA, TS_OPER TYPE OF COLUMN TRI_PDV_AUX_SYNC.TS_OPER, UN_REG TYPE OF COLUMN TRI_PDV_AUX_SYNC.UN_REG, SM_REG TYPE OF COLUMN TRI_PDV_AUX_SYNC.SM_REG, CH_REG TYPE OF COLUMN TRI_PDV_AUX_SYNC.CH_REG ) AS BEGIN for SELECT SEQ , ID_REG , TABELA , OPERACAO , NO_CAIXA , TS_OPER , UN_REG , SM_REG , CH_REG FROM TRI_PDV_AUX_SYNC WHERE (NO_CAIXA = :pNO_CAIXA OR NO_CAIXA = 0) INTO :SEQ , :ID_REG , :TABELA , :OPERACAO , :NO_CAIXA , :TS_OPER , :UN_REG , :SM_REG , :CH_REG DO BEGIN SUSPEND ; END END;';

erro = 'sproc SP_TRI_PDV_AUXSYNC_DELBY_NCAIXA';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_PDV_AUXSYNC_DELBY_NCAIXA ( pNO_CAIXA TYPE OF COLUMN TRI_PDV_AUX_SYNC.NO_CAIXA ) AS BEGIN DELETE FROM TRI_PDV_AUX_SYNC WHERE ( NO_CAIXA = :pNO_CAIXA ) ; END;';

erro = 'sproc SP_TRI_ESTOQUE_GETBY_ID';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ESTOQUE_GETBY_ID ( pID_ESTOQUE TYPE OF COLUMN TB_ESTOQUE.ID_ESTOQUE ) RETURNS ( ID_ESTOQUE TYPE OF COLUMN TB_ESTOQUE.ID_ESTOQUE , ID_GRUPO TYPE OF COLUMN TB_ESTOQUE.ID_GRUPO , DESCRICAO TYPE OF COLUMN TB_ESTOQUE.DESCRICAO , STATUS TYPE OF COLUMN TB_ESTOQUE.STATUS , DT_CADAST TYPE OF COLUMN TB_ESTOQUE.DT_CADAST , HR_CADAST TYPE OF COLUMN TB_ESTOQUE.HR_CADAST , FRACIONADO TYPE OF COLUMN TB_ESTOQUE.FRACIONADO , PRC_VENDA TYPE OF COLUMN TRI_PDV_OPER.DIN , PRC_CUSTO TYPE OF COLUMN TRI_PDV_OPER.DIN , ULT_VENDA TYPE OF COLUMN TB_ESTOQUE.ULT_VENDA , MARGEM_LB TYPE OF COLUMN TRI_PDV_OPER.DIN , POR_COMISSAO TYPE OF COLUMN TRI_PDV_OPER.DIN , ULT_FORNEC TYPE OF COLUMN TB_ESTOQUE.ULT_FORNEC , GRADE_SERIE TYPE OF COLUMN TB_ESTOQUE.GRADE_SERIE , ID_TIPOITEM TYPE OF COLUMN TB_ESTOQUE.ID_TIPOITEM , ID_CTI TYPE OF COLUMN TB_ESTOQUE.ID_CTI , CST_PIS TYPE OF COLUMN TB_ESTOQUE.CST_PIS , CST_COFINS TYPE OF COLUMN TB_ESTOQUE.CST_COFINS , PIS TYPE OF COLUMN TRI_PDV_OPER.DIN , COFINS TYPE OF COLUMN TRI_PDV_OPER.DIN , UNI_MEDIDA TYPE OF COLUMN TB_ESTOQUE.UNI_MEDIDA , MARGEM_PV TYPE OF COLUMN TRI_PDV_OPER.DIN , CFOP TYPE OF COLUMN TB_ESTOQUE.CFOP , OBSERVACAO TYPE OF COLUMN TB_ESTOQUE.OBSERVACAO , NAT_RECEITA TYPE OF COLUMN TB_ESTOQUE.NAT_RECEITA , CFOP_NF TYPE OF COLUMN TB_ESTOQUE.CFOP_NF , PRC_ATACADO TYPE OF COLUMN TRI_PDV_OPER.DIN , ID_CTI_PART TYPE OF COLUMN TB_ESTOQUE.ID_CTI_PART , ID_CTI_FCP TYPE OF COLUMN TB_ESTOQUE.ID_CTI_FCP , QTD_ATACADO TYPE OF COLUMN TRI_PDV_OPER.DIN , TRI_PDV_DT_UPD TYPE OF COLUMN TB_ESTOQUE.TRI_PDV_DT_UPD ) AS BEGIN FOR SELECT A.ID_ESTOQUE , A.ID_GRUPO , A.DESCRICAO , A.STATUS , A.DT_CADAST , A.HR_CADAST , A.FRACIONADO , A.PRC_VENDA , A.PRC_CUSTO , A.ULT_VENDA , A.MARGEM_LB , A.POR_COMISSAO , A.ULT_FORNEC , A.GRADE_SERIE , A.ID_TIPOITEM , A.ID_CTI , A.CST_PIS , A.CST_COFINS , A.PIS , A.COFINS , A.UNI_MEDIDA , A.MARGEM_PV , A.CFOP , A.OBSERVACAO , A.NAT_RECEITA , A.CFOP_NF , A.PRC_ATACADO , A.ID_CTI_PART , A.ID_CTI_FCP , A.QTD_ATACADO , A.TRI_PDV_DT_UPD FROM TB_ESTOQUE A WHERE A.ID_ESTOQUE = :pID_ESTOQUE INTO :ID_ESTOQUE , :ID_GRUPO , :DESCRICAO , :STATUS , :DT_CADAST , :HR_CADAST , :FRACIONADO , :PRC_VENDA , :PRC_CUSTO , :ULT_VENDA , :MARGEM_LB , :POR_COMISSAO , :ULT_FORNEC , :GRADE_SERIE , :ID_TIPOITEM , :ID_CTI , :CST_PIS , :CST_COFINS , :PIS , :COFINS , :UNI_MEDIDA , :MARGEM_PV , :CFOP , :OBSERVACAO , :NAT_RECEITA , :CFOP_NF , :PRC_ATACADO , :ID_CTI_PART , :ID_CTI_FCP , :QTD_ATACADO , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';

erro = 'sproc SP_TRI_ESTIDENTIF_GETBY_ID';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ESTIDENTIF_GETBY_ID ( pID_IDENTIFICADOR TYPE OF COLUMN TB_EST_IDENTIFICADOR.ID_IDENTIFICADOR ) RETURNS ( ID_IDENTIFICADOR TYPE OF COLUMN TB_EST_IDENTIFICADOR.ID_IDENTIFICADOR , ID_ESTOQUE TYPE OF COLUMN TB_EST_IDENTIFICADOR.ID_ESTOQUE , CHAVE TYPE OF COLUMN TB_EST_IDENTIFICADOR.CHAVE , TRI_PDV_DT_UPD TYPE OF COLUMN TB_EST_IDENTIFICADOR.TRI_PDV_DT_UPD ) AS BEGIN FOR SELECT ID_IDENTIFICADOR , ID_ESTOQUE , CHAVE , TRI_PDV_DT_UPD FROM TB_EST_IDENTIFICADOR WHERE ( ID_IDENTIFICADOR = :pID_IDENTIFICADOR ) INTO :ID_IDENTIFICADOR , :ID_ESTOQUE , :CHAVE , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';

erro = 'sproc SP_TRI_ESTPRODUTO_GETBY_ID';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ESTPRODUTO_GETBY_ID ( pID_IDENTIFICADOR TYPE OF COLUMN TB_EST_PRODUTO.ID_IDENTIFICADOR ) RETURNS ( ID_IDENTIFICADOR TYPE OF COLUMN TB_EST_PRODUTO.ID_IDENTIFICADOR , DESC_CMPL TYPE OF COLUMN TB_EST_PRODUTO.DESC_CMPL , COD_BARRA TYPE OF COLUMN TB_EST_PRODUTO.COD_BARRA , REFERENCIA TYPE OF COLUMN TB_EST_PRODUTO.REFERENCIA , PRC_MEDIO TYPE OF COLUMN TB_EST_PRODUTO.PRC_MEDIO , QTD_COMPRA TYPE OF COLUMN TB_EST_PRODUTO.QTD_COMPRA , QTD_ATUAL TYPE OF COLUMN TB_EST_PRODUTO.QTD_ATUAL , QTD_MINIM TYPE OF COLUMN TB_EST_PRODUTO.QTD_MINIM , QTD_INICIO TYPE OF COLUMN TB_EST_PRODUTO.QTD_INICIO , QTD_RESERV TYPE OF COLUMN TB_EST_PRODUTO.QTD_RESERV , QTD_POSVEN TYPE OF COLUMN TB_EST_PRODUTO.QTD_POSVEN , ULT_COMPRA TYPE OF COLUMN TB_EST_PRODUTO.ULT_COMPRA , PESO TYPE OF COLUMN TB_EST_PRODUTO.PESO , IPI TYPE OF COLUMN TB_EST_PRODUTO.IPI , CF TYPE OF COLUMN TB_EST_PRODUTO.CF , IAT TYPE OF COLUMN TB_EST_PRODUTO.IAT , IPPT TYPE OF COLUMN TB_EST_PRODUTO.IPPT , COD_NCM TYPE OF COLUMN TB_EST_PRODUTO.COD_NCM , ID_NIVEL1 TYPE OF COLUMN TB_EST_PRODUTO.ID_NIVEL1 , ID_NIVEL2 TYPE OF COLUMN TB_EST_PRODUTO.ID_NIVEL2 , MVA TYPE OF COLUMN TB_EST_PRODUTO.MVA , CST_IPI TYPE OF COLUMN TB_EST_PRODUTO.CST_IPI , FOTO TYPE OF COLUMN TB_EST_PRODUTO.FOTO , CSOSN TYPE OF COLUMN TB_EST_PRODUTO.CSOSN , ANP TYPE OF COLUMN TB_EST_PRODUTO.ANP , EXTIPI TYPE OF COLUMN TB_EST_PRODUTO.EXTIPI , CST TYPE OF COLUMN TB_EST_PRODUTO.CST , FCI TYPE OF COLUMN TB_EST_PRODUTO.FCI , COD_CEST TYPE OF COLUMN TB_EST_PRODUTO.COD_CEST , CENQ TYPE OF COLUMN TB_EST_PRODUTO.CENQ , VLR_IPI TYPE OF COLUMN TB_EST_PRODUTO.VLR_IPI , CST_CFE TYPE OF COLUMN TB_EST_PRODUTO.CST_CFE , CSOSN_CFE TYPE OF COLUMN TB_EST_PRODUTO.CSOSN_CFE , CONTROLA_LOTE_VENDA TYPE OF COLUMN TB_EST_PRODUTO.CONTROLA_LOTE_VENDA , BAIXA_LOTE_NFV TYPE OF COLUMN TB_EST_PRODUTO.BAIXA_LOTE_NFV , BAIXA_LOTE_PDV TYPE OF COLUMN TB_EST_PRODUTO.BAIXA_LOTE_PDV , TRI_PDV_DT_UPD TYPE OF COLUMN TB_EST_PRODUTO.TRI_PDV_DT_UPD ) AS BEGIN FOR SELECT ID_IDENTIFICADOR , DESC_CMPL , COD_BARRA , REFERENCIA , PRC_MEDIO , QTD_COMPRA , QTD_ATUAL , QTD_MINIM , QTD_INICIO , QTD_RESERV , QTD_POSVEN , ULT_COMPRA , PESO , IPI , CF , IAT , IPPT , COD_NCM , ID_NIVEL1 , ID_NIVEL2 , MVA , CST_IPI , FOTO , CSOSN , ANP , EXTIPI , CST , FCI , COD_CEST , CENQ , VLR_IPI , CST_CFE , CSOSN_CFE , CONTROLA_LOTE_VENDA , BAIXA_LOTE_NFV , BAIXA_LOTE_PDV , TRI_PDV_DT_UPD FROM TB_EST_PRODUTO WHERE ( ID_IDENTIFICADOR = :pID_IDENTIFICADOR ) INTO :ID_IDENTIFICADOR , :DESC_CMPL , :COD_BARRA , :REFERENCIA , :PRC_MEDIO , :QTD_COMPRA , :QTD_ATUAL , :QTD_MINIM , :QTD_INICIO , :QTD_RESERV , :QTD_POSVEN , :ULT_COMPRA , :PESO , :IPI , :CF , :IAT , :IPPT , :COD_NCM , :ID_NIVEL1 , :ID_NIVEL2 , :MVA , :CST_IPI , :FOTO , :CSOSN , :ANP , :EXTIPI , :CST , :FCI , :COD_CEST , :CENQ , :VLR_IPI , :CST_CFE , :CSOSN_CFE , :CONTROLA_LOTE_VENDA , :BAIXA_LOTE_NFV , :BAIXA_LOTE_PDV , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';

erro = 'deu certo';

SUSPEND;
WHEN ANY DO
BEGIN
END
END;</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="D_PROCEDURES7" Modifier="Public" Name="D_PROCEDURES7" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy19" UserSourceName="D_PROCEDURES7">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>
						CREATE OR ALTER PROCEDURE SP_TRI_PROCEDURES7
						RETURNS
						(
						erro VARCHAR(64)
						)
						AS
						BEGIN

						erro = 'sproc SP_TRI_CLIENTE_GETBY_ID';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CLIENTE_GETBY_ID ( pID_CLIENTE TYPE OF COLUMN TB_CLIENTE.ID_CLIENTE ) RETURNS ( ID_CLIENTE TYPE OF COLUMN TB_CLIENTE.ID_CLIENTE , ID_CONVENIO TYPE OF COLUMN TB_CLIENTE.ID_CONVENIO , DT_CADASTRO TYPE OF COLUMN TB_CLIENTE.DT_CADASTRO , NOME TYPE OF COLUMN TB_CLIENTE.NOME , END_CEP TYPE OF COLUMN TB_CLIENTE.END_CEP , END_TIPO TYPE OF COLUMN TB_CLIENTE.END_TIPO , END_NUMERO TYPE OF COLUMN TB_CLIENTE.END_NUMERO , END_LOGRAD TYPE OF COLUMN TB_CLIENTE.END_LOGRAD , END_BAIRRO TYPE OF COLUMN TB_CLIENTE.END_BAIRRO , END_COMPLE TYPE OF COLUMN TB_CLIENTE.END_COMPLE , DT_PRICOMP TYPE OF COLUMN TB_CLIENTE.DT_PRICOMP , DT_ULTCOMP TYPE OF COLUMN TB_CLIENTE.DT_ULTCOMP , CONTATO TYPE OF COLUMN TB_CLIENTE.CONTATO , STATUS TYPE OF COLUMN TB_CLIENTE.STATUS , LIMITE TYPE OF COLUMN TB_CLIENTE.LIMITE , DDD_RESID TYPE OF COLUMN TB_CLIENTE.DDD_RESID , FONE_RESID TYPE OF COLUMN TB_CLIENTE.FONE_RESID , DDD_COMER TYPE OF COLUMN TB_CLIENTE.DDD_COMER , FONE_COMER TYPE OF COLUMN TB_CLIENTE.FONE_COMER , DDD_CELUL TYPE OF COLUMN TB_CLIENTE.DDD_CELUL , FONE_CELUL TYPE OF COLUMN TB_CLIENTE.FONE_CELUL , DDD_FAX TYPE OF COLUMN TB_CLIENTE.DDD_FAX , FONE_FAX TYPE OF COLUMN TB_CLIENTE.FONE_FAX , EMAIL_CONT TYPE OF COLUMN TB_CLIENTE.EMAIL_CONT , EMAIL_NFE TYPE OF COLUMN TB_CLIENTE.EMAIL_NFE , ID_CIDADE TYPE OF COLUMN TB_CLIENTE.ID_CIDADE , ID_TIPO TYPE OF COLUMN TB_CLIENTE.ID_TIPO , ID_FUNCIONARIO TYPE OF COLUMN TB_CLIENTE.ID_FUNCIONARIO , ID_PAIS TYPE OF COLUMN TB_CLIENTE.ID_PAIS , MENSAGEM TYPE OF COLUMN TB_CLIENTE.MENSAGEM , ID_RAMO TYPE OF COLUMN TB_CLIENTE.ID_RAMO , EMAIL_ADIC TYPE OF COLUMN TB_CLIENTE.EMAIL_ADIC , OBSERVACAO TYPE OF COLUMN TB_CLIENTE.OBSERVACAO , DT_MELHOR_VENCTO TYPE OF COLUMN TB_CLIENTE.DT_MELHOR_VENCTO , TRI_PDV_DT_UPD TYPE OF COLUMN TB_CLIENTE.TRI_PDV_DT_UPD ) AS BEGIN FOR SELECT ID_CLIENTE , ID_CONVENIO , DT_CADASTRO , NOME , END_CEP , END_TIPO , END_NUMERO , END_LOGRAD , END_BAIRRO , END_COMPLE , DT_PRICOMP , DT_ULTCOMP , CONTATO , STATUS , LIMITE , DDD_RESID , FONE_RESID , DDD_COMER , FONE_COMER , DDD_CELUL , FONE_CELUL , DDD_FAX , FONE_FAX , EMAIL_CONT , EMAIL_NFE , ID_CIDADE , ID_TIPO , ID_FUNCIONARIO , ID_PAIS , MENSAGEM , ID_RAMO , EMAIL_ADIC , OBSERVACAO , DT_MELHOR_VENCTO , TRI_PDV_DT_UPD FROM TB_CLIENTE WHERE ( ID_CLIENTE = :pID_CLIENTE ) INTO :ID_CLIENTE , :ID_CONVENIO , :DT_CADASTRO , :NOME , :END_CEP , :END_TIPO , :END_NUMERO , :END_LOGRAD , :END_BAIRRO , :END_COMPLE , :DT_PRICOMP , :DT_ULTCOMP , :CONTATO , :STATUS , :LIMITE , :DDD_RESID , :FONE_RESID , :DDD_COMER , :FONE_COMER , :DDD_CELUL , :FONE_CELUL , :DDD_FAX , :FONE_FAX , :EMAIL_CONT , :EMAIL_NFE , :ID_CIDADE , :ID_TIPO , :ID_FUNCIONARIO , :ID_PAIS , :MENSAGEM , :ID_RAMO , :EMAIL_ADIC , :OBSERVACAO , :DT_MELHOR_VENCTO , :TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;';

						erro = 'sproc SP_TRI_TERMARIO_GET_BYNMCX_LAST';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_TERMARIO_GET_BYNMCX_LAST ( pNUM_CAIXA TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.NUM_CAIXA ) RETURNS ( ID_OPER TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.ID_OPER, NUM_CAIXA TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.NUM_CAIXA, STATUS TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.STATUS, TS_ABERTURA TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.TS_ABERTURA, TS_FECHAMENTO TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.TS_FECHAMENTO, ID_USER TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.ID_USER ) AS BEGIN FOR SELECT FIRST 1 ID_OPER, NUM_CAIXA, STATUS, TS_ABERTURA, TS_FECHAMENTO, ID_USER FROM TRI_PDV_TERMINAL_USUARIO WHERE ( NUM_CAIXA = :pNUM_CAIXA ) ORDER BY TS_ABERTURA DESC INTO :ID_OPER, :NUM_CAIXA, :STATUS, :TS_ABERTURA, :TS_FECHAMENTO, :ID_USER DO BEGIN SUSPEND ; END END;';

						erro = 'sproc SP_TRI_TERMARIO_UPSERT_1';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_TERMARIO_UPSERT_1 ( pNUM_CAIXA TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.NUM_CAIXA , pSTATUS TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.STATUS , pTS_ABERTURA TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.TS_ABERTURA , pTS_FECHAMENTO TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.TS_FECHAMENTO , pID_USER TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.ID_USER ) AS BEGIN UPDATE OR INSERT INTO TRI_PDV_TERMINAL_USUARIO (ID_OPER , NUM_CAIXA , STATUS , TS_ABERTURA , TS_FECHAMENTO , ID_USER ) VALUES (( SELECT NEXT VALUE FOR GEN_TRI_PDV_TERM_USUARIO FROM RDB$DATABASE ) , :pNUM_CAIXA , :pSTATUS , :pTS_ABERTURA , :pTS_FECHAMENTO , :pID_USER ) MATCHING (NUM_CAIXA , TS_ABERTURA , ID_USER ) ; END;';

						erro = 'sproc SP_TRI_ESTOQUE_ID_GETBY_ID';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ESTOQUE_ID_GETBY_ID ( pID_ESTOQUE TYPE OF COLUMN TB_ESTOQUE.ID_ESTOQUE ) RETURNS ( ID_ESTOQUE TYPE OF COLUMN TB_ESTOQUE.ID_ESTOQUE , ID_GRUPO TYPE OF COLUMN TB_ESTOQUE.ID_GRUPO , DESCRICAO TYPE OF COLUMN TB_ESTOQUE.DESCRICAO , STATUS TYPE OF COLUMN TB_ESTOQUE.STATUS , DT_CADAST TYPE OF COLUMN TB_ESTOQUE.DT_CADAST , HR_CADAST TYPE OF COLUMN TB_ESTOQUE.HR_CADAST , FRACIONADO TYPE OF COLUMN TB_ESTOQUE.FRACIONADO , PRC_VENDA TYPE OF COLUMN TRI_PDV_OPER.DIN , PRC_CUSTO TYPE OF COLUMN TRI_PDV_OPER.DIN , ULT_VENDA TYPE OF COLUMN TB_ESTOQUE.ULT_VENDA , MARGEM_LB TYPE OF COLUMN TRI_PDV_OPER.DIN , POR_COMISSAO TYPE OF COLUMN TRI_PDV_OPER.DIN , ULT_FORNEC TYPE OF COLUMN TB_ESTOQUE.ULT_FORNEC , GRADE_SERIE TYPE OF COLUMN TB_ESTOQUE.GRADE_SERIE , ID_TIPOITEM TYPE OF COLUMN TB_ESTOQUE.ID_TIPOITEM , ID_CTI TYPE OF COLUMN TB_ESTOQUE.ID_CTI , CST_PIS TYPE OF COLUMN TB_ESTOQUE.CST_PIS , CST_COFINS TYPE OF COLUMN TB_ESTOQUE.CST_COFINS , PIS TYPE OF COLUMN TRI_PDV_OPER.DIN , COFINS TYPE OF COLUMN TRI_PDV_OPER.DIN , UNI_MEDIDA TYPE OF COLUMN TB_ESTOQUE.UNI_MEDIDA , MARGEM_PV TYPE OF COLUMN TRI_PDV_OPER.DIN , CFOP TYPE OF COLUMN TB_ESTOQUE.CFOP , OBSERVACAO TYPE OF COLUMN TB_ESTOQUE.OBSERVACAO , NAT_RECEITA TYPE OF COLUMN TB_ESTOQUE.NAT_RECEITA , CFOP_NF TYPE OF COLUMN TB_ESTOQUE.CFOP_NF , PRC_ATACADO TYPE OF COLUMN TRI_PDV_OPER.DIN , ID_CTI_PART TYPE OF COLUMN TB_ESTOQUE.ID_CTI_PART , ID_CTI_FCP TYPE OF COLUMN TB_ESTOQUE.ID_CTI_FCP , QTD_ATACADO TYPE OF COLUMN TRI_PDV_OPER.DIN , TRI_PDV_DT_UPD TYPE OF COLUMN TB_ESTOQUE.TRI_PDV_DT_UPD , ID_IDENTIFICADOR TYPE OF COLUMN TB_EST_IDENTIFICADOR.ID_IDENTIFICADOR , ID_CTI_CFE TYPE OF COLUMN TB_ESTOQUE.ID_CTI_CFE) AS BEGIN FOR SELECT A.ID_ESTOQUE , A.ID_GRUPO , A.DESCRICAO , A.STATUS , A.DT_CADAST , A.HR_CADAST , A.FRACIONADO , A.PRC_VENDA , A.PRC_CUSTO , A.ULT_VENDA , A.MARGEM_LB , A.POR_COMISSAO , A.ULT_FORNEC , A.GRADE_SERIE , A.ID_TIPOITEM , A.ID_CTI , A.CST_PIS , A.CST_COFINS , A.PIS , A.COFINS , A.UNI_MEDIDA , A.MARGEM_PV , A.CFOP , A.OBSERVACAO , A.NAT_RECEITA , A.CFOP_NF , A.PRC_ATACADO , A.ID_CTI_PART , A.ID_CTI_FCP , A.QTD_ATACADO , A.TRI_PDV_DT_UPD , B.ID_IDENTIFICADOR , A.ID_CTI_CFE FROM TB_ESTOQUE A JOIN TB_EST_IDENTIFICADOR B on B.ID_ESTOQUE = A.ID_ESTOQUE WHERE A.ID_ESTOQUE = :pID_ESTOQUE INTO :ID_ESTOQUE , :ID_GRUPO , :DESCRICAO , :STATUS , :DT_CADAST , :HR_CADAST , :FRACIONADO , :PRC_VENDA , :PRC_CUSTO , :ULT_VENDA , :MARGEM_LB , :POR_COMISSAO , :ULT_FORNEC , :GRADE_SERIE , :ID_TIPOITEM , :ID_CTI , :CST_PIS , :CST_COFINS , :PIS , :COFINS , :UNI_MEDIDA , :MARGEM_PV , :CFOP , :OBSERVACAO , :NAT_RECEITA , :CFOP_NF , :PRC_ATACADO , :ID_CTI_PART , :ID_CTI_FCP , :QTD_ATACADO , :TRI_PDV_DT_UPD , :ID_IDENTIFICADOR , :ID_CTI_CFE DO BEGIN SUSPEND ; END END;';

						erro = 'sproc SP_TRI_TERMARIO_CHECKSEQ';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_TERMARIO_CHECKSEQ RETURNS(rNewNextSeqValue INTEGER) AS DECLARE VARIABLE vCurrentSeqValue INTEGER; DECLARE VARIABLE vMaxIdTermario TYPE OF COLUMN TRI_PDV_TERMINAL_USUARIO.ID_OPER; DECLARE VARIABLE vDiffNextSeqValue INTEGER; DECLARE VARIABLE vNewNextSeqValue INTEGER; BEGIN vCurrentSeqValue = GEN_ID(GEN_TRI_PDV_TERM_USUARIO, 0 ); vMaxIdTermario = (SELECT MAX(ID_OPER) FROM TRI_PDV_TERMINAL_USUARIO); vNewNextSeqValue = -1; IF (:vMaxIdTermario &gt; :vCurrentSeqValue) THEN BEGIN vDiffNextSeqValue = (:vMaxIdTermario - GEN_ID(GEN_TRI_PDV_TERM_USUARIO, 0)); vNewNextSeqValue = GEN_ID(GEN_TRI_PDV_TERM_USUARIO, :vDiffNextSeqValue); END rNewNextSeqValue = :vNewNextSeqValue; END;';

						erro = 'sproc SP_TRI_NATOPER_UPSERT';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NATOPER_UPSERT ( pID_NATOPE TYPE OF COLUMN TB_NAT_OPERACAO.ID_NATOPE , pDESCRICAO TYPE OF COLUMN TB_NAT_OPERACAO.DESCRICAO , pRET_PIS_COF_CSLL TYPE OF COLUMN TB_NAT_OPERACAO.RET_PIS_COF_CSLL , pRET_INSS TYPE OF COLUMN TB_NAT_OPERACAO.RET_INSS , pRET_IRRF TYPE OF COLUMN TB_NAT_OPERACAO.RET_IRRF , pPIS_COFINS TYPE OF COLUMN TB_NAT_OPERACAO.PIS_COFINS , pSTATUS TYPE OF COLUMN TB_NAT_OPERACAO.STATUS , pCFOP TYPE OF COLUMN TB_NAT_OPERACAO.CFOP , pID_CTI TYPE OF COLUMN TB_NAT_OPERACAO.ID_CTI , pGFR TYPE OF COLUMN TB_NAT_OPERACAO.GFR , pOBSERVACAO TYPE OF COLUMN TB_NAT_OPERACAO.OBSERVACAO , pBASE_COMISSAO TYPE OF COLUMN TB_NAT_OPERACAO.BASE_COMISSAO , pCALCULA_IPI TYPE OF COLUMN TB_NAT_OPERACAO.CALCULA_IPI , pGRAVA_TOT_TRIBUTOS TYPE OF COLUMN TB_NAT_OPERACAO.GRAVA_TOT_TRIBUTOS ) RETURNS ( rRowsAffected INTEGER ) AS BEGIN UPDATE OR INSERT INTO TB_NAT_OPERACAO (ID_NATOPE , DESCRICAO , RET_PIS_COF_CSLL , RET_INSS , RET_IRRF , PIS_COFINS , STATUS , CFOP , ID_CTI , GFR , OBSERVACAO , BASE_COMISSAO , CALCULA_IPI , GRAVA_TOT_TRIBUTOS ) VALUES ( :pID_NATOPE , :pDESCRICAO , :pRET_PIS_COF_CSLL , :pRET_INSS , :pRET_IRRF , :pPIS_COFINS , :pSTATUS , :pCFOP , :pID_CTI , :pGFR , :pOBSERVACAO , :pBASE_COMISSAO , :pCALCULA_IPI , :pGRAVA_TOT_TRIBUTOS ) MATCHING (ID_NATOPE ) ; rRowsAffected = ROW_COUNT; END;';

						erro = 'sproc SP_TRI_FMAPGTONFCE_UPSERT';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_FMAPGTONFCE_UPSERT ( pID_FMANFCE TYPE OF COLUMN TB_FORMA_PAGTO_NFCE.ID_FMANFCE , pSTATUS TYPE OF COLUMN TB_FORMA_PAGTO_NFCE.STATUS , pID_NFCE TYPE OF COLUMN TB_FORMA_PAGTO_NFCE.ID_NFCE , pDESCRICAO TYPE OF COLUMN TB_FORMA_PAGTO_NFCE.DESCRICAO ) RETURNS ( rRowsAffected INTEGER ) AS BEGIN UPDATE OR INSERT INTO TB_FORMA_PAGTO_NFCE (ID_FMANFCE , STATUS , ID_NFCE , DESCRICAO ) VALUES ( :pID_FMANFCE , :pSTATUS , :pID_NFCE , :pDESCRICAO ) MATCHING (ID_FMANFCE ) ; rRowsAffected = ROW_COUNT; END;';

						erro = 'sproc SP_TRI_NFVENDA_GETALL_SYNC';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFVENDA_GETALL_SYNC ( TIP_QUERY SMALLINT ) RETURNS ( ID_NFVENDA TYPE OF COLUMN TB_NFVENDA.ID_NFVENDA , ID_NATOPE TYPE OF COLUMN TB_NFVENDA.ID_NATOPE , ID_VENDEDOR TYPE OF COLUMN TB_NFVENDA.ID_VENDEDOR , ID_CLIENTE TYPE OF COLUMN TB_NFVENDA.ID_CLIENTE , NF_NUMERO TYPE OF COLUMN TB_NFVENDA.NF_NUMERO , NF_SERIE TYPE OF COLUMN TB_NFVENDA.NF_SERIE , NF_MODELO TYPE OF COLUMN TB_NFVENDA.NF_MODELO , DT_EMISSAO TYPE OF COLUMN TB_NFVENDA.DT_EMISSAO , DT_SAIDA TYPE OF COLUMN TB_NFVENDA.DT_SAIDA , HR_SAIDA TYPE OF COLUMN TB_NFVENDA.HR_SAIDA , ESPECIE TYPE OF COLUMN TB_NFVENDA.ESPECIE , TIPO_FRETE TYPE OF COLUMN TB_NFVENDA.TIPO_FRETE , PES_LIQUID TYPE OF COLUMN TB_NFVENDA.PES_LIQUID , PES_BRUTO TYPE OF COLUMN TB_NFVENDA.PES_BRUTO , STATUS TYPE OF COLUMN TB_NFVENDA.STATUS , ENT_SAI TYPE OF COLUMN TB_NFVENDA.ENT_SAI , ID_FMAPGTO TYPE OF COLUMN TB_NFVENDA.ID_FMAPGTO , ID_PARCELA TYPE OF COLUMN TB_NFVENDA.ID_PARCELA , MARCA TYPE OF COLUMN TB_NFVENDA.MARCA , QTD_VOLUM TYPE OF COLUMN TB_NFVENDA.QTD_VOLUM , NUM_VOLUM TYPE OF COLUMN TB_NFVENDA.NUM_VOLUM , PROD_REV TYPE OF COLUMN TB_NFVENDA.PROD_REV , SOMA_FRETE TYPE OF COLUMN TB_NFVENDA.SOMA_FRETE , VLR_TROCO TYPE OF COLUMN TB_NFVENDA.VLR_TROCO , IND_PRES TYPE OF COLUMN TB_NFVENDA.IND_PRES , IND_IE_DEST TYPE OF COLUMN TB_NFVENDA.IND_IE_DEST , DESCONTO_CONDICIONAL TYPE OF COLUMN TB_NFVENDA.DESCONTO_CONDICIONAL , INF_COMP_FIXA TYPE OF COLUMN TB_NFVENDA.INF_COMP_FIXA , INF_COMP_EDIT TYPE OF COLUMN TB_NFVENDA.INF_COMP_EDIT , ENDERECO_ENTREGA TYPE OF COLUMN TB_NFVENDA.ENDERECO_ENTREGA , ENVIO_API TYPE OF COLUMN TB_NFVENDA.ENVIO_API , SYNCED SMALLINT , QTD_CTAREC INTEGER ) AS BEGIN FOR SELECT FIRST 200 COALESCE(a.ID_NFVENDA, 0) , a.ID_NATOPE , a.ID_VENDEDOR , a.ID_CLIENTE , a.NF_NUMERO , a.NF_SERIE , a.NF_MODELO , a.DT_EMISSAO , a.DT_SAIDA , a.HR_SAIDA , a.ESPECIE , a.TIPO_FRETE , a.PES_LIQUID , a.PES_BRUTO , a.STATUS , a.ENT_SAI , a.ID_FMAPGTO , a.ID_PARCELA , a.MARCA , a.QTD_VOLUM , a.NUM_VOLUM , a.PROD_REV , a.SOMA_FRETE , a.VLR_TROCO , a.IND_PRES , a.IND_IE_DEST , a.DESCONTO_CONDICIONAL , a.INF_COMP_FIXA , a.INF_COMP_EDIT , a.ENDERECO_ENTREGA , a.ENVIO_API , a.SYNCED , COUNT(b.ID_CTAREC) QTD_CTAREC FROM TB_NFVENDA a LEFT JOIN TB_NFV_CTAREC b ON a.ID_NFVENDA = b.ID_NFVENDA WHERE ( :TIP_QUERY = 0 AND ( ( a.SYNCED IS NULL OR a.SYNCED = 0 ) AND (a.STATUS = ''E'' OR a.STATUS = ''I'') ) ) OR ( :TIP_QUERY = 1 AND ( a.SYNCED = 1 AND (a.STATUS = ''C'' OR a.STATUS = ''X'') ) ) GROUP BY a.ID_NFVENDA , a.ID_NATOPE , a.ID_VENDEDOR , a.ID_CLIENTE , a.NF_NUMERO , a.NF_SERIE , a.NF_MODELO , a.DT_EMISSAO , a.DT_SAIDA , a.HR_SAIDA , a.ESPECIE , a.TIPO_FRETE , a.PES_LIQUID , a.PES_BRUTO , a.STATUS , a.ENT_SAI , a.ID_FMAPGTO , a.ID_PARCELA , a.MARCA , a.QTD_VOLUM , a.NUM_VOLUM , a.PROD_REV , a.SOMA_FRETE , a.VLR_TROCO , a.IND_PRES , a.IND_IE_DEST , a.DESCONTO_CONDICIONAL , a.INF_COMP_FIXA , a.INF_COMP_EDIT , a.ENDERECO_ENTREGA , a.ENVIO_API , a.SYNCED ORDER BY a.DT_EMISSAO , a.DT_SAIDA , a.HR_SAIDA INTO :ID_NFVENDA , :ID_NATOPE , :ID_VENDEDOR , :ID_CLIENTE , :NF_NUMERO , :NF_SERIE , :NF_MODELO , :DT_EMISSAO , :DT_SAIDA , :HR_SAIDA , :ESPECIE , :TIPO_FRETE , :PES_LIQUID , :PES_BRUTO , :STATUS , :ENT_SAI , :ID_FMAPGTO , :ID_PARCELA , :MARCA , :QTD_VOLUM , :NUM_VOLUM , :PROD_REV , :SOMA_FRETE , :VLR_TROCO , :IND_PRES , :IND_IE_DEST , :DESCONTO_CONDICIONAL , :INF_COMP_FIXA , :INF_COMP_EDIT , :ENDERECO_ENTREGA , :ENVIO_API , :SYNCED , :QTD_CTAREC DO BEGIN SUSPEND ; END END;';

						erro = 'sproc SP_TRI_NFVENDA_SYNC_INSERT';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFVENDA_SYNC_INSERT ( pID_NATOPE TYPE OF COLUMN TB_NFVENDA.ID_NATOPE , pID_VENDEDOR TYPE OF COLUMN TB_NFVENDA.ID_VENDEDOR , pID_CLIENTE TYPE OF COLUMN TB_NFVENDA.ID_CLIENTE , pNF_NUMERO TYPE OF COLUMN TB_NFVENDA.NF_NUMERO , pNF_SERIE TYPE OF COLUMN TB_NFVENDA.NF_SERIE , pNF_MODELO TYPE OF COLUMN TB_NFVENDA.NF_MODELO , pDT_EMISSAO TYPE OF COLUMN TB_NFVENDA.DT_EMISSAO , pDT_SAIDA TYPE OF COLUMN TB_NFVENDA.DT_SAIDA , pHR_SAIDA TYPE OF COLUMN TB_NFVENDA.HR_SAIDA , pESPECIE TYPE OF COLUMN TB_NFVENDA.ESPECIE , pTIPO_FRETE TYPE OF COLUMN TB_NFVENDA.TIPO_FRETE , pPES_LIQUID TYPE OF COLUMN TB_NFVENDA.PES_LIQUID , pPES_BRUTO TYPE OF COLUMN TB_NFVENDA.PES_BRUTO , pSTATUS TYPE OF COLUMN TB_NFVENDA.STATUS , pENT_SAI TYPE OF COLUMN TB_NFVENDA.ENT_SAI , pID_FMAPGTO TYPE OF COLUMN TB_NFVENDA.ID_FMAPGTO , pID_PARCELA TYPE OF COLUMN TB_NFVENDA.ID_PARCELA , pMARCA TYPE OF COLUMN TB_NFVENDA.MARCA , pQTD_VOLUM TYPE OF COLUMN TB_NFVENDA.QTD_VOLUM , pNUM_VOLUM TYPE OF COLUMN TB_NFVENDA.NUM_VOLUM , pPROD_REV TYPE OF COLUMN TB_NFVENDA.PROD_REV , pSOMA_FRETE TYPE OF COLUMN TB_NFVENDA.SOMA_FRETE , pVLR_TROCO TYPE OF COLUMN TB_NFVENDA.VLR_TROCO , pIND_PRES TYPE OF COLUMN TB_NFVENDA.IND_PRES , pIND_IE_DEST TYPE OF COLUMN TB_NFVENDA.IND_IE_DEST , pDESCONTO_CONDICIONAL TYPE OF COLUMN TB_NFVENDA.DESCONTO_CONDICIONAL , pINF_COMP_FIXA TYPE OF COLUMN TB_NFVENDA.INF_COMP_FIXA , pINF_COMP_EDIT TYPE OF COLUMN TB_NFVENDA.INF_COMP_EDIT , pENDERECO_ENTREGA TYPE OF COLUMN TB_NFVENDA.ENDERECO_ENTREGA , pENVIO_API TYPE OF COLUMN TB_NFVENDA.ENVIO_API , pSYNCED SMALLINT ) RETURNS ( NFVENDAUSAVEL INTEGER ) AS DECLARE VARIABLE ULTIMONFVENDA INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_TB_NFVENDA_ID FROM RDB$DATABASE INTO :ULTIMONFVENDA ; IF( :ULTIMONFVENDA IS NULL ) THEN ULTIMONFVENDA = 0; BEGIN INSERT INTO TB_NFVENDA ( ID_NFVENDA , ID_NATOPE , ID_VENDEDOR , ID_CLIENTE , NF_NUMERO , NF_SERIE , NF_MODELO , DT_EMISSAO , DT_SAIDA , HR_SAIDA , ESPECIE , TIPO_FRETE , PES_LIQUID , PES_BRUTO , STATUS , ENT_SAI , ID_FMAPGTO , ID_PARCELA , MARCA , QTD_VOLUM , NUM_VOLUM , PROD_REV , SOMA_FRETE , VLR_TROCO , IND_PRES , IND_IE_DEST , DESCONTO_CONDICIONAL , INF_COMP_FIXA , INF_COMP_EDIT , ENDERECO_ENTREGA , ENVIO_API , SYNCED ) VALUES (:ULTIMONFVENDA , :pID_NATOPE , :pID_VENDEDOR , :pID_CLIENTE , :pNF_NUMERO , :pNF_SERIE , :pNF_MODELO , :pDT_EMISSAO , :pDT_SAIDA , :pHR_SAIDA , :pESPECIE , :pTIPO_FRETE , :pPES_LIQUID , :pPES_BRUTO , :pSTATUS , :pENT_SAI , :pID_FMAPGTO , :pID_PARCELA , :pMARCA , :pQTD_VOLUM , :pNUM_VOLUM , :pPROD_REV , :pSOMA_FRETE , :pVLR_TROCO , :pIND_PRES , :pIND_IE_DEST , :pDESCONTO_CONDICIONAL , :pINF_COMP_FIXA , :pINF_COMP_EDIT , :pENDERECO_ENTREGA , :pENVIO_API , :pSYNCED ) ; NFVENDAUSAVEL = ULTIMONFVENDA; END END;';

						erro = 'sproc SP_TRI_NFV_FMAPAGTO_BY_IDNFV';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFV_FMAPAGTO_BY_IDNFV ( pIdNfvenda TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.ID_NFVENDA ) RETURNS ( ID_NUMPAG TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.ID_NUMPAG , VLR_PAGTO TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.VLR_PAGTO , ID_NFVENDA TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.ID_NFVENDA , ID_FMANFCE TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.ID_FMANFCE , ID_PARCELA TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.ID_PARCELA) AS BEGIN FOR SELECT a.ID_NUMPAG , a.VLR_PAGTO , a.ID_NFVENDA , a.ID_FMANFCE , a.ID_PARCELA FROM TB_NFVENDA_FMAPAGTO_NFCE a WHERE a.ID_NFVENDA =:pIdNfvenda INTO :ID_NUMPAG , :VLR_PAGTO , :ID_NFVENDA , :ID_FMANFCE , :ID_PARCELA DO SUSPEND ; END;';

						erro = 'sproc SP_TRI_NFV_FMAPAGT_SYNC_INSERT';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFV_FMAPAGT_SYNC_INSERT ( pVLR_PAGTO TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.VLR_PAGTO , pID_NFVENDA TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.ID_NFVENDA , pID_FMANFCE TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.ID_FMANFCE , pID_PARCELA TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.ID_PARCELA, pID_ADMINISTRADORA TYPE OF COLUMN TB_NFCE_BANDEIRA.ID_ADMINISTRADORA) RETURNS ( rNewIdNumpag TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.ID_NUMPAG ) AS DECLARE VARIABLE newIdNumpag TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.ID_NUMPAG; BEGIN SELECT NEXT VALUE FOR gen_tb_nfvenda_fmapagto_nfce_id FROM RDB$DATABASE INTO :newIdNumpag ; IF( :newIdNumpag IS NULL ) THEN newIdNumpag = 0; BEGIN INSERT INTO TB_NFVENDA_FMAPAGTO_NFCE (ID_NUMPAG , VLR_PAGTO , ID_NFVENDA , ID_FMANFCE , ID_PARCELA ) VALUES ( :newIdNumpag , :pVLR_PAGTO , :pID_NFVENDA , :pID_FMANFCE , :pID_PARCELA ) ; INSERT INTO TB_NFCE_BANDEIRA (ID_NUMPAG , ID_BANDEIRA , ID_ADMINISTRADORA , NUM_AUT , FORMA_ENVIO , SICLOS_ID , STONE_ID , PRE_TRANSACAO_ID , POS_SERIAL) VALUES (:newIdNumpag , NULL, :pID_ADMINISTRADORA , NULL , NULL , NULL , NULL , NULL , NULL) ; rNewIdNumpag = newIdNumpag; END END;';

						erro = 'sproc SP_TRI_NFVITEM_GETBY_IDNFVENDA';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFVITEM_GETBY_IDNFVENDA ( pIdNfvenda INTEGER ) RETURNS ( ID_NFVITEM TYPE OF COLUMN TB_NFV_ITEM.ID_NFVITEM , ID_NFVENDA TYPE OF COLUMN TB_NFV_ITEM.ID_NFVENDA , ID_IDENTIFICADOR TYPE OF COLUMN TB_NFV_ITEM.ID_IDENTIFICADOR , CFOP TYPE OF COLUMN TB_NFV_ITEM.CFOP , NUM_ITEM TYPE OF COLUMN TB_NFV_ITEM.NUM_ITEM , QTD_ITEM TYPE OF COLUMN TB_NFV_ITEM.QTD_ITEM , UNI_MEDIDA TYPE OF COLUMN TB_NFV_ITEM.UNI_MEDIDA , VLR_TOTAL TYPE OF COLUMN TB_NFV_ITEM.VLR_TOTAL , VLR_DESC TYPE OF COLUMN TB_NFV_ITEM.VLR_DESC , VLR_CUSTO TYPE OF COLUMN TB_NFV_ITEM.VLR_CUSTO , PRC_LISTA TYPE OF COLUMN TB_NFV_ITEM.PRC_LISTA , CF TYPE OF COLUMN TB_NFV_ITEM.CF , VLR_FRETE TYPE OF COLUMN TB_NFV_ITEM.VLR_FRETE , VLR_SEGURO TYPE OF COLUMN TB_NFV_ITEM.VLR_SEGURO , VLR_DESPESA TYPE OF COLUMN TB_NFV_ITEM.VLR_DESPESA , RET_PIS_COF_CSLL TYPE OF COLUMN TB_NFV_ITEM.RET_PIS_COF_CSLL , RET_IRRF TYPE OF COLUMN TB_NFV_ITEM.RET_IRRF , COD_ENQ TYPE OF COLUMN TB_NFV_ITEM.COD_ENQ , COD_BASE TYPE OF COLUMN TB_NFV_ITEM.COD_BASE , CSOSN TYPE OF COLUMN TB_NFV_ITEM.CSOSN , NPED_COMPRA TYPE OF COLUMN TB_NFV_ITEM.NPED_COMPRA , ITEM_COMPRA TYPE OF COLUMN TB_NFV_ITEM.ITEM_COMPRA , VLR_TOTTRIB TYPE OF COLUMN TB_NFV_ITEM.VLR_TOTTRIB , FCI TYPE OF COLUMN TB_NFV_ITEM.FCI , VLR_ICM_DESO TYPE OF COLUMN TB_NFV_ITEM.VLR_ICM_DESO , ID_MOTIVO_DESO TYPE OF COLUMN TB_NFV_ITEM.ID_MOTIVO_DESO , EST_BX TYPE OF COLUMN TB_NFV_ITEM.EST_BX , VLR_TRIB_FED TYPE OF COLUMN TB_NFV_ITEM.VLR_TRIB_FED , VLR_TRIB_EST TYPE OF COLUMN TB_NFV_ITEM.VLR_TRIB_EST , VLR_TRIB_MUN TYPE OF COLUMN TB_NFV_ITEM.VLR_TRIB_MUN , INCLUIR_FATURA TYPE OF COLUMN TB_NFV_ITEM.INCLUIR_FATURA , VLR_UNIT TYPE OF COLUMN TB_NFV_ITEM.VLR_UNIT , VLR_RETENCAO TYPE OF COLUMN TB_NFV_ITEM.VLR_RETENCAO , REFERENCIA TYPE OF COLUMN TB_NFV_ITEM.REFERENCIA , ID_COMPOSICAO TYPE OF COLUMN TB_EST_COMPOSICAO.ID_COMPOSICAO ) AS BEGIN FOR SELECT COALESCE(a.ID_NFVITEM, 0) ID_NFVITEM , a.ID_NFVENDA , a.ID_IDENTIFICADOR , a.CFOP , a.NUM_ITEM , a.QTD_ITEM , a.UNI_MEDIDA , a.VLR_TOTAL , a.VLR_DESC , a.VLR_CUSTO , a.PRC_LISTA , a.CF , a.VLR_FRETE , a.VLR_SEGURO , a.VLR_DESPESA , a.RET_PIS_COF_CSLL , a.RET_IRRF , a.COD_ENQ , a.COD_BASE , a.CSOSN , a.NPED_COMPRA , a.ITEM_COMPRA , a.VLR_TOTTRIB , a.FCI , a.VLR_ICM_DESO , a.ID_MOTIVO_DESO , a.EST_BX , a.VLR_TRIB_FED , a.VLR_TRIB_EST , a.VLR_TRIB_MUN , a.INCLUIR_FATURA , a.VLR_UNIT , a.VLR_RETENCAO , a.REFERENCIA , e.ID_COMPOSICAO FROM TB_NFV_ITEM a LEFT JOIN TB_EST_COMPOSICAO e ON e.ID_IDENTIFICADOR = a.ID_IDENTIFICADOR WHERE a.ID_NFVENDA =:pIdNfvenda INTO :ID_NFVITEM , :ID_NFVENDA , :ID_IDENTIFICADOR , :CFOP , :NUM_ITEM , :QTD_ITEM , :UNI_MEDIDA , :VLR_TOTAL , :VLR_DESC , :VLR_CUSTO , :PRC_LISTA , :CF , :VLR_FRETE , :VLR_SEGURO , :VLR_DESPESA , :RET_PIS_COF_CSLL , :RET_IRRF , :COD_ENQ , :COD_BASE , :CSOSN , :NPED_COMPRA , :ITEM_COMPRA , :VLR_TOTTRIB , :FCI , :VLR_ICM_DESO , :ID_MOTIVO_DESO , :EST_BX , :VLR_TRIB_FED , :VLR_TRIB_EST , :VLR_TRIB_MUN , :INCLUIR_FATURA , :VLR_UNIT , :VLR_RETENCAO , :REFERENCIA , :ID_COMPOSICAO DO SUSPEND ; END;';

						erro = 'sproc SP_TRI_NFVITEM_SYNC_INSERT';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFVITEM_SYNC_INSERT ( pID_NFVENDA TYPE OF COLUMN TB_NFV_ITEM.ID_NFVENDA , pID_IDENTIFICADOR TYPE OF COLUMN TB_NFV_ITEM.ID_IDENTIFICADOR , pCFOP TYPE OF COLUMN TB_NFV_ITEM.CFOP , pNUM_ITEM TYPE OF COLUMN TB_NFV_ITEM.NUM_ITEM , pQTD_ITEM TYPE OF COLUMN TB_NFV_ITEM.QTD_ITEM , pUNI_MEDIDA TYPE OF COLUMN TB_NFV_ITEM.UNI_MEDIDA , pVLR_TOTAL TYPE OF COLUMN TB_NFV_ITEM.VLR_TOTAL , pVLR_DESC TYPE OF COLUMN TB_NFV_ITEM.VLR_DESC , pVLR_CUSTO TYPE OF COLUMN TB_NFV_ITEM.VLR_CUSTO , pPRC_LISTA TYPE OF COLUMN TB_NFV_ITEM.PRC_LISTA , pCF TYPE OF COLUMN TB_NFV_ITEM.CF , pVLR_FRETE TYPE OF COLUMN TB_NFV_ITEM.VLR_FRETE , pVLR_SEGURO TYPE OF COLUMN TB_NFV_ITEM.VLR_SEGURO , pVLR_DESPESA TYPE OF COLUMN TB_NFV_ITEM.VLR_DESPESA , pRET_PIS_COF_CSLL TYPE OF COLUMN TB_NFV_ITEM.RET_PIS_COF_CSLL , pRET_IRRF TYPE OF COLUMN TB_NFV_ITEM.RET_IRRF , pCOD_ENQ TYPE OF COLUMN TB_NFV_ITEM.COD_ENQ , pCOD_BASE TYPE OF COLUMN TB_NFV_ITEM.COD_BASE , pCSOSN TYPE OF COLUMN TB_NFV_ITEM.CSOSN , pNPED_COMPRA TYPE OF COLUMN TB_NFV_ITEM.NPED_COMPRA , pITEM_COMPRA TYPE OF COLUMN TB_NFV_ITEM.ITEM_COMPRA , pVLR_TOTTRIB TYPE OF COLUMN TB_NFV_ITEM.VLR_TOTTRIB , pFCI TYPE OF COLUMN TB_NFV_ITEM.FCI , pVLR_ICM_DESO TYPE OF COLUMN TB_NFV_ITEM.VLR_ICM_DESO , pID_MOTIVO_DESO TYPE OF COLUMN TB_NFV_ITEM.ID_MOTIVO_DESO , pEST_BX TYPE OF COLUMN TB_NFV_ITEM.EST_BX , pVLR_TRIB_FED TYPE OF COLUMN TB_NFV_ITEM.VLR_TRIB_FED , pVLR_TRIB_EST TYPE OF COLUMN TB_NFV_ITEM.VLR_TRIB_EST , pVLR_TRIB_MUN TYPE OF COLUMN TB_NFV_ITEM.VLR_TRIB_MUN , pINCLUIR_FATURA TYPE OF COLUMN TB_NFV_ITEM.INCLUIR_FATURA , pVLR_UNIT TYPE OF COLUMN TB_NFV_ITEM.VLR_UNIT , pVLR_RETENCAO TYPE OF COLUMN TB_NFV_ITEM.VLR_RETENCAO , pREFERENCIA TYPE OF COLUMN TB_NFV_ITEM.REFERENCIA ) RETURNS ( rnewIdNfvItem INTEGER ) AS DECLARE VARIABLE newIdNfvItem INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_TB_NFV_ITEM_ID FROM RDB$DATABASE INTO :newIdNfvItem ;  IF( :newIdNfvItem IS NULL ) THEN newIdNfvItem = 0; BEGIN INSERT INTO TB_NFV_ITEM ( ID_NFVITEM , ID_NFVENDA , ID_IDENTIFICADOR , CFOP , NUM_ITEM , QTD_ITEM , UNI_MEDIDA , VLR_TOTAL , VLR_DESC , VLR_CUSTO , PRC_LISTA , CF , VLR_FRETE , VLR_SEGURO , VLR_DESPESA , RET_PIS_COF_CSLL , RET_IRRF , COD_ENQ , COD_BASE , CSOSN , NPED_COMPRA , ITEM_COMPRA , VLR_TOTTRIB , FCI , VLR_ICM_DESO , ID_MOTIVO_DESO , EST_BX , VLR_TRIB_FED , VLR_TRIB_EST , VLR_TRIB_MUN , INCLUIR_FATURA , VLR_UNIT , VLR_RETENCAO , REFERENCIA  ) VALUES ( :newIdNfvItem , :pID_NFVENDA , :pID_IDENTIFICADOR , :pCFOP , :pNUM_ITEM , :pQTD_ITEM , :pUNI_MEDIDA , :pVLR_TOTAL , :pVLR_DESC , :pVLR_CUSTO , :pPRC_LISTA , :pCF , :pVLR_FRETE , :pVLR_SEGURO , :pVLR_DESPESA , :pRET_PIS_COF_CSLL , :pRET_IRRF , :pCOD_ENQ , :pCOD_BASE , :pCSOSN , :pNPED_COMPRA , :pITEM_COMPRA , :pVLR_TOTTRIB , :pFCI , :pVLR_ICM_DESO , :pID_MOTIVO_DESO , :pEST_BX , :pVLR_TRIB_FED , :pVLR_TRIB_EST , :pVLR_TRIB_MUN , :pINCLUIR_FATURA , :pVLR_UNIT , :pVLR_RETENCAO , :pREFERENCIA  ) ;  rnewIdNfvItem = newIdNfvItem; END END;';

						erro = 'sproc SP_TRI_CTAREC_GETBY_IDNFVENDA';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CTAREC_GETBY_IDNFVENDA ( pIdNfvenda INTEGER ) RETURNS ( ID_CTAREC INTEGER , DOCUMENTO VARCHAR(12) , HISTORICO VARCHAR(50) , DT_EMISSAO DATE , DT_VENCTO DATE , VLR_CTAREC TYPE OF COLUMN TRI_PDV_OPER.DIN , TIP_CTAREC CHAR(1) , ID_PORTADOR INTEGER , ID_CLIENTE INTEGER , INV_REFERENCIA VARCHAR(18) , DT_VENCTO_ORIG DATE , NSU_CARTAO VARCHAR(32) , ID_NUMPAG TYPE OF COLUMN TB_NFV_CTAREC.ID_NUMPAG ) AS BEGIN FOR SELECT COALESCE(a.ID_CTAREC, 0) , a.DOCUMENTO , a.HISTORICO , a.DT_EMISSAO , a.DT_VENCTO , a.VLR_CTAREC , a.TIP_CTAREC , a.ID_PORTADOR , a.ID_CLIENTE , a.INV_REFERENCIA , a.DT_VENCTO_ORIG , a.NSU_CARTAO , b.ID_NUMPAG FROM TB_CONTA_RECEBER a JOIN TB_NFV_CTAREC b ON a.ID_CTAREC = b.ID_CTAREC WHERE b.ID_NFVENDA =:pIdNfvenda INTO :ID_CTAREC , :DOCUMENTO , :HISTORICO , :DT_EMISSAO , :DT_VENCTO , :VLR_CTAREC , :TIP_CTAREC , :ID_PORTADOR , :ID_CLIENTE , :INV_REFERENCIA , :DT_VENCTO_ORIG , :NSU_CARTAO , :ID_NUMPAG DO SUSPEND ; END;';

						erro = 'sproc SP_TRI_NFVENDA_SETSYNCED';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFVENDA_SETSYNCED ( pIdNfvenda INTEGER , pSynced SMALLINT ) AS BEGIN UPDATE TB_NFVENDA SET SYNCED = :pSynced WHERE ID_NFVENDA = :pIdNfvenda ; END;';

						erro = 'sproc SP_TRI_CTAREC_GETBY_NFNUMSERIE';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CTAREC_GETBY_NFNUMSERIE ( pNF_NUMERO TYPE OF COLUMN TB_NFVENDA.NF_NUMERO , pNF_SERIE TYPE OF COLUMN TB_NFVENDA.NF_SERIE ) RETURNS ( ID_CTAREC INTEGER , DOCUMENTO VARCHAR(12) , HISTORICO VARCHAR(50) , DT_EMISSAO DATE , DT_VENCTO DATE , VLR_CTAREC TYPE OF COLUMN TRI_PDV_OPER.DIN , TIP_CTAREC CHAR(1) , ID_PORTADOR INTEGER , ID_CLIENTE INTEGER , INV_REFERENCIA VARCHAR(18) , DT_VENCTO_ORIG DATE , NSU_CARTAO VARCHAR(32) ) AS BEGIN FOR SELECT a.ID_CTAREC , a.DOCUMENTO , a.HISTORICO , a.DT_EMISSAO , a.DT_VENCTO , a.VLR_CTAREC , a.TIP_CTAREC , a.ID_PORTADOR , a.ID_CLIENTE , a.INV_REFERENCIA , a.DT_VENCTO_ORIG , a.NSU_CARTAO FROM TB_CONTA_RECEBER a JOIN TB_NFV_CTAREC b ON a.ID_CTAREC = b.ID_CTAREC JOIN TB_NFVENDA c ON c.ID_NFVENDA = b.ID_NFVENDA WHERE c.NF_NUMERO = :pNF_NUMERO AND c.NF_SERIE = :pNF_SERIE INTO :ID_CTAREC , :DOCUMENTO , :HISTORICO , :DT_EMISSAO , :DT_VENCTO , :VLR_CTAREC , :TIP_CTAREC , :ID_PORTADOR , :ID_CLIENTE , :INV_REFERENCIA , :DT_VENCTO_ORIG , :NSU_CARTAO DO SUSPEND ; END;';

						erro = 'sproc SP_TRI_NFV_CTAREC_SYNC_DEL';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFV_CTAREC_SYNC_DEL ( pNfNumero TYPE OF COLUMN TB_NFVENDA.NF_NUMERO , pNfSerie TYPE OF COLUMN TB_NFVENDA.NF_SERIE , pIdCtarec TYPE OF COLUMN TB_NFV_CTAREC.ID_CTAREC ) AS DECLARE VARIABLE idNfvenda TYPE OF COLUMN TB_NFVENDA.ID_NFVENDA; BEGIN SELECT ID_NFVENDA FROM TB_NFVENDA WHERE NF_NUMERO = :pNfNumero AND NF_SERIE = :pNfSerie AND NF_MODELO = 59 INTO :idNfvenda ; DELETE FROM TB_NFV_CTAREC WHERE ID_NFVENDA = :idNfvenda AND ID_CTAREC= :pIdCtarec ; END;';

						erro = 'sproc SP_TRI_NFV_UPDT_BYNFNUMSERIE';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFV_UPDT_BYNFNUMSERIE ( pID_NATOPE TYPE OF COLUMN TB_NFVENDA.ID_NATOPE , pID_VENDEDOR TYPE OF COLUMN TB_NFVENDA.ID_VENDEDOR , pID_CLIENTE TYPE OF COLUMN TB_NFVENDA.ID_CLIENTE , pNF_NUMERO TYPE OF COLUMN TB_NFVENDA.NF_NUMERO , pNF_SERIE TYPE OF COLUMN TB_NFVENDA.NF_SERIE , pNF_MODELO TYPE OF COLUMN TB_NFVENDA.NF_MODELO , pDT_EMISSAO TYPE OF COLUMN TB_NFVENDA.DT_EMISSAO , pDT_SAIDA TYPE OF COLUMN TB_NFVENDA.DT_SAIDA , pHR_SAIDA TYPE OF COLUMN TB_NFVENDA.HR_SAIDA , pESPECIE TYPE OF COLUMN TB_NFVENDA.ESPECIE , pTIPO_FRETE TYPE OF COLUMN TB_NFVENDA.TIPO_FRETE , pPES_LIQUID TYPE OF COLUMN TB_NFVENDA.PES_LIQUID , pPES_BRUTO TYPE OF COLUMN TB_NFVENDA.PES_BRUTO , pSTATUS TYPE OF COLUMN TB_NFVENDA.STATUS , pENT_SAI TYPE OF COLUMN TB_NFVENDA.ENT_SAI , pID_FMAPGTO TYPE OF COLUMN TB_NFVENDA.ID_FMAPGTO , pID_PARCELA TYPE OF COLUMN TB_NFVENDA.ID_PARCELA , pMARCA TYPE OF COLUMN TB_NFVENDA.MARCA , pQTD_VOLUM TYPE OF COLUMN TB_NFVENDA.QTD_VOLUM , pNUM_VOLUM TYPE OF COLUMN TB_NFVENDA.NUM_VOLUM , pPROD_REV TYPE OF COLUMN TB_NFVENDA.PROD_REV , pSOMA_FRETE TYPE OF COLUMN TB_NFVENDA.SOMA_FRETE , pVLR_TROCO TYPE OF COLUMN TB_NFVENDA.VLR_TROCO , pIND_PRES TYPE OF COLUMN TB_NFVENDA.IND_PRES , pIND_IE_DEST TYPE OF COLUMN TB_NFVENDA.IND_IE_DEST , pDESCONTO_CONDICIONAL TYPE OF COLUMN TB_NFVENDA.DESCONTO_CONDICIONAL , pINF_COMP_FIXA TYPE OF COLUMN TB_NFVENDA.INF_COMP_FIXA , pINF_COMP_EDIT TYPE OF COLUMN TB_NFVENDA.INF_COMP_EDIT , pENDERECO_ENTREGA TYPE OF COLUMN TB_NFVENDA.ENDERECO_ENTREGA , pENVIO_API TYPE OF COLUMN TB_NFVENDA.ENVIO_API , pSYNCED TYPE OF COLUMN TB_NFVENDA.SYNCED ) AS BEGIN UPDATE TB_NFVENDA SET ID_NATOPE =:pID_NATOPE , ID_VENDEDOR =:pID_VENDEDOR , ID_CLIENTE =:pID_CLIENTE , NF_MODELO =:pNF_MODELO , DT_EMISSAO =:pDT_EMISSAO , DT_SAIDA =:pDT_SAIDA , HR_SAIDA =:pHR_SAIDA , ESPECIE =:pESPECIE , TIPO_FRETE =:pTIPO_FRETE , PES_LIQUID =:pPES_LIQUID , PES_BRUTO =:pPES_BRUTO , STATUS =:pSTATUS , ENT_SAI =:pENT_SAI , ID_FMAPGTO =:pID_FMAPGTO , ID_PARCELA =:pID_PARCELA , MARCA =:pMARCA , QTD_VOLUM =:pQTD_VOLUM , NUM_VOLUM =:pNUM_VOLUM , PROD_REV =:pPROD_REV , SOMA_FRETE =:pSOMA_FRETE , VLR_TROCO =:pVLR_TROCO , IND_PRES =:pIND_PRES , IND_IE_DEST =:pIND_IE_DEST , DESCONTO_CONDICIONAL=:pDESCONTO_CONDICIONAL , INF_COMP_FIXA =:pINF_COMP_FIXA , INF_COMP_EDIT =:pINF_COMP_EDIT , ENDERECO_ENTREGA =:pENDERECO_ENTREGA , ENVIO_API =:pENVIO_API , SYNCED =:pSYNCED WHERE NF_NUMERO = :pNF_NUMERO and NF_SERIE = :pNF_SERIE ; END;';

						erro = 'sproc SP_TRI_SAT_GET_BY_IDNFV';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_SAT_GET_BY_IDNFV ( pIdNfvenda TYPE OF COLUMN TB_SAT.ID_NFVENDA ) RETURNS ( ID_REGISTRO TYPE OF COLUMN TB_SAT.ID_REGISTRO , ID_NFVENDA TYPE OF COLUMN TB_SAT.ID_NFVENDA , CHAVE TYPE OF COLUMN TB_SAT.CHAVE , DT_EMISSAO TYPE OF COLUMN TB_SAT.DT_EMISSAO , HR_EMISSAO TYPE OF COLUMN TB_SAT.HR_EMISSAO , STATUS TYPE OF COLUMN TB_SAT.STATUS , STATUS_DES TYPE OF COLUMN TB_SAT.STATUS_DES , NUMERO_CFE TYPE OF COLUMN TB_SAT.NUMERO_CFE , NUM_SERIE_SAT TYPE OF COLUMN TB_SAT.NUM_SERIE_SAT) AS BEGIN FOR SELECT a.ID_REGISTRO , a.ID_NFVENDA , a.CHAVE , a.DT_EMISSAO , a.HR_EMISSAO , a.STATUS , a.STATUS_DES , a.NUMERO_CFE , a.NUM_SERIE_SAT FROM TB_SAT a WHERE a.ID_NFVENDA =:pIdNfvenda INTO :ID_REGISTRO , :ID_NFVENDA , :CHAVE , :DT_EMISSAO , :HR_EMISSAO , :STATUS , :STATUS_DES , :NUMERO_CFE , :NUM_SERIE_SAT DO SUSPEND ; END;';

						erro = 'deu certo';

						SUSPEND;
						WHEN ANY DO
						BEGIN
						END
						END;</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="D_PROCEDURES8" Modifier="Public" Name="D_PROCEDURES8" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy20" UserSourceName="D_PROCEDURES8">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>CREATE OR ALTER PROCEDURE SP_TRI_PROCEDURES8
RETURNS
(
erro VARCHAR(64)
)
AS
BEGIN

erro = 'sproc SP_TRI_SAT_SYNC_INSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_SAT_SYNC_INSERT (pID_NFVENDA TYPE OF COLUMN TB_SAT.ID_NFVENDA, pCHAVE TYPE OF COLUMN TB_SAT.CHAVE, pDT_EMISSAO TYPE OF COLUMN TB_SAT.DT_EMISSAO, pHR_EMISSAO TYPE OF COLUMN TB_SAT.HR_EMISSAO, pSTATUS TYPE OF COLUMN TB_SAT.STATUS, pSTATUS_DES TYPE OF COLUMN TB_SAT.STATUS_DES, pNUMERO_CFE TYPE OF COLUMN TB_SAT.NUMERO_CFE, pNUM_SERIE_SAT TYPE OF COLUMN TB_SAT.NUM_SERIE_SAT) RETURNS (rnewIdRegistro TYPE OF COLUMN TB_SAT.ID_REGISTRO) AS DECLARE VARIABLE newIdRegistro TYPE OF COLUMN TB_SAT.ID_REGISTRO; BEGIN SELECT NEXT VALUE FOR gen_tb_sat_id FROM RDB$DATABASE INTO :newIdRegistro; IF(:newIdRegistro IS NULL) THEN newIdRegistro = 0; BEGIN INSERT INTO TB_SAT (ID_REGISTRO, ID_NFVENDA, CHAVE, DT_EMISSAO, HR_EMISSAO, STATUS, STATUS_DES, NUMERO_CFE, NUM_SERIE_SAT) VALUES (:newIdRegistro, :pID_NFVENDA, :pCHAVE, :pDT_EMISSAO, :pHR_EMISSAO, :pSTATUS, :pSTATUS_DES, :pNUMERO_CFE, :pNUM_SERIE_SAT); rnewIdRegistro = newIdRegistro; END END;';

erro = 'sproc SP_TRI_NFVITEMCOFINS_GET_BY_ID';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFVITEMCOFINS_GET_BY_ID (pIdNfvItem TYPE OF COLUMN TB_NFV_ITEM_COFINS.ID_NFVITEM) RETURNS (ID_NFVITEM TYPE OF COLUMN TB_NFV_ITEM_COFINS.ID_NFVITEM, POR_BC_COFINS TYPE OF COLUMN TB_NFV_ITEM_COFINS.POR_BC_COFINS, CST_COFINS TYPE OF COLUMN TB_NFV_ITEM_COFINS.CST_COFINS, ALIQ_COFINS TYPE OF COLUMN TB_NFV_ITEM_COFINS.ALIQ_COFINS, VLR_COFINS TYPE OF COLUMN TB_NFV_ITEM_COFINS.VLR_COFINS, VLR_BC_COFINS TYPE OF COLUMN TB_NFV_ITEM_COFINS.VLR_BC_COFINS) AS BEGIN FOR SELECT a.ID_NFVITEM, a.POR_BC_COFINS, a.CST_COFINS, a.ALIQ_COFINS, a.VLR_COFINS, a.VLR_BC_COFINS FROM TB_NFV_ITEM_COFINS a WHERE a.ID_NFVITEM =:pIdNfvItem INTO :ID_NFVITEM, :POR_BC_COFINS, :CST_COFINS, :ALIQ_COFINS, :VLR_COFINS, :VLR_BC_COFINS DO SUSPEND; END;';

erro = 'sproc SP_TRI_NFVITEMCOFINS_SYNCINSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFVITEMCOFINS_SYNCINSERT (pID_NFVITEM TYPE OF COLUMN TB_NFV_ITEM_COFINS.ID_NFVITEM, pPOR_BC_COFINS TYPE OF COLUMN TB_NFV_ITEM_COFINS.POR_BC_COFINS, pCST_COFINS TYPE OF COLUMN TB_NFV_ITEM_COFINS.CST_COFINS, pALIQ_COFINS TYPE OF COLUMN TB_NFV_ITEM_COFINS.ALIQ_COFINS, pVLR_COFINS TYPE OF COLUMN TB_NFV_ITEM_COFINS.VLR_COFINS, pVLR_BC_COFINS TYPE OF COLUMN TB_NFV_ITEM_COFINS.VLR_BC_COFINS) AS BEGIN INSERT INTO TB_NFV_ITEM_COFINS (ID_NFVITEM, POR_BC_COFINS, CST_COFINS, ALIQ_COFINS, VLR_COFINS, VLR_BC_COFINS) VALUES (:pID_NFVITEM, :pPOR_BC_COFINS, :pCST_COFINS, :pALIQ_COFINS, :pVLR_COFINS, :pVLR_BC_COFINS); END;';

erro = 'sproc SP_TRI_NFVITEMPIS_GET_BY_ID';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFVITEMPIS_GET_BY_ID (pIdNfvItem TYPE OF COLUMN TB_NFV_ITEM_PIS.ID_NFVITEM) RETURNS (ID_NFVITEM TYPE OF COLUMN TB_NFV_ITEM_PIS.ID_NFVITEM, POR_BC_PIS TYPE OF COLUMN TB_NFV_ITEM_PIS.POR_BC_PIS, CST_PIS TYPE OF COLUMN TB_NFV_ITEM_PIS.CST_PIS, ALIQ_PIS TYPE OF COLUMN TB_NFV_ITEM_PIS.ALIQ_PIS, VLR_PIS TYPE OF COLUMN TB_NFV_ITEM_PIS.VLR_PIS, VLR_BC_PIS TYPE OF COLUMN TB_NFV_ITEM_PIS.VLR_BC_PIS) AS BEGIN FOR SELECT a.ID_NFVITEM, a.POR_BC_PIS, a.CST_PIS, a.ALIQ_PIS, a.VLR_PIS, a.VLR_BC_PIS FROM TB_NFV_ITEM_PIS a WHERE a.ID_NFVITEM =:pIdNfvItem INTO :ID_NFVITEM, :POR_BC_PIS, :CST_PIS, :ALIQ_PIS, :VLR_PIS, :VLR_BC_PIS DO SUSPEND; END;';

erro = 'sproc SP_TRI_NFVITEMPIS_SYNCINSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFVITEMPIS_SYNCINSERT (pID_NFVITEM TYPE OF COLUMN TB_NFV_ITEM_PIS.ID_NFVITEM, pPOR_BC_PIS TYPE OF COLUMN TB_NFV_ITEM_PIS.POR_BC_PIS, pCST_PIS TYPE OF COLUMN TB_NFV_ITEM_PIS.CST_PIS, pALIQ_PIS TYPE OF COLUMN TB_NFV_ITEM_PIS.ALIQ_PIS, pVLR_PIS TYPE OF COLUMN TB_NFV_ITEM_PIS.VLR_PIS, pVLR_BC_PIS TYPE OF COLUMN TB_NFV_ITEM_PIS.VLR_BC_PIS) AS BEGIN INSERT INTO TB_NFV_ITEM_PIS (ID_NFVITEM, POR_BC_PIS, CST_PIS, ALIQ_PIS, VLR_PIS, VLR_BC_PIS) VALUES (:pID_NFVITEM, :pPOR_BC_PIS, :pCST_PIS, :pALIQ_PIS, :pVLR_PIS, :pVLR_BC_PIS); END;';

erro = 'sproc SP_TRI_NFVITEMICMS_GET_BY_ID';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFVITEMICMS_GET_BY_ID (pIdNfvItem TYPE OF COLUMN TB_NFV_ITEM_ICMS.ID_NFVITEM) RETURNS (ID_NFVITEM TYPE OF COLUMN TB_NFV_ITEM_ICMS.ID_NFVITEM, VLR_BC_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.VLR_BC_ICMS, POR_BC_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.POR_BC_ICMS, CST_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.CST_ICMS, ALIQ_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.ALIQ_ICMS, VLR_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.VLR_ICMS) AS BEGIN FOR SELECT a.ID_NFVITEM, a.VLR_BC_ICMS, a.POR_BC_ICMS, a.CST_ICMS, a.ALIQ_ICMS, a.VLR_ICMS FROM TB_NFV_ITEM_ICMS a WHERE a.ID_NFVITEM =:pIdNfvItem INTO :ID_NFVITEM, :VLR_BC_ICMS, :POR_BC_ICMS, :CST_ICMS, :ALIQ_ICMS, :VLR_ICMS DO SUSPEND; END;';

erro = 'sproc SP_TRI_NFVITEMICMS_SYNCINSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFVITEMICMS_SYNCINSERT (pID_NFVITEM TYPE OF COLUMN TB_NFV_ITEM_ICMS.ID_NFVITEM, pVLR_BC_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.VLR_BC_ICMS, pPOR_BC_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.POR_BC_ICMS, pCST_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.CST_ICMS, pALIQ_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.ALIQ_ICMS, pVLR_ICMS TYPE OF COLUMN TB_NFV_ITEM_ICMS.VLR_ICMS) AS BEGIN INSERT INTO TB_NFV_ITEM_ICMS (ID_NFVITEM, VLR_BC_ICMS, POR_BC_ICMS, CST_ICMS, ALIQ_ICMS, VLR_ICMS) VALUES (:pID_NFVITEM, :pVLR_BC_ICMS, :pPOR_BC_ICMS, :pCST_ICMS, :pALIQ_ICMS, :pVLR_ICMS); END;';

erro = 'sproc SP_TRI_NFVITEMST_GET_BY_ID';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFVITEMST_GET_BY_ID (pIdNfvItem TYPE OF COLUMN TB_NFV_ITEM_ST.ID_NFVITEM) RETURNS (ID_NFVITEM TYPE OF COLUMN TB_NFV_ITEM_ST.ID_NFVITEM, POR_BC_ICMS_ST TYPE OF COLUMN TB_NFV_ITEM_ST.POR_BC_ICMS_ST, VLR_BC_ICMS_ST TYPE OF COLUMN TB_NFV_ITEM_ST.VLR_BC_ICMS_ST, VLR_ST TYPE OF COLUMN TB_NFV_ITEM_ST.VLR_ST, MVA TYPE OF COLUMN TB_NFV_ITEM_ST.MVA, ALIQ_ST_ORIG TYPE OF COLUMN TB_NFV_ITEM_ST.ALIQ_ST_ORIG, ALIQ_ST_DEST TYPE OF COLUMN TB_NFV_ITEM_ST.ALIQ_ST_DEST, INFORMA_ST TYPE OF COLUMN TB_NFV_ITEM_ST.INFORMA_ST, ICMS_EFETIVO TYPE OF COLUMN TB_NFV_ITEM_ST.ICMS_EFETIVO, VLR_ICMS_SUBSTITUTO TYPE OF COLUMN TB_NFV_ITEM_ST.VLR_ICMS_SUBSTITUTO) AS BEGIN FOR SELECT a.ID_NFVITEM, a.POR_BC_ICMS_ST, a.VLR_BC_ICMS_ST, a.VLR_ST, a.MVA, a.ALIQ_ST_ORIG, a.ALIQ_ST_DEST, a.INFORMA_ST, a.ICMS_EFETIVO, a.VLR_ICMS_SUBSTITUTO FROM TB_NFV_ITEM_ST a WHERE a.ID_NFVITEM =:pIdNfvItem INTO :ID_NFVITEM, :POR_BC_ICMS_ST, :VLR_BC_ICMS_ST, :VLR_ST, :MVA, :ALIQ_ST_ORIG, :ALIQ_ST_DEST, :INFORMA_ST, :ICMS_EFETIVO, :VLR_ICMS_SUBSTITUTO DO SUSPEND; END;';

erro = 'sproc SP_TRI_NFVITEMST_SYNCINSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFVITEMST_SYNCINSERT (pID_NFVITEM TYPE OF COLUMN TB_NFV_ITEM_ST.ID_NFVITEM, pPOR_BC_ICMS_ST TYPE OF COLUMN TB_NFV_ITEM_ST.POR_BC_ICMS_ST, pVLR_BC_ICMS_ST TYPE OF COLUMN TB_NFV_ITEM_ST.VLR_BC_ICMS_ST, pVLR_ST TYPE OF COLUMN TB_NFV_ITEM_ST.VLR_ST, pMVA TYPE OF COLUMN TB_NFV_ITEM_ST.MVA, pALIQ_ST_ORIG TYPE OF COLUMN TB_NFV_ITEM_ST.ALIQ_ST_ORIG, pALIQ_ST_DEST TYPE OF COLUMN TB_NFV_ITEM_ST.ALIQ_ST_DEST, pINFORMA_ST TYPE OF COLUMN TB_NFV_ITEM_ST.INFORMA_ST, pICMS_EFETIVO TYPE OF COLUMN TB_NFV_ITEM_ST.ICMS_EFETIVO, pVLR_ICMS_SUBSTITUTO TYPE OF COLUMN TB_NFV_ITEM_ST.VLR_ICMS_SUBSTITUTO) AS BEGIN INSERT INTO TB_NFV_ITEM_ST (ID_NFVITEM, POR_BC_ICMS_ST, VLR_BC_ICMS_ST, VLR_ST, MVA, ALIQ_ST_ORIG, ALIQ_ST_DEST, INFORMA_ST, ICMS_EFETIVO, VLR_ICMS_SUBSTITUTO) VALUES (:pID_NFVITEM, :pPOR_BC_ICMS_ST, :pVLR_BC_ICMS_ST, :pVLR_ST, :pMVA, :pALIQ_ST_ORIG, :pALIQ_ST_DEST, :pINFORMA_ST, :pICMS_EFETIVO, :pVLR_ICMS_SUBSTITUTO); END;';

erro = 'sproc SP_TRI_SAT_CANC_GET_BY_IDREG';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_SAT_CANC_GET_BY_IDREG (pID_REGISTRO TYPE OF COLUMN TB_SAT_CANC.ID_REGISTRO) RETURNS (ID_CANCELA TYPE OF COLUMN TB_SAT_CANC.ID_CANCELA, ID_REGISTRO TYPE OF COLUMN TB_SAT_CANC.ID_REGISTRO, DT_EMISSAO TYPE OF COLUMN TB_SAT_CANC.DT_EMISSAO, HR_EMISSAO TYPE OF COLUMN TB_SAT_CANC.HR_EMISSAO, NUMERO_CFE TYPE OF COLUMN TB_SAT_CANC.NUMERO_CFE, CHAVE TYPE OF COLUMN TB_SAT_CANC.CHAVE, NUM_SERIE_SAT TYPE OF COLUMN TB_SAT_CANC.NUM_SERIE_SAT, ENVIO_API TYPE OF COLUMN TB_SAT_CANC.ENVIO_API) AS BEGIN FOR SELECT a.ID_CANCELA, a.ID_REGISTRO, a.DT_EMISSAO, a.HR_EMISSAO, a.NUMERO_CFE, a.CHAVE, a.NUM_SERIE_SAT, a.ENVIO_API FROM TB_SAT_CANC a WHERE a.ID_REGISTRO =:pID_REGISTRO INTO :ID_CANCELA, :ID_REGISTRO, :DT_EMISSAO, :HR_EMISSAO, :NUMERO_CFE, :CHAVE, :NUM_SERIE_SAT, :ENVIO_API DO SUSPEND; END;';

erro = 'sproc SP_TRI_SAT_CANC_SYNC_INSERT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_SAT_CANC_SYNC_INSERT (pID_REGISTRO TYPE OF COLUMN TB_SAT_CANC.ID_REGISTRO, pDT_EMISSAO TYPE OF COLUMN TB_SAT_CANC.DT_EMISSAO, pHR_EMISSAO TYPE OF COLUMN TB_SAT_CANC.HR_EMISSAO, pNUMERO_CFE TYPE OF COLUMN TB_SAT_CANC.NUMERO_CFE, pCHAVE TYPE OF COLUMN TB_SAT_CANC.CHAVE, pNUM_SERIE_SAT TYPE OF COLUMN TB_SAT_CANC.NUM_SERIE_SAT, pENVIO_API TYPE OF COLUMN TB_SAT_CANC.ENVIO_API) RETURNS (rnewIdCancela TYPE OF COLUMN TB_SAT_CANC.ID_CANCELA) AS DECLARE VARIABLE newIdCancela TYPE OF COLUMN TB_SAT_CANC.ID_CANCELA; BEGIN SELECT NEXT VALUE FOR GEN_TB_SAT_CANC_ID FROM RDB$DATABASE INTO :newIdCancela; IF(:newIdCancela IS NULL) THEN newIdCancela = 0; BEGIN INSERT INTO TB_SAT_CANC (ID_CANCELA, ID_REGISTRO, DT_EMISSAO, HR_EMISSAO, NUMERO_CFE, CHAVE, NUM_SERIE_SAT, ENVIO_API) VALUES (:newIdCancela, :pID_REGISTRO, :pDT_EMISSAO, :pHR_EMISSAO, :pNUMERO_CFE, :pCHAVE, :pNUM_SERIE_SAT, :pENVIO_API); rnewIdCancela = newIdCancela; END END;';

erro = 'sproc SP_TRI_SAT_UPSERT_BY_CHAVE';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_SAT_UPSERT_BY_CHAVE (pNF_NUMERO TYPE OF COLUMN TB_NFVENDA.NF_NUMERO, pNF_SERIE TYPE OF COLUMN TB_NFVENDA.NF_SERIE, pCHAVE TYPE OF COLUMN TB_SAT.CHAVE, pDT_EMISSAO TYPE OF COLUMN TB_SAT.DT_EMISSAO, pHR_EMISSAO TYPE OF COLUMN TB_SAT.HR_EMISSAO, pSTATUS TYPE OF COLUMN TB_SAT.STATUS, pSTATUS_DES TYPE OF COLUMN TB_SAT.STATUS_DES, pNUMERO_CFE TYPE OF COLUMN TB_SAT.NUMERO_CFE, pNUM_SERIE_SAT TYPE OF COLUMN TB_SAT.NUM_SERIE_SAT) RETURNS (rRowsAffected INTEGER) AS DECLARE vID_REGISTRO TYPE OF COLUMN TB_SAT.ID_REGISTRO; DECLARE vID_NFVENDA TYPE OF COLUMN TB_NFVENDA.ID_NFVENDA; BEGIN SELECT ID_REGISTRO FROM TB_SAT WHERE CHAVE = :pCHAVE INTO :vID_REGISTRO; SELECT ID_NFVENDA FROM TB_NFVENDA WHERE NF_NUMERO = :pNF_NUMERO AND NF_SERIE = :pNF_SERIE AND NF_MODELO = ''59'' INTO :vID_NFVENDA; IF (:vID_REGISTRO IS NULL) THEN BEGIN vID_REGISTRO = 0; END UPDATE OR INSERT INTO TB_SAT (ID_REGISTRO, ID_NFVENDA, CHAVE, DT_EMISSAO, HR_EMISSAO, STATUS, STATUS_DES, NUMERO_CFE, NUM_SERIE_SAT) VALUES (:vID_REGISTRO, :vID_NFVENDA, :pCHAVE, :pDT_EMISSAO, :pHR_EMISSAO, :pSTATUS, :pSTATUS_DES, :pNUMERO_CFE, :pNUM_SERIE_SAT) MATCHING (ID_REGISTRO); rRowsAffected = ROW_COUNT; END;';

erro = 'sproc SP_TRI_SATCANC_UPSERT_BY_CHAVE';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_SATCANC_UPSERT_BY_CHAVE (pCHAVE_SAT TYPE OF COLUMN TB_SAT.CHAVE, pDT_EMISSAO TYPE OF COLUMN TB_SAT_CANC.DT_EMISSAO, pHR_EMISSAO TYPE OF COLUMN TB_SAT_CANC.HR_EMISSAO, pNUMERO_CFE TYPE OF COLUMN TB_SAT_CANC.NUMERO_CFE, pCHAVE TYPE OF COLUMN TB_SAT_CANC.CHAVE, pNUM_SERIE_SAT TYPE OF COLUMN TB_SAT_CANC.NUM_SERIE_SAT, pENVIO_API TYPE OF COLUMN TB_SAT_CANC.ENVIO_API) RETURNS (rRowsAffected INTEGER) AS DECLARE vID_REGISTRO TYPE OF COLUMN TB_SAT.ID_REGISTRO; DECLARE vID_CANCELA TYPE OF COLUMN TB_SAT_CANC.ID_CANCELA; BEGIN SELECT ID_REGISTRO FROM TB_SAT WHERE CHAVE = :pCHAVE_SAT INTO :vID_REGISTRO; SELECT ID_CANCELA FROM TB_SAT_CANC WHERE CHAVE = :pCHAVE INTO :vID_CANCELA; IF (:vID_CANCELA IS NULL) THEN BEGIN vID_CANCELA = 0; END UPDATE OR INSERT INTO TB_SAT_CANC (ID_CANCELA, ID_REGISTRO, DT_EMISSAO, HR_EMISSAO, NUMERO_CFE, CHAVE, NUM_SERIE_SAT, ENVIO_API) VALUES (:vID_CANCELA, :vID_REGISTRO, :pDT_EMISSAO, :pHR_EMISSAO, :pNUMERO_CFE, :pCHAVE, :pNUM_SERIE_SAT, :pENVIO_API) MATCHING (ID_CANCELA); rRowsAffected = ROW_COUNT; END;';

erro = 'sproc SP_TRI_GRAVANFVENDA';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_GRAVANFVENDA (PID_VENDEDOR SMALLINT, PNF_SERIE VARCHAR(3), PDT_SAIDA DATE, PHR_SAIDA TIME, PID_FMAPGTO SMALLINT, PVLR_TROCO TYPE OF COLUMN TB_NFVENDA.VLR_TROCO, PNCFE INTEGER) RETURNS (RNF_NUMERO TYPE OF COLUMN TB_NFVENDA.NF_NUMERO, rID_NFVENDA INTEGER) AS BEGIN SELECT NEXT VALUE FOR GEN_TB_NFVENDA_ID FROM RDB$DATABASE INTO :rID_NFVENDA; IF (:pNCFE = -1) THEN SELECT MAX(NF_NUMERO)+1 FROM TB_NFVENDA WHERE NF_MODELO = ''59'' AND NF_SERIE = :PNF_SERIE INTO :rNF_NUMERO; ELSE rNF_NUMERO = :pNCFE; IF (:rNF_NUMERO IS NULL) THEN rNF_NUMERO = 0; INSERT INTO TB_NFVENDA (ID_NFVENDA, ID_NATOPE, ID_VENDEDOR, ID_CLIENTE, NF_NUMERO, NF_SERIE, NF_MODELO, DT_EMISSAO, DT_SAIDA, HR_SAIDA, ESPECIE, TIPO_FRETE, PES_LIQUID, PES_BRUTO, STATUS, ENT_SAI, ID_FMAPGTO, ID_PARCELA, MARCA, QTD_VOLUM, NUM_VOLUM, PROD_REV, SOMA_FRETE, VLR_TROCO, IND_PRES, IND_IE_DEST, DESCONTO_CONDICIONAL, INF_COMP_FIXA, INF_COMP_EDIT, ENDERECO_ENTREGA, ENVIO_API) VALUES (:rID_NFVENDA, 2, :pID_VENDEDOR, 0, :rNF_NUMERO, :pNF_SERIE, ''59'', CURRENT_DATE, :pDT_SAIDA, :pHR_SAIDA, NULL, ''9'', 0, 0, ''E'', ''1'', :pID_FMAPGTO, 2, NULL, 0, NULL, ''N'', ''N'', :pVLR_TROCO, NULL, NULL, ''S'', NULL, NULL, ''N'', NULL); SUSPEND; END';

erro = 'sproc SP_TRI_GRAVANFVITEM';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_GRAVANFVITEM (PID_NFVENDA INTEGER, PID_IDENTIFICADOR INTEGER, PNUM_ITEM SMALLINT, PQTD_ITEM TYPE OF COLUMN TB_NFV_ITEM.QTD_ITEM, PVLR_DESC TYPE OF COLUMN TB_NFV_ITEM.VLR_DESC, PCSOSN VARCHAR(3), PVLR_TRIB_FED TYPE OF COLUMN TB_NFV_ITEM.VLR_TRIB_FED, PVLR_TRIB_EST TYPE OF COLUMN TB_NFV_ITEM.VLR_TRIB_EST, PVLR_UNIT TYPE OF COLUMN TB_NFV_ITEM.VLR_UNIT) RETURNS (RID_NFVITEM INTEGER) AS DECLARE VARIABLE vCFOP TYPE OF COLUMN TB_NFV_ITEM.CFOP; DECLARE VARIABLE vUNI_MEDIDA TYPE OF COLUMN TB_NFV_ITEM.UNI_MEDIDA; DECLARE VARIABLE vPRC_CUSTO TYPE OF COLUMN TB_NFV_ITEM.VLR_CUSTO; BEGIN SELECT NEXT VALUE FOR GEN_TB_NFV_ITEM_ID FROM RDB$DATABASE INTO :rID_NFVITEM; SELECT COALESCE (A.CFOP, ''5102''), A.UNI_MEDIDA, A.PRC_CUSTO FROM TB_ESTOQUE A JOIN TB_EST_IDENTIFICADOR B ON A.ID_ESTOQUE = B.ID_ESTOQUE WHERE B.ID_IDENTIFICADOR = :pID_IDENTIFICADOR INTO :vCFOP, :vUNI_MEDIDA, :vPRC_CUSTO; INSERT INTO TB_NFV_ITEM (ID_NFVITEM, ID_NFVENDA, ID_IDENTIFICADOR, CFOP, NUM_ITEM, QTD_ITEM, UNI_MEDIDA, VLR_TOTAL, VLR_DESC, VLR_CUSTO, PRC_LISTA, CF, VLR_FRETE, VLR_SEGURO, VLR_DESPESA, RET_PIS_COF_CSLL, RET_IRRF, COD_ENQ, COD_BASE, CSOSN, NPED_COMPRA, ITEM_COMPRA, VLR_TOTTRIB, FCI, VLR_ICM_DESO, ID_MOTIVO_DESO, EST_BX, VLR_TRIB_FED, VLR_TRIB_EST, VLR_TRIB_MUN, INCLUIR_FATURA, VLR_UNIT, VLR_RETENCAO) VALUES (:rID_NFVITEM, :pID_NFVENDA, :pID_IDENTIFICADOR, :vCFOP, :pNUM_ITEM, :pQTD_ITEM, :vUNI_MEDIDA, (:pVLR_UNIT * :pQTD_ITEM), :pVLR_DESC, :vPRC_CUSTO, 0, NULL, 0, 0, 0, 0, 0, NULL, NULL, :pCSOSN, NULL, 0, (:pVLR_TRIB_FED + :pVLR_TRIB_EST), NULL, NULL, NULL, ''S'', :pVLR_TRIB_FED, :pVLR_TRIB_EST, 0, ''S'', :pVLR_UNIT, 0); SUSPEND; END';

erro = 'sproc SP_TRI_GRAVASAT';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_GRAVASAT (PID_NFVENDA INTEGER, PCHAVE VARCHAR(44), PNUMERO_CFE INTEGER, PNUM_SERIE_SAT VARCHAR(9)) RETURNS (RID_REGISTRO INTEGER) AS DECLARE VARIABLE vDT_EMISSAO TYPE OF COLUMN TB_SAT.DT_EMISSAO; DECLARE VARIABLE vHR_EMISSAO TYPE OF COLUMN TB_SAT.HR_EMISSAO; BEGIN SELECT DT_SAIDA, HR_SAIDA FROM TB_NFVENDA WHERE ID_NFVENDA = :pID_NFVENDA INTO :vDT_EMISSAO, :vHR_EMISSAO; SELECT NEXT VALUE FOR GEN_TB_SAT_ID FROM RDB$DATABASE INTO :rID_REGISTRO; INSERT INTO TB_SAT (ID_REGISTRO, ID_NFVENDA, CHAVE, DT_EMISSAO, HR_EMISSAO, STATUS, STATUS_DES, NUMERO_CFE, NUM_SERIE_SAT) VALUES (:rID_REGISTRO, :pID_NFVENDA, :pCHAVE, :vDT_EMISSAO, :vHR_EMISSAO, ''06000'', ''Emitido com sucesso + conteúdo notas'', :pNUMERO_CFE, :pNUM_SERIE_SAT); SUSPEND; END';

erro = 'sproc SP_TRI_ATUALIZANFVENDA';
execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_ATUALIZANFVENDA (pID_NFVENDA INTEGER, PID_CLIENTE INTEGER) AS BEGIN UPDATE TB_NFVENDA SET STATUS = ''I'', ID_CLIENTE = :PID_CLIENTE WHERE ID_NFVENDA = :pID_NFVENDA; END';

erro = 'sproc V_TRI_CUPONSCANCELAVEIS';
execute statement 'RECREATE VIEW V_TRI_CUPONSCANCELAVEIS (VALOR_TOTAL, TS_VENDA, CHAVE, NF_SERIE, ID_NFVENDA, ID_REGISTRO) AS SELECT B.TOT_NF, CAST(A.DT_SAIDA || '' '' || A.HR_SAIDA AS TIMESTAMP), COALESCE(C.CHAVE, ''BETERRABA''), A.NF_SERIE, A.ID_NFVENDA, COALESCE(C.ID_REGISTRO, -1) FROM TB_NFVENDA A JOIN TB_NFVENDA_TOT B ON A.ID_NFVENDA = B.ID_NFVENDA LEFT JOIN TB_SAT C ON A.ID_NFVENDA = C.ID_NFVENDA WHERE (DATEDIFF(MINUTE FROM CAST(A.DT_SAIDA || '' '' || A.HR_SAIDA AS TIMESTAMP) TO CURRENT_TIMESTAMP) &lt; 30) AND A.STATUS = ''I''';

						erro = 'sproc SP_TRI_CONTANFVPAGTO';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_CONTANFVPAGTO (PNF_SERIE VARCHAR(3), PTS_ABERTURA TIMESTAMP, PTS_FECHAMENTO TIMESTAMP, PSTATUS CHAR(1) = ''I'') RETURNS (RCOUNT_FMANCE INTEGER,	RID_FMANCFE INTEGER) AS BEGIN FOR SELECT COUNT(A.ID_FMANFCE), A.ID_FMANFCE FROM TB_NFVENDA_FMAPAGTO_NFCE A JOIN TB_NFVENDA B ON A.ID_NFVENDA = B.ID_NFVENDA WHERE B.NF_SERIE = :pNF_SERIE AND CAST ((B.DT_SAIDA || '' '' || B.HR_SAIDA) AS TIMESTAMP) BETWEEN :pTS_ABERTURA AND :pTS_FECHAMENTO AND B.STATUS = :PSTATUS GROUP BY A.ID_FMANFCE INTO :rCOUNT_FMANCE, :rID_FMANCFE DO SUSPEND; END';

						erro = 'sproc SP_TRI_NFVCTAREC';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFVCTAREC (pID_NFVENDA INTEGER, pDT_VENCIMENTO DATE, pDESCRICAO VARCHAR(50), pID_CLIENTE INTEGER, pID_NUMPAG INTEGER) RETURNS (rID_CTAREC INTEGER) AS DECLARE VARIABLE vNF_SERIE TYPE OF COLUMN TB_NFVENDA.NF_SERIE; DECLARE VARIABLE vNF_NUMERO TYPE OF COLUMN TB_NFVENDA.NF_NUMERO; DECLARE VARIABLE vVALOR TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.VLR_PAGTO; BEGIN SELECT NEXT VALUE FOR GEN_TB_CTAREC_ID FROM RDB$DATABASE INTO :rID_CTAREC; SELECT NF_SERIE, NF_NUMERO FROM TB_NFVENDA WHERE ID_NFVENDA = :pID_NFVENDA INTO :vNF_SERIE, :vNF_NUMERO; SELECT VLR_PAGTO FROM TB_NFVENDA_FMAPAGTO_NFCE WHERE ID_NUMPAG = :pID_NUMPAG INTO :vVALOR; INSERT INTO TB_CONTA_RECEBER (ID_CTAREC, DOCUMENTO, HISTORICO, DT_EMISSAO, DT_VENCTO, VLR_CTAREC, TIP_CTAREC, ID_PORTADOR, ID_CLIENTE, INV_REFERENCIA) VALUES (:rID_CTAREC, (CAST(:vNF_SERIE AS VARCHAR(12)) || ''-'' || CAST(:vNF_NUMERO AS VARCHAR(12))), :pDESCRICAO, CURRENT_DATE, :pDT_VENCIMENTO, :vVALOR, ''C'', 1, :pID_CLIENTE, ''D'' || LPAD(:rID_CTAREC,7,''0'') || LPAD(:vNF_SERIE, 2, ''0'') || ''X'' || LPAD(:vNF_NUMERO, 7, ''0'')); INSERT INTO TB_NFV_CTAREC (ID_NFVENDA, ID_CTAREC, ID_NUMPAG) VALUES (:pID_NFVENDA, :rID_CTAREC, :pID_NUMPAG); SUSPEND; END';

						erro = 'sproc SP_TRI_LANCAMOVDIARIO';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_LANCAMOVDIARIO (NUMCAIXA VARCHAR(60), VALOR NUMERIC(18,4), DESCRICAO_MOV VARCHAR(60), CONTA_ORIGEM SMALLINT, CONTA_DESTINO SMALLINT) RETURNS (ID_MOVTO INTEGER) AS DECLARE VARIABLE ultimo_mov INTEGER; BEGIN SELECT NEXT VALUE FOR GEN_TB_MOVDIARIO_ID FROM RDB$DATABASE INTO :ID_MOVTO; INSERT INTO TB_MOVDIARIO (ID_MOVTO, DT_MOVTO, HR_MOVTO, HISTORICO, TIP_MOVTO, VLR_MOVTO, ID_CTAPLA) VALUES ((SELECT NEXT VALUE FOR GEN_TB_MOVDIARIO_ID FROM RDB$DATABASE), CURRENT_DATE, CURRENT_TIME, :DESCRICAO_MOV, ''C'', :VALOR, :CONTA_ORIGEM); INSERT INTO TB_MOVDIARIO (ID_MOVTO, DT_MOVTO, HR_MOVTO, HISTORICO, TIP_MOVTO, VLR_MOVTO, ID_CTAPLA) VALUES (:ID_MOVTO, CURRENT_DATE, CURRENT_TIME, :DESCRICAO_MOV, ''D'', :VALOR, :CONTA_DESTINO); SUSPEND; END';

						erro = 'sproc SP_TRI_NFVFMAPGTO_INSERT';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_NFVFMAPGTO_INSERT (PVALOR TYPE OF COLUMN TB_NFVENDA_FMAPAGTO_NFCE.VLR_PAGTO, PID_NFVENDA INTEGER, PID_FMANFCE INTEGER, PID_PARCELA INTEGER, PID_ADMINISTRADORA INTEGER) RETURNS (RID_FMAPAGTO INTEGER) AS BEGIN SELECT NEXT VALUE FOR gen_tb_nfvenda_fmapagto_nfce_id FROM RDB$DATABASE INTO :rID_FMAPAGTO; INSERT INTO TB_NFVENDA_FMAPAGTO_NFCE (ID_NUMPAG, VLR_PAGTO, ID_NFVENDA, ID_FMANFCE, ID_PARCELA) VALUES (:rID_FMAPAGTO, :pVALOR, :pID_NFVENDA, :pID_FMANFCE, :pID_PARCELA); INSERT INTO TB_NFCE_BANDEIRA (ID_NUMPAG, ID_BANDEIRA, ID_ADMINISTRADORA, NUM_AUT, FORMA_ENVIO, SICLOS_ID, STONE_ID, PRE_TRANSACAO_ID, POS_SERIAL) VALUES (:rID_FMAPAGTO, NULL, :pID_ADMINISTRADORA, NULL, NULL, NULL, NULL, NULL, NULL); END';

						erro = 'sproc SP_TRI_WHATSINSERE';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_WHATSINSERE (PNUMERO VARCHAR(100), PMENSAGEM BLOB SUB_TYPE TEXT, PDATA TIMESTAMP, PENVIADA VARCHAR(100), PCNPJ VARCHAR(50)) AS BEGIN INSERT INTO TRI_PDV_WHATS (NUMERO, MENSAGEM, DATAENVIO, ENVIADA,CNPJ) VALUES (:PNUMERO, :PMENSAGEM,:PDATA,:PENVIADA,:PCNPJ); END';

						erro = 'sproc SP_TRI_RENDIMENTO_SOMA';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_RENDIMENTO_SOMA (PDATA_INICIAL TIMESTAMP, PDATA_FINAL TIMESTAMP, CAIXA VARCHAR(3)) RETURNS (RSOMA DECIMAL(18,4), RDESCRICAO VARCHAR(30)) AS BEGIN FOR SELECT SUM(tni.VLR_TOTAL - tni.VLR_DESC),tetis.DESCRICAO FROM TB_NFV_ITEM tni JOIN TB_NFVENDA tn ON tni.ID_NFVENDA = tn.ID_NFVENDA JOIN TB_EST_IDENTIFICADOR tei ON tni.ID_IDENTIFICADOR = tei.ID_IDENTIFICADOR JOIN TB_ESTOQUE te ON tei.ID_ESTOQUE = te.ID_ESTOQUE JOIN TB_EST_TIPO_ITEM_SIS tetis ON te.ID_TIPOITEM = tetis.ID_TIPOITEM WHERE (tn.NF_SERIE = ''N''||:CAIXA OR tn.NF_SERIE = :CAIXA) AND tn.NF_MODELO = ''59'' AND tn.STATUS = ''I'' AND CAST ((tn.DT_SAIDA || '' '' || tn.HR_SAIDA) AS TIMESTAMP) BETWEEN :PDATA_INICIAL AND :PDATA_FINAL GROUP BY tetis.DESCRICAO INTO :RSOMA, :RDESCRICAO DO BEGIN SUSPEND; END END';

						erro = 'sproc SP_TRI_PROMOCOES_UPSERT';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_PROMOCOES_UPSERT (PID INTEGER, PQTD NUMERIC(15,2), PTIPO VARCHAR(20), PDET NUMERIC(15,2), PLIMITE INTEGER, PINICIO DATE, PFIM DATE, P_REJEITADA INTEGER, PSCANNTECH INTEGER, P_EXECUTA CHAR(1)) RETURNS ( RROWSAFFECTED INTEGER ) AS BEGIN IF(:P_EXECUTA = ''U'' OR :P_EXECUTA = ''I'') THEN  BEGIN UPDATE OR INSERT INTO TB_PROMOCOES (ID , QTD , TIPO , DET , LIMITE , INICIO , FIM , REJEITADA , SCANNTECH) VALUES (:PID , :PQTD , :PTIPO , :PDET , :PLIMITE , :PINICIO , :PFIM , :P_REJEITADA , :PSCANNTECH) ; END IF(:P_EXECUTA = ''D'') THEN BEGIN DELETE FROM TB_PROMOCOES WHERE ID = :PID; END rRowsAffected = ROW_COUNT; END';

						erro = 'sproc SP_TRI_PROMOCOES_ITENS_UPSERT';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_PROMOCOES_ITENS_UPSERT (PID INTEGER, PIDPROMOCAO INTEGER, PPRODUTONOME VARCHAR(150), PCODIGOBARRAS VARCHAR(18), P_EXECUTA CHAR(1)) RETURNS ( RROWSAFFECTED INTEGER ) AS BEGIN IF(:P_EXECUTA = ''U'' OR :P_EXECUTA = ''I'') THEN  BEGIN UPDATE OR INSERT INTO TB_PROMOCOES_ITENS (ID , IDPROMOCAO , PRODUTONOME , CODIGOBARRAS) VALUES (:PID , :PIDPROMOCAO , :PPRODUTONOME , :PCODIGOBARRAS) ; END IF(:P_EXECUTA = ''D'') THEN BEGIN DELETE FROM TB_PROMOCOES_ITENS WHERE ID = :PID; END rRowsAffected = ROW_COUNT; END';

						erro = 'sproc SP_TRI_OBTEMPROMOSCANNTECH';
						execute statement 'CREATE OR ALTER PROCEDURE SP_TRI_OBTEMPROMOSCANNTECH (ID_SCANNTECH INTEGER) RETURNS ( QTD NUMERIC(15,2), TIPO VARCHAR(20), DET NUMERIC(15,2), LIMITE INTEGER ) AS DECLARE VARIABLE VEXISTE_PROMO INTEGER; BEGIN SELECT COUNT(1) FROM TB_PROMOCOES TP INNER JOIN TB_PROMOCOES_ITENS TPI ON TPI.IDPROMOCAO = TP.ID  WHERE CURRENT_DATE BETWEEN TP.INICIO AND TP.FIM  AND TP.ID = :ID_SCANNTECH AND TP.REJEITADA = 0 INTO VEXISTE_PROMO; IF(VEXISTE_PROMO &gt; 0) THEN BEGIN FOR SELECT FIRST (1) TP.QTD, TP.TIPO, TP.DET, TP.LIMITE FROM TB_PROMOCOES TP INNER JOIN TB_PROMOCOES_ITENS TPI ON TPI.IDPROMOCAO = TP.ID  WHERE (TP.ID = :ID_SCANNTECH) INTO :QTD, :TIPO, :DET, :LIMITE DO SUSPEND; END END';

						erro = 'deu certo';

						SUSPEND;
						WHEN ANY DO
						BEGIN
						END
						END;</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="E_ULTIMOPASSO" Modifier="Public" Name="E_ULTIMOPASSO" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy21" UserSourceName="E_ULTIMOPASSO">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>UPDATE OR INSERT INTO TRI_PDV_SETUP (ID_DUMMY, EXECUCAO, VERSAO, ULTIMA_AT, DT_INSTALACAO) VALUES (1, 100, ''0.0.0.0'', ''2000-01-01'', ''2000-01-01'') MATCHING(ID_DUMMY);</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_CONFIG_GETBY_CAIXA&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="FillByCaixa" Modifier="Public" Name="FillByCaixa" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy22" UserSourceName="FillByCaixa">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_CONFIG_GETBY_CAIXA"</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="PNO_CAIXA" Precision="0" Scale="0" Size="2" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="TRI_PDV_CONFIG" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="FillById" GenerateMethods="Fill" GenerateShortCommands="true" GeneratorSourceName="FillById" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy23" UserSourceName="FillById">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>SELECT ACFILLDELAY, ACFILLMODE, ACFILLPREFIX, ACREFERENCIA, BALBAUD, BALBITS, BALMODELO, BALPARITY, BALPORTA, BLOQUEIA_NO_LIMITE, CSOSN_CONT, ECF_ATIVA, ECF_PORTA, EXIGE_SANGRIA, ICMS_CONT, ID_MAC, IMPRESSORA_USB, IMPRESSORA_USB_PED, INFORMA_MAQUININHA, INTERROMPE_NAO_ENCONTRADO, LAYOUT_SAT, MENSAGEM_CORTESIA, MENSAGEM_RODAPE, MODELO_CUPOM, MODELO_SAT, NO_CAIXA, PEDE_CPF, PERGUNTA_WHATS, PERMITE_ESTOQUE_NEGATIVO, PERMITE_FOLGA_SANGRIA, SATLIFESIGNINTERVAL, SATSERVIDOR, SATSERVTIMEOUT, SAT_CODATIV, SAT_USADO, SIGN_AC, SYSCOMISSAO, SYSEMITECOMPROVANTE, SYSPARCELA, SYSPERGUNTAWHATS, TEFIP, TEFNUMLOJA, TEFNUMTERMINAL, TEFPEDECPFPELOPINPAD, TRI_PDV_DT_UPD, USATEF, VALOR_DE_FOLGA, VALOR_MAX_CAIXA FROM TRI_PDV_CONFIG WHERE (ID_MAC = @param)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="param" ColumnName="ID_MAC" DataSourceName="TRI_PDV_CONFIG" DataTypeServer="DbType.String(12)" DbType="String" Direction="Input" ParameterName="@param" Precision="0" Scale="0" Size="12" SourceColumn="ID_MAC" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_CONFIG_GETBY_MAC&quot;" DbObjectType="StoredProcedure" FillMethodModifier="Public" FillMethodName="FillByMacAdress" GenerateMethods="Fill" GenerateShortCommands="true" GeneratorSourceName="FillByMacAdress" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy24" UserSourceName="FillByMacAdress">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_CONFIG_GETBY_MAC"</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PID_MAC" Precision="0" Scale="0" Size="12" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_CONFIG_GETBY_DTUPD_NCAI&quot;" DbObjectType="StoredProcedure" FillMethodModifier="Public" FillMethodName="FillByUpdateDate" GenerateMethods="Fill" GenerateShortCommands="true" GeneratorSourceName="FillByUpdateDate" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy25" UserSourceName="FillByUpdateDate">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_CONFIG_GETBY_DTUPD_NCAI"</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="DateTime" Direction="Input" ParameterName="PULTIMASYNC" Precision="0" Scale="0" Size="8" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="PNOCAIXA" Precision="0" Scale="0" Size="4" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_ATUALIZA_TB_AUX_SYNC&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_ATUALIZA_TB_AUX_SYNC" Modifier="Public" Name="SP_TRI_ATUALIZA_TB_AUX_SYNC" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy26" UserSourceName="SP_TRI_ATUALIZA_TB_AUX_SYNC">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_ATUALIZA_TB_AUX_SYNC"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_ATUALIZATABELAS&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_ATUALIZATABELAS" Modifier="Public" Name="SP_TRI_ATUALIZATABELAS" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy27" UserSourceName="SP_TRI_ATUALIZATABELAS">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_ATUALIZATABELAS"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_ATUALIZATABELAS2&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_ATUALIZATABELAS2" Modifier="Public" Name="SP_TRI_ATUALIZATABELAS2" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy28" UserSourceName="SP_TRI_ATUALIZATABELAS2">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_ATUALIZATABELAS2"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_CONFIG_UPSERT&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_CONFIG_UPSERT" Modifier="Public" Name="SP_TRI_CONFIG_UPSERT" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy29" UserSourceName="SP_TRI_CONFIG_UPSERT">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_CONFIG_UPSERT"</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PID_MAC" Precision="0" Scale="0" Size="12" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="PNO_CAIXA" Precision="0" Scale="0" Size="2" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PEXIGE_SANGRIA" Precision="0" Scale="0" Size="1" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="PVALOR_MAX_CAIXA" Precision="0" Scale="0" Size="8" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PBLOQUEIA_NO_LIMITE" Precision="0" Scale="0" Size="1" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="PVALOR_DE_FOLGA" Precision="0" Scale="0" Size="8" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PPERMITE_FOLGA_SANGRIA" Precision="0" Scale="0" Size="1" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PINTERROMPE_NAO_ENCONTRADO" Precision="0" Scale="0" Size="1" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PMENSAGEM_CORTESIA" Precision="0" Scale="0" Size="100" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Single" Direction="Input" ParameterName="PICMS_CONT" Precision="0" Scale="0" Size="4" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Single" Direction="Input" ParameterName="PCSOSN_CONT" Precision="0" Scale="0" Size="4" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="PPEDE_CPF" Precision="0" Scale="0" Size="4" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="PPERMITE_ESTOQUE_NEGATIVO" Precision="0" Scale="0" Size="4" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="PMODELO_CUPOM" Precision="0" Scale="0" Size="2" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PMENSAGEM_RODAPE" Precision="0" Scale="0" Size="100" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="DateTime" Direction="Input" ParameterName="PTRI_PDV_DT_UPD" Precision="0" Scale="0" Size="8" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="PMODELO_SAT" Precision="0" Scale="0" Size="4" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PSATSERVIDOR" Precision="0" Scale="0" Size="1" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PSAT_CODATIV" Precision="0" Scale="0" Size="64" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PSIGN_AC" Precision="0" Scale="0" Size="2147483647" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PSAT_USADO" Precision="0" Scale="0" Size="1" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PECF_ATIVA" Precision="0" Scale="0" Size="1" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PECF_PORTA" Precision="0" Scale="0" Size="5" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PIMPRESSORA_USB" Precision="0" Scale="0" Size="64" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PIMPRESSORA_USB_PED" Precision="0" Scale="0" Size="64" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="PPERGUNTA_WHATS" Precision="0" Scale="0" Size="4" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PUSATEF" Precision="0" Scale="0" Size="1" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PTEFIP" Precision="0" Scale="0" Size="15" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PTEFNUMLOJA" Precision="0" Scale="0" Size="8" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PTEFNUMTERMINAL" Precision="0" Scale="0" Size="8" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PTEFPEDECPFPELOPINPAD" Precision="0" Scale="0" Size="1" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="PBALPORTA" Precision="0" Scale="0" Size="2" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="PBALBITS" Precision="0" Scale="0" Size="2" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="PBALBAUD" Precision="0" Scale="0" Size="4" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="PBALPARITY" Precision="0" Scale="0" Size="2" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="PBALMODELO" Precision="0" Scale="0" Size="2" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="PACFILLPREFIX" Precision="0" Scale="0" Size="2" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="PACFILLMODE" Precision="0" Scale="0" Size="2" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="PACREFERENCIA" Precision="0" Scale="0" Size="2" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="PSYSCOMISSAO" Precision="0" Scale="0" Size="2" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="PSATSERVTIMEOUT" Precision="0" Scale="0" Size="4" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="PSATLIFESIGNINTERVAL" Precision="0" Scale="0" Size="4" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="PACFILLDELAY" Precision="0" Scale="0" Size="4" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="PSYSPERGUNTAWHATS" Precision="0" Scale="0" Size="2" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="PSYSPARCELA" Precision="0" Scale="0" Size="2" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int16" Direction="Input" ParameterName="PSYSEMITECOMPROVANTE" Precision="0" Scale="0" Size="2" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PINFORMA_MAQUININHA" Precision="0" Scale="0" Size="1" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="PLAYOUT_SAT" Precision="0" Scale="0" Size="3" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_CRIATABELAS&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_CRIATABELAS" Modifier="Public" Name="SP_TRI_CRIATABELAS" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy30" UserSourceName="SP_TRI_CRIATABELAS">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_CRIATABELAS"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_CRIATABELAS_AUX_SYNC&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_CRIATABELAS_AUX_SYNC" Modifier="Public" Name="SP_TRI_CRIATABELAS_AUX_SYNC" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy31" UserSourceName="SP_TRI_CRIATABELAS_AUX_SYNC">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_CRIATABELAS_AUX_SYNC"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_CRIATABELAS_SERV&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_CRIATABELAS_SERV" Modifier="Public" Name="SP_TRI_CRIATABELAS_SERV" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy32" UserSourceName="SP_TRI_CRIATABELAS_SERV">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_CRIATABELAS_SERV"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_DADOSINICIAIS&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_DADOSINICIAIS" Modifier="Public" Name="SP_TRI_DADOSINICIAIS" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy33" UserSourceName="SP_TRI_DADOSINICIAIS">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_DADOSINICIAIS"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_DSBL_SERV_TRGGR_ON_PDV&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_DSBL_SERV_TRGGR_ON_PDV" Modifier="Public" Name="SP_TRI_DSBL_SERV_TRGGR_ON_PDV" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy34" UserSourceName="SP_TRI_DSBL_SERV_TRGGR_ON_PDV">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_DSBL_SERV_TRGGR_ON_PDV"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_ENABLE_SERV_TRIGGERS&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_ENABLE_SERV_TRIGGERS" Modifier="Public" Name="SP_TRI_ENABLE_SERV_TRIGGERS" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy35" UserSourceName="SP_TRI_ENABLE_SERV_TRIGGERS">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_ENABLE_SERV_TRIGGERS"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_GERATRIGGERS_AUX_SYNC&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_GERATRIGGERS_AUX_SYNC" Modifier="Public" Name="SP_TRI_GERATRIGGERS_AUX_SYNC" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy36" UserSourceName="SP_TRI_GERATRIGGERS_AUX_SYNC">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_GERATRIGGERS_AUX_SYNC"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_GERATRIGGERS_AUX_SYNC2&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_GERATRIGGERS_AUX_SYNC2" Modifier="Public" Name="SP_TRI_GERATRIGGERS_AUX_SYNC2" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy37" UserSourceName="SP_TRI_GERATRIGGERS_AUX_SYNC2">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_GERATRIGGERS_AUX_SYNC2"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_GERATRIGGERS_AUX_SYNC3&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_GERATRIGGERS_AUX_SYNC3" Modifier="Public" Name="SP_TRI_GERATRIGGERS_AUX_SYNC3" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy38" UserSourceName="SP_TRI_GERATRIGGERS_AUX_SYNC3">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_GERATRIGGERS_AUX_SYNC3"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_PROCEDURES&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_PROCEDURES" Modifier="Public" Name="SP_TRI_PROCEDURES" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy39" UserSourceName="SP_TRI_PROCEDURES">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_PROCEDURES"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_PROCEDURES2&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_PROCEDURES2" Modifier="Public" Name="SP_TRI_PROCEDURES2" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy40" UserSourceName="SP_TRI_PROCEDURES2">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_PROCEDURES2"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_PROCEDURES3&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_PROCEDURES3" Modifier="Public" Name="SP_TRI_PROCEDURES3" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy41" UserSourceName="SP_TRI_PROCEDURES3">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_PROCEDURES3"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_PROCEDURES4&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_PROCEDURES4" Modifier="Public" Name="SP_TRI_PROCEDURES4" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy42" UserSourceName="SP_TRI_PROCEDURES4">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_PROCEDURES4"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_PROCEDURES5&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_PROCEDURES5" Modifier="Public" Name="SP_TRI_PROCEDURES5" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy43" UserSourceName="SP_TRI_PROCEDURES5">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_PROCEDURES5"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_PROCEDURES6&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_PROCEDURES6" Modifier="Public" Name="SP_TRI_PROCEDURES6" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy44" UserSourceName="SP_TRI_PROCEDURES6">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_PROCEDURES6"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_PROCEDURES7&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_PROCEDURES7" Modifier="Public" Name="SP_TRI_PROCEDURES7" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy45" UserSourceName="SP_TRI_PROCEDURES7">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_PROCEDURES7"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_PROCEDURES8&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_PROCEDURES8" Modifier="Public" Name="SP_TRI_PROCEDURES8" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy46" UserSourceName="SP_TRI_PROCEDURES8">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_PROCEDURES8"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
              <DbSource ConnectionRef="FDBConnString (Settings)" DbObjectName="&quot;SP_TRI_TERMARIO_CHECKSEQ&quot;" DbObjectType="StoredProcedure" GenerateShortCommands="true" GeneratorSourceName="SP_TRI_TERMARIO_CHECKSEQ" Modifier="Public" Name="SP_TRI_TERMARIO_CHECKSEQ" QueryType="Scalar" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy47" UserSourceName="SP_TRI_TERMARIO_CHECKSEQ">
                <SelectCommand>
                  <DbCommand CommandType="StoredProcedure" ModifiedByUser="false">
                    <CommandText>"SP_TRI_TERMARIO_CHECKSEQ"</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
              </DbSource>
            </Sources>
          </TableAdapter>
        </Tables>
        <Sources />
      </DataSource>
    </xs:appinfo>
  </xs:annotation>
  <xs:element name="FDBDataSetConfig" msdata:IsDataSet="true" msdata:UseCurrentLocale="true" msprop:EnableTableAdapterManager="true" msprop:Generator_UserDSName="FDBDataSetConfig" msprop:Generator_DataSetName="FDBDataSetConfig">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="TRI_PDV_CONFIG" msprop:Generator_RowClassName="TRI_PDV_CONFIGRow" msprop:Generator_RowEvHandlerName="TRI_PDV_CONFIGRowChangeEventHandler" msprop:Generator_RowDeletedName="TRI_PDV_CONFIGRowDeleted" msprop:Generator_RowDeletingName="TRI_PDV_CONFIGRowDeleting" msprop:Generator_RowEvArgName="TRI_PDV_CONFIGRowChangeEvent" msprop:Generator_TablePropName="TRI_PDV_CONFIG" msprop:Generator_RowChangedName="TRI_PDV_CONFIGRowChanged" msprop:Generator_RowChangingName="TRI_PDV_CONFIGRowChanging" msprop:Generator_TableClassName="TRI_PDV_CONFIGDataTable" msprop:Generator_UserTableName="TRI_PDV_CONFIG" msprop:Generator_TableVarName="tableTRI_PDV_CONFIG">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ID_MAC" msprop:Generator_ColumnPropNameInRow="ID_MAC" msprop:Generator_ColumnPropNameInTable="ID_MACColumn" msprop:Generator_ColumnVarNameInTable="columnID_MAC" msprop:Generator_UserColumnName="ID_MAC">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="12" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="NO_CAIXA" msprop:Generator_ColumnPropNameInRow="NO_CAIXA" msprop:Generator_ColumnPropNameInTable="NO_CAIXAColumn" msprop:Generator_ColumnVarNameInTable="columnNO_CAIXA" msprop:Generator_UserColumnName="NO_CAIXA" type="xs:short" />
              <xs:element name="EXIGE_SANGRIA" msprop:Generator_ColumnPropNameInRow="EXIGE_SANGRIA" msprop:Generator_ColumnPropNameInTable="EXIGE_SANGRIAColumn" msprop:Generator_ColumnVarNameInTable="columnEXIGE_SANGRIA" msprop:Generator_UserColumnName="EXIGE_SANGRIA">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="1" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="VALOR_MAX_CAIXA" msprop:Generator_ColumnPropNameInRow="VALOR_MAX_CAIXA" msprop:Generator_ColumnPropNameInTable="VALOR_MAX_CAIXAColumn" msprop:Generator_ColumnVarNameInTable="columnVALOR_MAX_CAIXA" msprop:Generator_UserColumnName="VALOR_MAX_CAIXA" type="xs:double" />
              <xs:element name="BLOQUEIA_NO_LIMITE" msprop:Generator_ColumnPropNameInRow="BLOQUEIA_NO_LIMITE" msprop:Generator_ColumnPropNameInTable="BLOQUEIA_NO_LIMITEColumn" msprop:Generator_ColumnVarNameInTable="columnBLOQUEIA_NO_LIMITE" msprop:Generator_UserColumnName="BLOQUEIA_NO_LIMITE">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="1" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="VALOR_DE_FOLGA" msprop:Generator_ColumnPropNameInRow="VALOR_DE_FOLGA" msprop:Generator_ColumnPropNameInTable="VALOR_DE_FOLGAColumn" msprop:Generator_ColumnVarNameInTable="columnVALOR_DE_FOLGA" msprop:Generator_UserColumnName="VALOR_DE_FOLGA" type="xs:double" />
              <xs:element name="PERMITE_FOLGA_SANGRIA" msprop:Generator_ColumnPropNameInRow="PERMITE_FOLGA_SANGRIA" msprop:Generator_ColumnPropNameInTable="PERMITE_FOLGA_SANGRIAColumn" msprop:Generator_ColumnVarNameInTable="columnPERMITE_FOLGA_SANGRIA" msprop:Generator_UserColumnName="PERMITE_FOLGA_SANGRIA">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="1" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="INTERROMPE_NAO_ENCONTRADO" msprop:Generator_ColumnPropNameInRow="INTERROMPE_NAO_ENCONTRADO" msprop:Generator_ColumnPropNameInTable="INTERROMPE_NAO_ENCONTRADOColumn" msprop:Generator_ColumnVarNameInTable="columnINTERROMPE_NAO_ENCONTRADO" msprop:Generator_UserColumnName="INTERROMPE_NAO_ENCONTRADO">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="1" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="MENSAGEM_CORTESIA" msprop:Generator_ColumnPropNameInRow="MENSAGEM_CORTESIA" msprop:Generator_ColumnPropNameInTable="MENSAGEM_CORTESIAColumn" msprop:Generator_ColumnVarNameInTable="columnMENSAGEM_CORTESIA" msprop:Generator_UserColumnName="MENSAGEM_CORTESIA" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="100" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="ICMS_CONT" msprop:Generator_ColumnPropNameInRow="ICMS_CONT" msprop:Generator_ColumnPropNameInTable="ICMS_CONTColumn" msprop:Generator_ColumnVarNameInTable="columnICMS_CONT" msprop:Generator_UserColumnName="ICMS_CONT" type="xs:float" minOccurs="0" />
              <xs:element name="CSOSN_CONT" msprop:Generator_ColumnPropNameInRow="CSOSN_CONT" msprop:Generator_ColumnPropNameInTable="CSOSN_CONTColumn" msprop:Generator_ColumnVarNameInTable="columnCSOSN_CONT" msprop:Generator_UserColumnName="CSOSN_CONT" type="xs:float" minOccurs="0" />
              <xs:element name="PEDE_CPF" msprop:Generator_ColumnPropNameInRow="PEDE_CPF" msprop:Generator_ColumnPropNameInTable="PEDE_CPFColumn" msprop:Generator_ColumnVarNameInTable="columnPEDE_CPF" msprop:Generator_UserColumnName="PEDE_CPF" type="xs:int" />
              <xs:element name="PERMITE_ESTOQUE_NEGATIVO" msprop:Generator_ColumnPropNameInRow="PERMITE_ESTOQUE_NEGATIVO" msprop:Generator_ColumnPropNameInTable="PERMITE_ESTOQUE_NEGATIVOColumn" msprop:Generator_ColumnVarNameInTable="columnPERMITE_ESTOQUE_NEGATIVO" msprop:Generator_UserColumnName="PERMITE_ESTOQUE_NEGATIVO" type="xs:int" />
              <xs:element name="MODELO_CUPOM" msprop:Generator_ColumnPropNameInRow="MODELO_CUPOM" msprop:Generator_ColumnPropNameInTable="MODELO_CUPOMColumn" msprop:Generator_ColumnVarNameInTable="columnMODELO_CUPOM" msprop:Generator_UserColumnName="MODELO_CUPOM" type="xs:short" />
              <xs:element name="MENSAGEM_RODAPE" msprop:Generator_ColumnPropNameInRow="MENSAGEM_RODAPE" msprop:Generator_ColumnPropNameInTable="MENSAGEM_RODAPEColumn" msprop:Generator_ColumnVarNameInTable="columnMENSAGEM_RODAPE" msprop:Generator_UserColumnName="MENSAGEM_RODAPE" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="100" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="TRI_PDV_DT_UPD" msprop:Generator_ColumnPropNameInRow="TRI_PDV_DT_UPD" msprop:Generator_ColumnPropNameInTable="TRI_PDV_DT_UPDColumn" msprop:Generator_ColumnVarNameInTable="columnTRI_PDV_DT_UPD" msprop:Generator_UserColumnName="TRI_PDV_DT_UPD" type="xs:dateTime" minOccurs="0" />
              <xs:element name="MODELO_SAT" msprop:Generator_ColumnPropNameInRow="MODELO_SAT" msprop:Generator_ColumnPropNameInTable="MODELO_SATColumn" msprop:Generator_ColumnVarNameInTable="columnMODELO_SAT" msprop:Generator_UserColumnName="MODELO_SAT" type="xs:int" minOccurs="0" />
              <xs:element name="SATSERVIDOR" msprop:Generator_ColumnPropNameInRow="SATSERVIDOR" msprop:Generator_ColumnPropNameInTable="SATSERVIDORColumn" msprop:Generator_ColumnVarNameInTable="columnSATSERVIDOR" msprop:Generator_UserColumnName="SATSERVIDOR" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="1" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="SAT_CODATIV" msprop:Generator_ColumnPropNameInRow="SAT_CODATIV" msprop:Generator_ColumnPropNameInTable="SAT_CODATIVColumn" msprop:Generator_ColumnVarNameInTable="columnSAT_CODATIV" msprop:Generator_UserColumnName="SAT_CODATIV" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="64" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="SIGN_AC" msprop:Generator_ColumnPropNameInRow="SIGN_AC" msprop:Generator_ColumnPropNameInTable="SIGN_ACColumn" msprop:Generator_ColumnVarNameInTable="columnSIGN_AC" msprop:Generator_UserColumnName="SIGN_AC" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="SAT_USADO" msprop:Generator_ColumnPropNameInRow="SAT_USADO" msprop:Generator_ColumnPropNameInTable="SAT_USADOColumn" msprop:Generator_ColumnVarNameInTable="columnSAT_USADO" msprop:Generator_UserColumnName="SAT_USADO" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="1" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="ECF_ATIVA" msprop:Generator_ColumnPropNameInRow="ECF_ATIVA" msprop:Generator_ColumnPropNameInTable="ECF_ATIVAColumn" msprop:Generator_ColumnVarNameInTable="columnECF_ATIVA" msprop:Generator_UserColumnName="ECF_ATIVA" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="1" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="ECF_PORTA" msprop:Generator_ColumnPropNameInRow="ECF_PORTA" msprop:Generator_ColumnPropNameInTable="ECF_PORTAColumn" msprop:Generator_ColumnVarNameInTable="columnECF_PORTA" msprop:Generator_UserColumnName="ECF_PORTA" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="5" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="IMPRESSORA_USB" msprop:Generator_ColumnPropNameInRow="IMPRESSORA_USB" msprop:Generator_ColumnPropNameInTable="IMPRESSORA_USBColumn" msprop:Generator_ColumnVarNameInTable="columnIMPRESSORA_USB" msprop:Generator_UserColumnName="IMPRESSORA_USB" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="64" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="IMPRESSORA_USB_PED" msprop:Generator_ColumnPropNameInRow="IMPRESSORA_USB_PED" msprop:Generator_ColumnPropNameInTable="IMPRESSORA_USB_PEDColumn" msprop:Generator_ColumnVarNameInTable="columnIMPRESSORA_USB_PED" msprop:Generator_UserColumnName="IMPRESSORA_USB_PED" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="64" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="PERGUNTA_WHATS" msprop:Generator_ColumnPropNameInRow="PERGUNTA_WHATS" msprop:Generator_ColumnPropNameInTable="PERGUNTA_WHATSColumn" msprop:Generator_ColumnVarNameInTable="columnPERGUNTA_WHATS" msprop:Generator_UserColumnName="PERGUNTA_WHATS" type="xs:int" />
              <xs:element name="USATEF" msprop:Generator_ColumnPropNameInRow="USATEF" msprop:Generator_ColumnPropNameInTable="USATEFColumn" msprop:Generator_ColumnVarNameInTable="columnUSATEF" msprop:Generator_UserColumnName="USATEF">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="1" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="TEFIP" msprop:Generator_ColumnPropNameInRow="TEFIP" msprop:Generator_ColumnPropNameInTable="TEFIPColumn" msprop:Generator_ColumnVarNameInTable="columnTEFIP" msprop:Generator_UserColumnName="TEFIP" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="15" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="TEFNUMLOJA" msprop:Generator_ColumnPropNameInRow="TEFNUMLOJA" msprop:Generator_ColumnPropNameInTable="TEFNUMLOJAColumn" msprop:Generator_ColumnVarNameInTable="columnTEFNUMLOJA" msprop:Generator_UserColumnName="TEFNUMLOJA" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="8" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="TEFNUMTERMINAL" msprop:Generator_ColumnPropNameInRow="TEFNUMTERMINAL" msprop:Generator_ColumnPropNameInTable="TEFNUMTERMINALColumn" msprop:Generator_ColumnVarNameInTable="columnTEFNUMTERMINAL" msprop:Generator_UserColumnName="TEFNUMTERMINAL" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="8" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="TEFPEDECPFPELOPINPAD" msprop:Generator_ColumnPropNameInRow="TEFPEDECPFPELOPINPAD" msprop:Generator_ColumnPropNameInTable="TEFPEDECPFPELOPINPADColumn" msprop:Generator_ColumnVarNameInTable="columnTEFPEDECPFPELOPINPAD" msprop:Generator_UserColumnName="TEFPEDECPFPELOPINPAD" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="1" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="BALPORTA" msprop:Generator_ColumnPropNameInRow="BALPORTA" msprop:Generator_ColumnPropNameInTable="BALPORTAColumn" msprop:Generator_ColumnVarNameInTable="columnBALPORTA" msprop:Generator_UserColumnName="BALPORTA" type="xs:short" />
              <xs:element name="BALBITS" msprop:Generator_ColumnPropNameInRow="BALBITS" msprop:Generator_ColumnPropNameInTable="BALBITSColumn" msprop:Generator_ColumnVarNameInTable="columnBALBITS" msprop:Generator_UserColumnName="BALBITS" type="xs:short" />
              <xs:element name="BALBAUD" msprop:Generator_ColumnPropNameInRow="BALBAUD" msprop:Generator_ColumnPropNameInTable="BALBAUDColumn" msprop:Generator_ColumnVarNameInTable="columnBALBAUD" msprop:Generator_UserColumnName="BALBAUD" type="xs:int" />
              <xs:element name="BALPARITY" msprop:Generator_ColumnPropNameInRow="BALPARITY" msprop:Generator_ColumnPropNameInTable="BALPARITYColumn" msprop:Generator_ColumnVarNameInTable="columnBALPARITY" msprop:Generator_UserColumnName="BALPARITY" type="xs:short" />
              <xs:element name="BALMODELO" msprop:Generator_ColumnPropNameInRow="BALMODELO" msprop:Generator_ColumnPropNameInTable="BALMODELOColumn" msprop:Generator_ColumnVarNameInTable="columnBALMODELO" msprop:Generator_UserColumnName="BALMODELO" type="xs:short" />
              <xs:element name="ACFILLPREFIX" msprop:Generator_ColumnPropNameInRow="ACFILLPREFIX" msprop:Generator_ColumnPropNameInTable="ACFILLPREFIXColumn" msprop:Generator_ColumnVarNameInTable="columnACFILLPREFIX" msprop:Generator_UserColumnName="ACFILLPREFIX" type="xs:short" />
              <xs:element name="ACFILLMODE" msprop:Generator_ColumnPropNameInRow="ACFILLMODE" msprop:Generator_ColumnPropNameInTable="ACFILLMODEColumn" msprop:Generator_ColumnVarNameInTable="columnACFILLMODE" msprop:Generator_UserColumnName="ACFILLMODE" type="xs:short" />
              <xs:element name="ACREFERENCIA" msprop:Generator_ColumnPropNameInRow="ACREFERENCIA" msprop:Generator_ColumnPropNameInTable="ACREFERENCIAColumn" msprop:Generator_ColumnVarNameInTable="columnACREFERENCIA" msprop:Generator_UserColumnName="ACREFERENCIA" type="xs:short" />
              <xs:element name="SYSCOMISSAO" msprop:Generator_ColumnPropNameInRow="SYSCOMISSAO" msprop:Generator_ColumnPropNameInTable="SYSCOMISSAOColumn" msprop:Generator_ColumnVarNameInTable="columnSYSCOMISSAO" msprop:Generator_UserColumnName="SYSCOMISSAO" type="xs:short" />
              <xs:element name="SATSERVTIMEOUT" msprop:Generator_ColumnPropNameInRow="SATSERVTIMEOUT" msprop:Generator_ColumnPropNameInTable="SATSERVTIMEOUTColumn" msprop:Generator_ColumnVarNameInTable="columnSATSERVTIMEOUT" msprop:Generator_UserColumnName="SATSERVTIMEOUT" type="xs:int" />
              <xs:element name="SATLIFESIGNINTERVAL" msprop:Generator_ColumnPropNameInRow="SATLIFESIGNINTERVAL" msprop:Generator_ColumnPropNameInTable="SATLIFESIGNINTERVALColumn" msprop:Generator_ColumnVarNameInTable="columnSATLIFESIGNINTERVAL" msprop:Generator_UserColumnName="SATLIFESIGNINTERVAL" type="xs:int" />
              <xs:element name="ACFILLDELAY" msprop:Generator_ColumnPropNameInRow="ACFILLDELAY" msprop:Generator_ColumnPropNameInTable="ACFILLDELAYColumn" msprop:Generator_ColumnVarNameInTable="columnACFILLDELAY" msprop:Generator_UserColumnName="ACFILLDELAY" type="xs:int" />
              <xs:element name="SYSPERGUNTAWHATS" msprop:Generator_ColumnPropNameInRow="SYSPERGUNTAWHATS" msprop:Generator_ColumnPropNameInTable="SYSPERGUNTAWHATSColumn" msprop:Generator_ColumnVarNameInTable="columnSYSPERGUNTAWHATS" msprop:Generator_UserColumnName="SYSPERGUNTAWHATS" type="xs:short" />
              <xs:element name="SYSPARCELA" msprop:Generator_ColumnPropNameInRow="SYSPARCELA" msprop:Generator_ColumnPropNameInTable="SYSPARCELAColumn" msprop:Generator_ColumnVarNameInTable="columnSYSPARCELA" msprop:Generator_UserColumnName="SYSPARCELA" type="xs:short" />
              <xs:element name="SYSEMITECOMPROVANTE" msprop:Generator_ColumnPropNameInRow="SYSEMITECOMPROVANTE" msprop:Generator_ColumnPropNameInTable="SYSEMITECOMPROVANTEColumn" msprop:Generator_ColumnVarNameInTable="columnSYSEMITECOMPROVANTE" msprop:Generator_UserColumnName="SYSEMITECOMPROVANTE" type="xs:short" />
              <xs:element name="INFORMA_MAQUININHA" msprop:Generator_ColumnPropNameInRow="INFORMA_MAQUININHA" msprop:Generator_ColumnPropNameInTable="INFORMA_MAQUININHAColumn" msprop:Generator_ColumnVarNameInTable="columnINFORMA_MAQUININHA" msprop:Generator_UserColumnName="INFORMA_MAQUININHA">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="1" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="LAYOUT_SAT" msprop:Generator_ColumnPropNameInRow="LAYOUT_SAT" msprop:Generator_ColumnPropNameInTable="LAYOUT_SATColumn" msprop:Generator_ColumnVarNameInTable="columnLAYOUT_SAT" msprop:Generator_UserColumnName="LAYOUT_SAT">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="3" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:TRI_PDV_CONFIG" />
      <xs:field xpath="mstns:ID_MAC" />
    </xs:unique>
  </xs:element>
</xs:schema>