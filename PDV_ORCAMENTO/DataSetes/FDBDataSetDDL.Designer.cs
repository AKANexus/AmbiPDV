//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace PDV_ORCAMENTO.DataSetes {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FDBDataSetDDL")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FDBDataSetDDL : global::System.Data.DataSet {
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public FDBDataSetDDL() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected FDBDataSetDDL(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            FDBDataSetDDL cln = ((FDBDataSetDDL)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal void InitVars(bool initTable) {
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitClass() {
            this.DataSetName = "FDBDataSetDDL";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FDBDataSetDDL.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            FDBDataSetDDL ds = new FDBDataSetDDL();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
}
namespace PDV_ORCAMENTO.DataSetes.FDBDataSetDDLTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QueriesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.IDbCommand[] _commandCollection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected global::System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.IDbCommand[8];
            this._commandCollection[0] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[0])).Connection = new global::FirebirdSql.Data.FirebirdClient.FbConnection(global::PDV_ORCAMENTO.Properties.Settings.Default.FDBOrcaConnString);
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[0])).CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_ORCA_PROCEDURES\r\nRETURNS (\r\nerro VARCHAR(64)\r\n)\r" +
                "\nAS\r\nBEGIN\r\n\r\nerro = \'sp_tri_orca_lancaitem\';\r\nEXECUTE STATEMENT \'CREATE OR ALTE" +
                "R PROCEDURE SP_TRI_ORCA_LANCAITEM ( pORCAMENTO INTEGER , pDESCONTO_ABS TYPE OF C" +
                "OLUMN TRI_ORCA_PRODUTOS.DESCONTO , pID_PROD INTEGER , pQTD_PROD TYPE OF COLUMN T" +
                "RI_ORCA_PRODUTOS.QUANT , pVLR_PROD TYPE OF COLUMN TRI_ORCA_PRODUTOS.VALOR , pNUM" +
                "_PRODUTO TYPE OF COLUMN TRI_ORCA_PRODUTOS.NUM_PRODUTO , pVALOR_TOT TYPE OF COLUM" +
                "N TRI_ORCA_PRODUTOS.VALOR_TOT ) AS DECLARE VARIABLE IDORCAMENTO INTEGER; BEGIN S" +
                "ELECT NEXT VALUE FOR GEN_TRI_ORCA_ITEM_ID FROM RDB$DATABASE INTO :IDORCAMENTO ; " +
                "IF(IDORCAMENTO IS NULL) THEN IDORCAMENTO = 0; INSERT INTO TRI_ORCA_PRODUTOS (ID_" +
                "PRODUTO , ID_ESTOQUE , QUANT , VALOR , DESCONTO , ID_ORCAMENTO , VALOR_TOT , NUM" +
                "_PRODUTO ) VALUES (:IDORCAMENTO , :pID_PROD , :pQTD_PROD , :pVLR_PROD , :pDESCON" +
                "TO_ABS , :pORCAMENTO , :pVALOR_TOT , :pNUM_PRODUTO ) ; SUSPEND; END;\';\r\n\r\nerro =" +
                " \'sp_tri_orca_reserv\';\r\nEXECUTE STATEMENT \'CREATE OR ALTER PROCEDURE SP_TRI_ORCA" +
                "_RESERV ( pID_USER SMALLINT , pID_CAIXA INTEGER ) RETURNS ( CUPOMUSAVEL INTEGER " +
                ") AS DECLARE VARIABLE ULTIMOCUPOM INTEGER; BEGIN SELECT COALESCE(MAX(ID_ORCAMENT" +
                "O), -1) FROM TRI_ORCA_ORCAMENTOS WHERE ID_CAIXA = :pID_CAIXA AND STATUS =\'\'EDITA" +
                "NDO\'\' INTO :ULTIMOCUPOM ; IF (ULTIMOCUPOM < 0) THEN BEGIN SELECT NEXT VALUE FOR " +
                "GEN_TRI_ORCA FROM RDB$DATABASE INTO :ultimocupom ; IF(:ultimocupom IS NULL) THEN" +
                " ultimocupom = 0; INSERT INTO TRI_ORCA_ORCAMENTOS (ID_ORCAMENTO , ID_CLIENTE , D" +
                "T_EMISSAO , ID_FORNEC_TRANSP , DT_VALIDADE , ID_PARCELA , ID_USER , STATUS , SUB" +
                "TOTAL , DESCONTO_TOTAL , DT_ENTREGA , VALOR_TOTAL , DT_VENCIMENTO , VALOR_FRETE " +
                ", NOME_SOLICITANTE , OBSERVACOES , ID_CAIXA ) VALUES (:ultimocupom , 0 , current" +
                "_timestamp , 0 , null , 1 , :pID_USER , \'\'EDITANDO\'\' , 0 , 0 , null , 0 , null ," +
                " 0 , null , null , :pID_CAIXA ) ; END cupomusavel = ultimocupom; SUSPEND; END;\';" +
                "\r\n\r\nerro = \'sp_tri_orca_salvaorca\';\r\nEXECUTE STATEMENT \'CREATE OR ALTER PROCEDUR" +
                "E SP_TRI_ORCA_SALVAORCA ( pID_ORCAMENTO INTEGER , pID_CLIENTE INTEGER , pID_FORN" +
                "EC_TRANSP INTEGER , pDT_VALIDADE DATE , pID_PARCELA TYPE OF COLUMN TRI_ORCA_ORCA" +
                "MENTOS.ID_PARCELA , pSUBTOTAL TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.SUBTOTAL , pDES" +
                "CONTO_TOTAL TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.DESCONTO_TOTAL , pVALOR_TOTAL TYP" +
                "E OF COLUMN TRI_ORCA_ORCAMENTOS.VALOR_TOTAL , pDT_ENTREGA DATE , pDT_VENCIMENTO " +
                "DATE , pVALOR_FRETE TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.VALOR_FRETE , pNOME_SOLIC" +
                "ITANTE TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.NOME_SOLICITANTE , pOBSERVACOES TYPE O" +
                "F COLUMN TRI_ORCA_ORCAMENTOS.OBSERVACOES ) AS BEGIN UPDATE TRI_ORCA_ORCAMENTOS S" +
                "ET ID_CLIENTE =:pID_CLIENTE , DT_EMISSAO =current_timestamp , ID_FORNEC_TRANSP =" +
                ":pID_FORNEC_TRANSP , DT_VALIDADE =:pDT_VALIDADE , ID_PARCELA =:pID_PARCELA , STA" +
                "TUS =\'\'SALVO\'\' , SUBTOTAL =:pSUBTOTAL , DESCONTO_TOTAL =:pDESCONTO_TOTAL , DT_EN" +
                "TREGA =:pDT_ENTREGA , VALOR_TOTAL =:pVALOR_TOTAL , DT_VENCIMENTO =:pDT_VENCIMENT" +
                "O , VALOR_FRETE =:pVALOR_FRETE , NOME_SOLICITANTE =:pNOME_SOLICITANTE , OBSERVAC" +
                "OES =:pOBSERVACOES WHERE ID_ORCAMENTO = :pID_ORCAMENTO ; END;\';\r\n\r\nerro = \'sp_tr" +
                "i_orca_getby_orca\';\r\nEXECUTE STATEMENT \'CREATE OR ALTER PROCEDURE SP_TRI_ORCA_GE" +
                "TBY_ORCA ( pID_ORCAMENTO INTEGER ) RETURNS ( ID_ORCAMENTO INTEGER , ID_CLIENTE I" +
                "NTEGER , DT_EMISSAO DATE , ID_FORNEC_TRANSP INTEGER , DT_VALIDADE DATE , ID_PARC" +
                "ELA TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.ID_PARCELA , ID_USER INTEGER , STATUS TYP" +
                "E OF COLUMN TRI_ORCA_ORCAMENTOS.STATUS , SUBTOTAL TYPE OF COLUMN TRI_ORCA_ORCAME" +
                "NTOS.SUBTOTAL , DESCONTO_TOTAL TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.DESCONTO_TOTAL" +
                " , DT_ENTREGA DATE , VALOR_TOTAL TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.VALOR_TOTAL " +
                ", DT_VENCIMENTO DATE , VALOR_FRETE TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.VALOR_FRET" +
                "E , NOME_SOLICITANTE TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.NOME_SOLICITANTE , OBSER" +
                "VACOES TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.OBSERVACOES , ID_CAIXA TYPE OF COLUMN " +
                "TRI_ORCA_ORCAMENTOS.ID_CAIXA ) AS BEGIN for SELECT ID_ORCAMENTO , ID_CLIENTE , D" +
                "T_EMISSAO , ID_FORNEC_TRANSP , DT_VALIDADE , ID_PARCELA , ID_USER , STATUS , SUB" +
                "TOTAL , DESCONTO_TOTAL , DT_ENTREGA , VALOR_TOTAL , DT_VENCIMENTO , VALOR_FRETE " +
                ", NOME_SOLICITANTE , OBSERVACOES , ID_CAIXA FROM TRI_ORCA_ORCAMENTOS WHERE ID_OR" +
                "CAMENTO = :pID_ORCAMENTO INTO :ID_ORCAMENTO , :ID_CLIENTE , :DT_EMISSAO , :ID_FO" +
                "RNEC_TRANSP , :DT_VALIDADE , :ID_PARCELA , :ID_USER , :STATUS , :SUBTOTAL , :DES" +
                "CONTO_TOTAL , :DT_ENTREGA , :VALOR_TOTAL , :DT_VENCIMENTO , :VALOR_FRETE , :NOME" +
                "_SOLICITANTE , :OBSERVACOES , :ID_CAIXA DO BEGIN SUSPEND ; END END;\';\r\n\r\nerro = " +
                "\'sp_tri_rel_orca_emit\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_REL" +
                "_ORCA_EMIT RETURNS ( LOGO TYPE OF COLUMN TB_EMITENTE.LOGO , NOME TYPE OF COLUMN " +
                "TB_EMITENTE.NOME , NOME_FANTA TYPE OF COLUMN TB_EMITENTE.NOME_FANTA , CNPJ TYPE " +
                "OF COLUMN TB_EMITENTE.CNPJ , INSC_ESTAD TYPE OF COLUMN TB_EMITENTE.INSC_ESTAD , " +
                "END_TIPO TYPE OF COLUMN TB_EMITENTE.END_TIPO , END_LOGRAD TYPE OF COLUMN TB_EMIT" +
                "ENTE.END_LOGRAD , END_COMPLE TYPE OF COLUMN TB_EMITENTE.END_COMPLE , END_NUMERO " +
                "TYPE OF COLUMN TB_EMITENTE.END_NUMERO , END_BAIRRO TYPE OF COLUMN TB_EMITENTE.EN" +
                "D_BAIRRO , DDD_COMER TYPE OF COLUMN TB_EMITENTE.DDD_COMER , FONE_COMER TYPE OF C" +
                "OLUMN TB_EMITENTE.FONE_COMER , END_CEP TYPE OF COLUMN TB_EMITENTE.END_CEP , CIDA" +
                "DE_NOME TYPE OF COLUMN TB_CIDADE_SIS.NOME , SIGLA_UF TYPE OF COLUMN TB_CIDADE_SI" +
                "S.SIGLA_UF , SITE TYPE OF COLUMN TB_EMITENTE.SITE ) AS BEGIN for SELECT a.LOGO ," +
                " a.NOME , a.NOME_FANTA , a.CNPJ , a.INSC_ESTAD , a.END_TIPO , a.END_LOGRAD , a.E" +
                "ND_COMPLE , a.END_NUMERO , a.END_BAIRRO , a.DDD_COMER , a.FONE_COMER , a.END_CEP" +
                " , b.NOME AS CIDADE_NOME , b.SIGLA_UF , a.SITE FROM TB_EMITENTE a JOIN TB_CIDADE" +
                "_SIS b ON b.ID_CIDADE = a.ID_CIDADE INTO :LOGO , :NOME , :NOME_FANTA , :CNPJ , :" +
                "INSC_ESTAD , :END_TIPO , :END_LOGRAD , :END_COMPLE , :END_NUMERO , :END_BAIRRO ," +
                " :DDD_COMER , :FONE_COMER , :END_CEP , :CIDADE_NOME , :SIGLA_UF , :SITE DO BEGIN" +
                " SUSPEND ; END END;\';\r\n\r\nerro = \'sp_tri_rel_orca_orcamento\';\r\nexecute statement " +
                "\'CREATE OR ALTER PROCEDURE SP_TRI_REL_ORCA_ORCAMENTO ( pID_ORCAMENTO TYPE OF COL" +
                "UMN TRI_ORCA_ORCAMENTOS.ID_ORCAMENTO ) RETURNS ( ID_ORCAMENTO TYPE OF COLUMN TRI" +
                "_ORCA_ORCAMENTOS.ID_ORCAMENTO ,DT_EMISSAO TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.DT_" +
                "EMISSAO , TRANSPORTADORA_NOME TYPE OF COLUMN TB_FORNECEDOR.NOME , DT_VALIDADE TY" +
                "PE OF COLUMN TRI_ORCA_ORCAMENTOS.DT_VALIDADE , PARCELA_DESCRICAO TYPE OF COLUMN " +
                "TB_PARCELAMENTO.DESCRICAO , USERNAME TYPE OF COLUMN TRI_PDV_USERS.USERNAME , SUB" +
                "TOTAL TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.SUBTOTAL , DESCONTO_TOTAL TYPE OF COLUM" +
                "N TRI_ORCA_ORCAMENTOS.DESCONTO_TOTAL , DT_ENTREGA TYPE OF COLUMN TRI_ORCA_ORCAME" +
                "NTOS.DT_ENTREGA , VALOR_TOTAL TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.VALOR_TOTAL , D" +
                "T_VENCIMENTO TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.DT_VENCIMENTO , VALOR_FRETE TYPE" +
                " OF COLUMN TRI_ORCA_ORCAMENTOS.VALOR_FRETE , NOME_SOLICITANTE TYPE OF COLUMN TRI" +
                "_ORCA_ORCAMENTOS.NOME_SOLICITANTE , OBSERVACOES TYPE OF COLUMN TRI_ORCA_ORCAMENT" +
                "OS.OBSERVACOES ) AS BEGIN for SELECT a.ID_ORCAMENTO , a.DT_EMISSAO , c.NOME AS T" +
                "RANSPORTADORA_NOME , a.DT_VALIDADE , d.DESCRICAO AS PARCELA_DESCRICAO , b.USERNA" +
                "ME , a.SUBTOTAL , a.DESCONTO_TOTAL , a.DT_ENTREGA , a.VALOR_TOTAL , a.DT_VENCIME" +
                "NTO , a.VALOR_FRETE , a.NOME_SOLICITANTE , a.OBSERVACOES FROM TRI_ORCA_ORCAMENTO" +
                "S a LEFT JOIN TRI_PDV_USERS b ON b.ID_USER = a.ID_USER LEFT JOIN TB_FORNECEDOR c" +
                " ON c.ID_FORNEC = a.ID_FORNEC_TRANSP LEFT JOIN TB_PARCELAMENTO d ON d.ID_PARCELA" +
                " = a.ID_PARCELA WHERE a.ID_ORCAMENTO = :pID_ORCAMENTO INTO :ID_ORCAMENTO , :DT_E" +
                "MISSAO , :TRANSPORTADORA_NOME , :DT_VALIDADE , :PARCELA_DESCRICAO , :USERNAME , " +
                ":SUBTOTAL , :DESCONTO_TOTAL , :DT_ENTREGA , :VALOR_TOTAL , :DT_VENCIMENTO , :VAL" +
                "OR_FRETE , :NOME_SOLICITANTE , :OBSERVACOES DO BEGIN SUSPEND ; END END;\';\r\n\r\nerr" +
                "o = \'sp_tri_rel_orca_solicitante\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE" +
                " SP_TRI_REL_ORCA_SOLICITANTE ( pID_ORCAMENTO TYPE OF COLUMN TRI_ORCA_ORCAMENTOS." +
                "ID_ORCAMENTO ) RETURNS ( CLIENTE_NOME TYPE OF COLUMN TB_CLIENTE.NOME , CLIENTE_N" +
                "OME_FANTA TYPE OF COLUMN TB_CLI_PJ.NOME_FANTA , CLIENTE_CPF TYPE OF COLUMN TB_CL" +
                "I_PF.CPF , CLIENTE_CNPJ TYPE OF COLUMN TB_CLI_PJ.CNPJ , CLIENTE_RG TYPE OF COLUM" +
                "N TB_CLI_PF.IDENTIDADE , INSC_ESTAD TYPE OF COLUMN TB_CLI_PJ.INSC_ESTAD , INSC_M" +
                "UNIC TYPE OF COLUMN TB_CLI_PJ.INSC_MUNIC , END_TIPO TYPE OF COLUMN TB_CLIENTE.EN" +
                "D_TIPO , END_LOGRAD TYPE OF COLUMN TB_CLIENTE.END_LOGRAD , END_NUMERO TYPE OF CO" +
                "LUMN TB_CLIENTE.END_NUMERO , END_COMPLE TYPE OF COLUMN TB_CLIENTE.END_COMPLE , E" +
                "ND_BAIRRO TYPE OF COLUMN TB_CLIENTE.END_BAIRRO , END_CEP TYPE OF COLUMN TB_CLIEN" +
                "TE.END_CEP , CIDADE_NOME TYPE OF COLUMN TB_CIDADE_SIS.NOME , SIGLA_UF TYPE OF CO" +
                "LUMN TB_CIDADE_SIS.SIGLA_UF , DDD_COMER TYPE OF COLUMN TB_CLIENTE.DDD_COMER , FO" +
                "NE_COMER TYPE OF COLUMN TB_CLIENTE.FONE_COMER , DDD_FAX TYPE OF COLUMN TB_CLIENT" +
                "E.DDD_FAX , FONE_FAX TYPE OF COLUMN TB_CLIENTE.FONE_FAX , DDD_CELUL TYPE OF COLU" +
                "MN TB_CLIENTE.DDD_CELUL , FONE_CELUL TYPE OF COLUMN TB_CLIENTE.FONE_CELUL , DDD_" +
                "RESID TYPE OF COLUMN TB_CLIENTE.DDD_RESID , FONE_RESID TYPE OF COLUMN TB_CLIENTE" +
                ".FONE_RESID , EMAIL_CONT TYPE OF COLUMN TB_CLIENTE.EMAIL_CONT ) AS BEGIN for SEL" +
                "ECT b.NOME AS CLIENTE_NOME , e.NOME_FANTA AS CLIENTE_NOME_FANTA , d.CPF AS CLIEN" +
                "TE_CPF , e.CNPJ AS CLIENTE_CNPJ , d.IDENTIDADE AS CLIENTE_RG , e.INSC_ESTAD , e." +
                "INSC_MUNIC , b.END_TIPO , b.END_LOGRAD , b.END_NUMERO , b.END_COMPLE , b.END_BAI" +
                "RRO , b.END_CEP , c.NOME AS CIDADE_NOME , c.SIGLA_UF , b.DDD_COMER , b.FONE_COME" +
                "R , b.DDD_FAX , b.FONE_FAX , b.DDD_CELUL , b.FONE_CELUL , b.DDD_RESID , b.FONE_R" +
                "ESID , b.EMAIL_CONT FROM TRI_ORCA_ORCAMENTOS a JOIN TB_CLIENTE b ON b.ID_CLIENTE" +
                " = a.ID_CLIENTE LEFT JOIN TB_CIDADE_SIS c ON c.ID_CIDADE = b.ID_CIDADE LEFT JOIN" +
                " TB_CLI_PF d ON d.ID_CLIENTE = b.ID_CLIENTE LEFT JOIN TB_CLI_PJ e ON e.ID_CLIENT" +
                "E = b.ID_CLIENTE WHERE a.ID_ORCAMENTO = :pID_ORCAMENTO INTO :CLIENTE_NOME , :CLI" +
                "ENTE_NOME_FANTA , :CLIENTE_CPF , :CLIENTE_CNPJ , :CLIENTE_RG , :INSC_ESTAD , :IN" +
                "SC_MUNIC , :END_TIPO , :END_LOGRAD , :END_NUMERO , :END_COMPLE , :END_BAIRRO , :" +
                "END_CEP , :CIDADE_NOME , :SIGLA_UF , :DDD_COMER , :FONE_COMER , :DDD_FAX , :FONE" +
                "_FAX , :DDD_CELUL , :FONE_CELUL , :DDD_RESID , :FONE_RESID , :EMAIL_CONT DO BEGI" +
                "N SUSPEND ; END END;\';\r\n\r\nerro = \'sp_tri_rel_orca_orcamento_item\';\r\nexecute stat" +
                "ement \'CREATE OR ALTER PROCEDURE SP_TRI_REL_ORCA_ORCAMENTO_ITEM ( pID_ORCAMENTO " +
                "TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.ID_ORCAMENTO ) RETURNS ( ID_PRODUTO TYPE OF C" +
                "OLUMN TRI_ORCA_PRODUTOS.ID_PRODUTO , ID_IDENTIF_ORCAPROD TYPE OF COLUMN TRI_ORCA" +
                "_PRODUTOS.ID_ESTOQUE , COD_BARRA TYPE OF COLUMN TB_EST_PRODUTO.COD_BARRA , EST_D" +
                "ESCRICAO TYPE OF COLUMN TB_ESTOQUE.DESCRICAO , QUANT TYPE OF COLUMN TRI_ORCA_PRO" +
                "DUTOS.QUANT , EST_UNI_MEDIDA TYPE OF COLUMN TB_ESTOQUE.UNI_MEDIDA , VALOR TYPE O" +
                "F COLUMN TRI_ORCA_PRODUTOS.VALOR , DESCONTO TYPE OF COLUMN TRI_ORCA_PRODUTOS.DES" +
                "CONTO , VALOR_TOT TYPE OF COLUMN TRI_ORCA_PRODUTOS.VALOR_TOT , NUM_PRODUTO TYPE " +
                "OF COLUMN TRI_ORCA_PRODUTOS.NUM_PRODUTO ) AS BEGIN for SELECT a.ID_PRODUTO , a.I" +
                "D_ESTOQUE AS ID_IDENTIF_ORCAPROD , b.COD_BARRA , d.DESCRICAO AS EST_DESCRICAO , " +
                "a.QUANT , d.UNI_MEDIDA AS EST_UNI_MEDIDA , a.VALOR , a.DESCONTO , a.VALOR_TOT , " +
                "a.NUM_PRODUTO FROM TRI_ORCA_PRODUTOS a JOIN TB_EST_IDENTIFICADOR c ON c.ID_IDENT" +
                "IFICADOR = a.ID_ESTOQUE JOIN TB_EST_PRODUTO b ON b.ID_IDENTIFICADOR = c.ID_IDENT" +
                "IFICADOR JOIN TB_ESTOQUE d ON d.ID_ESTOQUE = c.ID_ESTOQUE WHERE a.ID_ORCAMENTO =" +
                " :pID_ORCAMENTO INTO :ID_PRODUTO , :ID_IDENTIF_ORCAPROD , :COD_BARRA , :EST_DESC" +
                "RICAO , :QUANT , :EST_UNI_MEDIDA , :VALOR , :DESCONTO , :VALOR_TOT , :NUM_PRODUT" +
                "O DO BEGIN SUSPEND ; END END;\';\r\n\r\nerro = \'sp_tri_cidade_getby_id\';\r\nEXECUTE STA" +
                "TEMENT \'CREATE OR ALTER PROCEDURE SP_TRI_CIDADE_GETBY_ID ( pID_CIDADE TYPE OF CO" +
                "LUMN TB_CIDADE_SIS.ID_CIDADE ) RETURNS ( ID_CIDADE TYPE OF COLUMN TB_CIDADE_SIS." +
                "ID_CIDADE , NOME TYPE OF COLUMN TB_CIDADE_SIS.NOME , SIGLA_UF TYPE OF COLUMN TB_" +
                "CIDADE_SIS.SIGLA_UF , DDD TYPE OF COLUMN TB_CIDADE_SIS.DDD , CODIGO_SIAFI TYPE O" +
                "F COLUMN TB_CIDADE_SIS.CODIGO_SIAFI , CODIGO_SEDETEC TYPE OF COLUMN TB_CIDADE_SI" +
                "S.CODIGO_SEDETEC ) AS BEGIN FOR SELECT ID_CIDADE , NOME , SIGLA_UF , DDD , CODIG" +
                "O_SIAFI , CODIGO_SEDETEC FROM TB_CIDADE_SIS WHERE ID_CIDADE = :pID_CIDADE INTO :" +
                "ID_CIDADE , :NOME , :SIGLA_UF , :DDD , :CODIGO_SIAFI , :CODIGO_SEDETEC DO BEGIN " +
                "SUSPEND ; END END;\';\r\n\r\nerro = \'sp_tri_fornec_getby_transp\';\r\nEXECUTE STATEMENT " +
                "\'CREATE OR ALTER PROCEDURE SP_TRI_FORNEC_GETBY_TRANSP RETURNS ( ID_FORNEC TYPE O" +
                "F COLUMN TB_FORNECEDOR.ID_FORNEC , NOME TYPE OF COLUMN TB_FORNECEDOR.NOME , NOME" +
                "_FANTA TYPE OF COLUMN TB_FORNECEDOR.NOME_FANTA , CNPJ TYPE OF COLUMN TB_FORNECED" +
                "OR.CNPJ , INSC_ESTAD TYPE OF COLUMN TB_FORNECEDOR.INSC_ESTAD , INSC_MUNIC TYPE O" +
                "F COLUMN TB_FORNECEDOR.INSC_MUNIC , END_CEP TYPE OF COLUMN TB_FORNECEDOR.END_CEP" +
                " , END_TIPO TYPE OF COLUMN TB_FORNECEDOR.END_TIPO , END_LOGRAD TYPE OF COLUMN TB" +
                "_FORNECEDOR.END_LOGRAD , END_BAIRRO TYPE OF COLUMN TB_FORNECEDOR.END_BAIRRO , EN" +
                "D_NUMERO TYPE OF COLUMN TB_FORNECEDOR.END_NUMERO , END_COMPLE TYPE OF COLUMN TB_" +
                "FORNECEDOR.END_COMPLE , DDD_COMER TYPE OF COLUMN TB_FORNECEDOR.DDD_COMER , FONE_" +
                "COMER TYPE OF COLUMN TB_FORNECEDOR.FONE_COMER , FONE_0800 TYPE OF COLUMN TB_FORN" +
                "ECEDOR.FONE_0800 , DDD_CELUL TYPE OF COLUMN TB_FORNECEDOR.DDD_CELUL , FONE_CELUL" +
                " TYPE OF COLUMN TB_FORNECEDOR.FONE_CELUL , DDD_FAX TYPE OF COLUMN TB_FORNECEDOR." +
                "DDD_FAX , FONE_FAX TYPE OF COLUMN TB_FORNECEDOR.FONE_FAX , EMAIL_CONT TYPE OF CO" +
                "LUMN TB_FORNECEDOR.EMAIL_CONT , EMAIL_NFE TYPE OF COLUMN TB_FORNECEDOR.EMAIL_NFE" +
                " , SITE TYPE OF COLUMN TB_FORNECEDOR.SITE , STATUS TYPE OF COLUMN TB_FORNECEDOR." +
                "STATUS , DT_PRICOMP TYPE OF COLUMN TB_FORNECEDOR.DT_PRICOMP , DT_ULTCOMP TYPE OF" +
                " COLUMN TB_FORNECEDOR.DT_ULTCOMP , ID_CIDADE TYPE OF COLUMN TB_FORNECEDOR.ID_CID" +
                "ADE , LIMITE TYPE OF COLUMN TB_FORNECEDOR.LIMITE , ID_RAMO TYPE OF COLUMN TB_FOR" +
                "NECEDOR.ID_RAMO , ID_PAIS TYPE OF COLUMN TB_FORNECEDOR.ID_PAIS , OBSERVACAO TYPE" +
                " OF COLUMN TB_FORNECEDOR.OBSERVACAO , CONTATO TYPE OF COLUMN TB_FORNECEDOR.CONTA" +
                "TO , TRI_PDV_DT_UPD TYPE OF COLUMN TB_FORNECEDOR.TRI_PDV_DT_UPD ) AS BEGIN FOR S" +
                "ELECT ID_FORNEC , NOME , NOME_FANTA , CNPJ , INSC_ESTAD , INSC_MUNIC , END_CEP ," +
                " END_TIPO , END_LOGRAD , END_BAIRRO , END_NUMERO , END_COMPLE , DDD_COMER , FONE" +
                "_COMER , FONE_0800 , DDD_CELUL , FONE_CELUL , DDD_FAX , FONE_FAX , EMAIL_CONT , " +
                "EMAIL_NFE , SITE , STATUS , DT_PRICOMP , DT_ULTCOMP , ID_CIDADE , LIMITE , ID_RA" +
                "MO , ID_PAIS , OBSERVACAO , CONTATO , TRI_PDV_DT_UPD FROM TB_FORNECEDOR WHERE ID" +
                "_RAMO = 34 INTO :ID_FORNEC , :NOME , :NOME_FANTA , :CNPJ , :INSC_ESTAD , :INSC_M" +
                "UNIC , :END_CEP , :END_TIPO , :END_LOGRAD , :END_BAIRRO , :END_NUMERO , :END_COM" +
                "PLE , :DDD_COMER , :FONE_COMER , :FONE_0800 , :DDD_CELUL , :FONE_CELUL , :DDD_FA" +
                "X , :FONE_FAX , :EMAIL_CONT , :EMAIL_NFE , :SITE , :STATUS , :DT_PRICOMP , :DT_U" +
                "LTCOMP , :ID_CIDADE , :LIMITE , :ID_RAMO , :ID_PAIS , :OBSERVACAO , :CONTATO , :" +
                "TRI_PDV_DT_UPD DO BEGIN SUSPEND ; END END;\';\r\n\r\nerro = \'sp_tri_orcaprod_getby_or" +
                "ca\';\r\nEXECUTE STATEMENT \'CREATE OR ALTER PROCEDURE SP_TRI_ORCAPROD_GETBY_ORCA ( " +
                "pID_ORCAMENTO TYPE OF COLUMN TRI_ORCA_PRODUTOS.ID_ORCAMENTO ) RETURNS ( ID_PRODU" +
                "TO TYPE OF COLUMN TRI_ORCA_PRODUTOS.ID_PRODUTO , ID_ESTOQUE TYPE OF COLUMN TRI_O" +
                "RCA_PRODUTOS.ID_ESTOQUE , QUANT TYPE OF COLUMN TRI_ORCA_PRODUTOS.QUANT , VALOR T" +
                "YPE OF COLUMN TRI_ORCA_PRODUTOS.VALOR , DESCONTO TYPE OF COLUMN TRI_ORCA_PRODUTO" +
                "S.DESCONTO , VALOR_TOT TYPE OF COLUMN TRI_ORCA_PRODUTOS.VALOR_TOT , ID_ORCAMENTO" +
                " TYPE OF COLUMN TRI_ORCA_PRODUTOS.ID_ORCAMENTO , NUM_PRODUTO TYPE OF COLUMN TRI_" +
                "ORCA_PRODUTOS.NUM_PRODUTO ) AS BEGIN FOR SELECT ID_PRODUTO , ID_ESTOQUE , QUANT " +
                ", VALOR , DESCONTO , VALOR_TOT , ID_ORCAMENTO , NUM_PRODUTO FROM TRI_ORCA_PRODUT" +
                "OS WHERE ID_ORCAMENTO = :pID_ORCAMENTO INTO :ID_PRODUTO , :ID_ESTOQUE , :QUANT ," +
                " :VALOR , :DESCONTO , :VALOR_TOT , :ID_ORCAMENTO , :NUM_PRODUTO DO BEGIN SUSPEND" +
                " ; END END;\';\r\n\r\nerro = \'sp_tri_orca_itens_orcamento\';\r\nEXECUTE STATEMENT \'CREAT" +
                "E OR ALTER PROCEDURE SP_TRI_ORCA_ITENS_ORCAMENTO ( pID_ORCAMENTO TYPE OF COLUMN " +
                "TRI_ORCA_PRODUTOS.ID_ORCAMENTO ) RETURNS ( ID_PRODUTO TYPE OF COLUMN TRI_ORCA_PR" +
                "ODUTOS.ID_PRODUTO , ID_EST_IDENTIFICADOR TYPE OF COLUMN TB_EST_IDENTIFICADOR.ID_" +
                "IDENTIFICADOR , DESCRICAO TYPE OF COLUMN TB_ESTOQUE.DESCRICAO , QUANT TYPE OF CO" +
                "LUMN TRI_ORCA_PRODUTOS.QUANT , UNI_MEDIDA TYPE OF COLUMN TB_ESTOQUE.UNI_MEDIDA ," +
                " VALOR TYPE OF COLUMN TRI_ORCA_PRODUTOS.VALOR , DESCONTO TYPE OF COLUMN TRI_ORCA" +
                "_PRODUTOS.DESCONTO , VALOR_TOTAL TYPE OF COLUMN TRI_ORCA_PRODUTOS.VALOR_TOT , NU" +
                "M_PRODUTO TYPE OF COLUMN TRI_ORCA_PRODUTOS.NUM_PRODUTO ) AS BEGIN FOR SELECT A.I" +
                "D_PRODUTO , A.ID_ESTOQUE AS ID_EST_IDENTIFICADOR , C.DESCRICAO , A.QUANT , C.UNI" +
                "_MEDIDA , A.VALOR , A.DESCONTO , A.VALOR_TOT AS VALOR_TOTAL , A.NUM_PRODUTO FROM" +
                " TRI_ORCA_PRODUTOS A INNER JOIN TB_EST_IDENTIFICADOR B ON B.ID_IDENTIFICADOR = A" +
                ".ID_ESTOQUE JOIN TB_ESTOQUE C ON C.ID_ESTOQUE = B.ID_ESTOQUE WHERE ( A.ID_ORCAME" +
                "NTO = :pID_ORCAMENTO ) ORDER BY A.NUM_PRODUTO INTO :ID_PRODUTO , :ID_EST_IDENTIF" +
                "ICADOR , :DESCRICAO , :QUANT , :UNI_MEDIDA , :VALOR , :DESCONTO , :VALOR_TOTAL ," +
                " :NUM_PRODUTO DO BEGIN SUSPEND ; END END;\';\r\n\r\nerro = \'sp_tri_orca_remove_item\';" +
                "\r\nEXECUTE STATEMENT \'CREATE OR ALTER PROCEDURE SP_TRI_ORCA_REMOVE_ITEM ( pID_PRO" +
                "DUTO TYPE OF COLUMN TRI_ORCA_PRODUTOS.ID_PRODUTO ) AS BEGIN UPDATE TRI_ORCA_PROD" +
                "UTOS SET NUM_PRODUTO = NUM_PRODUTO - 1 WHERE ID_ORCAMENTO = ( SELECT ID_ORCAMENT" +
                "O FROM TRI_ORCA_PRODUTOS WHERE ID_PRODUTO = :pID_PRODUTO ) AND NUM_PRODUTO > ( S" +
                "ELECT NUM_PRODUTO FROM TRI_ORCA_PRODUTOS WHERE ID_PRODUTO = :pID_PRODUTO ) ; DEL" +
                "ETE FROM TRI_ORCA_PRODUTOS WHERE ID_PRODUTO = :pID_PRODUTO ; END;\';\r\n\r\nerro = \'s" +
                "p_tri_orca_clientes_keyvalue\';\r\nEXECUTE STATEMENT \'CREATE OR ALTER PROCEDURE SP_" +
                "TRI_ORCA_CLIENTES_KEYVALUE RETURNS ( ID_CLIENTE TYPE OF COLUMN TB_CLIENTE.ID_CLI" +
                "ENTE , NOME TYPE OF COLUMN TB_CLIENTE.NOME ) AS BEGIN FOR SELECT ID_CLIENTE , NO" +
                "ME FROM TB_CLIENTE INTO :ID_CLIENTE , :NOME DO BEGIN SUSPEND ; END END;\';\r\n\r\nerr" +
                "o = \'sp_tri_orca_cliente_getby_id\';\r\nEXECUTE STATEMENT \'CREATE OR ALTER PROCEDUR" +
                "E SP_TRI_ORCA_CLIENTE_GETBY_ID ( pID_CLIENTE TYPE OF COLUMN TB_CLIENTE.ID_CLIENT" +
                "E ) RETURNS ( CLIENTE_NOME TYPE OF COLUMN TB_CLIENTE.NOME , CLIENTE_NOME_FANTA T" +
                "YPE OF COLUMN TB_CLI_PJ.NOME_FANTA , CLIENTE_CPF TYPE OF COLUMN TB_CLI_PF.CPF , " +
                "CLIENTE_CNPJ TYPE OF COLUMN TB_CLI_PJ.CNPJ , CLIENTE_RG TYPE OF COLUMN TB_CLI_PF" +
                ".IDENTIDADE , INSC_ESTAD TYPE OF COLUMN TB_CLI_PJ.INSC_ESTAD , INSC_MUNIC TYPE O" +
                "F COLUMN TB_CLI_PJ.INSC_MUNIC , END_TIPO TYPE OF COLUMN TB_CLIENTE.END_TIPO , EN" +
                "D_LOGRAD TYPE OF COLUMN TB_CLIENTE.END_LOGRAD , END_NUMERO TYPE OF COLUMN TB_CLI" +
                "ENTE.END_NUMERO , END_COMPLE TYPE OF COLUMN TB_CLIENTE.END_COMPLE , END_BAIRRO T" +
                "YPE OF COLUMN TB_CLIENTE.END_BAIRRO , END_CEP TYPE OF COLUMN TB_CLIENTE.END_CEP " +
                ", CIDADE_NOME TYPE OF COLUMN TB_CIDADE_SIS.NOME , SIGLA_UF TYPE OF COLUMN TB_CID" +
                "ADE_SIS.SIGLA_UF , DDD_COMER TYPE OF COLUMN TB_CLIENTE.DDD_COMER , FONE_COMER TY" +
                "PE OF COLUMN TB_CLIENTE.FONE_COMER , DDD_FAX TYPE OF COLUMN TB_CLIENTE.DDD_FAX ," +
                " FONE_FAX TYPE OF COLUMN TB_CLIENTE.FONE_FAX , DDD_CELUL TYPE OF COLUMN TB_CLIEN" +
                "TE.DDD_CELUL , FONE_CELUL TYPE OF COLUMN TB_CLIENTE.FONE_CELUL , DDD_RESID TYPE " +
                "OF COLUMN TB_CLIENTE.DDD_RESID , FONE_RESID TYPE OF COLUMN TB_CLIENTE.FONE_RESID" +
                " , EMAIL_CONT TYPE OF COLUMN TB_CLIENTE.EMAIL_CONT ) AS BEGIN for SELECT b.NOME " +
                "AS CLIENTE_NOME , e.NOME_FANTA AS CLIENTE_NOME_FANTA , d.CPF AS CLIENTE_CPF , e." +
                "CNPJ AS CLIENTE_CNPJ , d.IDENTIDADE AS CLIENTE_RG , e.INSC_ESTAD , e.INSC_MUNIC " +
                ", b.END_TIPO , b.END_LOGRAD , b.END_NUMERO , b.END_COMPLE , b.END_BAIRRO , b.END" +
                "_CEP , c.NOME AS CIDADE_NOME , c.SIGLA_UF , b.DDD_COMER , b.FONE_COMER , b.DDD_F" +
                "AX , b.FONE_FAX , b.DDD_CELUL , b.FONE_CELUL , b.DDD_RESID , b.FONE_RESID , b.EM" +
                "AIL_CONT FROM TB_CLIENTE b LEFT JOIN TB_CIDADE_SIS c ON c.ID_CIDADE = b.ID_CIDAD" +
                "E LEFT JOIN TB_CLI_PF d ON d.ID_CLIENTE = b.ID_CLIENTE LEFT JOIN TB_CLI_PJ e ON " +
                "e.ID_CLIENTE = b.ID_CLIENTE WHERE b.ID_CLIENTE = :pID_CLIENTE INTO :CLIENTE_NOME" +
                " , :CLIENTE_NOME_FANTA , :CLIENTE_CPF , :CLIENTE_CNPJ , :CLIENTE_RG , :INSC_ESTA" +
                "D , :INSC_MUNIC , :END_TIPO , :END_LOGRAD , :END_NUMERO , :END_COMPLE , :END_BAI" +
                "RRO , :END_CEP , :CIDADE_NOME , :SIGLA_UF , :DDD_COMER , :FONE_COMER , :DDD_FAX " +
                ", :FONE_FAX , :DDD_CELUL , :FONE_CELUL , :DDD_RESID , :FONE_RESID , :EMAIL_CONT " +
                "DO BEGIN SUSPEND ; END END;\';\r\n\r\nerro = \'sp_tri_orca_parcelmnt_keyvalue\';\r\nEXECU" +
                "TE STATEMENT \'CREATE OR ALTER PROCEDURE SP_TRI_ORCA_PARCELMNT_KEYVALUE RETURNS (" +
                " ID_PARCELA TYPE OF COLUMN TB_PARCELAMENTO.ID_PARCELA , DESCRICAO TYPE OF COLUMN" +
                " TB_PARCELAMENTO.DESCRICAO ) AS BEGIN FOR SELECT ID_PARCELA , DESCRICAO FROM TB_" +
                "PARCELAMENTO INTO :ID_PARCELA , :DESCRICAO DO BEGIN SUSPEND ; END END;\';\r\n\r\nerro" +
                " = \'sp_tri_orca_fornec_keyvalue\';\r\nEXECUTE STATEMENT \'CREATE OR ALTER PROCEDURE " +
                "SP_TRI_ORCA_FORNEC_KEYVALUE RETURNS ( ID_FORNEC TYPE OF COLUMN TB_FORNECEDOR.ID_" +
                "FORNEC , NOME TYPE OF COLUMN TB_FORNECEDOR.NOME ) AS BEGIN FOR SELECT ID_FORNEC " +
                ", NOME FROM TB_FORNECEDOR WHERE ID_RAMO = 34 INTO :ID_FORNEC , :NOME DO BEGIN SU" +
                "SPEND ; END END;\';\r\n\r\nerro = \'sp_tri_orca_gravatotais\';\r\nEXECUTE STATEMENT \'CREA" +
                "TE OR ALTER PROCEDURE SP_TRI_ORCA_GRAVATOTAIS ( pID_ORCAMENTO INTEGER , pID_USER" +
                " TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.ID_USER , pSUBTOTAL TYPE OF COLUMN TRI_ORCA_" +
                "ORCAMENTOS.SUBTOTAL , pDESCONTO_TOTAL TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.DESCONT" +
                "O_TOTAL , pVALOR_TOTAL TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.VALOR_TOTAL , pVALOR_F" +
                "RETE TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.VALOR_FRETE ) AS BEGIN UPDATE TRI_ORCA_O" +
                "RCAMENTOS SET ID_USER =:pID_USER , SUBTOTAL =:pSUBTOTAL , DESCONTO_TOTAL =:pDESC" +
                "ONTO_TOTAL , VALOR_TOTAL =:pVALOR_TOTAL , VALOR_FRETE =:pVALOR_FRETE WHERE ID_OR" +
                "CAMENTO = :pID_ORCAMENTO ; END;\';\r\n\r\nerro = \'sp_tri_orca_config_upsert\';\r\nexecut" +
                "e statement \'CREATE OR ALTER PROCEDURE SP_TRI_ORCA_CONFIG_UPSERT ( pID_MAC TYPE " +
                "OF COLUMN TRI_ORCA_CONFIG.ID_MAC , pNO_CAIXA TYPE OF COLUMN TRI_ORCA_CONFIG.NO_C" +
                "AIXA ) AS BEGIN UPDATE OR INSERT INTO TRI_ORCA_CONFIG (ID_MAC , NO_CAIXA ) VALUE" +
                "S (:pID_MAC , :pNO_CAIXA ) MATCHING (ID_MAC ) ; END;\';\r\n\r\nerro = \'sp_tri_orca_pe" +
                "sq_get\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_ORCA_PESQ_GET ( pI" +
                "D_ORCAMENTO TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.ID_ORCAMENTO ) RETURNS ( ID_ORCAM" +
                "ENTO TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.ID_ORCAMENTO ,ID_CLIENTE TYPE OF COLUMN " +
                "TRI_ORCA_ORCAMENTOS.ID_CLIENTE ,CLIENTE_NOME TYPE OF COLUMN TB_CLIENTE.NOME ,DT_" +
                "EMISSAO TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.DT_EMISSAO , DT_VALIDADE TYPE OF COLU" +
                "MN TRI_ORCA_ORCAMENTOS.DT_VALIDADE , DT_ENTREGA TYPE OF COLUMN TRI_ORCA_ORCAMENT" +
                "OS.DT_ENTREGA , DT_VENCIMENTO TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.DT_VENCIMENTO ," +
                " VALOR_TOTAL TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.VALOR_TOTAL, STATUS TYPE OF COLU" +
                "MN TRI_ORCA_ORCAMENTOS.STATUS ) AS BEGIN for SELECT a.ID_ORCAMENTO , a.ID_CLIENT" +
                "E , b.NOME AS CLIENTE_NOME , a.DT_EMISSAO , a.DT_VALIDADE , a.DT_ENTREGA , a.DT_" +
                "VENCIMENTO , a.VALOR_TOTAL , a.STATUS FROM TRI_ORCA_ORCAMENTOS a JOIN TB_CLIENTE" +
                " b ON b.ID_CLIENTE = a.ID_CLIENTE WHERE a.ID_ORCAMENTO = :pID_ORCAMENTO INTO :ID" +
                "_ORCAMENTO , :ID_CLIENTE , :CLIENTE_NOME , :DT_EMISSAO , :DT_VALIDADE , :DT_ENTR" +
                "EGA , :DT_VENCIMENTO , :VALOR_TOTAL , :STATUS DO BEGIN SUSPEND ; END END;\';\r\n\r\ne" +
                "rro = \'sp_tri_orca_pesq_getall\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE S" +
                "P_TRI_ORCA_PESQ_GETALL RETURNS ( ID_ORCAMENTO TYPE OF COLUMN TRI_ORCA_ORCAMENTOS" +
                ".ID_ORCAMENTO ,ID_CLIENTE TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.ID_CLIENTE ,CLIENTE" +
                "_NOME TYPE OF COLUMN TB_CLIENTE.NOME ,DT_EMISSAO TYPE OF COLUMN TRI_ORCA_ORCAMEN" +
                "TOS.DT_EMISSAO , DT_VALIDADE TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.DT_VALIDADE , DT" +
                "_ENTREGA TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.DT_ENTREGA , DT_VENCIMENTO TYPE OF C" +
                "OLUMN TRI_ORCA_ORCAMENTOS.DT_VENCIMENTO , VALOR_TOTAL TYPE OF COLUMN TRI_ORCA_OR" +
                "CAMENTOS.VALOR_TOTAL , STATUS TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.STATUS ) AS BEG" +
                "IN for SELECT a.ID_ORCAMENTO , a.ID_CLIENTE , b.NOME AS CLIENTE_NOME , a.DT_EMIS" +
                "SAO , a.DT_VALIDADE , a.DT_ENTREGA , a.DT_VENCIMENTO , a.VALOR_TOTAL , a.STATUS " +
                "FROM TRI_ORCA_ORCAMENTOS a JOIN TB_CLIENTE b ON b.ID_CLIENTE = a.ID_CLIENTE INTO" +
                " :ID_ORCAMENTO , :ID_CLIENTE , :CLIENTE_NOME , :DT_EMISSAO , :DT_VALIDADE , :DT_" +
                "ENTREGA , :DT_VENCIMENTO , :VALOR_TOTAL , :STATUS DO BEGIN SUSPEND ; END END;\';\r" +
                "\n\r\nerro = \'sp_tri_orca_pesq_by_interorca\';\r\nexecute statement \'CREATE OR ALTER P" +
                "ROCEDURE SP_TRI_ORCA_PESQ_BY_INTERORCA ( pID_ORCAMENTO_ini TYPE OF COLUMN TRI_OR" +
                "CA_ORCAMENTOS.ID_ORCAMENTO ,pID_ORCAMENTO_fin TYPE OF COLUMN TRI_ORCA_ORCAMENTOS" +
                ".ID_ORCAMENTO ) RETURNS ( ID_ORCAMENTO TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.ID_ORC" +
                "AMENTO ,ID_CLIENTE TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.ID_CLIENTE ,CLIENTE_NOME T" +
                "YPE OF COLUMN TB_CLIENTE.NOME ,DT_EMISSAO TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.DT_" +
                "EMISSAO , DT_VALIDADE TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.DT_VALIDADE , DT_ENTREG" +
                "A TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.DT_ENTREGA , DT_VENCIMENTO TYPE OF COLUMN T" +
                "RI_ORCA_ORCAMENTOS.DT_VENCIMENTO , VALOR_TOTAL TYPE OF COLUMN TRI_ORCA_ORCAMENTO" +
                "S.VALOR_TOTAL, STATUS TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.STATUS ) AS BEGIN for S" +
                "ELECT a.ID_ORCAMENTO , a.ID_CLIENTE , b.NOME AS CLIENTE_NOME , a.DT_EMISSAO , a." +
                "DT_VALIDADE , a.DT_ENTREGA , a.DT_VENCIMENTO , a.VALOR_TOTAL , a.STATUS FROM TRI" +
                "_ORCA_ORCAMENTOS a JOIN TB_CLIENTE b ON b.ID_CLIENTE = a.ID_CLIENTE WHERE ( ( ( " +
                ":pID_ORCAMENTO_ini > 0 AND :pID_ORCAMENTO_fin > 0 ) AND ( a.ID_ORCAMENTO >= :pID" +
                "_ORCAMENTO_ini AND A.ID_ORCAMENTO <= :pID_ORCAMENTO_fin ) ) OR ( ( :pID_ORCAMENT" +
                "O_ini > 0 AND :pID_ORCAMENTO_fin <= 0 ) AND ( a.ID_ORCAMENTO >= :pID_ORCAMENTO_i" +
                "ni ) ) OR ( ( :pID_ORCAMENTO_ini <= 0 AND :pID_ORCAMENTO_fin > 0 ) AND ( a.ID_OR" +
                "CAMENTO <= :pID_ORCAMENTO_fin ) ) ) INTO :ID_ORCAMENTO , :ID_CLIENTE , :CLIENTE_" +
                "NOME , :DT_EMISSAO , :DT_VALIDADE , :DT_ENTREGA , :DT_VENCIMENTO , :VALOR_TOTAL " +
                ", :STATUS DO BEGIN SUSPEND ; END END;\';\r\n\r\nerro = \'sp_tri_orca_pesq_by_clienteno" +
                "me\';\r\nexecute statement \'CREATE OR ALTER PROCEDURE SP_TRI_ORCA_PESQ_BY_CLIENTENO" +
                "ME ( pCLIENTE_NOME TYPE OF COLUMN TB_CLIENTE.NOME ,pTipoPesquisa integer ) RETUR" +
                "NS ( ID_ORCAMENTO TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.ID_ORCAMENTO ,ID_CLIENTE TY" +
                "PE OF COLUMN TRI_ORCA_ORCAMENTOS.ID_CLIENTE ,CLIENTE_NOME TYPE OF COLUMN TB_CLIE" +
                "NTE.NOME ,DT_EMISSAO TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.DT_EMISSAO , DT_VALIDADE" +
                " TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.DT_VALIDADE , DT_ENTREGA TYPE OF COLUMN TRI_" +
                "ORCA_ORCAMENTOS.DT_ENTREGA , DT_VENCIMENTO TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.DT" +
                "_VENCIMENTO , VALOR_TOTAL TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.VALOR_TOTAL , STATU" +
                "S TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.STATUS ) AS BEGIN for SELECT a.ID_ORCAMENTO" +
                " , a.ID_CLIENTE , b.NOME AS CLIENTE_NOME , a.DT_EMISSAO , a.DT_VALIDADE , a.DT_E" +
                "NTREGA , a.DT_VENCIMENTO , a.VALOR_TOTAL , a.STATUS FROM TRI_ORCA_ORCAMENTOS a J" +
                "OIN TB_CLIENTE b ON b.ID_CLIENTE = a.ID_CLIENTE WHERE ( ( :pTipoPesquisa = 0 AND" +
                " ( b.NOME CONTAINING :pCLIENTE_NOME ) ) OR ( :pTipoPesquisa = 1 AND ( b.NOME STA" +
                "RTING WITH :pCLIENTE_NOME ) ) OR ( :pTipoPesquisa = 2 AND ( b.NOME = :pCLIENTE_N" +
                "OME ) ) ) INTO :ID_ORCAMENTO , :ID_CLIENTE , :CLIENTE_NOME , :DT_EMISSAO , :DT_V" +
                "ALIDADE , :DT_ENTREGA , :DT_VENCIMENTO , :VALOR_TOTAL , :STATUS DO BEGIN SUSPEND" +
                " ; END END;\';\r\n\r\nerro = \'deu certo\';\r\n\r\nSUSPEND;\r\nWHEN ANY DO\r\nBEGIN\r\n\r\nEND\r\nEND" +
                ";";
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[0])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[1])).Connection = new global::FirebirdSql.Data.FirebirdClient.FbConnection(global::PDV_ORCAMENTO.Properties.Settings.Default.FDBOrcaConnString);
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[1])).CommandText = "\"SP_TRI_ORCA_PROCEDURES\"";
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[1])).CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[2] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[2])).Connection = new global::FirebirdSql.Data.FirebirdClient.FbConnection(global::PDV_ORCAMENTO.Properties.Settings.Default.FDBOrcaConnString);
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[2])).CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_ORCA_CRIATABELAS\r\nRETURNS (\r\nerro VARCHAR(64)\r\n)" +
                "\r\nAS\r\nBEGIN\r\n\r\nerro = \'create gen_tri_orca\';\r\nif (NOT exists(SELECT 1 FROM RDB$G" +
                "ENERATORS WHERE RDB$Generator_name= \'GEN_TRI_ORCA\'))\r\nthen\r\nEXECUTE STATEMENT \'C" +
                "REATE GENERATOR GEN_TRI_ORCA;\';\r\n\r\nerro = \'create gen_tri_orca_item_id\';\r\nif (NO" +
                "T exists(SELECT 1 FROM RDB$GENERATORS WHERE RDB$Generator_name= \'GEN_TRI_ORCA_IT" +
                "EM_ID\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE GENERATOR GEN_TRI_ORCA_ITEM_ID;\';\r\n\r\ne" +
                "rro = \'create tri_orca_produtos\';\r\nif (not exists(select 1 from RDB$RELATIONS wh" +
                "ere rdb$relation_name = \'TRI_ORCA_PRODUTOS\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE T" +
                "ABLE TRI_ORCA_PRODUTOS ( ID_PRODUTO INTEGER NOT NULL, ID_ESTOQUE INTEGER NOT NUL" +
                "L, QUANT NUMERIC(18,4) NOT NULL, VALOR NUMERIC(18,4) NOT NULL, DESCONTO NUMERIC(" +
                "18,4) NOT NULL, VALOR_TOT NUMERIC(18,4) NOT NULL, ID_ORCAMENTO INTEGER NOT NULL," +
                " CONSTRAINT TRI_ORCA_PRODUTOS_PK PRIMARY KEY (ID_PRODUTO) ) ;\';\r\n\r\nerro = \'creat" +
                "e tri_orca_orcamentos\';\r\nif (not exists(select 1 from RDB$RELATIONS where rdb$re" +
                "lation_name = \'TRI_ORCA_ORCAMENTOS\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TABLE TRI" +
                "_ORCA_ORCAMENTOS ( ID_ORCAMENTO INTEGER NOT NULL , ID_CLIENTE INTEGER , DT_EMISS" +
                "AO DATE , ID_FORNEC_TRANSP INTEGER , DT_VALIDADE DATE , ID_PARCELA SMALLINT , ID" +
                "_USER INTEGER , STATUS VARCHAR(32) , SUBTOTAL NUMERIC(18,4) , DESCONTO_TOTAL NUM" +
                "ERIC(18,4) , DT_ENTREGA DATE , VALOR_TOTAL NUMERIC(18,4) , DT_VENCIMENTO DATE , " +
                "VALOR_FRETE NUMERIC(18,4) , NOME_SOLICITANTE VARCHAR(35) , OBSERVACOES VARCHAR(2" +
                "00) , ID_CAIXA INTEGER NOT NULL , CONSTRAINT TRI_ORCA_ORCAMENTOS_PK PRIMARY KEY " +
                "(ID_ORCAMENTO) ) ;\';\r\n\r\nerro = \'create tri_pdv_setup\';\r\nif (not exists(select 1 " +
                "from RDB$RELATIONS where rdb$relation_name = \'TRI_PDV_SETUP\'))\r\nthen\r\nEXECUTE ST" +
                "ATEMENT \'CREATE TABLE TRI_PDV_SETUP ( ID_DUMMY SMALLINT DEFAULT 1, EXECUCAO SMAL" +
                "LINT DEFAULT 0, VERSAO VARCHAR(36) NOT NULL, ULTIMA_AT DATE NOT NULL, DT_INSTALA" +
                "CAO DATE NOT NULL, ULTIMA_SYNC TIMESTAMP, ORIGEM VARCHAR(8), DESC_MAX_OP DOUBLE " +
                "PRECISION DEFAULT 0 NOT NULL, VERSAO_ORCA VARCHAR(36) NOT NULL ) ; \';\r\n\r\nerro = " +
                "\'create tri_orca_config\';\r\nif (not exists(select 1 from RDB$RELATIONS where rdb$" +
                "relation_name = \'TRI_ORCA_CONFIG\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TABLE TRI_O" +
                "RCA_CONFIG ( ID_MAC VARCHAR(12) NOT NULL, NO_CAIXA SMALLINT NOT NULL, CONSTRAINT" +
                " TRI_ORCA_CONFIG_PK PRIMARY KEY (ID_MAC) ) ;\';\r\n\r\nerro = \'create tri_pdv_orca_cu" +
                "pom_rel\';\r\nif (not exists(select 1 from RDB$RELATIONS where rdb$relation_name = " +
                "\'TRI_PDV_ORCA_CUPOM_REL\'))\r\nthen\r\nEXECUTE STATEMENT \'CREATE TABLE TRI_PDV_ORCA_C" +
                "UPOM_REL ( ID_ORCAMENTO INTEGER NOT NULL, ID_CUPOM INTEGER NOT NULL, TS_INCLUSAO" +
                " TIMESTAMP, ID_CAIXA SMALLINT, CONSTRAINT TRI_PDV_ORCA_CUPOM_REL_PK PRIMARY KEY " +
                "(ID_ORCAMENTO,ID_CUPOM) ) ;\';\r\n\r\nerro = \'deu certo\';\r\nSUSPEND;\r\nWHEN ANY DO\r\nBEG" +
                "IN\r\n\r\nEND\r\nEND;";
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[2])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[3])).Connection = new global::FirebirdSql.Data.FirebirdClient.FbConnection(global::PDV_ORCAMENTO.Properties.Settings.Default.FDBOrcaConnString);
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[3])).CommandText = "\"SP_TRI_ORCA_CRIATABELAS\"";
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[3])).CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[4] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[4])).Connection = new global::FirebirdSql.Data.FirebirdClient.FbConnection(global::PDV_ORCAMENTO.Properties.Settings.Default.FDBOrcaConnString);
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[4])).CommandText = @"CREATE OR ALTER PROCEDURE SP_TRI_ORCA_ATUALIZATABELAS 
RETURNS( erro VARCHAR( 64 )) AS BEGIN 

erro = 'add tri_pdv_setup.versao_orca';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TRI_PDV_SETUP'
AND RDB$FIELD_NAME = 'VERSAO_ORCA' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_PDV_SETUP ADD VERSAO_ORCA VARCHAR(36) DEFAULT '''' NOT NULL;';

erro = 'add tri_orca_produtos.num_produto';
IF( NOT EXISTS( SELECT 1
FROM RDB$RELATION_FIELDS
WHERE RDB$RELATION_NAME = 'TRI_ORCA_PRODUTOS'
AND RDB$FIELD_NAME = 'NUM_PRODUTO' )) THEN EXECUTE STATEMENT 'ALTER TABLE TRI_ORCA_PRODUTOS ADD NUM_PRODUTO INTEGER DEFAULT 0 NOT NULL;';

erro = 'deu certo';

SUSPEND;
WHEN ANY DO BEGIN
END
END;";
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[4])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[5])).Connection = new global::FirebirdSql.Data.FirebirdClient.FbConnection(global::PDV_ORCAMENTO.Properties.Settings.Default.FDBOrcaConnString);
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[5])).CommandText = "\"SP_TRI_ORCA_ATUALIZATABELAS\"";
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[5])).CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[6] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[6])).Connection = new global::FirebirdSql.Data.FirebirdClient.FbConnection(global::PDV_ORCAMENTO.Properties.Settings.Default.FDBOrcaConnString);
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[6])).CommandText = "CREATE OR ALTER PROCEDURE SP_TRI_ORCA_PROCEDURES_2 \r\nRETURNS ( erro VARCHAR(64) )" +
                " AS\r\nBEGIN\r\n    \r\n    erro = \'sp_tri_orca_getby_orcastatus\';\r\n    EXECUTE STATEM" +
                "ENT \'CREATE OR ALTER PROCEDURE SP_TRI_ORCA_GETBY_ORCASTATUS ( pID_ORCAMENTO INTE" +
                "GER , pSTATUS TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.STATUS ) RETURNS ( ID_ORCAMENTO" +
                " INTEGER , ID_CLIENTE INTEGER , DT_EMISSAO DATE , ID_FORNEC_TRANSP INTEGER , DT_" +
                "VALIDADE DATE , ID_PARCELA TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.ID_PARCELA , ID_US" +
                "ER INTEGER , STATUS TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.STATUS , SUBTOTAL TYPE OF" +
                " COLUMN TRI_ORCA_ORCAMENTOS.SUBTOTAL , DESCONTO_TOTAL TYPE OF COLUMN TRI_ORCA_OR" +
                "CAMENTOS.DESCONTO_TOTAL , DT_ENTREGA DATE , VALOR_TOTAL TYPE OF COLUMN TRI_ORCA_" +
                "ORCAMENTOS.VALOR_TOTAL , DT_VENCIMENTO DATE , VALOR_FRETE TYPE OF COLUMN TRI_ORC" +
                "A_ORCAMENTOS.VALOR_FRETE , NOME_SOLICITANTE TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.N" +
                "OME_SOLICITANTE , OBSERVACOES TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.OBSERVACOES , I" +
                "D_CAIXA TYPE OF COLUMN TRI_ORCA_ORCAMENTOS.ID_CAIXA ) AS BEGIN for SELECT ID_ORC" +
                "AMENTO , ID_CLIENTE , DT_EMISSAO , ID_FORNEC_TRANSP , DT_VALIDADE , ID_PARCELA ," +
                " ID_USER , STATUS , SUBTOTAL , DESCONTO_TOTAL , DT_ENTREGA , VALOR_TOTAL , DT_VE" +
                "NCIMENTO , VALOR_FRETE , NOME_SOLICITANTE , OBSERVACOES , ID_CAIXA FROM TRI_ORCA" +
                "_ORCAMENTOS WHERE ID_ORCAMENTO = :pID_ORCAMENTO AND STATUS = :pSTATUS INTO :ID_O" +
                "RCAMENTO , :ID_CLIENTE , :DT_EMISSAO , :ID_FORNEC_TRANSP , :DT_VALIDADE , :ID_PA" +
                "RCELA , :ID_USER , :STATUS , :SUBTOTAL , :DESCONTO_TOTAL , :DT_ENTREGA , :VALOR_" +
                "TOTAL , :DT_VENCIMENTO , :VALOR_FRETE , :NOME_SOLICITANTE , :OBSERVACOES , :ID_C" +
                "AIXA DO BEGIN SUSPEND ; END END;\';\r\n    \r\n    erro = \'sp_tri_orca_fechaorca\';\r\n " +
                "   EXECUTE STATEMENT \'CREATE OR ALTER PROCEDURE SP_TRI_ORCA_FECHAORCA ( pID_ORCA" +
                "MENTO INTEGER , pID_CUPOM INTEGER , pID_CAIXA SMALLINT ) AS BEGIN INSERT INTO TR" +
                "I_PDV_ORCA_CUPOM_REL (ID_ORCAMENTO , ID_CUPOM , TS_INCLUSAO , ID_CAIXA ) VALUES " +
                "(:pID_ORCAMENTO , :pID_CUPOM , CURRENT_TIMESTAMP , :pID_CAIXA ) ; UPDATE TRI_ORC" +
                "A_ORCAMENTOS SET STATUS =\'\'FECHADO\'\' WHERE ID_ORCAMENTO = :pID_ORCAMENTO ; END;\'" +
                ";\r\n    \r\n    erro = \'sp_tri_orca_reativaorca\';\r\n    EXECUTE STATEMENT \'CREATE OR" +
                " ALTER PROCEDURE SP_TRI_ORCA_REATIVAORCA ( pID_CUPOM INTEGER ) RETURNS ( rORCA_R" +
                "EATIVADO VARCHAR(1) ) AS DECLARE VARIABLE vID_ORCAMENTO TYPE OF COLUMN TRI_PDV_O" +
                "RCA_CUPOM_REL.ID_ORCAMENTO; BEGIN SELECT ID_ORCAMENTO FROM TRI_PDV_ORCA_CUPOM_RE" +
                "L WHERE ID_CUPOM = :pID_CUPOM INTO :vID_ORCAMENTO ; rORCA_REATIVADO = \'\'N\'\'; IF " +
                "(:vID_ORCAMENTO IS NOT NULL) THEN BEGIN DELETE FROM TRI_PDV_ORCA_CUPOM_REL WHERE" +
                " ID_CUPOM = :pID_CUPOM AND ID_ORCAMENTO = :vID_ORCAMENTO ; UPDATE TRI_ORCA_ORCAM" +
                "ENTOS SET STATUS =\'\'SALVO\'\' WHERE ID_ORCAMENTO = :vID_ORCAMENTO ; rORCA_REATIVAD" +
                "O = \'\'S\'\'; END END;\';\r\n    \r\n    erro = \'sp_tri_preencheconsulta_tipdesc\';\r\n    " +
                "EXECUTE STATEMENT \'CREATE OR ALTER PROCEDURE SP_TRI_PREENCHECONSULTA_TIPDESC ( S" +
                "TRING VARCHAR(128) , COD_INT INTEGER , pTipoPesquisa integer ) RETURNS ( ESTOQUE" +
                " INTEGER , CODBARRA VARCHAR(18) , DESCRICAO VARCHAR(50) , QTDATUAL TYPE OF COLUM" +
                "N TRI_PDV_OPER.DIN , PRCVENDA TYPE OF COLUMN TRI_PDV_OPER.DIN ) AS BEGIN FOR SEL" +
                "ECT FIRST 30 B.ID_IDENTIFICADOR , B.COD_BARRA , A.DESCRICAO , B.QTD_ATUAL , A.PR" +
                "C_VENDA FROM TB_ESTOQUE A INNER JOIN TB_EST_IDENTIFICADOR C ON C.ID_ESTOQUE = A." +
                "ID_ESTOQUE INNER JOIN TB_EST_PRODUTO B ON B.ID_IDENTIFICADOR = C.ID_IDENTIFICADO" +
                "R WHERE ( A.STATUS = \'\'A\'\' ) AND ( ( ( :pTipoPesquisa = 0 AND ( A.DESCRICAO CONT" +
                "AINING :STRING ) ) OR ( :pTipoPesquisa = 1 AND ( A.DESCRICAO STARTING WITH :STRI" +
                "NG ) ) OR ( :pTipoPesquisa = 2 AND ( A.DESCRICAO = :STRING ) ) ) OR ( B.COD_BARR" +
                "A =:STRING ) OR ( B.ID_IDENTIFICADOR =:COD_INT ) ) INTO :ESTOQUE , :CODBARRA , :" +
                "DESCRICAO , :QTDATUAL , :PRCVENDA DO SUSPEND ; END\';\r\n    \r\n    erro = \'deu cert" +
                "o\';\r\n    \r\n    SUSPEND;\r\nWHEN ANY DO\r\n    BEGIN\r\n    \r\n    END\r\nEND;";
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[6])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[7] = new global::FirebirdSql.Data.FirebirdClient.FbCommand();
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[7])).Connection = new global::FirebirdSql.Data.FirebirdClient.FbConnection(global::PDV_ORCAMENTO.Properties.Settings.Default.FDBOrcaConnString);
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[7])).CommandText = "\"SP_TRI_ORCA_PROCEDURES_2\"";
            ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this._commandCollection[7])).CommandType = global::System.Data.CommandType.StoredProcedure;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object D_ORCA_PROCEDURES1() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this.CommandCollection[0]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_ORCA_PROCEDURES() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this.CommandCollection[1]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object A_ORCA_CRIATABELAS() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this.CommandCollection[2]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_ORCA_CRIATABELAS() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this.CommandCollection[3]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object B_ORCA_ATUALIZATABELAS() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this.CommandCollection[4]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_ORCA_ATUALIZATABELAS() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this.CommandCollection[5]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object D_ORCA_PROCEDURES_2() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this.CommandCollection[6]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SP_TRI_ORCA_PROCEDURES_2() {
            global::FirebirdSql.Data.FirebirdClient.FbCommand command = ((global::FirebirdSql.Data.FirebirdClient.FbCommand)(this.CommandCollection[7]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
}

#pragma warning restore 1591